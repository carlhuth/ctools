class bpy_struct:
    """built-in base class for all classes in bpy.types.
    <Note> Note that bpy.types.bpy_struct is not actually available from within Blender,
                                it only exists for the purpose of documentation.
    """

    def as_pointer(self):
        """Returns the memory address which holds a pointer to blenders internal data
        <Note> This is intended only for advanced script writers who need to
                                            pass blender data to their own C/Python modules.
        
        :return: int (memory address).
        :rtype: int
        """

    def driver_add(self, path, index=-1):
        """Adds driver(s) to the given property
        
        :param path: path to the property to drive, analogous to the fcurve's data path.
        :type path: str
        :param index: array index of the property drive. Defaults to -1 for all indices or a single channel if the property is not an array.
        :type index: int
        :return: The driver(s) added.
        :param : (type: bpy.types.FCurve or list if index is -1 with an array property.)
        :rtype: FCurve or list if index is -1 with an array property.
        """

    def driver_remove(self, path, index=-1):
        """Remove driver(s) from the given property
        
        :param path: path to the property to drive, analogous to the fcurve's data path.
        :type path: str
        :param index: array index of the property drive. Defaults to -1 for all indices or a single channel if the property is not an array.
        :type index: int
        :return: Success of driver removal.
        :rtype: bool
        """

    def get(self, key, default=None):
        """Returns the value of the custom property assigned to key or default
                                    when not found (matches pythons dictionary function of the same name).
        <Note> Only bpy.types.ID, bpy.types.Bone and
                                            bpy.types.PoseBone classes support custom properties.
        
        :param key: The key associated with the custom property.
        :type key: str
        :param default: Optional argument for the value to return if
                                                            key is not found.
        :type default: Undefined
        """

    def is_property_hidden(self, property):
        """Check if a property is hidden.
        
        :return: True when the property is hidden.
        :rtype: bool
        """

    def is_property_readonly(self, property):
        """Check if a property is readonly.
        
        :return: True when the property is readonly (not writable).
        :rtype: bool
        """

    def is_property_set(self, property):
        """Check if a property is set, use for testing operator properties.
        
        :return: True when the property has been set.
        :rtype: bool
        """

    def items(self):
        """Returns the items of this objects custom properties (matches pythons
                                    dictionary function of the same name).
        <Note> Only bpy.types.ID, bpy.types.Bone and
                                            bpy.types.PoseBone classes support custom properties.
        
        :return: custom property key, value pairs.
        :param : (type: list of key, value tuples)
        :rtype: list
        """

    def keyframe_delete(self, data_path, index=-1, frame="bpy.context.scene.frame_current", group=""):
        """Remove a keyframe from this properties fcurve.
        
        :param data_path: path to the property to remove a key, analogous to the fcurve's data path.
        :type data_path: str
        :param index: array index of the property to remove a key. Defaults to -1 removing all indices or a single channel if the property is not an array.
        :type index: int
        :param frame: The frame on which the keyframe is deleted, defaulting to the current frame.
        :type frame: float
        :param group: The name of the group the F-Curve should be added to if it doesn't exist yet.
        :type group: str
        :return: Success of keyframe deleation.
        :rtype: bool
        """

    def keyframe_insert(self, data_path, index=-1, frame="bpy.context.scene.frame_current", group=""):
        """Insert a keyframe on the property given, adding fcurves and animation data when necessary.
        This is the most simple example of inserting a keyframe from python.
        Note that when keying data paths which contain nested properties this must be
                                    done from the bpy.types.ID subclass, in this case the bpy.types.Armature rather
                                    than the bone.
        
        :param data_path: path to the property to key, analogous to the fcurve's data path.
        :type data_path: str
        :param index: array index of the property to key.
                                                            Defaults to -1 which will key all indices or a single channel if the property is not an array.
        :type index: int
        :param frame: The frame on which the keyframe is inserted, defaulting to the current frame.
        :type frame: float
        :param group: The name of the group the F-Curve should be added to if it doesn't exist yet.
        :type group: str
        :param options: Optional flags:
            - INSERTKEY_NEEDED Only insert keyframes where they're needed in the relevant F-Curves.
            - INSERTKEY_VISUAL Insert keyframes based on 'visual transforms'.INSERTKEY_XYZ_TO_RGB Color for newly added transformation F-Curves (Location, Rotation, Scale)
            - and also Color is based on the transform axis.
        :return: Success of keyframe insertion.
        :rtype: bool
        """

    def keys(self):
        """Returns the keys of this objects custom properties (matches pythons
                                    dictionary function of the same name).
        <Note> Only bpy.types.ID, bpy.types.Bone and
                                            bpy.types.PoseBone classes support custom properties.
        
        :return: custom property keys.
        :param : (type: list of strings)
        :rtype: list
        """

    def path_from_id(self, property=""):
        """Returns the data path from the ID to this object (string).
        
        :param property: Optional property name which can be used if the path is
                                                    to a property of this object.
        :type property: str
        :return: The path from bpy.types.bpy_struct.id_data
                                                    to this struct and property (when given).
        :rtype: str
        """

    def path_resolve(self, path, coerce=True):
        """Returns the property from the path, raise an exception when not found.
        
        :param path: path which this property resolves.
        :type path: str
        :param coerce: optional argument, when True, the property will be converted
                                                            into its python representation.
        :type coerce: bool
        """

    def property_unset(self, property):
        """Unset a property, will use default value afterward."""

    def type_recast(self):
        """Return a new instance, this is needed because types
                                    such as textures can be changed at runtime.
        
        :return: a new instance of this object with the type initialized again.
        :param : (type: subclass of bpy.types.bpy_struct)
        :rtype: subclass
        """

    def values(self):
        """Returns the values of this objects custom properties (matches pythons
                                    dictionary function of the same name).
        <Note> Only bpy.types.ID, bpy.types.Bone and
                                            bpy.types.PoseBone classes support custom properties.
        
        :return: custom property values.
        :rtype: list
        """

    id_data = None
    """The bpy.types.ID object this datablock is from or None, (not available for all data types)"""


class bpy_prop_collection:
    """built-in class used for all collections.
    <Note> Note that bpy.types.bpy_prop_collection is not actually available from within Blender,
                                it only exists for the purpose of documentation.
    """

    def find(self, key):
        """Returns the index of a key in a collection or -1 when not found
                                    (matches pythons string find function of the same name).
        
        :param key: The identifier for the collection member.
        :type key: str
        :return: index of the key.
        :rtype: int
        """

    def foreach_get(self, attr, seq):
        """This is a function to give fast access to attributes within a collection.
        Only works for 'basic type' properties (bool, int and float)!
                                    Multi-dimensional arrays (like array of vectors) will be flattened into seq.
        """

    def foreach_set(self, attr, seq):
        """This is a function to give fast access to attributes within a collection.
        Only works for 'basic type' properties (bool, int and float)!
                                    seq must be uni-dimensional, multi-dimensional arrays (like array of vectors) will be re-created from it.
        """

    def get(self, key, default=None):
        """Returns the value of the item assigned to key or default when not found
                                    (matches pythons dictionary function of the same name).
        
        :param key: The identifier for the collection member.
        :type key: str
        :param default: Optional argument for the value to return if
                                                            key is not found.
        :type default: Undefined
        """

    def items(self):
        """Return the identifiers of collection members
                                    (matching pythons dict.items() functionality).
        
        :return: (key, value) pairs for each member of this collection.
        :param : (type: list of tuples)
        :rtype: list
        """

    def keys(self):
        """Return the identifiers of collection members
                                    (matching pythons dict.keys() functionality).
        
        :return: the identifiers for each member of this collection.
        :param : (type: list of strings)
        :rtype: list
        """

    def values(self):
        """Return the values of collection
                                    (matching pythons dict.values() functionality).
        
        :return: the members of this collection.
        :rtype: list
        """


class ActionFCurves(bpy_struct):
    """Collection of action F-Curves"""

    def new(self, data_path, index=0, action_group=""):
        """Add an F-Curve to the action
        
        :param data_path: Data Path, F-Curve data path to use
            (type: str, (never None))
        :type data_path: str
        :param index: Index, Array index
            (type: int in [0, inf], (optional))
        :type index: int
        :param action_group: Action Group, Acton group to add this F-Curve into
            (type: str, (optional, never None))
        :type action_group: str
        :return: Newly created F-Curve
        :param : (type: bpy.types.FCurve)
        :rtype: FCurve
        """

    def find(self, data_path, index=0):
        """Find an F-Curve. Note that this function performs a linear scan of all F-Curves in the action.
        
        :param data_path: Data Path, F-Curve data path
            (type: str, (never None))
        :type data_path: str
        :param index: Index, Array index
            (type: int in [0, inf], (optional))
        :type index: int
        :return: The found F-Curve, or None if it doesn't exist
        :param : (type: bpy.types.FCurve)
        :rtype: FCurve
        """

    def remove(self, fcurve):
        """Remove action group
        
        :param fcurve: F-Curve to remove
            (type: bpy.types.FCurve, (never None))
        :type fcurve: FCurve
        """


class ActionGroup(bpy_struct):
    """Groups of F-Curves"""

    channels = None
    """F-Curves in this group
    (type: bpy.types.bpy_prop_collection of bpy.types.FCurve, (readonly))
    
    :type: bpy_prop_collection
    """

    color_set = 'DEFAULT'
    """Custom color set to use
    (type: enum in ['DEFAULT', 'THEME01', 'THEME02', 'THEME03', 'THEME04', 'THEME05', 'THEME06', 'THEME07', 'THEME08', 'THEME09', 'THEME10', 'THEME11', 'THEME12', 'THEME13', 'THEME14', 'THEME15', 'THEME16', 'THEME17', 'THEME18', 'THEME19', 'THEME20', 'CUSTOM'], default 'DEFAULT')
    
    :type: str
    """

    colors = None
    """Copy of the colors associated with the group's color set
    (type: bpy.types.ThemeBoneColorSet, (readonly, never None))
    
    :type: ThemeBoneColorSet
    """

    is_custom_color_set = False
    """Color set is user-defined instead of a fixed theme color set
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    lock = False
    """Action group is locked
    (type: boolean, default False)
    
    :type: bool
    """

    name = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    select = False
    """Action group is selected
    (type: boolean, default False)
    
    :type: bool
    """

    show_expanded = False
    """Action group is expanded
    (type: boolean, default False)
    
    :type: bool
    """


class ActionGroups(bpy_struct):
    """Collection of action groups"""

    def new(self, name):
        """Create a new action group and add it to the action
        
        :param name: New name for the action group
            (type: str, (never None))
        :type name: str
        :return: Newly created action group
        :param : (type: bpy.types.ActionGroup)
        :rtype: ActionGroup
        """

    def remove(self, action_group):
        """Remove action group
        
        :param action_group: Action group to remove
            (type: bpy.types.ActionGroup, (never None))
        :type action_group: ActionGroup
        """


class ActionPoseMarkers(bpy_struct):
    """Collection of timeline markers"""

    active = None
    """Active pose marker for this action
    (type: bpy.types.TimelineMarker)
    
    :type: TimelineMarker
    """

    active_index = 0
    """Index of active pose marker
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    def new(self, name):
        """Add a pose marker to the action
        
        :param name: New name for the marker (not unique)
            (type: str, (never None))
        :type name: str
        :return: Newly created marker
        :param : (type: bpy.types.TimelineMarker)
        :rtype: TimelineMarker
        """

    def remove(self, marker):
        """Remove a timeline marker
        
        :param marker: Timeline marker to remove
            (type: bpy.types.TimelineMarker, (never None))
        :type marker: TimelineMarker
        """


class Actuator(bpy_struct):
    """Actuator to apply actions in the game engine"""

    active = False
    """Set the active state of the actuator
    (type: boolean, default False)
    
    :type: bool
    """

    name = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    pin = False
    """Display when not linked to a visible states controller
    (type: boolean, default False)
    
    :type: bool
    """

    show_expanded = False
    """Set actuator expanded in the user interface
    (type: boolean, default False)
    
    :type: bool
    """

    type = 'MOTION'
    """(type: enum in ['ACTION', 'ARMATURE', 'CAMERA', 'CONSTRAINT', 'EDIT_OBJECT', 'FILTER_2D', 'GAME', 'MESSAGE', 'MOTION', 'MOUSE', 'PARENT', 'PROPERTY', 'RANDOM', 'SCENE', 'SOUND', 'STATE', 'STEERING', 'VISIBILITY'], default 'MOTION')
    
    :type: str
    """

    def link(self, controller):
        """Link the actuator to a controller
        
        :param controller: Controller to link to
            (type: bpy.types.Controller)
        :type controller: Controller
        """

    def unlink(self, controller):
        """Unlink the actuator from a controller
        
        :param controller: Controller to unlink from
            (type: bpy.types.Controller)
        :type controller: Controller
        """


class Addon(bpy_struct):
    """Python add-ons to be loaded automatically"""

    module = ""
    """Module name
    (type: string, default "", (never None))
    
    :type: str
    """

    preferences = None
    """(type: bpy.types.AddonPreferences, (readonly))
    
    :type: AddonPreferences
    """


class AddonPreferences(bpy_struct):
    """"""

    bl_idname = ""
    """(type: string, default "", (never None))
    
    :type: str
    """


class Addons(bpy_struct):
    """Collection of add-ons"""

    def new(self):
        """Add a new add-on
        
        :return: Add-on data
        :param : (type: bpy.types.Addon)
        :rtype: Addon
        """

    def remove(self, addon):
        """Remove add-on
        
        :param addon: Add-on to remove
            (type: bpy.types.Addon, (never None))
        :type addon: Addon
        """


class AlembicObjectPath(bpy_struct):
    """Path of an object inside of an Alembic archive"""

    path = ""
    """Object path
    (type: string, default "", (never None))
    
    :type: str
    """


class AlembicObjectPaths(bpy_struct):
    """Collection of object paths"""


class AnimData(bpy_struct):
    """Animation data for data-block"""

    action = None
    """Active Action for this data-block
    (type: bpy.types.Action)
    
    :type: Action
    """

    action_blend_type = 'REPLACE'
    """Method used for combining Active Action's result with result of NLA stack
    * 'REPLACE': Replace, Result strip replaces the accumulated results by amount specified by influence.
    * 'ADD': Add, Weighted result of strip is added to the accumulated results.
    * 'SUBTRACT': Subtract, Weighted result of strip is removed from the accumulated results.
    * 'MULTIPLY': Multiply, Weighted result of strip is multiplied with the accumulated results.
    (type: enum in ['REPLACE', 'ADD', 'SUBTRACT', 'MULTIPLY'], default 'REPLACE')
    
    :type: str
    """

    action_extrapolation = 'HOLD'
    """Action to take for gaps past the Active Action's range (when evaluating with NLA)
    * 'NOTHING': Nothing, Strip has no influence past its extents.
    * 'HOLD': Hold, Hold the first frame if no previous strips in track, and always hold last frame.
    * 'HOLD_FORWARD': Hold Forward, Only hold last frame.
    (type: enum in ['NOTHING', 'HOLD', 'HOLD_FORWARD'], default 'HOLD')
    
    :type: str
    """

    action_influence = 1.0
    """Amount the Active Action contributes to the result of the NLA stack
    (type: float in [0, 1], default 1.0)
    
    :type: float
    """

    drivers = None
    """The Drivers/Expressions for this data-block
    (type: bpy.types.AnimDataDrivers bpy.types.bpy_prop_collection of bpy.types.FCurve, (readonly))
    
    :type: AnimDataDrivers
    """

    nla_tracks = None
    """NLA Tracks (i.e. Animation Layers)
    (type: bpy.types.NlaTracks bpy.types.bpy_prop_collection of bpy.types.NlaTrack, (readonly))
    
    :type: NlaTracks
    """

    use_nla = False
    """NLA stack is evaluated when evaluating this block
    (type: boolean, default False)
    
    :type: bool
    """

    use_tweak_mode = False
    """Whether to enable or disable tweak mode in NLA
    (type: boolean, default False)
    
    :type: bool
    """


class AnimDataDrivers(bpy_struct):
    """Collection of Driver F-Curves"""

    def from_existing(self, src_driver=None):
        """Add a new driver given an existing one
        
        :param src_driver: Existing Driver F-Curve to use as template for a new one
            (type: bpy.types.FCurve, (optional))
        :type src_driver: FCurve
        :return: New Driver F-Curve
        :param : (type: bpy.types.FCurve)
        :rtype: FCurve
        """

    def find(self, data_path, index=0):
        """Find a driver F-Curve. Note that this function performs a linear scan of all driver F-Curves.
        
        :param data_path: Data Path, F-Curve data path
            (type: str, (never None))
        :type data_path: str
        :param index: Index, Array index
            (type: int in [0, inf], (optional))
        :type index: int
        :return: The found F-Curve, or None if it doesn't exist
        :param : (type: bpy.types.FCurve)
        :rtype: FCurve
        """


class AnimViz(bpy_struct):
    """Settings for the visualization of motion"""

    motion_path = None
    """Motion Path settings for visualization
    (type: bpy.types.AnimVizMotionPaths, (readonly, never None))
    
    :type: AnimVizMotionPaths
    """

    onion_skin_frames = None
    """Onion Skinning (ghosting) settings for visualization
    (type: bpy.types.AnimVizOnionSkinning, (readonly, never None))
    
    :type: AnimVizOnionSkinning
    """


class AnimVizMotionPaths(bpy_struct):
    """Motion Path settings for animation visualization"""

    bake_location = 'TAILS'
    """When calculating Bone Paths, use Head or Tips
    * 'HEADS': Heads, Calculate bone paths from heads.
    * 'TAILS': Tails, Calculate bone paths from tails.
    (type: enum in ['HEADS', 'TAILS'], default 'TAILS')
    
    :type: str
    """

    frame_after = 0
    """Number of frames to show after the current frame (only for 'Around Current Frame' Onion-skinning method)
    (type: int in [1, 250000], default 0)
    
    :type: int
    """

    frame_before = 0
    """Number of frames to show before the current frame (only for 'Around Current Frame' Onion-skinning method)
    (type: int in [1, 250000], default 0)
    
    :type: int
    """

    frame_end = 0
    """End frame of range of paths to display/calculate (not for 'Around Current Frame' Onion-skinning method)
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    frame_start = 0
    """Starting frame of range of paths to display/calculate (not for 'Around Current Frame' Onion-skinning method)
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    frame_step = 0
    """Number of frames between paths shown (not for 'On Keyframes' Onion-skinning method)
    (type: int in [1, 100], default 0)
    
    :type: int
    """

    show_frame_numbers = False
    """Show frame numbers on Motion Paths
    (type: boolean, default False)
    
    :type: bool
    """

    show_keyframe_action_all = False
    """For bone motion paths, search whole Action for keyframes instead of in group with matching name only (is slower)
    (type: boolean, default False)
    
    :type: bool
    """

    show_keyframe_highlight = False
    """Emphasize position of keyframes on Motion Paths
    (type: boolean, default False)
    
    :type: bool
    """

    show_keyframe_numbers = False
    """Show frame numbers of Keyframes on Motion Paths
    (type: boolean, default False)
    
    :type: bool
    """

    type = 'RANGE'
    """Type of range to show for Motion Paths
    * 'CURRENT_FRAME': Around Frame, Display Paths of poses within a fixed number of frames around the current frame.
    * 'RANGE': In Range, Display Paths of poses within specified range.
    (type: enum in ['CURRENT_FRAME', 'RANGE'], default 'RANGE')
    
    :type: str
    """


class AnimVizOnionSkinning(bpy_struct):
    """Onion Skinning settings for animation visualization"""

    frame_after = 0
    """Number of frames to show after the current frame (only for 'Around Current Frame' Onion-skinning method)
    (type: int in [0, 30], default 0)
    
    :type: int
    """

    frame_before = 0
    """Number of frames to show before the current frame (only for 'Around Current Frame' Onion-skinning method)
    (type: int in [0, 30], default 0)
    
    :type: int
    """

    frame_end = 0
    """End frame of range of Ghosts to display (not for 'Around Current Frame' Onion-skinning method)
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    frame_start = 0
    """Starting frame of range of Ghosts to display (not for 'Around Current Frame' Onion-skinning method)
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    frame_step = 0
    """Number of frames between ghosts shown (not for 'On Keyframes' Onion-skinning method)
    (type: int in [1, 20], default 0)
    
    :type: int
    """

    show_only_selected = False
    """For Pose-Mode drawing, only draw ghosts for selected bones
    (type: boolean, default False)
    
    :type: bool
    """

    type = 'NONE'
    """Method used for determining what ghosts get drawn
    * 'NONE': No Ghosts, Do not show any ghosts.
    * 'CURRENT_FRAME': Around Current Frame, Show ghosts from around the current frame.
    * 'RANGE': In Range, Show ghosts for the specified frame range.
    * 'KEYS': On Keyframes, Show ghosts on keyframes.
    (type: enum in ['NONE', 'CURRENT_FRAME', 'RANGE', 'KEYS'], default 'NONE')
    
    :type: str
    """


class AnyType(bpy_struct):
    """RNA type used for pointers to any possible data"""


class Area(bpy_struct):
    """Area in a subdivided screen, containing an editor"""

    height = 0
    """Area height
    (type: int in [0, 32767], default 0, (readonly))
    
    :type: int
    """

    regions = None
    """Regions this area is subdivided in
    (type: bpy.types.bpy_prop_collection of bpy.types.Region, (readonly))
    
    :type: bpy_prop_collection
    """

    show_menus = False
    """Show menus in the header
    (type: boolean, default False)
    
    :type: bool
    """

    spaces = None
    """Spaces contained in this area, the first being the active space (NOTE: Useful for example to restore a previously used 3D view space in a certain area to get the old view orientation)
    (type: bpy.types.AreaSpaces bpy.types.bpy_prop_collection of bpy.types.Space, (readonly))
    
    :type: AreaSpaces
    """

    type = 'VIEW_3D'
    """Current editor type for this area
    * 'EMPTY': Empty.
    * 'VIEW_3D': 3D View, 3D viewport.
    * 'TIMELINE': Timeline, Timeline and playback controls.
    * 'GRAPH_EDITOR': Graph Editor, Edit drivers and keyframe interpolation.
    * 'DOPESHEET_EDITOR': Dope Sheet, Adjust timing of keyframes.
    * 'NLA_EDITOR': NLA Editor, Combine and layer Actions.
    * 'IMAGE_EDITOR': UV/Image Editor, View and edit images and UV Maps.
    * 'SEQUENCE_EDITOR': Video Sequence Editor, Video editing tools.
    * 'CLIP_EDITOR': Movie Clip Editor, Motion tracking tools.
    * 'TEXT_EDITOR': Text Editor, Edit scripts and in-file documentation.
    * 'NODE_EDITOR': Node Editor, Editor for node-based shading and compositing tools.
    * 'LOGIC_EDITOR': Logic Editor, Game logic editing.
    * 'PROPERTIES': Properties, Edit properties of active object and related data-blocks.
    * 'OUTLINER': Outliner, Overview of scene graph and all available data-blocks.
    * 'USER_PREFERENCES': User Preferences, Edit persistent configuration settings.
    * 'INFO': Info, Main menu bar and list of error messages (drag down to expand and display).
    * 'FILE_BROWSER': File Browser, Browse for files and assets.
    * 'CONSOLE': Python Console, Interactive programmatic console for advanced editing and script development.
    (type: enum in ['EMPTY', 'VIEW_3D', 'TIMELINE', 'GRAPH_EDITOR', 'DOPESHEET_EDITOR', 'NLA_EDITOR', 'IMAGE_EDITOR', 'SEQUENCE_EDITOR', 'CLIP_EDITOR', 'TEXT_EDITOR', 'NODE_EDITOR', 'LOGIC_EDITOR', 'PROPERTIES', 'OUTLINER', 'USER_PREFERENCES', 'INFO', 'FILE_BROWSER', 'CONSOLE'], default 'VIEW_3D')
    
    :type: str
    """

    width = 0
    """Area width
    (type: int in [0, 32767], default 0, (readonly))
    
    :type: int
    """

    x = 0
    """The window relative vertical location of the area
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    y = 0
    """The window relative horizontal location of the area
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    def tag_redraw(self):
        """tag_redraw"""

    def header_text_set(self, text=""):
        """Set the header text
        
        :param text: Text, New string for the header, no argument clears the text
            (type: str, (optional, never None))
        :type text: str
        """


class AreaSpaces(bpy_struct):
    """Collection of spaces"""

    active = None
    """Space currently being displayed in this area
    (type: bpy.types.Space, (readonly))
    
    :type: Space
    """


class ArmatureBones(bpy_struct):
    """Collection of armature bones"""

    active = None
    """Armature's active bone
    (type: bpy.types.Bone)
    
    :type: Bone
    """


class ArmatureEditBones(bpy_struct):
    """Collection of armature edit bones"""

    active = None
    """Armatures active edit bone
    (type: bpy.types.EditBone)
    
    :type: EditBone
    """

    def new(self, name):
        """Add a new bone
        
        :param name: New name for the bone
            (type: str, (never None))
        :type name: str
        :return: Newly created edit bone
        :param : (type: bpy.types.EditBone)
        :rtype: EditBone
        """

    def remove(self, bone):
        """Remove an existing bone from the armature
        
        :param bone: EditBone to remove
            (type: bpy.types.EditBone, (never None))
        :type bone: EditBone
        """


class BackgroundImage(bpy_struct):
    """Image and settings for display in the 3D View background"""

    clip = None
    """Movie clip displayed and edited in this space
    (type: bpy.types.MovieClip)
    
    :type: MovieClip
    """

    clip_user = None
    """Parameters defining which frame of the movie clip is displayed
    (type: bpy.types.MovieClipUser, (readonly, never None))
    
    :type: MovieClipUser
    """

    draw_depth = 'BACK'
    """Draw under or over everything
    (type: enum in ['BACK', 'FRONT'], default 'BACK')
    
    :type: str
    """

    frame_method = 'STRETCH'
    """How the image fits in the camera frame
    (type: enum in ['STRETCH', 'FIT', 'CROP'], default 'STRETCH')
    
    :type: str
    """

    image = None
    """Image displayed and edited in this space
    (type: bpy.types.Image)
    
    :type: Image
    """

    image_user = None
    """Parameters defining which layer, pass and frame of the image is displayed
    (type: bpy.types.ImageUser, (readonly, never None))
    
    :type: ImageUser
    """

    offset_x = 0.0
    """Offset image horizontally from the world origin
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    offset_y = 0.0
    """Offset image vertically from the world origin
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    opacity = 0.0
    """Image opacity to blend the image against the background color
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    rotation = 0.0
    """Rotation for the background image (ortho view only)
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    show_background_image = False
    """Show this image as background
    (type: boolean, default False)
    
    :type: bool
    """

    show_expanded = False
    """Show the expanded in the user interface
    (type: boolean, default False)
    
    :type: bool
    """

    show_on_foreground = False
    """Show this image in front of objects in viewport
    (type: boolean, default False)
    
    :type: bool
    """

    size = 0.0
    """Size of the background image (ortho view only)
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    source = 'IMAGE'
    """Data source used for background
    (type: enum in ['IMAGE', 'MOVIE_CLIP'], default 'IMAGE')
    
    :type: str
    """

    use_camera_clip = False
    """Use movie clip from active scene camera
    (type: boolean, default False)
    
    :type: bool
    """

    use_flip_x = False
    """Flip the background image horizontally
    (type: boolean, default False)
    
    :type: bool
    """

    use_flip_y = False
    """Flip the background image vertically
    (type: boolean, default False)
    
    :type: bool
    """

    view_axis = 'ALL'
    """The axis to display the image on
    * 'LEFT': Left, Show background image while looking to the left.
    * 'RIGHT': Right, Show background image while looking to the right.
    * 'BACK': Back, Show background image in back view.
    * 'FRONT': Front, Show background image in front view.
    * 'BOTTOM': Bottom, Show background image in bottom view.
    * 'TOP': Top, Show background image in top view.
    * 'ALL': All Views, Show background image in all views.
    * 'CAMERA': Camera, Show background image in camera view.
    (type: enum in ['LEFT', 'RIGHT', 'BACK', 'FRONT', 'BOTTOM', 'TOP', 'ALL', 'CAMERA'], default 'ALL')
    
    :type: str
    """


class BackgroundImages(bpy_struct):
    """Collection of background images"""

    def new(self):
        """Add new background image
        
        :return: Image displayed as viewport background
        :param : (type: bpy.types.BackgroundImage)
        :rtype: BackgroundImage
        """

    def remove(self, image):
        """Remove background image
        
        :param image: Image displayed as viewport background
            (type: bpy.types.BackgroundImage, (never None))
        :type image: BackgroundImage
        """

    def clear(self):
        """Remove all background images"""


class BakePixel(bpy_struct):
    """"""

    du_dx = 0.0
    """(type: float in [-inf, inf], default 0.0, (readonly))
    
    :type: float
    """

    du_dy = 0.0
    """(type: float in [-inf, inf], default 0.0, (readonly))
    
    :type: float
    """

    dv_dx = 0.0
    """(type: float in [-inf, inf], default 0.0, (readonly))
    
    :type: float
    """

    dv_dy = 0.0
    """(type: float in [-inf, inf], default 0.0, (readonly))
    
    :type: float
    """

    next = None
    """(type: bpy.types.BakePixel, (readonly))
    
    :type: BakePixel
    """

    object_id = 0
    """(type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    primitive_id = 0
    """(type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    uv = (0.0, 0.0)
    """(type: float array of 2 items in [-inf, inf], default (0.0, 0.0), (readonly))
    
    :type: collections.Sequence[float]
    """


class BakeSettings(bpy_struct):
    """Bake data for a Scene data-block"""

    cage_extrusion = 0.0
    """Distance to use for the inward ray cast when using selected to active
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    cage_object = ""
    """Object to use as cage instead of calculating the cage from the active object with cage extrusion
    (type: string, default "", (never None))
    
    :type: str
    """

    filepath = ""
    """Image filepath to use when saving externally
    (type: string, default "", (never None))
    
    :type: str
    """

    height = 0
    """Vertical dimension of the baking map
    (type: int in [4, 10000], default 0)
    
    :type: int
    """

    image_settings = None
    """(type: bpy.types.ImageFormatSettings, (readonly, never None))
    
    :type: ImageFormatSettings
    """

    margin = 0
    """Extends the baked result as a post process filter
    (type: int in [0, 32767], default 0)
    
    :type: int
    """

    normal_b = 'POS_X'
    """Axis to bake in blue channel
    (type: enum in ['POS_X', 'POS_Y', 'POS_Z', 'NEG_X', 'NEG_Y', 'NEG_Z'], default 'POS_X')
    
    :type: str
    """

    normal_g = 'POS_X'
    """Axis to bake in green channel
    (type: enum in ['POS_X', 'POS_Y', 'POS_Z', 'NEG_X', 'NEG_Y', 'NEG_Z'], default 'POS_X')
    
    :type: str
    """

    normal_r = 'POS_X'
    """Axis to bake in red channel
    (type: enum in ['POS_X', 'POS_Y', 'POS_Z', 'NEG_X', 'NEG_Y', 'NEG_Z'], default 'POS_X')
    
    :type: str
    """

    normal_space = 'OBJECT'
    """Choose normal space for baking
    * 'OBJECT': Object, Bake the normals in object space.
    * 'TANGENT': Tangent, Bake the normals in tangent space.
    (type: enum in ['OBJECT', 'TANGENT'], default 'OBJECT')
    
    :type: str
    """

    pass_filter = {}
    """Passes to include in the active baking pass
    (type: enum set in {'NONE', 'AO', 'EMIT', 'DIRECT', 'INDIRECT', 'COLOR', 'DIFFUSE', 'GLOSSY', 'TRANSMISSION', 'SUBSURFACE'}, default {}, (readonly))
    
    :type: enum set in {'NONE', 'AO', 'EMIT', 'DIRECT', 'INDIRECT', 'COLOR', 'DIFFUSE', 'GLOSSY', 'TRANSMISSION', 'SUBSURFACE'}
    """

    save_mode = 'INTERNAL'
    """Choose how to save the baking map
    * 'INTERNAL': Internal, Save the baking map in an internal image data-block.
    * 'EXTERNAL': External, Save the baking map in an external file.
    (type: enum in ['INTERNAL', 'EXTERNAL'], default 'INTERNAL')
    
    :type: str
    """

    use_automatic_name = False
    """Automatically name the output file with the pass type (external only)
    (type: boolean, default False)
    
    :type: bool
    """

    use_cage = False
    """Cast rays to active object from a cage
    (type: boolean, default False)
    
    :type: bool
    """

    use_clear = False
    """Clear Images before baking (internal only)
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_ambient_occlusion = False
    """Add ambient occlusion contribution
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_color = False
    """Color the pass
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_diffuse = False
    """Add diffuse contribution
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_direct = False
    """Add direct lighting contribution
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_emit = False
    """Add emission contribution
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_glossy = False
    """Add glossy contribution
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_indirect = False
    """Add indirect lighting contribution
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_subsurface = False
    """Add subsurface contribution
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_transmission = False
    """Add transmission contribution
    (type: boolean, default False)
    
    :type: bool
    """

    use_selected_to_active = False
    """Bake shading on the surface of selected objects to the active object
    (type: boolean, default False)
    
    :type: bool
    """

    use_split_materials = False
    """Split external images per material (external only)
    (type: boolean, default False)
    
    :type: bool
    """

    width = 0
    """Horizontal dimension of the baking map
    (type: int in [4, 10000], default 0)
    
    :type: int
    """


class BezierSplinePoint(bpy_struct):
    """Bezier curve point with two handles"""

    co = (0.0, 0.0, 0.0)
    """Coordinates of the control point
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    handle_left = (0.0, 0.0, 0.0)
    """Coordinates of the first handle
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    handle_left_type = 'FREE'
    """Handle types
    (type: enum in ['FREE', 'VECTOR', 'ALIGNED', 'AUTO'], default 'FREE')
    
    :type: str
    """

    handle_right = (0.0, 0.0, 0.0)
    """Coordinates of the second handle
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    handle_right_type = 'FREE'
    """Handle types
    (type: enum in ['FREE', 'VECTOR', 'ALIGNED', 'AUTO'], default 'FREE')
    
    :type: str
    """

    hide = False
    """Visibility status
    (type: boolean, default False)
    
    :type: bool
    """

    radius = 0.0
    """Radius for beveling
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    select_control_point = False
    """Control point selection status
    (type: boolean, default False)
    
    :type: bool
    """

    select_left_handle = False
    """Handle 1 selection status
    (type: boolean, default False)
    
    :type: bool
    """

    select_right_handle = False
    """Handle 2 selection status
    (type: boolean, default False)
    
    :type: bool
    """

    tilt = 0.0
    """Tilt in 3D View
    (type: float in [-376.991, 376.991], default 0.0)
    
    :type: float
    """

    weight_softbody = 0.0
    """Softbody goal weight
    (type: float in [0.01, 100], default 0.0)
    
    :type: float
    """


class BlendData(bpy_struct):
    """Main data structure representing a .blend file and all its data-blocks"""

    actions = None
    """Action data-blocks
    (type: bpy.types.BlendDataActions bpy.types.bpy_prop_collection of bpy.types.Action, (readonly))
    
    :type: BlendDataActions
    """

    armatures = None
    """Armature data-blocks
    (type: bpy.types.BlendDataArmatures bpy.types.bpy_prop_collection of bpy.types.Armature, (readonly))
    
    :type: BlendDataArmatures
    """

    brushes = None
    """Brush data-blocks
    (type: bpy.types.BlendDataBrushes bpy.types.bpy_prop_collection of bpy.types.Brush, (readonly))
    
    :type: BlendDataBrushes
    """

    cache_files = None
    """Cache Files data-blocks
    (type: bpy.types.BlendDataCacheFiles bpy.types.bpy_prop_collection of bpy.types.CacheFile, (readonly))
    
    :type: BlendDataCacheFiles
    """

    cameras = None
    """Camera data-blocks
    (type: bpy.types.BlendDataCameras bpy.types.bpy_prop_collection of bpy.types.Camera, (readonly))
    
    :type: BlendDataCameras
    """

    curves = None
    """Curve data-blocks
    (type: bpy.types.BlendDataCurves bpy.types.bpy_prop_collection of bpy.types.Curve, (readonly))
    
    :type: BlendDataCurves
    """

    filepath = ""
    """Path to the .blend file
    (type: string, default "", (readonly, never None))
    
    :type: str
    """

    fonts = None
    """Vector font data-blocks
    (type: bpy.types.BlendDataFonts bpy.types.bpy_prop_collection of bpy.types.VectorFont, (readonly))
    
    :type: BlendDataFonts
    """

    grease_pencil = None
    """Grease Pencil data-blocks
    (type: bpy.types.BlendDataGreasePencils bpy.types.bpy_prop_collection of bpy.types.GreasePencil, (readonly))
    
    :type: BlendDataGreasePencils
    """

    groups = None
    """Group data-blocks
    (type: bpy.types.BlendDataGroups bpy.types.bpy_prop_collection of bpy.types.Group, (readonly))
    
    :type: BlendDataGroups
    """

    images = None
    """Image data-blocks
    (type: bpy.types.BlendDataImages bpy.types.bpy_prop_collection of bpy.types.Image, (readonly))
    
    :type: BlendDataImages
    """

    is_dirty = False
    """Have recent edits been saved to disk
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_saved = False
    """Has the current session been saved to disk as a .blend file
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    lamps = None
    """Lamp data-blocks
    (type: bpy.types.BlendDataLamps bpy.types.bpy_prop_collection of bpy.types.Lamp, (readonly))
    
    :type: BlendDataLamps
    """

    lattices = None
    """Lattice data-blocks
    (type: bpy.types.BlendDataLattices bpy.types.bpy_prop_collection of bpy.types.Lattice, (readonly))
    
    :type: BlendDataLattices
    """

    libraries = None
    """Library data-blocks
    (type: bpy.types.BlendDataLibraries bpy.types.bpy_prop_collection of bpy.types.Library, (readonly))
    
    :type: BlendDataLibraries
    """

    linestyles = None
    """Line Style data-blocks
    (type: bpy.types.BlendDataLineStyles bpy.types.bpy_prop_collection of bpy.types.FreestyleLineStyle, (readonly))
    
    :type: BlendDataLineStyles
    """

    masks = None
    """Masks data-blocks
    (type: bpy.types.BlendDataMasks bpy.types.bpy_prop_collection of bpy.types.Mask, (readonly))
    
    :type: BlendDataMasks
    """

    materials = None
    """Material data-blocks
    (type: bpy.types.BlendDataMaterials bpy.types.bpy_prop_collection of bpy.types.Material, (readonly))
    
    :type: BlendDataMaterials
    """

    meshes = None
    """Mesh data-blocks
    (type: bpy.types.BlendDataMeshes bpy.types.bpy_prop_collection of bpy.types.Mesh, (readonly))
    
    :type: BlendDataMeshes
    """

    metaballs = None
    """Metaball data-blocks
    (type: bpy.types.BlendDataMetaBalls bpy.types.bpy_prop_collection of bpy.types.MetaBall, (readonly))
    
    :type: BlendDataMetaBalls
    """

    movieclips = None
    """Movie Clip data-blocks
    (type: bpy.types.BlendDataMovieClips bpy.types.bpy_prop_collection of bpy.types.MovieClip, (readonly))
    
    :type: BlendDataMovieClips
    """

    node_groups = None
    """Node group data-blocks
    (type: bpy.types.BlendDataNodeTrees bpy.types.bpy_prop_collection of bpy.types.NodeTree, (readonly))
    
    :type: BlendDataNodeTrees
    """

    objects = None
    """Object data-blocks
    (type: bpy.types.BlendDataObjects bpy.types.bpy_prop_collection of bpy.types.Object, (readonly))
    
    :type: BlendDataObjects
    """

    paint_curves = None
    """Paint Curves data-blocks
    (type: bpy.types.BlendDataPaintCurves bpy.types.bpy_prop_collection of bpy.types.PaintCurve, (readonly))
    
    :type: BlendDataPaintCurves
    """

    palettes = None
    """Palette data-blocks
    (type: bpy.types.BlendDataPalettes bpy.types.bpy_prop_collection of bpy.types.Palette, (readonly))
    
    :type: BlendDataPalettes
    """

    particles = None
    """Particle data-blocks
    (type: bpy.types.BlendDataParticles bpy.types.bpy_prop_collection of bpy.types.ParticleSettings, (readonly))
    
    :type: BlendDataParticles
    """

    scenes = None
    """Scene data-blocks
    (type: bpy.types.BlendDataScenes bpy.types.bpy_prop_collection of bpy.types.Scene, (readonly))
    
    :type: BlendDataScenes
    """

    screens = None
    """Screen data-blocks
    (type: bpy.types.BlendDataScreens bpy.types.bpy_prop_collection of bpy.types.Screen, (readonly))
    
    :type: BlendDataScreens
    """

    shape_keys = None
    """Shape Key data-blocks
    (type: bpy.types.bpy_prop_collection of bpy.types.Key, (readonly))
    
    :type: bpy_prop_collection
    """

    sounds = None
    """Sound data-blocks
    (type: bpy.types.BlendDataSounds bpy.types.bpy_prop_collection of bpy.types.Sound, (readonly))
    
    :type: BlendDataSounds
    """

    speakers = None
    """Speaker data-blocks
    (type: bpy.types.BlendDataSpeakers bpy.types.bpy_prop_collection of bpy.types.Speaker, (readonly))
    
    :type: BlendDataSpeakers
    """

    texts = None
    """Text data-blocks
    (type: bpy.types.BlendDataTexts bpy.types.bpy_prop_collection of bpy.types.Text, (readonly))
    
    :type: BlendDataTexts
    """

    textures = None
    """Texture data-blocks
    (type: bpy.types.BlendDataTextures bpy.types.bpy_prop_collection of bpy.types.Texture, (readonly))
    
    :type: BlendDataTextures
    """

    use_autopack = False
    """Automatically pack all external data into .blend file
    (type: boolean, default False)
    
    :type: bool
    """

    version = (0, 0, 0)
    """Version of Blender the .blend was saved with
    (type: int array of 3 items in [0, inf], default (0, 0, 0), (readonly))
    
    :type: collections.Sequence[int]
    """

    window_managers = None
    """Window manager data-blocks
    (type: bpy.types.BlendDataWindowManagers bpy.types.bpy_prop_collection of bpy.types.WindowManager, (readonly))
    
    :type: BlendDataWindowManagers
    """

    worlds = None
    """World data-blocks
    (type: bpy.types.BlendDataWorlds bpy.types.bpy_prop_collection of bpy.types.World, (readonly))
    
    :type: BlendDataWorlds
    """

    def user_map(self, user_map:'[id1, id2, ...]'=[], key_types=set(), value_types=set()):
        """Returns a mapping of all ID datablocks in current bpy.data to a set of all datablocks using them.
        For list of valid set members for key_types & value_types, see: bpy.types.KeyingSetPath.id_type.
        
        :param subset: When passed, only these data-blocks and their users will be included as keys/values in the map.
            (type: sequence)
        :type subset: collections.Sequence
        :param key_types: Filter the keys mapped by ID types.
            (type: set of strings)
        :type key_types: set
        :param value_types: Filter the values in the set by ID types.
            (type: set of strings)
        :type value_types: set
        :return: dictionary of bpy.types.ID instances, with sets of ID's as their values.
        :rtype: dict
        """


class BlendDataActions(bpy_struct):
    """Collection of actions"""

    is_updated = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    def new(self, name):
        """Add a new action to the main database
        
        :param name: New name for the data-block
            (type: str, (never None))
        :type name: str
        :return: New action data-block
        :param : (type: bpy.types.Action)
        :rtype: Action
        """

    def remove(self, action, do_unlink=True):
        """Remove a action from the current blendfile
        
        :param action: Action to remove
            (type: bpy.types.Action, (never None))
        :type action: Action
        :param do_unlink: Unlink all usages of this action before deleting it
            (type: boolean, (optional))
        :type do_unlink: bool
        """

    def tag(self, value):
        """tag
        
        :param value: Value
        :type value: bool
        """


class BlendDataArmatures(bpy_struct):
    """Collection of armatures"""

    is_updated = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    def new(self, name):
        """Add a new armature to the main database
        
        :param name: New name for the data-block
            (type: str, (never None))
        :type name: str
        :return: New armature data-block
        :param : (type: bpy.types.Armature)
        :rtype: Armature
        """

    def remove(self, armature, do_unlink=True):
        """Remove a armature from the current blendfile
        
        :param armature: Armature to remove
            (type: bpy.types.Armature, (never None))
        :type armature: Armature
        :param do_unlink: Unlink all usages of this armature before deleting it (WARNING: will also delete objects instancing that armature data)
            (type: boolean, (optional))
        :type do_unlink: bool
        """

    def tag(self, value):
        """tag
        
        :param value: Value
        :type value: bool
        """


class BlendDataBrushes(bpy_struct):
    """Collection of brushes"""

    is_updated = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    def new(self, name, mode='TEXTURE_PAINT'):
        """Add a new brush to the main database
        
        :param name: New name for the data-block
            (type: str, (never None))
        :type name: str
        :param mode: Paint Mode for the new brush
            * 'OBJECT': Object Mode.
            * 'EDIT': Edit Mode.
            * 'POSE': Pose Mode.
            * 'SCULPT': Sculpt Mode.
            * 'VERTEX_PAINT': Vertex Paint.
            * 'WEIGHT_PAINT': Weight Paint.
            * 'TEXTURE_PAINT': Texture Paint.
            * 'PARTICLE_EDIT': Particle Edit.
            * 'GPENCIL_EDIT': Edit Strokes, Edit Grease Pencil Strokes.
            (type: enum in ['OBJECT', 'EDIT', 'POSE', 'SCULPT', 'VERTEX_PAINT', 'WEIGHT_PAINT', 'TEXTURE_PAINT', 'PARTICLE_EDIT', 'GPENCIL_EDIT'], (optional))
        :type mode: str
        :return: New brush data-block
        :param : (type: bpy.types.Brush)
        :rtype: Brush
        """

    def remove(self, brush, do_unlink=True):
        """Remove a brush from the current blendfile
        
        :param brush: Brush to remove
            (type: bpy.types.Brush, (never None))
        :type brush: Brush
        :param do_unlink: Unlink all usages of this brush before deleting it
            (type: boolean, (optional))
        :type do_unlink: bool
        """

    def tag(self, value):
        """tag
        
        :param value: Value
        :type value: bool
        """


class BlendDataCacheFiles(bpy_struct):
    """Collection of cache files"""

    is_updated = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    def tag(self, value):
        """tag
        
        :param value: Value
        :type value: bool
        """


class BlendDataCameras(bpy_struct):
    """Collection of cameras"""

    is_updated = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    def new(self, name):
        """Add a new camera to the main database
        
        :param name: New name for the data-block
            (type: str, (never None))
        :type name: str
        :return: New camera data-block
        :param : (type: bpy.types.Camera)
        :rtype: Camera
        """

    def remove(self, camera, do_unlink=True):
        """Remove a camera from the current blendfile
        
        :param camera: Camera to remove
            (type: bpy.types.Camera, (never None))
        :type camera: Camera
        :param do_unlink: Unlink all usages of this camera before deleting it (WARNING: will also delete objects instancing that camera data)
            (type: boolean, (optional))
        :type do_unlink: bool
        """

    def tag(self, value):
        """tag
        
        :param value: Value
        :type value: bool
        """


class BlendDataCurves(bpy_struct):
    """Collection of curves"""

    is_updated = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    def new(self, name, type):
        """Add a new curve to the main database
        
        :param name: New name for the data-block
            (type: str, (never None))
        :type name: str
        :param type: Type, The type of curve to add
            (type: enum in ['CURVE', 'SURFACE', 'FONT'])
        :type type: str
        :return: New curve data-block
        :param : (type: bpy.types.Curve)
        :rtype: Curve
        """

    def remove(self, curve, do_unlink=True):
        """Remove a curve from the current blendfile
        
        :param curve: Curve to remove
            (type: bpy.types.Curve, (never None))
        :type curve: Curve
        :param do_unlink: Unlink all usages of this curve before deleting it (WARNING: will also delete objects instancing that curve data)
            (type: boolean, (optional))
        :type do_unlink: bool
        """

    def tag(self, value):
        """tag
        
        :param value: Value
        :type value: bool
        """


class BlendDataFonts(bpy_struct):
    """Collection of fonts"""

    is_updated = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    def load(self, filepath, check_existing=False):
        """Load a new font into the main database
        
        :param filepath: path of the font to load
            (type: str, (never None))
        :type filepath: str
        :param check_existing: Using existing data-block if this file is already loaded
            (type: boolean, (optional))
        :type check_existing: bool
        :return: New font data-block
        :param : (type: bpy.types.VectorFont)
        :rtype: VectorFont
        """

    def remove(self, vfont, do_unlink=True):
        """Remove a font from the current blendfile
        
        :param vfont: Font to remove
            (type: bpy.types.VectorFont, (never None))
        :type vfont: VectorFont
        :param do_unlink: Unlink all usages of this font before deleting it
            (type: boolean, (optional))
        :type do_unlink: bool
        """

    def tag(self, value):
        """tag
        
        :param value: Value
        :type value: bool
        """


class BlendDataGreasePencils(bpy_struct):
    """Collection of grease pencils"""

    is_updated = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    def tag(self, value):
        """tag
        
        :param value: Value
        :type value: bool
        """

    def new(self, name):
        """new
        
        :param name: New name for the data-block
            (type: str, (never None))
        :type name: str
        :return: New grease pencil data-block
        :param : (type: bpy.types.GreasePencil)
        :rtype: GreasePencil
        """

    def remove(self, grease_pencil, do_unlink=True):
        """Remove a grease pencil instance from the current blendfile
        
        :param grease_pencil: Grease Pencil to remove
            (type: bpy.types.GreasePencil, (never None))
        :type grease_pencil: GreasePencil
        :param do_unlink: Unlink all usages of this grease pencil before deleting it
            (type: boolean, (optional))
        :type do_unlink: bool
        """


class BlendDataGroups(bpy_struct):
    """Collection of groups"""

    is_updated = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    def new(self, name):
        """Add a new group to the main database
        
        :param name: New name for the data-block
            (type: str, (never None))
        :type name: str
        :return: New group data-block
        :param : (type: bpy.types.Group)
        :rtype: Group
        """

    def remove(self, group, do_unlink=True):
        """Remove a group from the current blendfile
        
        :param group: Group to remove
            (type: bpy.types.Group, (never None))
        :type group: Group
        :param do_unlink: Unlink all usages of this group before deleting it
            (type: boolean, (optional))
        :type do_unlink: bool
        """

    def tag(self, value):
        """tag
        
        :param value: Value
        :type value: bool
        """


class BlendDataImages(bpy_struct):
    """Collection of images"""

    is_updated = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    def new(self, name, width, height, alpha=False, float_buffer=False, stereo3d=False):
        """Add a new image to the main database
        
        :param name: New name for the data-block
            (type: str, (never None))
        :type name: str
        :param width: Width of the image
            (type: int in [1, inf])
        :type width: int
        :param height: Height of the image
            (type: int in [1, inf])
        :type height: int
        :param alpha: Alpha, Use alpha channel
            (type: boolean, (optional))
        :type alpha: bool
        :param float_buffer: Float Buffer, Create an image with floating point color
            (type: boolean, (optional))
        :type float_buffer: bool
        :param stereo3d: Stereo 3D, Create left and right views
            (type: boolean, (optional))
        :type stereo3d: bool
        :return: New image data-block
        :param : (type: bpy.types.Image)
        :rtype: Image
        """

    def load(self, filepath, check_existing=False):
        """Load a new image into the main database
        
        :param filepath: path of the file to load
            (type: str, (never None))
        :type filepath: str
        :param check_existing: Using existing data-block if this file is already loaded
            (type: boolean, (optional))
        :type check_existing: bool
        :return: New image data-block
        :param : (type: bpy.types.Image)
        :rtype: Image
        """

    def remove(self, image, do_unlink=True):
        """Remove an image from the current blendfile
        
        :param image: Image to remove
            (type: bpy.types.Image, (never None))
        :type image: Image
        :param do_unlink: Unlink all usages of this image before deleting it
            (type: boolean, (optional))
        :type do_unlink: bool
        """

    def tag(self, value):
        """tag
        
        :param value: Value
        :type value: bool
        """


class BlendDataLamps(bpy_struct):
    """Collection of lamps"""

    is_updated = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    def new(self, name, type):
        """Add a new lamp to the main database
        
        :param name: New name for the data-block
            (type: str, (never None))
        :type name: str
        :param type: Type, The type of texture to add
            * 'POINT': Point, Omnidirectional point light source.
            * 'SUN': Sun, Constant direction parallel ray light source.
            * 'SPOT': Spot, Directional cone light source.
            * 'HEMI': Hemi, 180 degree constant light source.
            * 'AREA': Area, Directional area light source.
            (type: enum in ['POINT', 'SUN', 'SPOT', 'HEMI', 'AREA'])
        :type type: str
        :return: New lamp data-block
        :param : (type: bpy.types.Lamp)
        :rtype: Lamp
        """

    def remove(self, lamp, do_unlink=True):
        """Remove a lamp from the current blendfile
        
        :param lamp: Lamp to remove
            (type: bpy.types.Lamp, (never None))
        :type lamp: Lamp
        :param do_unlink: Unlink all usages of this lamp before deleting it (WARNING: will also delete objects instancing that lamp data)
            (type: boolean, (optional))
        :type do_unlink: bool
        """

    def tag(self, value):
        """tag
        
        :param value: Value
        :type value: bool
        """


class BlendDataLattices(bpy_struct):
    """Collection of lattices"""

    is_updated = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    def new(self, name):
        """Add a new lattice to the main database
        
        :param name: New name for the data-block
            (type: str, (never None))
        :type name: str
        :return: New lattices data-block
        :param : (type: bpy.types.Lattice)
        :rtype: Lattice
        """

    def remove(self, lattice, do_unlink=True):
        """Remove a lattice from the current blendfile
        
        :param lattice: Lattice to remove
            (type: bpy.types.Lattice, (never None))
        :type lattice: Lattice
        :param do_unlink: Unlink all usages of this lattice before deleting it (WARNING: will also delete objects instancing that lattice data)
            (type: boolean, (optional))
        :type do_unlink: bool
        """

    def tag(self, value):
        """tag
        
        :param value: Value
        :type value: bool
        """


class BlendDataLibraries(bpy_struct):
    """Collection of libraries"""

    is_updated = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    def tag(self, value):
        """tag
        
        :param value: Value
        :type value: bool
        """

    def load(self, filepath, link=False, relative=False):
        """Returns a context manager which exposes 2 library objects on entering.
                                    Each object has attributes matching bpy.data which are lists of strings to be linked.
        
        :param filepath: The path to a blend file.
        :type filepath: str
        :param link: When False reference to the original file is lost.
        :type link: bool
        :param relative: When True the path is stored relative to the open blend file.
        :type relative: bool
        """

    def write(self, filepath, datablocks, relative_remap=False, fake_user=False, compress=False):
        """Write data-blocks into a blend file.
        <Note> Indirectly referenced data-blocks will be expanded and written too.
        
        :param filepath: The path to write the blend-file.
        :type filepath: str
        :param datablocks: set of data-blocks (bpy.types.ID instances).
        :type datablocks: set
        :param relative_remap: When True, remap the paths relative to the current blend-file.
        :type relative_remap: bool
        :param fake_user: When True, data-blocks will be written with fake-user flag enabled.
        :type fake_user: bool
        :param compress: When True, write a compressed blend file.
        :type compress: bool
        """


class BlendDataLineStyles(bpy_struct):
    """Collection of line styles"""

    is_updated = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    def tag(self, value):
        """tag
        
        :param value: Value
        :type value: bool
        """

    def new(self, name):
        """Add a new line style instance to the main database
        
        :param name: New name for the data-block
            (type: str, (never None))
        :type name: str
        :return: New line style data-block
        :param : (type: bpy.types.FreestyleLineStyle)
        :rtype: FreestyleLineStyle
        """

    def remove(self, linestyle, do_unlink=True):
        """Remove a line style instance from the current blendfile
        
        :param linestyle: Line style to remove
            (type: bpy.types.FreestyleLineStyle, (never None))
        :type linestyle: FreestyleLineStyle
        :param do_unlink: Unlink all usages of this line style before deleting it
            (type: boolean, (optional))
        :type do_unlink: bool
        """


class BlendDataMasks(bpy_struct):
    """Collection of masks"""

    is_updated = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    def tag(self, value):
        """tag
        
        :param value: Value
        :type value: bool
        """

    def new(self, name=""):
        """Add a new mask with a given name to the main database
        
        :param name: Mask, Name of new mask data-block
            (type: str, (optional, never None))
        :type name: str
        :return: New mask data-block
        :param : (type: bpy.types.Mask)
        :rtype: Mask
        """

    def remove(self, mask, do_unlink=True):
        """Remove a masks from the current blendfile.
        
        :param mask: Mask to remove
            (type: bpy.types.Mask, (never None))
        :type mask: Mask
        :param do_unlink: Unlink all usages of this mask before deleting it
            (type: boolean, (optional))
        :type do_unlink: bool
        """


class BlendDataMaterials(bpy_struct):
    """Collection of materials"""

    is_updated = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    def new(self, name):
        """Add a new material to the main database
        
        :param name: New name for the data-block
            (type: str, (never None))
        :type name: str
        :return: New material data-block
        :param : (type: bpy.types.Material)
        :rtype: Material
        """

    def remove(self, material, do_unlink=True):
        """Remove a material from the current blendfile
        
        :param material: Material to remove
            (type: bpy.types.Material, (never None))
        :type material: Material
        :param do_unlink: Unlink all usages of this material before deleting it
            (type: boolean, (optional))
        :type do_unlink: bool
        """

    def tag(self, value):
        """tag
        
        :param value: Value
        :type value: bool
        """


class BlendDataMeshes(bpy_struct):
    """Collection of meshes"""

    is_updated = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    def new(self, name):
        """Add a new mesh to the main database
        
        :param name: New name for the data-block
            (type: str, (never None))
        :type name: str
        :return: New mesh data-block
        :param : (type: bpy.types.Mesh)
        :rtype: Mesh
        """

    def new_from_object(self, scene, object, apply_modifiers, settings, calc_tessface=True, calc_undeformed=False):
        """Add a new mesh created from object with modifiers applied
        
        :param scene: Scene within which to evaluate modifiers
            (type: bpy.types.Scene, (never None))
        :type scene: Scene
        :param object: Object to create mesh from
            (type: bpy.types.Object, (never None))
        :type object: Object
        :param apply_modifiers: Apply modifiers
        :type apply_modifiers: bool
        :param settings: Modifier settings to apply
            * 'PREVIEW': Preview, Apply modifier preview settings.
            * 'RENDER': Render, Apply modifier render settings.
            (type: enum in ['PREVIEW', 'RENDER'])
        :type settings: str
        :param calc_tessface: Calculate Tessellation, Calculate tessellation faces
            (type: boolean, (optional))
        :type calc_tessface: bool
        :param calc_undeformed: Calculate Undeformed, Calculate undeformed vertex coordinates
            (type: boolean, (optional))
        :type calc_undeformed: bool
        :return: Mesh created from object, remove it if it is only used for export
        :param : (type: bpy.types.Mesh)
        :rtype: Mesh
        """

    def remove(self, mesh, do_unlink=True):
        """Remove a mesh from the current blendfile
        
        :param mesh: Mesh to remove
            (type: bpy.types.Mesh, (never None))
        :type mesh: Mesh
        :param do_unlink: Unlink all usages of this mesh before deleting it (WARNING: will also delete objects instancing that mesh data)
            (type: boolean, (optional))
        :type do_unlink: bool
        """

    def tag(self, value):
        """tag
        
        :param value: Value
        :type value: bool
        """


class BlendDataMetaBalls(bpy_struct):
    """Collection of metaballs"""

    is_updated = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    def new(self, name):
        """Add a new metaball to the main database
        
        :param name: New name for the data-block
            (type: str, (never None))
        :type name: str
        :return: New metaball data-block
        :param : (type: bpy.types.MetaBall)
        :rtype: MetaBall
        """

    def remove(self, metaball, do_unlink=True):
        """Remove a metaball from the current blendfile
        
        :param metaball: Metaball to remove
            (type: bpy.types.MetaBall, (never None))
        :type metaball: MetaBall
        :param do_unlink: Unlink all usages of this metaball before deleting it (WARNING: will also delete objects instancing that metaball data)
            (type: boolean, (optional))
        :type do_unlink: bool
        """

    def tag(self, value):
        """tag
        
        :param value: Value
        :type value: bool
        """


class BlendDataMovieClips(bpy_struct):
    """Collection of movie clips"""

    is_updated = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    def tag(self, value):
        """tag
        
        :param value: Value
        :type value: bool
        """

    def remove(self, clip, do_unlink=True):
        """Remove a movie clip from the current blendfile.
        
        :param clip: Movie clip to remove
            (type: bpy.types.MovieClip, (never None))
        :type clip: MovieClip
        :param do_unlink: Unlink all usages of this movie clip before deleting it
            (type: boolean, (optional))
        :type do_unlink: bool
        """

    def load(self, filepath, check_existing=False):
        """Add a new movie clip to the main database from a file (while check_existing is disabled for consistency with other load functions, behavior with multiple movie-clips using the same file may incorrectly generate proxies)
        
        :param filepath: path for the data-block
            (type: str, (never None))
        :type filepath: str
        :param check_existing: Using existing data-block if this file is already loaded
            (type: boolean, (optional))
        :type check_existing: bool
        :return: New movie clip data-block
        :param : (type: bpy.types.MovieClip)
        :rtype: MovieClip
        """


class BlendDataNodeTrees(bpy_struct):
    """Collection of node trees"""

    is_updated = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    def new(self, name, type):
        """Add a new node tree to the main database
        
        :param name: New name for the data-block
            (type: str, (never None))
        :type name: str
        :param type: Type, The type of node_group to add
            (type: enum in ['DUMMY'])
        :type type: str
        :return: New node tree data-block
        :param : (type: bpy.types.NodeTree)
        :rtype: NodeTree
        """

    def remove(self, tree, do_unlink=True):
        """Remove a node tree from the current blendfile
        
        :param tree: Node tree to remove
            (type: bpy.types.NodeTree, (never None))
        :type tree: NodeTree
        :param do_unlink: Unlink all usages of this node tree before deleting it
            (type: boolean, (optional))
        :type do_unlink: bool
        """

    def tag(self, value):
        """tag
        
        :param value: Value
        :type value: bool
        """


class BlendDataObjects(bpy_struct):
    """Collection of objects"""

    is_updated = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    def new(self, name, object_data):
        """Add a new object to the main database
        
        :param name: New name for the data-block
            (type: str, (never None))
        :type name: str
        :param object_data: Object data or None for an empty object
            (type: bpy.types.ID)
        :type object_data: ID
        :return: New object data-block
        :param : (type: bpy.types.Object)
        :rtype: Object
        """

    def remove(self, object, do_unlink=True):
        """Remove a object from the current blendfile
        
        :param object: Object to remove
            (type: bpy.types.Object, (never None))
        :type object: Object
        :param do_unlink: Unlink all usages of this object before deleting it
            (type: boolean, (optional))
        :type do_unlink: bool
        """

    def tag(self, value):
        """tag
        
        :param value: Value
        :type value: bool
        """


class BlendDataPaintCurves(bpy_struct):
    """Collection of paint curves"""

    is_updated = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    def tag(self, value):
        """tag
        
        :param value: Value
        :type value: bool
        """


class BlendDataPalettes(bpy_struct):
    """Collection of palettes"""

    is_updated = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    def new(self, name):
        """Add a new palette to the main database
        
        :param name: New name for the data-block
            (type: str, (never None))
        :type name: str
        :return: New palette data-block
        :param : (type: bpy.types.Palette)
        :rtype: Palette
        """

    def remove(self, palette, do_unlink=True):
        """Remove a palette from the current blendfile
        
        :param palette: Palette to remove
            (type: bpy.types.Palette, (never None))
        :type palette: Palette
        :param do_unlink: Unlink all usages of this palette before deleting it
            (type: boolean, (optional))
        :type do_unlink: bool
        """

    def tag(self, value):
        """tag
        
        :param value: Value
        :type value: bool
        """


class BlendDataParticles(bpy_struct):
    """Collection of particle settings"""

    is_updated = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    def new(self, name):
        """Add a new particle settings instance to the main database
        
        :param name: New name for the data-block
            (type: str, (never None))
        :type name: str
        :return: New particle settings data-block
        :param : (type: bpy.types.ParticleSettings)
        :rtype: ParticleSettings
        """

    def remove(self, particle, do_unlink=True):
        """Remove a particle settings instance from the current blendfile
        
        :param particle: Particle Settings to remove
            (type: bpy.types.ParticleSettings, (never None))
        :type particle: ParticleSettings
        :param do_unlink: Unlink all usages of those particle settings before deleting them
            (type: boolean, (optional))
        :type do_unlink: bool
        """

    def tag(self, value):
        """tag
        
        :param value: Value
        :type value: bool
        """


class BlendDataScenes(bpy_struct):
    """Collection of scenes"""

    is_updated = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    def new(self, name):
        """Add a new scene to the main database
        
        :param name: New name for the data-block
            (type: str, (never None))
        :type name: str
        :return: New scene data-block
        :param : (type: bpy.types.Scene)
        :rtype: Scene
        """

    def remove(self, scene, do_unlink=True):
        """Remove a scene from the current blendfile
        
        :param scene: Scene to remove
            (type: bpy.types.Scene, (never None))
        :type scene: Scene
        :param do_unlink: Unlink all usages of this scene before deleting it
            (type: boolean, (optional))
        :type do_unlink: bool
        """

    def tag(self, value):
        """tag
        
        :param value: Value
        :type value: bool
        """


class BlendDataScreens(bpy_struct):
    """Collection of screens"""

    is_updated = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    def tag(self, value):
        """tag
        
        :param value: Value
        :type value: bool
        """


class BlendDataSounds(bpy_struct):
    """Collection of sounds"""

    is_updated = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    def load(self, filepath, check_existing=False):
        """Add a new sound to the main database from a file
        
        :param filepath: path for the data-block
            (type: str, (never None))
        :type filepath: str
        :param check_existing: Using existing data-block if this file is already loaded
            (type: boolean, (optional))
        :type check_existing: bool
        :return: New text data-block
        :param : (type: bpy.types.Sound)
        :rtype: Sound
        """

    def remove(self, sound, do_unlink=True):
        """Remove a sound from the current blendfile
        
        :param sound: Sound to remove
            (type: bpy.types.Sound, (never None))
        :type sound: Sound
        :param do_unlink: Unlink all usages of this sound before deleting it
            (type: boolean, (optional))
        :type do_unlink: bool
        """

    def tag(self, value):
        """tag
        
        :param value: Value
        :type value: bool
        """


class BlendDataSpeakers(bpy_struct):
    """Collection of speakers"""

    is_updated = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    def new(self, name):
        """Add a new speaker to the main database
        
        :param name: New name for the data-block
            (type: str, (never None))
        :type name: str
        :return: New speaker data-block
        :param : (type: bpy.types.Speaker)
        :rtype: Speaker
        """

    def remove(self, speaker, do_unlink=True):
        """Remove a speaker from the current blendfile
        
        :param speaker: Speaker to remove
            (type: bpy.types.Speaker, (never None))
        :type speaker: Speaker
        :param do_unlink: Unlink all usages of this speaker before deleting it (WARNING: will also delete objects instancing that speaker data)
            (type: boolean, (optional))
        :type do_unlink: bool
        """

    def tag(self, value):
        """tag
        
        :param value: Value
        :type value: bool
        """


class BlendDataTexts(bpy_struct):
    """Collection of texts"""

    is_updated = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    def new(self, name):
        """Add a new text to the main database
        
        :param name: New name for the data-block
            (type: str, (never None))
        :type name: str
        :return: New text data-block
        :param : (type: bpy.types.Text)
        :rtype: Text
        """

    def remove(self, text, do_unlink=True):
        """Remove a text from the current blendfile
        
        :param text: Text to remove
            (type: bpy.types.Text, (never None))
        :type text: Text
        :param do_unlink: Unlink all usages of this text before deleting it
            (type: boolean, (optional))
        :type do_unlink: bool
        """

    def load(self, filepath, internal=False):
        """Add a new text to the main database from a file
        
        :param filepath: path for the data-block
            (type: str, (never None))
        :type filepath: str
        :param internal: Make internal, Make text file internal after loading
            (type: boolean, (optional))
        :type internal: bool
        :return: New text data-block
        :param : (type: bpy.types.Text)
        :rtype: Text
        """

    def tag(self, value):
        """tag
        
        :param value: Value
        :type value: bool
        """


class BlendDataTextures(bpy_struct):
    """Collection of groups"""

    is_updated = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    def new(self, name, type):
        """Add a new texture to the main database
        
        :param name: New name for the data-block
            (type: str, (never None))
        :type name: str
        :param type: Type, The type of texture to add
            * 'NONE': None.
            * 'BLEND': Blend, Procedural - create a ramp texture.
            * 'CLOUDS': Clouds, Procedural - create a cloud-like fractal noise texture.
            * 'DISTORTED_NOISE': Distorted Noise, Procedural - noise texture distorted by two noise algorithms.
            * 'ENVIRONMENT_MAP': Environment Map, Create a render of the environment mapped to a texture.
            * 'IMAGE': Image or Movie, Allow for images or movies to be used as textures.
            * 'MAGIC': Magic, Procedural - color texture based on trigonometric functions.
            * 'MARBLE': Marble, Procedural - marble-like noise texture with wave generated bands.
            * 'MUSGRAVE': Musgrave, Procedural - highly flexible fractal noise texture.
            * 'NOISE': Noise, Procedural - random noise, gives a different result every time, for every frame, for every pixel.
            * 'OCEAN': Ocean, Use a texture generated by an Ocean modifier.
            * 'POINT_DENSITY': Point Density.
            * 'STUCCI': Stucci, Procedural - create a fractal noise texture.
            * 'VORONOI': Voronoi, Procedural - create cell-like patterns based on Worley noise.
            * 'VOXEL_DATA': Voxel Data, Create a 3D texture based on volumetric data.
            * 'WOOD': Wood, Procedural - wave generated bands or rings, with optional noise.
            (type: enum in ['NONE', 'BLEND', 'CLOUDS', 'DISTORTED_NOISE', 'ENVIRONMENT_MAP', 'IMAGE', 'MAGIC', 'MARBLE', 'MUSGRAVE', 'NOISE', 'OCEAN', 'POINT_DENSITY', 'STUCCI', 'VORONOI', 'VOXEL_DATA', 'WOOD'])
        :type type: str
        :return: New texture data-block
        :param : (type: bpy.types.Texture)
        :rtype: Texture
        """

    def remove(self, texture, do_unlink=True):
        """Remove a texture from the current blendfile
        
        :param texture: Texture to remove
            (type: bpy.types.Texture, (never None))
        :type texture: Texture
        :param do_unlink: Unlink all usages of this texture before deleting it
            (type: boolean, (optional))
        :type do_unlink: bool
        """

    def tag(self, value):
        """tag
        
        :param value: Value
        :type value: bool
        """


class BlendDataWindowManagers(bpy_struct):
    """Collection of window managers"""

    is_updated = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    def tag(self, value):
        """tag
        
        :param value: Value
        :type value: bool
        """


class BlendDataWorlds(bpy_struct):
    """Collection of worlds"""

    is_updated = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    def new(self, name):
        """Add a new world to the main database
        
        :param name: New name for the data-block
            (type: str, (never None))
        :type name: str
        :return: New world data-block
        :param : (type: bpy.types.World)
        :rtype: World
        """

    def remove(self, world, do_unlink=True):
        """Remove a world from the current blendfile
        
        :param world: World to remove
            (type: bpy.types.World, (never None))
        :type world: World
        :param do_unlink: Unlink all usages of this world before deleting it
            (type: boolean, (optional))
        :type do_unlink: bool
        """

    def tag(self, value):
        """tag
        
        :param value: Value
        :type value: bool
        """


class BlenderRNA(bpy_struct):
    """Blender RNA structure definitions"""

    structs = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.Struct, (readonly))
    
    :type: bpy_prop_collection
    """


class BoidRule(bpy_struct):
    """"""

    name = ""
    """Boid rule name
    (type: string, default "", (never None))
    
    :type: str
    """

    type = 'GOAL'
    """
    * 'GOAL': Goal, Go to assigned object or loudest assigned signal source.
    * 'AVOID': Avoid, Get away from assigned object or loudest assigned signal source.
    * 'AVOID_COLLISION': Avoid Collision, Maneuver to avoid collisions with other boids and deflector objects in near future.
    * 'SEPARATE': Separate, Keep from going through other boids.
    * 'FLOCK': Flock, Move to center of neighbors and match their velocity.
    * 'FOLLOW_LEADER': Follow Leader, Follow a boid or assigned object.
    * 'AVERAGE_SPEED': Average Speed, Maintain speed, flight level or wander.
    * 'FIGHT': Fight, Go to closest enemy and attack when in range.
    (type: enum in ['GOAL', 'AVOID', 'AVOID_COLLISION', 'SEPARATE', 'FLOCK', 'FOLLOW_LEADER', 'AVERAGE_SPEED', 'FIGHT'], default 'GOAL', (readonly))
    
    :type: str
    """

    use_in_air = False
    """Use rule when boid is flying
    (type: boolean, default False)
    
    :type: bool
    """

    use_on_land = False
    """Use rule when boid is on land
    (type: boolean, default False)
    
    :type: bool
    """


class BoidSettings(bpy_struct):
    """Settings for boid physics"""

    accuracy = 0.0
    """Accuracy of attack
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    active_boid_state = None
    """(type: bpy.types.BoidRule, (readonly))
    
    :type: BoidRule
    """

    active_boid_state_index = 0
    """(type: int in [0, inf], default 0)
    
    :type: int
    """

    aggression = 0.0
    """Boid will fight this times stronger enemy
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    air_acc_max = 0.0
    """Maximum acceleration in air (relative to maximum speed)
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    air_ave_max = 0.0
    """Maximum angular velocity in air (relative to 180 degrees)
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    air_personal_space = 0.0
    """Radius of boids personal space in air (% of particle size)
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    air_speed_max = 0.0
    """Maximum speed in air
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    air_speed_min = 0.0
    """Minimum speed in air (relative to maximum speed)
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    bank = 0.0
    """Amount of rotation around velocity vector on turns
    (type: float in [0, 2], default 0.0)
    
    :type: float
    """

    health = 0.0
    """Initial boid health when born
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    height = 0.0
    """Boid height relative to particle size
    (type: float in [0, 2], default 0.0)
    
    :type: float
    """

    land_acc_max = 0.0
    """Maximum acceleration on land (relative to maximum speed)
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    land_ave_max = 0.0
    """Maximum angular velocity on land (relative to 180 degrees)
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    land_jump_speed = 0.0
    """Maximum speed for jumping
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    land_personal_space = 0.0
    """Radius of boids personal space on land (% of particle size)
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    land_smooth = 0.0
    """How smoothly the boids land
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    land_speed_max = 0.0
    """Maximum speed on land
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    land_stick_force = 0.0
    """How strong a force must be to start effecting a boid on land
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """

    pitch = 0.0
    """Amount of rotation around side vector
    (type: float in [0, 2], default 0.0)
    
    :type: float
    """

    range = 0.0
    """Maximum distance from which a boid can attack
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    states = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.BoidState, (readonly))
    
    :type: bpy_prop_collection
    """

    strength = 0.0
    """Maximum caused damage on attack per second
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    use_climb = False
    """Allow boids to climb goal objects
    (type: boolean, default False)
    
    :type: bool
    """

    use_flight = False
    """Allow boids to move in air
    (type: boolean, default False)
    
    :type: bool
    """

    use_land = False
    """Allow boids to move on land
    (type: boolean, default False)
    
    :type: bool
    """


class BoidState(bpy_struct):
    """Boid state for boid physics"""

    active_boid_rule = None
    """(type: bpy.types.BoidRule, (readonly))
    
    :type: BoidRule
    """

    active_boid_rule_index = 0
    """(type: int in [0, inf], default 0)
    
    :type: int
    """

    falloff = 0.0
    """(type: float in [0, 10], default 0.0)
    
    :type: float
    """

    name = ""
    """Boid state name
    (type: string, default "", (never None))
    
    :type: str
    """

    rule_fuzzy = 0.0
    """(type: float in [0, 1], default 0.0)
    
    :type: float
    """

    rules = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.BoidRule, (readonly))
    
    :type: bpy_prop_collection
    """

    ruleset_type = 'FUZZY'
    """How the rules in the list are evaluated
    * 'FUZZY': Fuzzy, Rules are gone through top to bottom (only the first rule which effect is above fuzziness threshold is evaluated).
    * 'RANDOM': Random, A random rule is selected for each boid.
    * 'AVERAGE': Average, All rules are averaged.
    (type: enum in ['FUZZY', 'RANDOM', 'AVERAGE'], default 'FUZZY')
    
    :type: str
    """

    volume = 0.0
    """(type: float in [0, 100], default 0.0)
    
    :type: float
    """


class Bone(bpy_struct):
    """Bone in an Armature data-block"""

    bbone_curveinx = 0.0
    """X-axis handle offset for start of the B-Bone's curve, adjusts curvature
    (type: float in [-5, 5], default 0.0)
    
    :type: float
    """

    bbone_curveiny = 0.0
    """Y-axis handle offset for start of the B-Bone's curve, adjusts curvature
    (type: float in [-5, 5], default 0.0)
    
    :type: float
    """

    bbone_curveoutx = 0.0
    """X-axis handle offset for end of the B-Bone's curve, adjusts curvature
    (type: float in [-5, 5], default 0.0)
    
    :type: float
    """

    bbone_curveouty = 0.0
    """Y-axis handle offset for end of the B-Bone's curve, adjusts curvature
    (type: float in [-5, 5], default 0.0)
    
    :type: float
    """

    bbone_in = 0.0
    """Length of first Bezier Handle (for B-Bones only)
    (type: float in [0, 2], default 0.0)
    
    :type: float
    """

    bbone_out = 0.0
    """Length of second Bezier Handle (for B-Bones only)
    (type: float in [0, 2], default 0.0)
    
    :type: float
    """

    bbone_rollin = 0.0
    """Roll offset for the start of the B-Bone, adjusts twist
    (type: float in [-6.28319, 6.28319], default 0.0)
    
    :type: float
    """

    bbone_rollout = 0.0
    """Roll offset for the end of the B-Bone, adjusts twist
    (type: float in [-6.28319, 6.28319], default 0.0)
    
    :type: float
    """

    bbone_scalein = 1.0
    """Scale factor for start of the B-Bone, adjusts thickness (for tapering effects)
    (type: float in [0, 5], default 1.0)
    
    :type: float
    """

    bbone_scaleout = 1.0
    """Scale factor for end of the B-Bone, adjusts thickness (for tapering effects)
    (type: float in [0, 5], default 1.0)
    
    :type: float
    """

    bbone_segments = 0
    """Number of subdivisions of bone (for B-Bones only)
    (type: int in [1, 32], default 0)
    
    :type: int
    """

    bbone_x = 0.0
    """B-Bone X size
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """

    bbone_z = 0.0
    """B-Bone Z size
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """

    children = None
    """Bones which are children of this bone
    (type: bpy.types.bpy_prop_collection of bpy.types.Bone, (readonly))
    
    :type: bpy_prop_collection
    """

    envelope_distance = 0.0
    """Bone deformation distance (for Envelope deform only)
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """

    envelope_weight = 0.0
    """Bone deformation weight (for Envelope deform only)
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """

    head = (0.0, 0.0, 0.0)
    """Location of head end of the bone relative to its parent
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    head_local = (0.0, 0.0, 0.0)
    """Location of head end of the bone relative to armature
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    head_radius = 0.0
    """Radius of head of bone (for Envelope deform only)
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    hide = False
    """Bone is not visible when it is not in Edit Mode (i.e. in Object or Pose Modes)
    (type: boolean, default False)
    
    :type: bool
    """

    hide_select = False
    """Bone is able to be selected
    (type: boolean, default False)
    
    :type: bool
    """

    layers = (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
    """Layers bone exists in
    (type: boolean array of 32 items, default (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False))
    
    :type: collections.Sequence[bool]
    """

    matrix = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    """3x3 bone matrix
    (type: float array of 9 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Matrix
    """

    matrix_local = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    """4x4 bone matrix relative to armature
    (type: float array of 16 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Matrix
    """

    name = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    parent = None
    """Parent bone (in same Armature)
    (type: bpy.types.Bone, (readonly))
    
    :type: Bone
    """

    select = False
    """(type: boolean, default False)
    
    :type: bool
    """

    select_head = False
    """(type: boolean, default False)
    
    :type: bool
    """

    select_tail = False
    """(type: boolean, default False)
    
    :type: bool
    """

    show_wire = False
    """Bone is always drawn as Wireframe regardless of viewport draw mode (useful for non-obstructive custom bone shapes)
    (type: boolean, default False)
    
    :type: bool
    """

    tail = (0.0, 0.0, 0.0)
    """Location of tail end of the bone
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    tail_local = (0.0, 0.0, 0.0)
    """Location of tail end of the bone relative to armature
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    tail_radius = 0.0
    """Radius of tail of bone (for Envelope deform only)
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    use_connect = False
    """When bone has a parent, bone's head is stuck to the parent's tail
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_cyclic_offset = False
    """When bone doesn't have a parent, it receives cyclic offset effects (Deprecated)
    (type: boolean, default False)
    
    :type: bool
    """

    use_deform = False
    """Enable Bone to deform geometry
    (type: boolean, default False)
    
    :type: bool
    """

    use_endroll_as_inroll = False
    """Use Roll Out of parent bone as Roll In of its children
    (type: boolean, default False)
    
    :type: bool
    """

    use_envelope_multiply = False
    """When deforming bone, multiply effects of Vertex Group weights with Envelope influence
    (type: boolean, default False)
    
    :type: bool
    """

    use_inherit_rotation = False
    """Bone inherits rotation or scale from parent bone
    (type: boolean, default False)
    
    :type: bool
    """

    use_inherit_scale = False
    """Bone inherits scaling from parent bone
    (type: boolean, default False)
    
    :type: bool
    """

    use_local_location = False
    """Bone location is set in local space
    (type: boolean, default False)
    
    :type: bool
    """

    use_relative_parent = False
    """Object children will use relative transform, like deform
    (type: boolean, default False)
    
    :type: bool
    """

    basename = None
    """The name of this bone before any '.' character
                                (readonly)
    """

    center = None
    """The midpoint between the head and the tail.
                                (readonly)
    """

    children = None
    """A list of all the bones children.
                                (readonly)
    """

    children_recursive = None
    """A list of all children from this bone.
                                (readonly)
    """

    children_recursive_basename = None
    """Returns a chain of children with the same base name as this bone.
                                Only direct chains are supported, forks caused by multiple children
                                with matching base names will terminate the function
                                and not be returned.
                                (readonly)
    """

    length = None
    """The distance from head to tail,
                                when set the head is moved to fit the length.
    """

    parent_recursive = None
    """A list of parents, starting with the immediate parent
                                (readonly)
    """

    vector = None
    """The direction this bone is pointing.
                                Utility function for (tail - head)
                                (readonly)
    """

    x_axis = None
    """Vector pointing down the x-axis of the bone.
                                (readonly)
    """

    y_axis = None
    """Vector pointing down the y-axis of the bone.
                                (readonly)
    """

    z_axis = None
    """Vector pointing down the z-axis of the bone.
                                (readonly)
    """

    def evaluate_envelope(self, point):
        """Calculate bone envelope at given point
        
        :param point: Point, Position in 3d space to evaluate
            (type: float array of 3 items in [-inf, inf])
        :type point: collections.Sequence[float]
        :return: Factor, Envelope factor
        :param : (type: float in [-inf, inf])
        :rtype: float
        """

    def parent_index(self, parent_test):
        """The same as 'bone in other_bone.parent_recursive'
                                    but saved generating a list.
        """

    def translate(self, vec):
        """Utility function to add vec to the head and tail of this bone"""


class BoneGroup(bpy_struct):
    """Groups of Pose Channels (Bones)"""

    color_set = 'DEFAULT'
    """Custom color set to use
    (type: enum in ['DEFAULT', 'THEME01', 'THEME02', 'THEME03', 'THEME04', 'THEME05', 'THEME06', 'THEME07', 'THEME08', 'THEME09', 'THEME10', 'THEME11', 'THEME12', 'THEME13', 'THEME14', 'THEME15', 'THEME16', 'THEME17', 'THEME18', 'THEME19', 'THEME20', 'CUSTOM'], default 'DEFAULT')
    
    :type: str
    """

    colors = None
    """Copy of the colors associated with the group's color set
    (type: bpy.types.ThemeBoneColorSet, (readonly, never None))
    
    :type: ThemeBoneColorSet
    """

    is_custom_color_set = False
    """Color set is user-defined instead of a fixed theme color set
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    name = ""
    """(type: string, default "", (never None))
    
    :type: str
    """


class BoneGroups(bpy_struct):
    """Collection of bone groups"""

    active = None
    """Active bone group for this pose
    (type: bpy.types.BoneGroup)
    
    :type: BoneGroup
    """

    active_index = 0
    """Active index in bone groups array
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    def new(self, name="Group"):
        """Add a new bone group to the object
        
        :param name: Name of the new group
            (type: str, (optional, never None))
        :type name: str
        :return: New bone group
        :param : (type: bpy.types.BoneGroup)
        :rtype: BoneGroup
        """

    def remove(self, group):
        """Remove a bone group from this object
        
        :param group: Removed bone group
            (type: bpy.types.BoneGroup, (never None))
        :type group: BoneGroup
        """


class BrushCapabilities(bpy_struct):
    """Read-only indications of which brush operations are supported by the current brush"""

    has_overlay = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    has_random_texture_angle = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    has_smooth_stroke = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    has_spacing = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """


class CameraStereoData(bpy_struct):
    """Stereoscopy settings for a Camera data-block"""

    convergence_distance = 0.0
    """The converge point for the stereo cameras (often the distance between a projector and the projection screen)
    (type: float in [1e-05, inf], default 0.0)
    
    :type: float
    """

    convergence_mode = 'OFFAXIS'
    """
    * 'OFFAXIS': Off-Axis, Off-axis frustums converging in a plane.
    * 'PARALLEL': Parallel, Parallel cameras with no convergence.
    * 'TOE': Toe-in, Rotated cameras, looking at the convergence distance.
    (type: enum in ['OFFAXIS', 'PARALLEL', 'TOE'], default 'OFFAXIS')
    
    :type: str
    """

    interocular_distance = 0.0
    """Set the distance between the eyes - the stereo plane distance / 30 should be fine
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    pivot = 'LEFT'
    """(type: enum in ['LEFT', 'RIGHT', 'CENTER'], default 'LEFT')
    
    :type: str
    """

    pole_merge_angle_from = 0.0
    """Angle at which interocular distance starts to fade to 0
    (type: float in [0, 1.5708], default 0.0)
    
    :type: float
    """

    pole_merge_angle_to = 0.0
    """Angle at which interocular distance is 0
    (type: float in [0, 1.5708], default 0.0)
    
    :type: float
    """

    use_pole_merge = False
    """Fade interocular distance to 0 after the given cutoff angle
    (type: boolean, default False)
    
    :type: bool
    """

    use_spherical_stereo = False
    """Render every pixel rotating the camera around the middle of the interocular distance
    (type: boolean, default False)
    
    :type: bool
    """


class ChannelDriverVariables(bpy_struct):
    """Collection of channel driver Variables"""

    def new(self):
        """Add a new variable for the driver
        
        :return: Newly created Driver Variable
        :param : (type: bpy.types.DriverVariable)
        :rtype: DriverVariable
        """

    def remove(self, variable):
        """Remove an existing variable from the driver
        
        :param variable: Variable to remove from the driver
            (type: bpy.types.DriverVariable, (never None))
        :type variable: DriverVariable
        """


class ChildParticle(bpy_struct):
    """Child particle interpolated from simulated or edited particles"""


class ClothCollisionSettings(bpy_struct):
    """Cloth simulation settings for self collision and collision with other objects"""

    collision_quality = 0
    """How many collision iterations should be done. (higher is better quality but slower)
    (type: int in [1, 32767], default 0)
    
    :type: int
    """

    damping = 1.0
    """Amount of velocity lost on collision
    (type: float in [0, 1], default 1.0)
    
    :type: float
    """

    distance_min = 0.0
    """Minimum distance between collision objects before collision response takes in
    (type: float in [0.001, 1], default 0.0)
    
    :type: float
    """

    distance_repel = 0.005
    """Maximum distance to apply repulsion force, must be greater than minimum distance
    (type: float in [0.001, 10], default 0.005)
    
    :type: float
    """

    friction = 0.0
    """Friction force if a collision happened (higher = less movement)
    (type: float in [0, 80], default 0.0)
    
    :type: float
    """

    group = None
    """Limit colliders to this Group
    (type: bpy.types.Group)
    
    :type: Group
    """

    repel_force = 1.0
    """Repulsion force to apply on cloth when close to colliding
    (type: float in [0, 20], default 1.0)
    
    :type: float
    """

    self_collision_quality = 0
    """How many self collision iterations should be done (higher is better quality but slower)
    (type: int in [1, 32767], default 0)
    
    :type: int
    """

    self_distance_min = 0.0
    """0.5 means no distance at all, 1.0 is maximum distance
    (type: float in [0.5, 1], default 0.0)
    
    :type: float
    """

    self_friction = 0.0
    """Friction/damping with self contact
    (type: float in [0, 80], default 0.0)
    
    :type: float
    """

    use_collision = False
    """Enable collisions with other objects
    (type: boolean, default False)
    
    :type: bool
    """

    use_self_collision = False
    """Enable self collisions
    (type: boolean, default False)
    
    :type: bool
    """

    vertex_group_self_collisions = ""
    """Vertex group to define vertices which are not used during self collisions
    (type: string, default "", (never None))
    
    :type: str
    """


class ClothSettings(bpy_struct):
    """Cloth simulation settings for an object"""

    air_damping = 0.0
    """Air has normally some thickness which slows falling things down
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    bending_damping = 0.0
    """Damping of bending motion
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """

    bending_stiffness = 0.0
    """Wrinkle coefficient (higher = less smaller but more big wrinkles)
    (type: float in [0, 10000], default 0.0)
    
    :type: float
    """

    bending_stiffness_max = 0.0
    """Maximum bending stiffness value
    (type: float in [0, 10000], default 0.0)
    
    :type: float
    """

    collider_friction = 0.0
    """(type: float in [0, 1], default 0.0)
    
    :type: float
    """

    density_strength = 0.0
    """Influence of target density on the simulation
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    density_target = 0.0
    """Maximum density of hair
    (type: float in [0, 10000], default 0.0)
    
    :type: float
    """

    effector_weights = None
    """(type: bpy.types.EffectorWeights, (readonly))
    
    :type: EffectorWeights
    """

    goal_default = 0.0
    """Default Goal (vertex target position) value, when no Vertex Group used
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    goal_friction = 0.0
    """Goal (vertex target position) friction
    (type: float in [0, 50], default 0.0)
    
    :type: float
    """

    goal_max = 0.0
    """Goal maximum, vertex group weights are scaled to match this range
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    goal_min = 0.0
    """Goal minimum, vertex group weights are scaled to match this range
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    goal_spring = 0.0
    """Goal (vertex target position) spring stiffness
    (type: float in [0, 0.999], default 0.0)
    
    :type: float
    """

    gravity = (0.0, 0.0, 0.0)
    """Gravity or external force vector
    (type: float array of 3 items in [-100, 100], default (0.0, 0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    internal_friction = 0.0
    """(type: float in [0, 1], default 0.0)
    
    :type: float
    """

    mass = 0.0
    """Mass of cloth material
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    pin_stiffness = 0.0
    """Pin (vertex target position) spring stiffness
    (type: float in [0, 50], default 0.0)
    
    :type: float
    """

    quality = 0
    """Quality of the simulation in steps per frame (higher is better quality but slower)
    (type: int in [1, inf], default 0)
    
    :type: int
    """

    rest_shape_key = None
    """Shape key to use the rest spring lengths from
    (type: bpy.types.ShapeKey)
    
    :type: ShapeKey
    """

    sewing_force_max = 0.0
    """Maximum sewing force
    (type: float in [0, 10000], default 0.0)
    
    :type: float
    """

    shrink_max = 0.0
    """Max amount to shrink cloth by
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    shrink_min = 0.0
    """Min amount to shrink cloth by
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    spring_damping = 0.0
    """Damping of cloth velocity (higher = more smooth, less jiggling)
    (type: float in [0, 50], default 0.0)
    
    :type: float
    """

    structural_stiffness = 0.0
    """Overall stiffness of structure
    (type: float in [0, 10000], default 0.0)
    
    :type: float
    """

    structural_stiffness_max = 0.0
    """Maximum structural stiffness value
    (type: float in [0, 10000], default 0.0)
    
    :type: float
    """

    time_scale = 0.0
    """Cloth speed is multiplied by this value
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    use_dynamic_mesh = False
    """Make simulation respect deformations in the base mesh
    (type: boolean, default False)
    
    :type: bool
    """

    use_pin_cloth = False
    """Enable pinning of cloth vertices to other objects/positions
    (type: boolean, default False)
    
    :type: bool
    """

    use_sewing_springs = False
    """Pulls loose edges together
    (type: boolean, default False)
    
    :type: bool
    """

    use_stiffness_scale = False
    """If enabled, stiffness can be scaled along a weight painted vertex group
    (type: boolean, default False)
    
    :type: bool
    """

    vel_damping = 0.0
    """Damp velocity to help cloth reach the resting position faster (1.0 = no damping, 0.0 = fully dampened)
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    vertex_group_bending = ""
    """Vertex group for fine control over bending stiffness
    (type: string, default "", (never None))
    
    :type: str
    """

    vertex_group_mass = ""
    """Vertex Group for pinning of vertices
    (type: string, default "", (never None))
    
    :type: str
    """

    vertex_group_shrink = ""
    """Vertex Group for shrinking cloth
    (type: string, default "", (never None))
    
    :type: str
    """

    vertex_group_structural_stiffness = ""
    """Vertex group for fine control over structural stiffness
    (type: string, default "", (never None))
    
    :type: str
    """

    voxel_cell_size = 0.1
    """Size of the voxel grid cells for interaction effects
    (type: float in [0.0001, 10000], default 0.1)
    
    :type: float
    """


class ClothSolverResult(bpy_struct):
    """Result of cloth solver iteration"""

    avg_error = 0.0
    """Average error during substeps
    (type: float in [-inf, inf], default 0.0, (readonly))
    
    :type: float
    """

    avg_iterations = 0.0
    """Average iterations during substeps
    (type: float in [-inf, inf], default 0.0, (readonly))
    
    :type: float
    """

    max_error = 0.0
    """Maximum error during substeps
    (type: float in [-inf, inf], default 0.0, (readonly))
    
    :type: float
    """

    max_iterations = 0
    """Maximum iterations during substeps
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    min_error = 0.0
    """Minimum error during substeps
    (type: float in [-inf, inf], default 0.0, (readonly))
    
    :type: float
    """

    min_iterations = 0
    """Minimum iterations during substeps
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    status = {'SUCCESS'}
    """Status of the solver iteration
    * 'SUCCESS': Success, Computation was successful.
    * 'NUMERICAL_ISSUE': Numerical Issue, The provided data did not satisfy the prerequisites.
    * 'NO_CONVERGENCE': No Convergence, Iterative procedure did not converge.
    * 'INVALID_INPUT': Invalid Input, The inputs are invalid, or the algorithm has been improperly called.
    (type: enum set in {'SUCCESS', 'NUMERICAL_ISSUE', 'NO_CONVERGENCE', 'INVALID_INPUT'}, default {'SUCCESS'}, (readonly))
    
    :type: enum set in {'SUCCESS', 'NUMERICAL_ISSUE', 'NO_CONVERGENCE', 'INVALID_INPUT'}
    """


class CollisionSettings(bpy_struct):
    """Collision settings for object in physics simulation"""

    absorption = 0.0
    """How much of effector force gets lost during collision with this object (in percent)
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    damping = 0.0
    """Amount of damping during collision
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    damping_factor = 0.0
    """Amount of damping during particle collision
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    damping_random = 0.0
    """Random variation of damping
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    friction_factor = 0.0
    """Amount of friction during particle collision
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    friction_random = 0.0
    """Random variation of friction
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    permeability = 0.0
    """Chance that the particle will pass through the mesh
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    stickiness = 0.0
    """Amount of stickiness to surface collision
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    thickness_inner = 0.0
    """Inner face thickness (only used by softbodies)
    (type: float in [0.001, 1], default 0.0)
    
    :type: float
    """

    thickness_outer = 0.0
    """Outer face thickness
    (type: float in [0.001, 1], default 0.0)
    
    :type: float
    """

    use = False
    """Enable this objects as a collider for physics systems
    (type: boolean, default False)
    
    :type: bool
    """

    use_particle_kill = False
    """Kill collided particles
    (type: boolean, default False)
    
    :type: bool
    """


class ColorManagedDisplaySettings(bpy_struct):
    """Color management specific to display device"""

    display_device = 'DEFAULT'
    """Display device name
    (type: enum in ['DEFAULT'], default 'DEFAULT')
    
    :type: str
    """


class ColorManagedInputColorspaceSettings(bpy_struct):
    """Input color space settings"""

    name = 'NONE'
    """Color space of the image or movie on disk
    * 'BT.1886 EOTF': BT.1886 EOTF, BT.1886 recommended display referred Electro-Optical Transfer Function..
    * 'Filmic Log Encoding': Filmic Log Encoding, Log based filmic shaper with 16.5 stops of latitude, and 25 stops of dynamic range..
    * 'Linear': Linear, ITU BT.709 primaries based scene referred linear space..
    * 'Non-Colour Data': Non-Colour Data, Transform to flag data as non-colour, strictly data, and avoid OCIO transforms..
    * 'sRGB EOTF': sRGB EOTF, sRGB specification display referred Electro-Optical Transfer Function..
    (type: enum in ['BT.1886 EOTF', 'Filmic Log Encoding', 'Linear', 'Non-Colour Data', 'sRGB EOTF'], default 'NONE')
    
    :type: str
    """


class ColorManagedSequencerColorspaceSettings(bpy_struct):
    """Input color space settings"""

    name = 'NONE'
    """Color space that the sequencer operates in
    * 'BT.1886 EOTF': BT.1886 EOTF, BT.1886 recommended display referred Electro-Optical Transfer Function..
    * 'Filmic Log Encoding': Filmic Log Encoding, Log based filmic shaper with 16.5 stops of latitude, and 25 stops of dynamic range..
    * 'Linear': Linear, ITU BT.709 primaries based scene referred linear space..
    * 'Non-Colour Data': Non-Colour Data, Transform to flag data as non-colour, strictly data, and avoid OCIO transforms..
    * 'sRGB EOTF': sRGB EOTF, sRGB specification display referred Electro-Optical Transfer Function..
    (type: enum in ['BT.1886 EOTF', 'Filmic Log Encoding', 'Linear', 'Non-Colour Data', 'sRGB EOTF'], default 'NONE')
    
    :type: str
    """


class ColorManagedViewSettings(bpy_struct):
    """Color management settings used for displaying images on the display"""

    curve_mapping = None
    """Color curve mapping applied before display transform
    (type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    exposure = 0.0
    """Exposure (stops) applied before display transform
    (type: float in [-10, 10], default 0.0)
    
    :type: float
    """

    gamma = 1.0
    """Amount of gamma modification applied after display transform
    (type: float in [0, 5], default 1.0)
    
    :type: float
    """

    look = 'NONE'
    """Additional transform applied before view transform for an artistic needs
    * 'NONE': None, Do not modify image in an artistic manner.
    (type: enum in ['NONE'], default 'NONE')
    
    :type: str
    """

    use_curve_mapping = False
    """Use RGB curved for pre-display transformation
    (type: boolean, default False)
    
    :type: bool
    """

    view_transform = 'NONE'
    """View used when converting image to a display space
    * 'NONE': None, Do not perform any color transform on display, use old non-color managed technique for display.
    (type: enum in ['NONE'], default 'NONE')
    
    :type: str
    """


class ColorMapping(bpy_struct):
    """Color mapping settings"""

    blend_color = (0.0, 0.0, 0.0)
    """Blend color to mix with texture output color
    (type: float array of 3 items in [0, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    blend_factor = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    blend_type = 'MIX'
    """Mode used to mix with texture output color
    (type: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'SCREEN', 'OVERLAY', 'DIFFERENCE', 'DIVIDE', 'DARKEN', 'LIGHTEN', 'HUE', 'SATURATION', 'VALUE', 'COLOR', 'SOFT_LIGHT', 'LINEAR_LIGHT'], default 'MIX')
    
    :type: str
    """

    brightness = 0.0
    """Adjust the brightness of the texture
    (type: float in [0, 2], default 0.0)
    
    :type: float
    """

    color_ramp = None
    """(type: bpy.types.ColorRamp, (readonly))
    
    :type: ColorRamp
    """

    contrast = 0.0
    """Adjust the contrast of the texture
    (type: float in [0, 5], default 0.0)
    
    :type: float
    """

    saturation = 0.0
    """Adjust the saturation of colors in the texture
    (type: float in [0, 2], default 0.0)
    
    :type: float
    """

    use_color_ramp = False
    """Toggle color ramp operations
    (type: boolean, default False)
    
    :type: bool
    """


class ColorRamp(bpy_struct):
    """Color ramp mapping a scalar value to a color"""

    color_mode = 'RGB'
    """Set color mode to use for interpolation
    (type: enum in ['RGB', 'HSV', 'HSL'], default 'RGB')
    
    :type: str
    """

    elements = None
    """(type: bpy.types.ColorRampElements bpy.types.bpy_prop_collection of bpy.types.ColorRampElement, (readonly))
    
    :type: ColorRampElements
    """

    hue_interpolation = 'NEAR'
    """Set color interpolation
    (type: enum in ['NEAR', 'FAR', 'CW', 'CCW'], default 'NEAR')
    
    :type: str
    """

    interpolation = 'LINEAR'
    """Set interpolation between color stops
    (type: enum in ['EASE', 'CARDINAL', 'LINEAR', 'B_SPLINE', 'CONSTANT'], default 'LINEAR')
    
    :type: str
    """

    def evaluate(self, position):
        """Evaluate ColorRamp
        
        :param position: Position, Evaluate ColorRamp at position
            (type: float in [0, 1])
        :type position: float
        :return: Color, Color at given position
        :param : (type: float array of 4 items in [-inf, inf])
        :rtype: mathutils.Color
        """


class ColorRampElement(bpy_struct):
    """Element defining a color at a position in the color ramp"""

    alpha = 0.0
    """Set alpha of selected color stop
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    color = (0.0, 0.0, 0.0, 0.0)
    """Set color of selected color stop
    (type: float array of 4 items in [0, inf], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    position = 0.0
    """Set position of selected color stop
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """


class ColorRampElements(bpy_struct):
    """Collection of Color Ramp Elements"""

    def new(self, position):
        """Add element to ColorRamp
        
        :param position: Position, Position to add element
            (type: float in [0, 1])
        :type position: float
        :return: New element
        :param : (type: bpy.types.ColorRampElement)
        :rtype: ColorRampElement
        """

    def remove(self, element):
        """Delete element from ColorRamp
        
        :param element: Element to remove
            (type: bpy.types.ColorRampElement, (never None))
        :type element: ColorRampElement
        """


class CompositorNodeOutputFileFileSlots(bpy_struct):
    """Collection of File Output node slots"""

    def new(self, name):
        """Add a file slot to this node
        
        :param name: Name
            (type: str, (never None))
        :type name: str
        :return: New socket
        :param : (type: bpy.types.NodeSocket)
        :rtype: NodeSocket
        """

    def remove(self, socket):
        """Remove a file slot from this node
        
        :param socket: The socket to remove
            (type: bpy.types.NodeSocket)
        :type socket: NodeSocket
        """

    def clear(self):
        """Remove all file slots from this node"""

    def move(self, from_index, to_index):
        """Move a file slot to another position
        
        :param from_index: From Index, Index of the socket to move
            (type: int in [0, inf])
        :type from_index: int
        :param to_index: To Index, Target index for the socket
            (type: int in [0, inf])
        :type to_index: int
        """


class CompositorNodeOutputFileLayerSlots(bpy_struct):
    """Collection of File Output node slots"""

    def new(self, name):
        """Add a file slot to this node
        
        :param name: Name
            (type: str, (never None))
        :type name: str
        :return: New socket
        :param : (type: bpy.types.NodeSocket)
        :rtype: NodeSocket
        """

    def remove(self, socket):
        """Remove a file slot from this node
        
        :param socket: The socket to remove
            (type: bpy.types.NodeSocket)
        :type socket: NodeSocket
        """

    def clear(self):
        """Remove all file slots from this node"""

    def move(self, from_index, to_index):
        """Move a file slot to another position
        
        :param from_index: From Index, Index of the socket to move
            (type: int in [0, inf])
        :type from_index: int
        :param to_index: To Index, Target index for the socket
            (type: int in [0, inf])
        :type to_index: int
        """


class ConsoleLine(bpy_struct):
    """Input line for the interactive console"""

    body = ""
    """Text in the line
    (type: string, default "", (never None))
    
    :type: str
    """

    current_character = 0
    """(type: int in [-inf, inf], default 0)
    
    :type: int
    """

    type = 'OUTPUT'
    """Console line type when used in scrollback
    (type: enum in ['OUTPUT', 'INPUT', 'INFO', 'ERROR'], default 'OUTPUT')
    
    :type: str
    """


class Constraint(bpy_struct):
    """Constraint modifying the transformation of objects and bones"""

    active = False
    """Constraint is the one being edited
    (type: boolean, default False)
    
    :type: bool
    """

    error_location = 0.0
    """Amount of residual error in Blender space unit for constraints that work on position
    (type: float in [-inf, inf], default 0.0, (readonly))
    
    :type: float
    """

    error_rotation = 0.0
    """Amount of residual error in radians for constraints that work on orientation
    (type: float in [-inf, inf], default 0.0, (readonly))
    
    :type: float
    """

    influence = 0.0
    """Amount of influence constraint will have on the final solution
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    is_proxy_local = False
    """Constraint was added in this proxy instance (i.e. did not belong to source Armature)
    (type: boolean, default False)
    
    :type: bool
    """

    is_valid = False
    """Constraint has valid settings and can be evaluated
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    mute = False
    """Enable/Disable Constraint
    (type: boolean, default False)
    
    :type: bool
    """

    name = ""
    """Constraint name
    (type: string, default "", (never None))
    
    :type: str
    """

    owner_space = 'WORLD'
    """Space that owner is evaluated in
    * 'WORLD': World Space, The constraint is applied relative to the world coordinate system.
    * 'POSE': Pose Space, The constraint is applied in Pose Space, the object transformation is ignored.
    * 'LOCAL_WITH_PARENT': Local With Parent, The constraint is applied relative to the local coordinate system of the object, with the parent transformation added.
    * 'LOCAL': Local Space, The constraint is applied relative to the local coordinate system of the object.
    (type: enum in ['WORLD', 'POSE', 'LOCAL_WITH_PARENT', 'LOCAL'], default 'WORLD')
    
    :type: str
    """

    show_expanded = False
    """Constraint's panel is expanded in UI
    (type: boolean, default False)
    
    :type: bool
    """

    target_space = 'WORLD'
    """Space that target is evaluated in
    * 'WORLD': World Space, The transformation of the target is evaluated relative to the world coordinate system.
    * 'POSE': Pose Space, The transformation of the target is only evaluated in the Pose Space, the target armature object transformation is ignored.
    * 'LOCAL_WITH_PARENT': Local With Parent, The transformation of the target bone is evaluated relative its local coordinate system, with the parent transformation added.
    * 'LOCAL': Local Space, The transformation of the target is evaluated relative to its local coordinate system.
    (type: enum in ['WORLD', 'POSE', 'LOCAL_WITH_PARENT', 'LOCAL'], default 'WORLD')
    
    :type: str
    """

    type = 'CAMERA_SOLVER'
    """
    * 'CAMERA_SOLVER': Camera Solver.
    * 'FOLLOW_TRACK': Follow Track.
    * 'OBJECT_SOLVER': Object Solver.
    * 'COPY_LOCATION': Copy Location, Copy the location of a target (with an optional offset), so that they move together.
    * 'COPY_ROTATION': Copy Rotation, Copy the rotation of a target (with an optional offset), so that they rotate together.
    * 'COPY_SCALE': Copy Scale, Copy the scale factors of a target (with an optional offset), so that they are scaled by the same amount.
    * 'COPY_TRANSFORMS': Copy Transforms, Copy all the transformations of a target, so that they move together.
    * 'LIMIT_DISTANCE': Limit Distance, Restrict movements to within a certain distance of a target (at the time of constraint evaluation only).
    * 'LIMIT_LOCATION': Limit Location, Restrict movement along each axis within given ranges.
    * 'LIMIT_ROTATION': Limit Rotation, Restrict rotation along each axis within given ranges.
    * 'LIMIT_SCALE': Limit Scale, Restrict scaling along each axis with given ranges.
    * 'MAINTAIN_VOLUME': Maintain Volume, Compensate for scaling one axis by applying suitable scaling to the other two axes.
    * 'TRANSFORM': Transformation, Use one transform property from target to control another (or same) property on owner.
    * 'TRANSFORM_CACHE': Transform Cache, Look up the transformation matrix from an external file.
    * 'CLAMP_TO': Clamp To, Restrict movements to lie along a curve by remapping location along curve's longest axis.
    * 'DAMPED_TRACK': Damped Track, Point towards a target by performing the smallest rotation necessary.
    * 'IK': Inverse Kinematics, Control a chain of bones by specifying the endpoint target (Bones only).
    * 'LOCKED_TRACK': Locked Track, Rotate around the specified ('locked') axis to point towards a target.
    * 'SPLINE_IK': Spline IK, Align chain of bones along a curve (Bones only).
    * 'STRETCH_TO': Stretch To, Stretch along Y-Axis to point towards a target.
    * 'TRACK_TO': Track To, Legacy tracking constraint prone to twisting artifacts.
    * 'ACTION': Action, Use transform property of target to look up pose for owner from an Action.
    * 'CHILD_OF': Child Of, Make target the 'detachable' parent of owner.
    * 'FLOOR': Floor, Use position (and optionally rotation) of target to define a 'wall' or 'floor' that the owner can not cross.
    * 'FOLLOW_PATH': Follow Path, Use to animate an object/bone following a path.
    * 'PIVOT': Pivot, Change pivot point for transforms (buggy).
    * 'RIGID_BODY_JOINT': Rigid Body Joint, Use to define a Rigid Body Constraint (for Game Engine use only).
    * 'SCRIPT': Script, Custom constraint(s) written in Python (Not yet implemented).
    * 'SHRINKWRAP': Shrinkwrap, Restrict movements to surface of target mesh.
    (type: enum in ['CAMERA_SOLVER', 'FOLLOW_TRACK', 'OBJECT_SOLVER', 'COPY_LOCATION', 'COPY_ROTATION', 'COPY_SCALE', 'COPY_TRANSFORMS', 'LIMIT_DISTANCE', 'LIMIT_LOCATION', 'LIMIT_ROTATION', 'LIMIT_SCALE', 'MAINTAIN_VOLUME', 'TRANSFORM', 'TRANSFORM_CACHE', 'CLAMP_TO', 'DAMPED_TRACK', 'IK', 'LOCKED_TRACK', 'SPLINE_IK', 'STRETCH_TO', 'TRACK_TO', 'ACTION', 'CHILD_OF', 'FLOOR', 'FOLLOW_PATH', 'PIVOT', 'RIGID_BODY_JOINT', 'SCRIPT', 'SHRINKWRAP'], default 'CAMERA_SOLVER', (readonly))
    
    :type: str
    """


class ConstraintTarget(bpy_struct):
    """Target object for multi-target constraints"""

    depend_object_data = False
    """Owner object depends on target object data
    (type: boolean, default False)
    
    :type: bool
    """

    forward_axis = 'FORWARD_X'
    """Axis that points forward along the path
    (type: enum in ['FORWARD_X', 'FORWARD_Y', 'FORWARD_Z', 'TRACK_NEGATIVE_X', 'TRACK_NEGATIVE_Y', 'TRACK_NEGATIVE_Z'], default 'FORWARD_X')
    
    :type: str
    """

    head_tail = 0.0
    """Target along length of bone: Head=0, Tail=1
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    matrix = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    """Target Matrix
    (type: float array of 16 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (readonly))
    
    :type: mathutils.Matrix
    """

    offset = 0.0
    """Offset from the position corresponding to the time frame
    (type: float in [-500000, 500000], default 0.0)
    
    :type: float
    """

    offset_factor = 0.0
    """Percentage value defining target position along length of curve
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    space = 'WORLD'
    """Space that target is evaluated in
    * 'WORLD': World Space, The transformation of the target is evaluated relative to the world coordinate system.
    * 'POSE': Pose Space, The transformation of the target is only evaluated in the Pose Space, the target armature object transformation is ignored.
    * 'LOCAL_WITH_PARENT': Local With Parent, The transformation of the target bone is evaluated relative its local coordinate system, with the parent transformation added.
    * 'LOCAL': Local Space, The transformation of the target is evaluated relative to its local coordinate system.
    (type: enum in ['WORLD', 'POSE', 'LOCAL_WITH_PARENT', 'LOCAL'], default 'WORLD')
    
    :type: str
    """

    subtarget = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    target = None
    """Target Object
    (type: bpy.types.Object)
    
    :type: Object
    """

    up_axis = 'UP_X'
    """Axis that points upward
    (type: enum in ['UP_X', 'UP_Y', 'UP_Z'], default 'UP_X')
    
    :type: str
    """

    use_curve = False
    """(type: boolean, default False)
    
    :type: bool
    """

    use_curve_follow = False
    """Object will follow the heading and banking of the curve
    (type: boolean, default False)
    
    :type: bool
    """

    use_curve_length = False
    """Consider offset as Blender Unit
    (type: boolean, default False)
    
    :type: bool
    """

    use_curve_radius = False
    """Object is scaled by the curve radius
    (type: boolean, default False)
    
    :type: bool
    """

    use_fixed_location = False
    """Object will stay locked to a single point somewhere along the length of the curve regardless of time
    (type: boolean, default False)
    
    :type: bool
    """


class Context(bpy_struct):
    """Current windowmanager and data context
    
    The context members available depend on the area of blender which is currently being accessed.
    Note that all context values are readonly, but may be modified through the data api or by running operators
    """

    # < Global Context >

    # These properties are avilable in any contexts.

    area = None
    """(type: bpy.types.Area, (readonly))
    
    :type: Area
    """

    blend_data = None
    """(type: bpy.types.BlendData, (readonly))
    
    :type: BlendData
    """

    mode = 'EDIT_MESH'
    """(type: enum in ['EDIT_MESH', 'EDIT_CURVE', 'EDIT_SURFACE', 'EDIT_TEXT', 'EDIT_ARMATURE', 'EDIT_METABALL', 'EDIT_LATTICE', 'POSE', 'SCULPT', 'PAINT_WEIGHT', 'PAINT_VERTEX', 'PAINT_TEXTURE', 'PARTICLE', 'OBJECT'], default 'EDIT_MESH', (readonly))
    
    :type: str
    """

    region = None
    """(type: bpy.types.Region, (readonly))
    
    :type: Region
    """

    region_data = None
    """(type: bpy.types.RegionView3D, (readonly))
    
    :type: RegionView3D
    """

    scene = None
    """(type: bpy.types.Scene, (readonly))
    
    :type: Scene
    """

    screen = None
    """(type: bpy.types.Screen, (readonly))
    
    :type: Screen
    """

    space_data = None
    """(type: bpy.types.Space, (readonly))
    
    :type: Space
    """

    tool_settings = None
    """(type: bpy.types.ToolSettings, (readonly))
    
    :type: ToolSettings
    """

    user_preferences = None
    """(type: bpy.types.UserPreferences, (readonly))
    
    :type: UserPreferences
    """

    window = None
    """(type: bpy.types.Window, (readonly))
    
    :type: Window
    """

    window_manager = None
    """(type: bpy.types.WindowManager, (readonly))
    
    :type: WindowManager
    """

    # < Screen Context >

    scene = None
    """(type: bpy.types.Scene)
    
    :type: Scene
    """

    visible_objects = None
    """(type: sequence of  bpy.types.Object)
    
    :type: sequence of  Object
    """

    visible_bases = None
    """(type: sequence of  bpy.types.ObjectBase)
    
    :type: sequence of  ObjectBase
    """

    selectable_objects = None
    """(type: sequence of  bpy.types.Object)
    
    :type: sequence of  Object
    """

    selectable_bases = None
    """(type: sequence of  bpy.types.ObjectBase)
    
    :type: sequence of  ObjectBase
    """

    selected_objects = None
    """(type: sequence of  bpy.types.Object)
    
    :type: sequence of  Object
    """

    selected_bases = None
    """(type: sequence of  bpy.types.ObjectBase)
    
    :type: sequence of  ObjectBase
    """

    editable_objects = None
    """(type: sequence of  bpy.types.Object)
    
    :type: sequence of  Object
    """

    editable_bases = None
    """(type: sequence of  bpy.types.ObjectBase)
    
    :type: sequence of  ObjectBase
    """

    selected_editable_objects = None
    """(type: sequence of  bpy.types.Object)
    
    :type: sequence of  Object
    """

    selected_editable_bases = None
    """(type: sequence of  bpy.types.ObjectBase)
    
    :type: sequence of  ObjectBase
    """

    visible_bones = None
    """(type: sequence of  bpy.types.EditBone)
    
    :type: sequence of  EditBone
    """

    editable_bones = None
    """(type: sequence of  bpy.types.EditBone)
    
    :type: sequence of  EditBone
    """

    selected_bones = None
    """(type: sequence of  bpy.types.EditBone)
    
    :type: sequence of  EditBone
    """

    selected_editable_bones = None
    """(type: sequence of  bpy.types.EditBone)
    
    :type: sequence of  EditBone
    """

    visible_pose_bones = None
    """(type: sequence of  bpy.types.PoseBone)
    
    :type: sequence of  PoseBone
    """

    selected_pose_bones = None
    """(type: sequence of  bpy.types.PoseBone)
    
    :type: sequence of  PoseBone
    """

    active_bone = None
    """(type: bpy.types.EditBone)
    
    :type: EditBone
    """

    active_pose_bone = None
    """(type: bpy.types.PoseBone)
    
    :type: PoseBone
    """

    active_base = None
    """(type: bpy.types.ObjectBase)
    
    :type: ObjectBase
    """

    active_object = None
    """(type: bpy.types.Object)
    
    :type: Object
    """

    object = None
    """(type: bpy.types.Object)
    
    :type: Object
    """

    edit_object = None
    """(type: bpy.types.Object)
    
    :type: Object
    """

    sculpt_object = None
    """(type: bpy.types.Object)
    
    :type: Object
    """

    vertex_paint_object = None
    """(type: bpy.types.Object)
    
    :type: Object
    """

    weight_paint_object = None
    """(type: bpy.types.Object)
    
    :type: Object
    """

    image_paint_object = None
    """(type: bpy.types.Object)
    
    :type: Object
    """

    particle_edit_object = None
    """(type: bpy.types.Object)
    
    :type: Object
    """

    sequences = None
    """(type: sequence of  bpy.types.Sequence)
    
    :type: sequence of  Sequence
    """

    selected_sequences = None
    """(type: sequence of  bpy.types.Sequence)
    
    :type: sequence of  Sequence
    """

    selected_editable_sequences = None
    """(type: sequence of  bpy.types.Sequence)
    
    :type: sequence of  Sequence
    """

    gpencil_data = None
    """(type: bpy.types.GreasePencel)
    
    :type: GreasePencel
    """

    gpencil_data_owner = None
    """(type: bpy.types.ID)
    
    :type: ID
    """

    visible_gpencil_layers = None
    """(type: sequence of  bpy.types.GPencilLayer)
    
    :type: sequence of  GPencilLayer
    """

    editable_gpencil_layers = None
    """(type: sequence of  bpy.types.GPencilLayer)
    
    :type: sequence of  GPencilLayer
    """

    editable_gpencil_strokes = None
    """(type: sequence of  bpy.types.GPencilStroke)
    
    :type: sequence of  GPencilStroke
    """

    active_gpencil_layer = None
    """(type: sequence of  bpy.types.GPencilLayer)
    
    :type: sequence of  GPencilLayer
    """

    active_gpencil_frame = None
    """(type: sequence of  bpy.types.GreasePencilLayer)
    
    :type: sequence of  GreasePencilLayer
    """

    active_gpencil_palette = None
    """(type: sequence of  bpy.types.GPencilPalette)
    
    :type: sequence of  GPencilPalette
    """

    active_gpencil_palettecolor = None
    """(type: sequence of  bpy.types.GPencilPaletteColor)
    
    :type: sequence of  GPencilPaletteColor
    """

    active_gpencil_brush = None
    """(type: bpy.types.GPencilSculptBrush)
    
    :type: GPencilSculptBrush
    """

    active_operator = None
    """(type: bpy.types.Operator)
    
    :type: Operator
    """

    # < View3D Context >

    selected_objects = None
    """(type: sequence of  bpy.types.Object)
    
    :type: sequence of  Object
    """

    selected_bases = None
    """(type: sequence of  bpy.types.ObjectBase)
    
    :type: sequence of  ObjectBase
    """

    selected_editable_objects = None
    """(type: sequence of  bpy.types.Object)
    
    :type: sequence of  Object
    """

    selected_editable_bases = None
    """(type: sequence of  bpy.types.ObjectBase)
    
    :type: sequence of  ObjectBase
    """

    visible_objects = None
    """(type: sequence of  bpy.types.Object)
    
    :type: sequence of  Object
    """

    visible_bases = None
    """(type: sequence of  bpy.types.ObjectBase)
    
    :type: sequence of  ObjectBase
    """

    selectable_objects = None
    """(type: sequence of  bpy.types.Object)
    
    :type: sequence of  Object
    """

    selectable_bases = None
    """(type: sequence of  bpy.types.ObjectBase)
    
    :type: sequence of  ObjectBase
    """

    active_base = None
    """(type: bpy.types.ObjectBase)
    
    :type: ObjectBase
    """

    active_object = None
    """(type: bpy.types.Object)
    
    :type: Object
    """

    # < Buttons Context >

    texture_slot = None
    """(type: bpy.types.MaterialTextureSlot)
    
    :type: MaterialTextureSlot
    """

    scene = None
    """(type: bpy.types.Scene)
    
    :type: Scene
    """

    world = None
    """(type: bpy.types.World)
    
    :type: World
    """

    object = None
    """(type: bpy.types.Object)
    
    :type: Object
    """

    mesh = None
    """(type: bpy.types.Mesh)
    
    :type: Mesh
    """

    armature = None
    """(type: bpy.types.Armature)
    
    :type: Armature
    """

    lattice = None
    """(type: bpy.types.Lattice)
    
    :type: Lattice
    """

    curve = None
    """(type: bpy.types.Curve)
    
    :type: Curve
    """

    meta_ball = None
    """(type: bpy.types.MetaBall)
    
    :type: MetaBall
    """

    lamp = None
    """(type: bpy.types.Lamp)
    
    :type: Lamp
    """

    speaker = None
    """(type: bpy.types.Speaker)
    
    :type: Speaker
    """

    camera = None
    """(type: bpy.types.Camera)
    
    :type: Camera
    """

    material = None
    """(type: bpy.types.Material)
    
    :type: Material
    """

    material_slot = None
    """(type: bpy.types.MaterialSlot)
    
    :type: MaterialSlot
    """

    texture = None
    """(type: bpy.types.Texture)
    
    :type: Texture
    """

    texture_user = None
    """(type: bpy.types.ID)
    
    :type: ID
    """

    texture_user_property = None
    """(type: bpy.types.Property)
    
    :type: Property
    """

    bone = None
    """(type: bpy.types.Bone)
    
    :type: Bone
    """

    edit_bone = None
    """(type: bpy.types.EditBone)
    
    :type: EditBone
    """

    pose_bone = None
    """(type: bpy.types.PoseBone)
    
    :type: PoseBone
    """

    particle_system = None
    """(type: bpy.types.ParticleSystem)
    
    :type: ParticleSystem
    """

    particle_system_editable = None
    """(type: bpy.types.ParticleSystem)
    
    :type: ParticleSystem
    """

    particle_settings = None
    """(type: bpy.types.ParticleSettings)
    
    :type: ParticleSettings
    """

    cloth = None
    """(type: bpy.types.ClothModifier)
    
    :type: ClothModifier
    """

    soft_body = None
    """(type: bpy.types.SoftBodyModifier)
    
    :type: SoftBodyModifier
    """

    fluid = None
    """(type: bpy.types.FluidSimulationModifier)
    
    :type: FluidSimulationModifier
    """

    smoke = None
    """(type: bpy.types.SmokeModifier)
    
    :type: SmokeModifier
    """

    collision = None
    """(type: bpy.types.CollisionModifier)
    
    :type: CollisionModifier
    """

    brush = None
    """(type: bpy.types.Brush)
    
    :type: Brush
    """

    dynamic_paint = None
    """(type: bpy.types.DynamicPaintModifier)
    
    :type: DynamicPaintModifier
    """

    line_style = None
    """(type: bpy.types.FreestyleLineStyle)
    
    :type: FreestyleLineStyle
    """

    # < Image Context >

    edit_image = None
    """(type: bpy.types.Image)
    
    :type: Image
    """

    edit_mask = None
    """(type: bpy.types.Mask)
    
    :type: Mask
    """

    # < Node Context >

    selected_nodes = None
    """(type: sequence of  bpy.types.Node)
    
    :type: sequence of  Node
    """

    active_node = None
    """(type: bpy.types.Node)
    
    :type: Node
    """

    # < Text Context >

    edit_text = None
    """(type: bpy.types.Text)
    
    :type: Text
    """

    # < Clip Context >

    edit_movieclip = None
    """(type: bpy.types.MovieClip)
    
    :type: MovieClip
    """

    edit_mask = None
    """(type: bpy.types.Mask)
    
    :type: Mask
    """

    # < Sequencer Context >

    edit_mask = None
    """(type: bpy.types.Mask)
    
    :type: Mask
    """

    def copy(self):
        """:rtype: dict"""


class Controller(bpy_struct):
    """Game engine logic brick to process events, connecting sensors to actuators"""

    active = False
    """Set the active state of the controller
    (type: boolean, default False)
    
    :type: bool
    """

    actuators = None
    """The list containing the actuators connected to the controller
    (type: bpy.types.bpy_prop_collection of bpy.types.Actuator, (readonly))
    
    :type: bpy_prop_collection
    """

    name = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    show_expanded = False
    """Set controller expanded in the user interface
    (type: boolean, default False)
    
    :type: bool
    """

    states = 0
    """Set Controller state index (1 to 30)
    (type: int in [1, 30], default 0)
    
    :type: int
    """

    type = 'LOGIC_AND'
    """
    * 'LOGIC_AND': And, Logic And.
    * 'LOGIC_OR': Or, Logic Or.
    * 'LOGIC_NAND': Nand, Logic Nand.
    * 'LOGIC_NOR': Nor, Logic Nor.
    * 'LOGIC_XOR': Xor, Logic Xor.
    * 'LOGIC_XNOR': Xnor, Logic Xnor.
    * 'EXPRESSION': Expression.
    * 'PYTHON': Python.
    (type: enum in ['LOGIC_AND', 'LOGIC_OR', 'LOGIC_NAND', 'LOGIC_NOR', 'LOGIC_XOR', 'LOGIC_XNOR', 'EXPRESSION', 'PYTHON'], default 'LOGIC_AND')
    
    :type: str
    """

    use_priority = False
    """Mark controller for execution before all non-marked controllers (good for startup scripts)
    (type: boolean, default False)
    
    :type: bool
    """

    def link(self, sensor=None, actuator=None):
        """Link the controller with a sensor/actuator
        
        :param sensor: Sensor to link the controller to
            (type: bpy.types.Sensor, (optional))
        :type sensor: Sensor
        :param actuator: Actuator to link the controller to
            (type: bpy.types.Actuator, (optional))
        :type actuator: Actuator
        """

    def unlink(self, sensor=None, actuator=None):
        """Unlink the controller from a sensor/actuator
        
        :param sensor: Sensor to unlink the controller from
            (type: bpy.types.Sensor, (optional))
        :type sensor: Sensor
        :param actuator: Actuator to unlink the controller from
            (type: bpy.types.Actuator, (optional))
        :type actuator: Actuator
        """


class CurveMap(bpy_struct):
    """Curve in a curve mapping"""

    extend = 'HORIZONTAL'
    """Extrapolate the curve or extend it horizontally
    (type: enum in ['HORIZONTAL', 'EXTRAPOLATED'], default 'HORIZONTAL')
    
    :type: str
    """

    points = None
    """(type: bpy.types.CurveMapPoints bpy.types.bpy_prop_collection of bpy.types.CurveMapPoint, (readonly))
    
    :type: CurveMapPoints
    """

    def evaluate(self, position):
        """Evaluate curve at given location
        
        :param position: Position, Position to evaluate curve at
            (type: float in [-inf, inf])
        :type position: float
        :return: Value, Value of curve at given location
        :param : (type: float in [-inf, inf])
        :rtype: float
        """


class CurveMapPoint(bpy_struct):
    """Point of a curve used for a curve mapping"""

    handle_type = 'AUTO'
    """Curve interpolation at this point: Bezier or vector
    (type: enum in ['AUTO', 'AUTO_CLAMPED', 'VECTOR'], default 'AUTO')
    
    :type: str
    """

    location = (0.0, 0.0)
    """X/Y coordinates of the curve point
    (type: float array of 2 items in [-inf, inf], default (0.0, 0.0))
    
    :type: mathutils.Vector
    """

    select = False
    """Selection state of the curve point
    (type: boolean, default False)
    
    :type: bool
    """


class CurveMapPoints(bpy_struct):
    """Collection of Curve Map Points"""

    def new(self, position, value):
        """Add point to CurveMap
        
        :param position: Position, Position to add point
            (type: float in [-inf, inf])
        :type position: float
        :param value: Value, Value of point
            (type: float in [-inf, inf])
        :type value: float
        :return: New point
        :param : (type: bpy.types.CurveMapPoint)
        :rtype: CurveMapPoint
        """

    def remove(self, point):
        """Delete point from CurveMap
        
        :param point: PointElement to remove
            (type: bpy.types.CurveMapPoint, (never None))
        :type point: CurveMapPoint
        """


class CurveMapping(bpy_struct):
    """Curve mapping to map color, vector and scalar values to other values using a user defined curve"""

    black_level = (0.0, 0.0, 0.0)
    """For RGB curves, the color that black is mapped to
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    clip_max_x = 0.0
    """(type: float in [-100, 100], default 0.0)
    
    :type: float
    """

    clip_max_y = 0.0
    """(type: float in [-100, 100], default 0.0)
    
    :type: float
    """

    clip_min_x = 0.0
    """(type: float in [-100, 100], default 0.0)
    
    :type: float
    """

    clip_min_y = 0.0
    """(type: float in [-100, 100], default 0.0)
    
    :type: float
    """

    curves = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.CurveMap, (readonly))
    
    :type: bpy_prop_collection
    """

    use_clip = False
    """Force the curve view to fit a defined boundary
    (type: boolean, default False)
    
    :type: bool
    """

    white_level = (0.0, 0.0, 0.0)
    """For RGB curves, the color that white is mapped to
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    def update(self):
        """Update curve mapping after making changes"""

    def initialize(self):
        """Initialize curve"""


class CurvePaintSettings(bpy_struct):
    """"""

    corner_angle = 0.0
    """Angles above this are considered corners
    (type: float in [0, 3.14159], default 0.0)
    
    :type: float
    """

    curve_type = 'POLY'
    """Type of curve to use for new strokes
    (type: enum in ['POLY', 'BEZIER'], default 'POLY')
    
    :type: str
    """

    depth_mode = 'CURSOR'
    """Method of projecting depth
    (type: enum in ['CURSOR', 'SURFACE'], default 'CURSOR')
    
    :type: str
    """

    error_threshold = 0
    """Allow deviation for a smoother, less precise line
    (type: int in [1, 100], default 0)
    
    :type: int
    """

    fit_method = 'REFIT'
    """Curve fitting method
    * 'REFIT': Refit, Incrementally re-fit the curve (high quality).
    * 'SPLIT': Split, Split the curve until the tolerance is met (fast).
    (type: enum in ['REFIT', 'SPLIT'], default 'REFIT')
    
    :type: str
    """

    radius_max = 0.0
    """Radius to use when the maximum pressure is applied (or when a tablet isn't used)
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    radius_min = 0.0
    """Minimum radius when the minimum pressure is applied (also the minimum when tapering)
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    radius_taper_end = 0.0
    """Taper factor for the radius of each point along the curve
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    radius_taper_start = 0.0
    """Taper factor for the radius of each point along the curve
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    surface_offset = 0.0
    """Offset the stroke from the surface
    (type: float in [-10, 10], default 0.0)
    
    :type: float
    """

    surface_plane = 'NORMAL_VIEW'
    """Plane for projected stroke
    * 'NORMAL_VIEW': Normal/View, Draw perpendicular to the surface.
    * 'NORMAL_SURFACE': Normal/Surface, Draw aligned to the surface.
    * 'VIEW': View, Draw aligned to the viewport.
    (type: enum in ['NORMAL_VIEW', 'NORMAL_SURFACE', 'VIEW'], default 'NORMAL_VIEW')
    
    :type: str
    """

    use_corners_detect = False
    """Detect corners and use non-aligned handles
    (type: boolean, default False)
    
    :type: bool
    """

    use_offset_absolute = False
    """Apply a fixed offset (don't scale by the radius)
    (type: boolean, default False)
    
    :type: bool
    """

    use_pressure_radius = False
    """Map tablet pressure to curve radius
    (type: boolean, default False)
    
    :type: bool
    """

    use_stroke_endpoints = False
    """Use the start of the stroke for the depth
    (type: boolean, default False)
    
    :type: bool
    """


class CurveSplines(bpy_struct):
    """Collection of curve splines"""

    active = None
    """Active curve spline
    (type: bpy.types.Spline)
    
    :type: Spline
    """

    def new(self, type):
        """Add a new spline to the curve
        
        :param type: type for the new spline
            (type: enum in ['POLY', 'BEZIER', 'BSPLINE', 'CARDINAL', 'NURBS'])
        :type type: str
        :return: The newly created spline
        :param : (type: bpy.types.Spline)
        :rtype: Spline
        """

    def remove(self, spline):
        """Remove a spline from a curve
        
        :param spline: The spline to remove
            (type: bpy.types.Spline, (never None))
        :type spline: Spline
        """

    def clear(self):
        """Remove all splines from a curve"""


class Depsgraph(bpy_struct):
    """"""

    def debug_graphviz(self, filename):
        """debug_graphviz
        
        :param filename: File Name, File in which to store graphviz debug output
            (type: str, (never None))
        :type filename: str
        """

    def debug_rebuild(self):
        """debug_rebuild"""

    def debug_stats(self):
        """Report the number of elements in the Dependency Graph"""


class DisplaySafeAreas(bpy_struct):
    """Safe Areas used in 3D view and the VSE"""

    action = (0.1, 0.05)
    """Safe area for general elements
    (type: float array of 2 items in [0, 1], default (0.1, 0.05))
    
    :type: mathutils.Vector
    """

    action_center = (0.15, 0.05)
    """Safe area for general elements in a different aspect ratio
    (type: float array of 2 items in [0, 1], default (0.15, 0.05))
    
    :type: mathutils.Vector
    """

    title = (0.035, 0.035)
    """Safe area for text and graphics
    (type: float array of 2 items in [0, 1], default (0.035, 0.035))
    
    :type: mathutils.Vector
    """

    title_center = (0.175, 0.05)
    """Safe area for text and graphics in a different aspect ratio
    (type: float array of 2 items in [0, 1], default (0.175, 0.05))
    
    :type: mathutils.Vector
    """


class DopeSheet(bpy_struct):
    """Settings for filtering the channels shown in animation editors"""

    filter_fcurve_name = ""
    """F-Curve live filtering string
    (type: string, default "", (never None))
    
    :type: str
    """

    filter_group = None
    """Group that included object should be a member of
    (type: bpy.types.Group)
    
    :type: Group
    """

    filter_text = ""
    """Live filtering string
    (type: string, default "", (never None))
    
    :type: str
    """

    show_armatures = False
    """Include visualization of armature related animation data
    (type: boolean, default False)
    
    :type: bool
    """

    show_cameras = False
    """Include visualization of camera related animation data
    (type: boolean, default False)
    
    :type: bool
    """

    show_curves = False
    """Include visualization of curve related animation data
    (type: boolean, default False)
    
    :type: bool
    """

    show_datablock_filters = False
    """Show options for whether channels related to certain types of data are included
    (type: boolean, default False)
    
    :type: bool
    """

    show_expanded_summary = False
    """Collapse summary when shown, so all other channels get hidden (Dope Sheet editors only)
    (type: boolean, default False)
    
    :type: bool
    """

    show_gpencil = False
    """Include visualization of Grease Pencil related animation data and frames
    (type: boolean, default False)
    
    :type: bool
    """

    show_gpencil_3d_only = False
    """Only show Grease Pencil data-blocks used as part of the active scene
    (type: boolean, default False)
    
    :type: bool
    """

    show_hidden = False
    """Include channels from objects/bone that are not visible
    (type: boolean, default False)
    
    :type: bool
    """

    show_lamps = False
    """Include visualization of lamp related animation data
    (type: boolean, default False)
    
    :type: bool
    """

    show_lattices = False
    """Include visualization of lattice related animation data
    (type: boolean, default False)
    
    :type: bool
    """

    show_linestyles = False
    """Include visualization of Line Style related Animation data
    (type: boolean, default False)
    
    :type: bool
    """

    show_materials = False
    """Include visualization of material related animation data
    (type: boolean, default False)
    
    :type: bool
    """

    show_meshes = False
    """Include visualization of mesh related animation data
    (type: boolean, default False)
    
    :type: bool
    """

    show_metaballs = False
    """Include visualization of metaball related animation data
    (type: boolean, default False)
    
    :type: bool
    """

    show_missing_nla = False
    """Include animation data-blocks with no NLA data (NLA editor only)
    (type: boolean, default False)
    
    :type: bool
    """

    show_modifiers = False
    """Include visualization of animation data related to data-blocks linked to modifiers
    (type: boolean, default False)
    
    :type: bool
    """

    show_nodes = False
    """Include visualization of node related animation data
    (type: boolean, default False)
    
    :type: bool
    """

    show_only_errors = False
    """Only include F-Curves and drivers that are disabled or have errors
    (type: boolean, default False)
    
    :type: bool
    """

    show_only_group_objects = False
    """Only include channels from objects in the specified group
    (type: boolean, default False)
    
    :type: bool
    """

    show_only_matching_fcurves = False
    """Only include F-Curves with names containing search text
    (type: boolean, default False)
    
    :type: bool
    """

    show_only_selected = False
    """Only include channels relating to selected objects and data
    (type: boolean, default False)
    
    :type: bool
    """

    show_particles = False
    """Include visualization of particle related animation data
    (type: boolean, default False)
    
    :type: bool
    """

    show_scenes = False
    """Include visualization of scene related animation data
    (type: boolean, default False)
    
    :type: bool
    """

    show_shapekeys = False
    """Include visualization of shape key related animation data
    (type: boolean, default False)
    
    :type: bool
    """

    show_speakers = False
    """Include visualization of speaker related animation data
    (type: boolean, default False)
    
    :type: bool
    """

    show_summary = False
    """Display an additional 'summary' line (Dope Sheet editors only)
    (type: boolean, default False)
    
    :type: bool
    """

    show_textures = False
    """Include visualization of texture related animation data
    (type: boolean, default False)
    
    :type: bool
    """

    show_transforms = False
    """Include visualization of object-level animation data (mostly transforms)
    (type: boolean, default False)
    
    :type: bool
    """

    show_worlds = False
    """Include visualization of world related animation data
    (type: boolean, default False)
    
    :type: bool
    """

    source = None
    """ID-Block representing source data, usually ID_SCE (i.e. Scene)
    (type: bpy.types.ID, (readonly))
    
    :type: ID
    """

    use_datablock_sort = False
    """Alphabetically sorts data-blocks - mainly objects in the scene (disable to increase viewport speed)
    (type: boolean, default False)
    
    :type: bool
    """

    use_filter_text = False
    """Only include channels with names containing search text
    (type: boolean, default False)
    
    :type: bool
    """

    use_multi_word_filter = False
    """Perform fuzzy/multi-word matching (WARNING: May be slow)
    (type: boolean, default False)
    
    :type: bool
    """


class Driver(bpy_struct):
    """Driver for the value of a setting based on an external value"""

    expression = ""
    """Expression to use for Scripted Expression
    (type: string, default "", (never None))
    
    :type: str
    """

    is_valid = False
    """Driver could not be evaluated in past, so should be skipped
    (type: boolean, default False)
    
    :type: bool
    """

    show_debug_info = False
    """Show intermediate values for the driver calculations to allow debugging of drivers
    (type: boolean, default False)
    
    :type: bool
    """

    type = 'AVERAGE'
    """Driver type
    (type: enum in ['AVERAGE', 'SUM', 'SCRIPTED', 'MIN', 'MAX'], default 'AVERAGE')
    
    :type: str
    """

    use_self = False
    """Include a 'self' variable in the name-space, so drivers can easily reference the data being modified (object, bone, etc...)
    (type: boolean, default False)
    
    :type: bool
    """

    variables = None
    """Properties acting as inputs for this driver
    (type: bpy.types.ChannelDriverVariables bpy.types.bpy_prop_collection of bpy.types.DriverVariable, (readonly))
    
    :type: ChannelDriverVariables
    """


class DriverTarget(bpy_struct):
    """Source of input values for driver variables"""

    bone_target = ""
    """Name of PoseBone to use as target
    (type: string, default "", (never None))
    
    :type: str
    """

    data_path = ""
    """RNA Path (from ID-block) to property used
    (type: string, default "", (never None))
    
    :type: str
    """

    id = None
    """ID-block that the specific property used can be found from (id_type property must be set first)
    (type: bpy.types.ID)
    
    :type: ID
    """

    id_type = 'OBJECT'
    """Type of ID-block that can be used
    (type: enum in ['ACTION', 'ARMATURE', 'BRUSH', 'CAMERA', 'CACHEFILE', 'CURVE', 'FONT', 'GREASEPENCIL', 'GROUP', 'IMAGE', 'KEY', 'LAMP', 'LIBRARY', 'LINESTYLE', 'LATTICE', 'MASK', 'MATERIAL', 'META', 'MESH', 'MOVIECLIP', 'NODETREE', 'OBJECT', 'PAINTCURVE', 'PALETTE', 'PARTICLE', 'SCENE', 'SCREEN', 'SOUND', 'SPEAKER', 'TEXT', 'TEXTURE', 'WINDOWMANAGER', 'WORLD'], default 'OBJECT')
    
    :type: str
    """

    transform_space = 'WORLD_SPACE'
    """Space in which transforms are used
    * 'WORLD_SPACE': World Space, Transforms include effects of parenting/restpose and constraints.
    * 'TRANSFORM_SPACE': Transform Space, Transforms don't include parenting/restpose or constraints.
    * 'LOCAL_SPACE': Local Space, Transforms include effects of constraints but not parenting/restpose.
    (type: enum in ['WORLD_SPACE', 'TRANSFORM_SPACE', 'LOCAL_SPACE'], default 'WORLD_SPACE')
    
    :type: str
    """

    transform_type = 'LOC_X'
    """Driver variable type
    (type: enum in ['LOC_X', 'LOC_Y', 'LOC_Z', 'ROT_X', 'ROT_Y', 'ROT_Z', 'SCALE_X', 'SCALE_Y', 'SCALE_Z'], default 'LOC_X')
    
    :type: str
    """


class DriverVariable(bpy_struct):
    """Variable from some source/target for driver relationship"""

    is_name_valid = False
    """Is this a valid name for a driver variable
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    name = ""
    """Name to use in scripted expressions/functions (no spaces or dots are allowed, and must start with a letter)
    (type: string, default "", (never None))
    
    :type: str
    """

    targets = None
    """Sources of input data for evaluating this variable
    (type: bpy.types.bpy_prop_collection of bpy.types.DriverTarget, (readonly))
    
    :type: bpy_prop_collection
    """

    type = 'SINGLE_PROP'
    """Driver variable type
    * 'SINGLE_PROP': Single Property, Use the value from some RNA property (Default).
    * 'TRANSFORMS': Transform Channel, Final transformation value of object or bone.
    * 'ROTATION_DIFF': Rotational Difference, Use the angle between two bones.
    * 'LOC_DIFF': Distance, Distance between two bones or objects.
    (type: enum in ['SINGLE_PROP', 'TRANSFORMS', 'ROTATION_DIFF', 'LOC_DIFF'], default 'SINGLE_PROP')
    
    :type: str
    """


class DupliObject(bpy_struct):
    """An object duplicate"""

    hide = False
    """Don't show dupli object in viewport or render
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    index = 0
    """Index in the lowest-level dupli list
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    matrix = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    """Object duplicate transformation matrix
    (type: float array of 16 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (readonly))
    
    :type: mathutils.Matrix
    """

    object = None
    """Object being duplicated
    (type: bpy.types.Object, (readonly))
    
    :type: Object
    """

    orco = (0.0, 0.0, 0.0)
    """Generated coordinates in parent object space
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0), (readonly))
    
    :type: mathutils.Vector
    """

    particle_system = None
    """Particle system that this dupli object was instanced from
    (type: bpy.types.ParticleSystem, (readonly))
    
    :type: ParticleSystem
    """

    persistent_id = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
    """Persistent identifier for inter-frame matching of objects with motion blur
    (type: int array of 16 items in [-inf, inf], default (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (readonly))
    
    :type: collections.Sequence[int]
    """

    type = 'NONE'
    """Duplicator type that generated this dupli object
    * 'NONE': None.
    * 'FRAMES': Frames, Make copy of object for every frame.
    * 'VERTS': Verts, Duplicate child objects on all vertices.
    * 'FACES': Faces, Duplicate child objects on all faces.
    * 'GROUP': Group, Enable group instancing.
    (type: enum in ['NONE', 'FRAMES', 'VERTS', 'FACES', 'GROUP'], default 'NONE', (readonly))
    
    :type: str
    """

    uv = (0.0, 0.0)
    """UV coordinates in parent object space
    (type: float array of 2 items in [-inf, inf], default (0.0, 0.0), (readonly))
    
    :type: collections.Sequence[float]
    """


class DynamicPaintBrushSettings(bpy_struct):
    """Brush settings"""

    invert_proximity = False
    """Proximity falloff is applied inside the volume
    (type: boolean, default False)
    
    :type: bool
    """

    material = None
    """Material to use (if not defined, material linked to the mesh is used)
    (type: bpy.types.Material)
    
    :type: Material
    """

    paint_alpha = 0.0
    """Paint alpha
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    paint_color = (0.0, 0.0, 0.0)
    """Color of the paint
    (type: float array of 3 items in [0, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    paint_distance = 0.0
    """Maximum distance from brush to mesh surface to affect paint
    (type: float in [0, 500], default 0.0)
    
    :type: float
    """

    paint_ramp = None
    """Color ramp used to define proximity falloff
    (type: bpy.types.ColorRamp, (readonly))
    
    :type: ColorRamp
    """

    paint_source = 'VOLUME'
    """(type: enum in ['PARTICLE_SYSTEM', 'POINT', 'DISTANCE', 'VOLUME_DISTANCE', 'VOLUME'], default 'VOLUME')
    
    :type: str
    """

    paint_wetness = 0.0
    """Paint wetness, visible in wetmap (some effects only affect wet paint)
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    particle_system = None
    """The particle system to paint with
    (type: bpy.types.ParticleSystem)
    
    :type: ParticleSystem
    """

    proximity_falloff = 'CONSTANT'
    """Proximity falloff type
    (type: enum in ['SMOOTH', 'CONSTANT', 'RAMP'], default 'CONSTANT')
    
    :type: str
    """

    ray_direction = 'CANVAS'
    """Ray direction to use for projection (if brush object is located in that direction it's painted)
    (type: enum in ['CANVAS', 'BRUSH', 'Z_AXIS'], default 'CANVAS')
    
    :type: str
    """

    smooth_radius = 0.0
    """Smooth falloff added after solid radius
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    smudge_strength = 0.0
    """Smudge effect strength
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    solid_radius = 0.0
    """Radius that will be painted solid
    (type: float in [0.01, 10], default 0.0)
    
    :type: float
    """

    use_absolute_alpha = False
    """Only increase alpha value if paint alpha is higher than existing
    (type: boolean, default False)
    
    :type: bool
    """

    use_material = False
    """Use object material to define color and influence
    (type: boolean, default False)
    
    :type: bool
    """

    use_negative_volume = False
    """Negate influence inside the volume
    (type: boolean, default False)
    
    :type: bool
    """

    use_paint_erase = False
    """Erase / remove paint instead of adding it
    (type: boolean, default False)
    
    :type: bool
    """

    use_particle_radius = False
    """Use radius from particle settings
    (type: boolean, default False)
    
    :type: bool
    """

    use_proximity_project = False
    """Brush is projected to canvas from defined direction within brush proximity
    (type: boolean, default False)
    
    :type: bool
    """

    use_proximity_ramp_alpha = False
    """Only read color ramp alpha
    (type: boolean, default False)
    
    :type: bool
    """

    use_smudge = False
    """Make this brush to smudge existing paint as it moves
    (type: boolean, default False)
    
    :type: bool
    """

    use_velocity_alpha = False
    """Multiply brush influence by velocity color ramp alpha
    (type: boolean, default False)
    
    :type: bool
    """

    use_velocity_color = False
    """Replace brush color by velocity color ramp
    (type: boolean, default False)
    
    :type: bool
    """

    use_velocity_depth = False
    """Multiply brush intersection depth (displace, waves) by velocity ramp alpha
    (type: boolean, default False)
    
    :type: bool
    """

    velocity_max = 0.0
    """Velocity considered as maximum influence (Blender units per frame)
    (type: float in [0.0001, 10], default 0.0)
    
    :type: float
    """

    velocity_ramp = None
    """Color ramp used to define brush velocity effect
    (type: bpy.types.ColorRamp, (readonly))
    
    :type: ColorRamp
    """

    wave_clamp = 0.0
    """Maximum level of surface intersection used to influence waves (use 0.0 to disable)
    (type: float in [0, 50], default 0.0)
    
    :type: float
    """

    wave_factor = 0.0
    """Multiplier for wave influence of this brush
    (type: float in [-2, 2], default 0.0)
    
    :type: float
    """

    wave_type = 'DEPTH'
    """(type: enum in ['CHANGE', 'DEPTH', 'FORCE', 'REFLECT'], default 'DEPTH')
    
    :type: str
    """


class DynamicPaintCanvasSettings(bpy_struct):
    """Dynamic Paint canvas settings"""

    canvas_surfaces = None
    """Paint surface list
    (type: bpy.types.DynamicPaintSurfaces bpy.types.bpy_prop_collection of bpy.types.DynamicPaintSurface, (readonly))
    
    :type: DynamicPaintSurfaces
    """


class DynamicPaintSurface(bpy_struct):
    """A canvas surface layer"""

    brush_group = None
    """Only use brush objects from this group
    (type: bpy.types.Group)
    
    :type: Group
    """

    brush_influence_scale = 0.0
    """Adjust influence brush objects have on this surface
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    brush_radius_scale = 0.0
    """Adjust radius of proximity brushes or particles for this surface
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    color_dry_threshold = 0.0
    """The wetness level when colors start to shift to the background
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    color_spread_speed = 0.0
    """How fast colors get mixed within wet paint
    (type: float in [0, 2], default 0.0)
    
    :type: float
    """

    depth_clamp = 0.0
    """Maximum level of depth intersection in object space (use 0.0 to disable)
    (type: float in [0, 50], default 0.0)
    
    :type: float
    """

    displace_factor = 0.0
    """Strength of displace when applied to the mesh
    (type: float in [-50, 50], default 0.0)
    
    :type: float
    """

    displace_type = 'DISPLACE'
    """(type: enum in ['DISPLACE', 'DEPTH'], default 'DISPLACE')
    
    :type: str
    """

    dissolve_speed = 0
    """Approximately in how many frames should dissolve happen
    (type: int in [1, 10000], default 0)
    
    :type: int
    """

    drip_acceleration = 0.0
    """How much surface acceleration affects dripping
    (type: float in [-200, 200], default 0.0)
    
    :type: float
    """

    drip_velocity = 0.0
    """How much surface velocity affects dripping
    (type: float in [-200, 200], default 0.0)
    
    :type: float
    """

    dry_speed = 0
    """Approximately in how many frames should drying happen
    (type: int in [1, 10000], default 0)
    
    :type: int
    """

    effect_ui = 'SPREAD'
    """(type: enum in ['SPREAD', 'DRIP', 'SHRINK'], default 'SPREAD')
    
    :type: str
    """

    effector_weights = None
    """(type: bpy.types.EffectorWeights, (readonly))
    
    :type: EffectorWeights
    """

    frame_end = 0
    """Simulation end frame
    (type: int in [1, 500000], default 0)
    
    :type: int
    """

    frame_start = 0
    """Simulation start frame
    (type: int in [1, 500000], default 0)
    
    :type: int
    """

    frame_substeps = 0
    """Do extra frames between scene frames to ensure smooth motion
    (type: int in [0, 20], default 0)
    
    :type: int
    """

    image_fileformat = 'PNG'
    """(type: enum in ['PNG', 'OPENEXR'], default 'PNG')
    
    :type: str
    """

    image_output_path = ""
    """Directory to save the textures
    (type: string, default "", (never None))
    
    :type: str
    """

    image_resolution = 0
    """Output image resolution
    (type: int in [16, 4096], default 0)
    
    :type: int
    """

    init_color = (0.0, 0.0, 0.0, 0.0)
    """Initial color of the surface
    (type: float array of 4 items in [0, inf], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    init_color_type = 'NONE'
    """(type: enum in ['NONE', 'COLOR', 'TEXTURE', 'VERTEX_COLOR'], default 'NONE')
    
    :type: str
    """

    init_layername = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    init_texture = None
    """(type: bpy.types.Texture)
    
    :type: Texture
    """

    is_active = False
    """Toggle whether surface is processed or ignored
    (type: boolean, default False)
    
    :type: bool
    """

    is_cache_user = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    name = ""
    """Surface name
    (type: string, default "", (never None))
    
    :type: str
    """

    output_name_a = ""
    """Name used to save output from this surface
    (type: string, default "", (never None))
    
    :type: str
    """

    output_name_b = ""
    """Name used to save output from this surface
    (type: string, default "", (never None))
    
    :type: str
    """

    point_cache = None
    """(type: bpy.types.PointCache, (readonly, never None))
    
    :type: PointCache
    """

    preview_id = 'PAINT'
    """(type: enum in ['PAINT', 'WETMAP'], default 'PAINT')
    
    :type: str
    """

    show_preview = False
    """Display surface preview in 3D-views
    (type: boolean, default False)
    
    :type: bool
    """

    shrink_speed = 0.0
    """How fast shrink effect moves on the canvas surface
    (type: float in [0.001, 10], default 0.0)
    
    :type: float
    """

    spread_speed = 0.0
    """How fast spread effect moves on the canvas surface
    (type: float in [0.001, 10], default 0.0)
    
    :type: float
    """

    surface_format = 'VERTEX'
    """Surface Format
    (type: enum in ['VERTEX', 'IMAGE'], default 'VERTEX')
    
    :type: str
    """

    surface_type = 'PAINT'
    """Surface Type
    (type: enum in ['PAINT'], default 'PAINT')
    
    :type: str
    """

    use_antialiasing = False
    """Use 5x multisampling to smooth paint edges
    (type: boolean, default False)
    
    :type: bool
    """

    use_color_preview = False
    """Whether this surface has some color preview for 3D view
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_dissolve = False
    """Enable to make surface changes disappear over time
    (type: boolean, default False)
    
    :type: bool
    """

    use_dissolve_log = False
    """Use logarithmic dissolve (makes high values to fade faster than low values)
    (type: boolean, default False)
    
    :type: bool
    """

    use_drip = False
    """Process drip effect (drip wet paint to gravity direction)
    (type: boolean, default False)
    
    :type: bool
    """

    use_dry_log = False
    """Use logarithmic drying (makes high values to dry faster than low values)
    (type: boolean, default False)
    
    :type: bool
    """

    use_drying = False
    """Enable to make surface wetness dry over time
    (type: boolean, default False)
    
    :type: bool
    """

    use_incremental_displace = False
    """New displace is added cumulatively on top of existing
    (type: boolean, default False)
    
    :type: bool
    """

    use_output_a = False
    """Save this output layer
    (type: boolean, default False)
    
    :type: bool
    """

    use_output_b = False
    """Save this output layer
    (type: boolean, default False)
    
    :type: bool
    """

    use_premultiply = False
    """Multiply color by alpha (recommended for Blender input)
    (type: boolean, default False)
    
    :type: bool
    """

    use_shrink = False
    """Process shrink effect (shrink paint areas)
    (type: boolean, default False)
    
    :type: bool
    """

    use_spread = False
    """Process spread effect (spread wet paint around surface)
    (type: boolean, default False)
    
    :type: bool
    """

    use_wave_open_border = False
    """Pass waves through mesh edges
    (type: boolean, default False)
    
    :type: bool
    """

    uv_layer = ""
    """UV map name
    (type: string, default "", (never None))
    
    :type: str
    """

    wave_damping = 0.0
    """Wave damping factor
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    wave_smoothness = 0.0
    """Limit maximum steepness of wave slope between simulation points (use higher values for smoother waves at expense of reduced detail)
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    wave_speed = 0.0
    """Wave propagation speed
    (type: float in [0.01, 5], default 0.0)
    
    :type: float
    """

    wave_spring = 0.0
    """Spring force that pulls water level back to zero
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    wave_timescale = 0.0
    """Wave time scaling factor
    (type: float in [0.01, 3], default 0.0)
    
    :type: float
    """

    def output_exists(self, object, index):
        """Checks if surface output layer of given name exists
        
        :param index: Index
            (type: int in [0, 1])
        :type index: int
        :rtype: bool
        """


class DynamicPaintSurfaces(bpy_struct):
    """Collection of Dynamic Paint Canvas surfaces"""

    active = None
    """Active Dynamic Paint surface being displayed
    (type: bpy.types.DynamicPaintSurface, (readonly))
    
    :type: DynamicPaintSurface
    """

    active_index = 0
    """(type: int in [0, inf], default 0)
    
    :type: int
    """


class EditBone(bpy_struct):
    """Editmode bone in an Armature data-block"""

    bbone_curveinx = 0.0
    """X-axis handle offset for start of the B-Bone's curve, adjusts curvature
    (type: float in [-5, 5], default 0.0)
    
    :type: float
    """

    bbone_curveiny = 0.0
    """Y-axis handle offset for start of the B-Bone's curve, adjusts curvature
    (type: float in [-5, 5], default 0.0)
    
    :type: float
    """

    bbone_curveoutx = 0.0
    """X-axis handle offset for end of the B-Bone's curve, adjusts curvature
    (type: float in [-5, 5], default 0.0)
    
    :type: float
    """

    bbone_curveouty = 0.0
    """Y-axis handle offset for end of the B-Bone's curve, adjusts curvature
    (type: float in [-5, 5], default 0.0)
    
    :type: float
    """

    bbone_in = 0.0
    """Length of first Bezier Handle (for B-Bones only)
    (type: float in [0, 2], default 0.0)
    
    :type: float
    """

    bbone_out = 0.0
    """Length of second Bezier Handle (for B-Bones only)
    (type: float in [0, 2], default 0.0)
    
    :type: float
    """

    bbone_rollin = 0.0
    """Roll offset for the start of the B-Bone, adjusts twist
    (type: float in [-6.28319, 6.28319], default 0.0)
    
    :type: float
    """

    bbone_rollout = 0.0
    """Roll offset for the end of the B-Bone, adjusts twist
    (type: float in [-6.28319, 6.28319], default 0.0)
    
    :type: float
    """

    bbone_scalein = 1.0
    """Scale factor for start of the B-Bone, adjusts thickness (for tapering effects)
    (type: float in [0, 5], default 1.0)
    
    :type: float
    """

    bbone_scaleout = 1.0
    """Scale factor for end of the B-Bone, adjusts thickness (for tapering effects)
    (type: float in [0, 5], default 1.0)
    
    :type: float
    """

    bbone_segments = 0
    """Number of subdivisions of bone (for B-Bones only)
    (type: int in [1, 32], default 0)
    
    :type: int
    """

    bbone_x = 0.0
    """B-Bone X size
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """

    bbone_z = 0.0
    """B-Bone Z size
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """

    envelope_distance = 0.0
    """Bone deformation distance (for Envelope deform only)
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """

    envelope_weight = 0.0
    """Bone deformation weight (for Envelope deform only)
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """

    head = (0.0, 0.0, 0.0)
    """Location of head end of the bone
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    head_radius = 0.0
    """Radius of head of bone (for Envelope deform only)
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    hide = False
    """Bone is not visible when in Edit Mode
    (type: boolean, default False)
    
    :type: bool
    """

    hide_select = False
    """Bone is able to be selected
    (type: boolean, default False)
    
    :type: bool
    """

    layers = (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
    """Layers bone exists in
    (type: boolean array of 32 items, default (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False))
    
    :type: collections.Sequence[bool]
    """

    lock = False
    """Bone is not able to be transformed when in Edit Mode
    (type: boolean, default False)
    
    :type: bool
    """

    matrix = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    """Matrix combining loc/rot of the bone (head position, direction and roll), in armature space (WARNING: does not include/support bone's length/size)
    (type: float array of 16 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Matrix
    """

    name = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    parent = None
    """Parent edit bone (in same Armature)
    (type: bpy.types.EditBone)
    
    :type: EditBone
    """

    roll = 0.0
    """Bone rotation around head-tail axis
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    select = False
    """(type: boolean, default False)
    
    :type: bool
    """

    select_head = False
    """(type: boolean, default False)
    
    :type: bool
    """

    select_tail = False
    """(type: boolean, default False)
    
    :type: bool
    """

    show_wire = False
    """Bone is always drawn as Wireframe regardless of viewport draw mode (useful for non-obstructive custom bone shapes)
    (type: boolean, default False)
    
    :type: bool
    """

    tail = (0.0, 0.0, 0.0)
    """Location of tail end of the bone
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    tail_radius = 0.0
    """Radius of tail of bone (for Envelope deform only)
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    use_connect = False
    """When bone has a parent, bone's head is stuck to the parent's tail
    (type: boolean, default False)
    
    :type: bool
    """

    use_cyclic_offset = False
    """When bone doesn't have a parent, it receives cyclic offset effects (Deprecated)
    (type: boolean, default False)
    
    :type: bool
    """

    use_deform = False
    """Enable Bone to deform geometry
    (type: boolean, default False)
    
    :type: bool
    """

    use_endroll_as_inroll = False
    """Use Roll Out of parent bone as Roll In of its children
    (type: boolean, default False)
    
    :type: bool
    """

    use_envelope_multiply = False
    """When deforming bone, multiply effects of Vertex Group weights with Envelope influence
    (type: boolean, default False)
    
    :type: bool
    """

    use_inherit_rotation = False
    """Bone inherits rotation or scale from parent bone
    (type: boolean, default False)
    
    :type: bool
    """

    use_inherit_scale = False
    """Bone inherits scaling from parent bone
    (type: boolean, default False)
    
    :type: bool
    """

    use_local_location = False
    """Bone location is set in local space
    (type: boolean, default False)
    
    :type: bool
    """

    use_relative_parent = False
    """Object children will use relative transform, like deform
    (type: boolean, default False)
    
    :type: bool
    """

    basename = None
    """The name of this bone before any '.' character
                                (readonly)
    """

    center = None
    """The midpoint between the head and the tail.
                                (readonly)
    """

    children = None
    """A list of all the bones children.
                                (readonly)
    """

    children_recursive = None
    """A list of all children from this bone.
                                (readonly)
    """

    children_recursive_basename = None
    """Returns a chain of children with the same base name as this bone.
                                Only direct chains are supported, forks caused by multiple children
                                with matching base names will terminate the function
                                and not be returned.
                                (readonly)
    """

    length = None
    """The distance from head to tail,
                                when set the head is moved to fit the length.
    """

    parent_recursive = None
    """A list of parents, starting with the immediate parent
                                (readonly)
    """

    vector = None
    """The direction this bone is pointing.
                                Utility function for (tail - head)
                                (readonly)
    """

    x_axis = None
    """Vector pointing down the x-axis of the bone.
                                (readonly)
    """

    y_axis = None
    """Vector pointing down the y-axis of the bone.
                                (readonly)
    """

    z_axis = None
    """Vector pointing down the z-axis of the bone.
                                (readonly)
    """

    def align_roll(self, vector):
        """Align the bone to a localspace roll so the Z axis points in the direction of the vector given
        
        :param vector: Vector
            (type: float array of 3 items in [-inf, inf])
        :type vector: mathutils.Vector
        """

    def align_orientation(self, other):
        """Align this bone to another by moving its tail and settings its roll
                                    the length of the other bone is not used.
        """

    def parent_index(self, parent_test):
        """The same as 'bone in other_bone.parent_recursive'
                                    but saved generating a list.
        """

    def transform(self, matrix, scale=True, roll=True):
        """Transform the the bones head, tail, roll and envelope
                                    (when the matrix has a scale component).
        
        :param matrix: 3x3 or 4x4 transformation matrix.
        :type matrix: mathutils.Matrix
        :param scale: Scale the bone envelope by the matrix.
        :type scale: bool
        :param roll: Correct the roll to point in the same relative
                                                            direction to the head and tail.
        :type roll: bool
        """

    def translate(self, vec):
        """Utility function to add vec to the head and tail of this bone"""


class EffectorWeights(bpy_struct):
    """Effector weights for physics simulation"""

    all = 0.0
    """All effector's weight
    (type: float in [-200, 200], default 0.0)
    
    :type: float
    """

    apply_to_hair_growing = False
    """Use force fields when growing hair
    (type: boolean, default False)
    
    :type: bool
    """

    boid = 0.0
    """Boid effector weight
    (type: float in [-200, 200], default 0.0)
    
    :type: float
    """

    charge = 0.0
    """Charge effector weight
    (type: float in [-200, 200], default 0.0)
    
    :type: float
    """

    curve_guide = 0.0
    """Curve guide effector weight
    (type: float in [-200, 200], default 0.0)
    
    :type: float
    """

    drag = 0.0
    """Drag effector weight
    (type: float in [-200, 200], default 0.0)
    
    :type: float
    """

    force = 0.0
    """Force effector weight
    (type: float in [-200, 200], default 0.0)
    
    :type: float
    """

    gravity = 0.0
    """Global gravity weight
    (type: float in [-200, 200], default 0.0)
    
    :type: float
    """

    group = None
    """Limit effectors to this Group
    (type: bpy.types.Group)
    
    :type: Group
    """

    harmonic = 0.0
    """Harmonic effector weight
    (type: float in [-200, 200], default 0.0)
    
    :type: float
    """

    lennardjones = 0.0
    """Lennard-Jones effector weight
    (type: float in [-200, 200], default 0.0)
    
    :type: float
    """

    magnetic = 0.0
    """Magnetic effector weight
    (type: float in [-200, 200], default 0.0)
    
    :type: float
    """

    smokeflow = 0.0
    """Smoke Flow effector weight
    (type: float in [-200, 200], default 0.0)
    
    :type: float
    """

    texture = 0.0
    """Texture effector weight
    (type: float in [-200, 200], default 0.0)
    
    :type: float
    """

    turbulence = 0.0
    """Turbulence effector weight
    (type: float in [-200, 200], default 0.0)
    
    :type: float
    """

    vortex = 0.0
    """Vortex effector weight
    (type: float in [-200, 200], default 0.0)
    
    :type: float
    """

    wind = 0.0
    """Wind effector weight
    (type: float in [-200, 200], default 0.0)
    
    :type: float
    """


class EnumPropertyItem(bpy_struct):
    """Definition of a choice in an RNA enum property"""

    description = ""
    """Description of the item's purpose
    (type: string, default "", (readonly, never None))
    
    :type: str
    """

    icon = 'NONE'
    """Icon of the item
    (type: enum in ['NONE', 'QUESTION', 'ERROR', 'CANCEL', 'TRIA_RIGHT', 'TRIA_DOWN', 'TRIA_LEFT', 'TRIA_UP', 'ARROW_LEFTRIGHT', 'PLUS', 'DISCLOSURE_TRI_DOWN', 'DISCLOSURE_TRI_RIGHT', 'RADIOBUT_OFF', 'RADIOBUT_ON', 'MENU_PANEL', 'BLENDER', 'GRIP', 'DOT', 'COLLAPSEMENU', 'X', 'GO_LEFT', 'PLUG', 'UI', 'NODE', 'NODE_SEL', 'FULLSCREEN', 'SPLITSCREEN', 'RIGHTARROW_THIN', 'BORDERMOVE', 'VIEWZOOM', 'ZOOMIN', 'ZOOMOUT', 'PANEL_CLOSE', 'COPY_ID', 'EYEDROPPER', 'LINK_AREA', 'AUTO', 'CHECKBOX_DEHLT', 'CHECKBOX_HLT', 'UNLOCKED', 'LOCKED', 'UNPINNED', 'PINNED', 'SCREEN_BACK', 'RIGHTARROW', 'DOWNARROW_HLT', 'DOTSUP', 'DOTSDOWN', 'LINK', 'INLINK', 'PLUGIN', 'HELP', 'GHOST_ENABLED', 'COLOR', 'LINKED', 'UNLINKED', 'HAND', 'ZOOM_ALL', 'ZOOM_SELECTED', 'ZOOM_PREVIOUS', 'ZOOM_IN', 'ZOOM_OUT', 'RENDER_REGION', 'BORDER_RECT', 'BORDER_LASSO', 'FREEZE', 'STYLUS_PRESSURE', 'GHOST_DISABLED', 'NEW', 'FILE_TICK', 'QUIT', 'URL', 'RECOVER_LAST', 'FULLSCREEN_ENTER', 'FULLSCREEN_EXIT', 'BLANK1', 'LAMP', 'MATERIAL', 'TEXTURE', 'ANIM', 'WORLD', 'SCENE', 'EDIT', 'GAME', 'RADIO', 'SCRIPT', 'PARTICLES', 'PHYSICS', 'SPEAKER', 'TEXTURE_SHADED', 'VIEW3D', 'IPO', 'OOPS', 'BUTS', 'FILESEL', 'IMAGE_COL', 'INFO', 'SEQUENCE', 'TEXT', 'IMASEL', 'SOUND', 'ACTION', 'NLA', 'SCRIPTWIN', 'TIME', 'NODETREE', 'LOGIC', 'CONSOLE', 'PREFERENCES', 'CLIP', 'ASSET_MANAGER', 'OBJECT_DATAMODE', 'EDITMODE_HLT', 'FACESEL_HLT', 'VPAINT_HLT', 'TPAINT_HLT', 'WPAINT_HLT', 'SCULPTMODE_HLT', 'POSE_HLT', 'PARTICLEMODE', 'LIGHTPAINT', 'SCENE_DATA', 'RENDERLAYERS', 'WORLD_DATA', 'OBJECT_DATA', 'MESH_DATA', 'CURVE_DATA', 'META_DATA', 'LATTICE_DATA', 'LAMP_DATA', 'MATERIAL_DATA', 'TEXTURE_DATA', 'ANIM_DATA', 'CAMERA_DATA', 'PARTICLE_DATA', 'LIBRARY_DATA_DIRECT', 'GROUP', 'ARMATURE_DATA', 'POSE_DATA', 'BONE_DATA', 'CONSTRAINT', 'SHAPEKEY_DATA', 'CONSTRAINT_BONE', 'CAMERA_STEREO', 'PACKAGE', 'UGLYPACKAGE', 'BRUSH_DATA', 'IMAGE_DATA', 'FILE', 'FCURVE', 'FONT_DATA', 'RENDER_RESULT', 'SURFACE_DATA', 'EMPTY_DATA', 'SETTINGS', 'RENDER_ANIMATION', 'RENDER_STILL', 'LIBRARY_DATA_BROKEN', 'BOIDS', 'STRANDS', 'LIBRARY_DATA_INDIRECT', 'GREASEPENCIL', 'LINE_DATA', 'GROUP_BONE', 'GROUP_VERTEX', 'GROUP_VCOL', 'GROUP_UVS', 'RNA', 'RNA_ADD', 'OUTLINER_OB_EMPTY', 'OUTLINER_OB_MESH', 'OUTLINER_OB_CURVE', 'OUTLINER_OB_LATTICE', 'OUTLINER_OB_META', 'OUTLINER_OB_LAMP', 'OUTLINER_OB_CAMERA', 'OUTLINER_OB_ARMATURE', 'OUTLINER_OB_FONT', 'OUTLINER_OB_SURFACE', 'OUTLINER_OB_SPEAKER', 'RESTRICT_COLOR_OFF', 'RESTRICT_COLOR_ON', 'RESTRICT_VIEW_OFF', 'RESTRICT_VIEW_ON', 'RESTRICT_SELECT_OFF', 'RESTRICT_SELECT_ON', 'RESTRICT_RENDER_OFF', 'RESTRICT_RENDER_ON', 'OUTLINER_DATA_EMPTY', 'OUTLINER_DATA_MESH', 'OUTLINER_DATA_CURVE', 'OUTLINER_DATA_LATTICE', 'OUTLINER_DATA_META', 'OUTLINER_DATA_LAMP', 'OUTLINER_DATA_CAMERA', 'OUTLINER_DATA_ARMATURE', 'OUTLINER_DATA_FONT', 'OUTLINER_DATA_SURFACE', 'OUTLINER_DATA_SPEAKER', 'OUTLINER_DATA_POSE', 'MESH_PLANE', 'MESH_CUBE', 'MESH_CIRCLE', 'MESH_UVSPHERE', 'MESH_ICOSPHERE', 'MESH_GRID', 'MESH_MONKEY', 'MESH_CYLINDER', 'MESH_TORUS', 'MESH_CONE', 'MESH_CAPSULE', 'LAMP_POINT', 'LAMP_SUN', 'LAMP_SPOT', 'LAMP_HEMI', 'LAMP_AREA', 'META_EMPTY', 'META_PLANE', 'META_CUBE', 'META_BALL', 'META_ELLIPSOID', 'META_CAPSULE', 'SURFACE_NCURVE', 'SURFACE_NCIRCLE', 'SURFACE_NSURFACE', 'SURFACE_NCYLINDER', 'SURFACE_NSPHERE', 'SURFACE_NTORUS', 'CURVE_BEZCURVE', 'CURVE_BEZCIRCLE', 'CURVE_NCURVE', 'CURVE_NCIRCLE', 'CURVE_PATH', 'COLOR_RED', 'COLOR_GREEN', 'COLOR_BLUE', 'TRIA_RIGHT_BAR', 'TRIA_DOWN_BAR', 'TRIA_LEFT_BAR', 'TRIA_UP_BAR', 'FORCE_FORCE', 'FORCE_WIND', 'FORCE_VORTEX', 'FORCE_MAGNETIC', 'FORCE_HARMONIC', 'FORCE_CHARGE', 'FORCE_LENNARDJONES', 'FORCE_TEXTURE', 'FORCE_CURVE', 'FORCE_BOID', 'FORCE_TURBULENCE', 'FORCE_DRAG', 'FORCE_SMOKEFLOW', 'NODE_INSERT_ON', 'NODE_INSERT_OFF', 'MODIFIER', 'MOD_WAVE', 'MOD_BUILD', 'MOD_DECIM', 'MOD_MIRROR', 'MOD_SOFT', 'MOD_SUBSURF', 'HOOK', 'MOD_PHYSICS', 'MOD_PARTICLES', 'MOD_BOOLEAN', 'MOD_EDGESPLIT', 'MOD_ARRAY', 'MOD_UVPROJECT', 'MOD_DISPLACE', 'MOD_CURVE', 'MOD_LATTICE', 'CONSTRAINT_DATA', 'MOD_ARMATURE', 'MOD_SHRINKWRAP', 'MOD_CAST', 'MOD_MESHDEFORM', 'MOD_BEVEL', 'MOD_SMOOTH', 'MOD_SIMPLEDEFORM', 'MOD_MASK', 'MOD_CLOTH', 'MOD_EXPLODE', 'MOD_FLUIDSIM', 'MOD_MULTIRES', 'MOD_SMOKE', 'MOD_SOLIDIFY', 'MOD_SCREW', 'MOD_VERTEX_WEIGHT', 'MOD_DYNAMICPAINT', 'MOD_REMESH', 'MOD_OCEAN', 'MOD_WARP', 'MOD_SKIN', 'MOD_TRIANGULATE', 'MOD_WIREFRAME', 'MOD_DATA_TRANSFER', 'MOD_NORMALEDIT', 'REC', 'PLAY', 'FF', 'REW', 'PAUSE', 'PREV_KEYFRAME', 'NEXT_KEYFRAME', 'PLAY_AUDIO', 'PLAY_REVERSE', 'PREVIEW_RANGE', 'ACTION_TWEAK', 'PMARKER_ACT', 'PMARKER_SEL', 'PMARKER', 'MARKER_HLT', 'MARKER', 'SPACE2', 'SPACE3', 'KEYINGSET', 'KEY_DEHLT', 'KEY_HLT', 'MUTE_IPO_OFF', 'MUTE_IPO_ON', 'VISIBLE_IPO_OFF', 'VISIBLE_IPO_ON', 'DRIVER', 'SOLO_OFF', 'SOLO_ON', 'FRAME_PREV', 'FRAME_NEXT', 'NLA_PUSHDOWN', 'IPO_CONSTANT', 'IPO_LINEAR', 'IPO_BEZIER', 'IPO_SINE', 'IPO_QUAD', 'IPO_CUBIC', 'IPO_QUART', 'IPO_QUINT', 'IPO_EXPO', 'IPO_CIRC', 'IPO_BOUNCE', 'IPO_ELASTIC', 'IPO_BACK', 'IPO_EASE_IN', 'IPO_EASE_OUT', 'IPO_EASE_IN_OUT', 'NORMALIZE_FCURVES', 'VERTEXSEL', 'EDGESEL', 'FACESEL', 'LOOPSEL', 'ROTATE', 'CURSOR', 'ROTATECOLLECTION', 'ROTATECENTER', 'ROTACTIVE', 'ALIGN', 'SMOOTHCURVE', 'SPHERECURVE', 'ROOTCURVE', 'SHARPCURVE', 'LINCURVE', 'NOCURVE', 'RNDCURVE', 'PROP_OFF', 'PROP_ON', 'PROP_CON', 'SCULPT_DYNTOPO', 'PARTICLE_POINT', 'PARTICLE_TIP', 'PARTICLE_PATH', 'MAN_TRANS', 'MAN_ROT', 'MAN_SCALE', 'MANIPUL', 'SNAP_OFF', 'SNAP_ON', 'SNAP_NORMAL', 'SNAP_GRID', 'SNAP_VERTEX', 'SNAP_EDGE', 'SNAP_FACE', 'SNAP_VOLUME', 'SNAP_INCREMENT', 'STICKY_UVS_LOC', 'STICKY_UVS_DISABLE', 'STICKY_UVS_VERT', 'CLIPUV_DEHLT', 'CLIPUV_HLT', 'SNAP_PEEL_OBJECT', 'GRID', 'PASTEDOWN', 'COPYDOWN', 'PASTEFLIPUP', 'PASTEFLIPDOWN', 'SNAP_SURFACE', 'AUTOMERGE_ON', 'AUTOMERGE_OFF', 'RETOPO', 'UV_VERTEXSEL', 'UV_EDGESEL', 'UV_FACESEL', 'UV_ISLANDSEL', 'UV_SYNC_SELECT', 'BBOX', 'WIRE', 'SOLID', 'SMOOTH', 'POTATO', 'ORTHO', 'LOCKVIEW_OFF', 'LOCKVIEW_ON', 'AXIS_SIDE', 'AXIS_FRONT', 'AXIS_TOP', 'NDOF_DOM', 'NDOF_TURN', 'NDOF_FLY', 'NDOF_TRANS', 'LAYER_USED', 'LAYER_ACTIVE', 'SORTALPHA', 'SORTBYEXT', 'SORTTIME', 'SORTSIZE', 'LONGDISPLAY', 'SHORTDISPLAY', 'GHOST', 'IMGDISPLAY', 'SAVE_AS', 'SAVE_COPY', 'BOOKMARKS', 'FONTPREVIEW', 'FILTER', 'NEWFOLDER', 'OPEN_RECENT', 'FILE_PARENT', 'FILE_REFRESH', 'FILE_FOLDER', 'FILE_BLANK', 'FILE_BLEND', 'FILE_IMAGE', 'FILE_MOVIE', 'FILE_SCRIPT', 'FILE_SOUND', 'FILE_FONT', 'FILE_TEXT', 'RECOVER_AUTO', 'SAVE_PREFS', 'LINK_BLEND', 'APPEND_BLEND', 'IMPORT', 'EXPORT', 'EXTERNAL_DATA', 'LOAD_FACTORY', 'LOOP_BACK', 'LOOP_FORWARDS', 'BACK', 'FORWARD', 'FILE_HIDDEN', 'FILE_BACKUP', 'DISK_DRIVE', 'MATPLANE', 'MATSPHERE', 'MATCUBE', 'MONKEY', 'HAIR', 'ALIASED', 'ANTIALIASED', 'MAT_SPHERE_SKY', 'WORDWRAP_OFF', 'WORDWRAP_ON', 'SYNTAX_OFF', 'SYNTAX_ON', 'LINENUMBERS_OFF', 'LINENUMBERS_ON', 'SCRIPTPLUGINS', 'SEQ_SEQUENCER', 'SEQ_PREVIEW', 'SEQ_LUMA_WAVEFORM', 'SEQ_CHROMA_SCOPE', 'SEQ_HISTOGRAM', 'SEQ_SPLITVIEW', 'IMAGE_RGB', 'IMAGE_RGB_ALPHA', 'IMAGE_ALPHA', 'IMAGE_ZDEPTH', 'IMAGEFILE', 'BRUSH_ADD', 'BRUSH_BLOB', 'BRUSH_BLUR', 'BRUSH_CLAY', 'BRUSH_CLAY_STRIPS', 'BRUSH_CLONE', 'BRUSH_CREASE', 'BRUSH_DARKEN', 'BRUSH_FILL', 'BRUSH_FLATTEN', 'BRUSH_GRAB', 'BRUSH_INFLATE', 'BRUSH_LAYER', 'BRUSH_LIGHTEN', 'BRUSH_MASK', 'BRUSH_MIX', 'BRUSH_MULTIPLY', 'BRUSH_NUDGE', 'BRUSH_PINCH', 'BRUSH_SCRAPE', 'BRUSH_SCULPT_DRAW', 'BRUSH_SMEAR', 'BRUSH_SMOOTH', 'BRUSH_SNAKE_HOOK', 'BRUSH_SOFTEN', 'BRUSH_SUBTRACT', 'BRUSH_TEXDRAW', 'BRUSH_TEXFILL', 'BRUSH_TEXMASK', 'BRUSH_THUMB', 'BRUSH_ROTATE', 'BRUSH_VERTEXDRAW', 'MATCAP_01', 'MATCAP_02', 'MATCAP_03', 'MATCAP_04', 'MATCAP_05', 'MATCAP_06', 'MATCAP_07', 'MATCAP_08', 'MATCAP_09', 'MATCAP_10', 'MATCAP_11', 'MATCAP_12', 'MATCAP_13', 'MATCAP_14', 'MATCAP_15', 'MATCAP_16', 'MATCAP_17', 'MATCAP_18', 'MATCAP_19', 'MATCAP_20', 'MATCAP_21', 'MATCAP_22', 'MATCAP_23', 'MATCAP_24', 'SMALL_TRI_RIGHT_VEC', 'KEYTYPE_KEYFRAME_VEC', 'KEYTYPE_BREAKDOWN_VEC', 'KEYTYPE_EXTREME_VEC', 'KEYTYPE_JITTER_VEC', 'KEYTYPE_MOVING_HOLD_VEC', 'COLORSET_01_VEC', 'COLORSET_02_VEC', 'COLORSET_03_VEC', 'COLORSET_04_VEC', 'COLORSET_05_VEC', 'COLORSET_06_VEC', 'COLORSET_07_VEC', 'COLORSET_08_VEC', 'COLORSET_09_VEC', 'COLORSET_10_VEC', 'COLORSET_11_VEC', 'COLORSET_12_VEC', 'COLORSET_13_VEC', 'COLORSET_14_VEC', 'COLORSET_15_VEC', 'COLORSET_16_VEC', 'COLORSET_17_VEC', 'COLORSET_18_VEC', 'COLORSET_19_VEC', 'COLORSET_20_VEC'], default 'NONE', (readonly))
    
    :type: str
    """

    identifier = ""
    """Unique name used in the code and scripting
    (type: string, default "", (readonly, never None))
    
    :type: str
    """

    name = ""
    """Human readable name
    (type: string, default "", (readonly, never None))
    
    :type: str
    """

    value = 0
    """Value of the item
    (type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """


class EnvironmentMap(bpy_struct):
    """Environment map created by the renderer and cached for subsequent renders"""

    clip_end = 0.0
    """Objects further than this are not visible to map
    (type: float in [0.01, inf], default 0.0)
    
    :type: float
    """

    clip_start = 0.0
    """Objects nearer than this are not visible to map
    (type: float in [0.001, inf], default 0.0)
    
    :type: float
    """

    depth = 0
    """Number of times a map will be rendered recursively (mirror effects)
    (type: int in [0, 5], default 0)
    
    :type: int
    """

    is_valid = False
    """True if this map is ready for use, False if it needs rendering
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    layers_ignore = (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
    """Hide objects on these layers when generating the Environment Map
    (type: boolean array of 20 items, default (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False))
    
    :type: collections.Sequence[bool]
    """

    mapping = 'CUBE'
    """
    * 'CUBE': Cube, Use environment map with six cube sides.
    * 'PLANE': Plane, Only one side is rendered, with Z axis pointing in direction of image.
    (type: enum in ['CUBE', 'PLANE'], default 'CUBE')
    
    :type: str
    """

    resolution = 0
    """Pixel resolution of the rendered environment map
    (type: int in [50, 4096], default 0)
    
    :type: int
    """

    source = 'STATIC'
    """
    * 'STATIC': Static, Calculate environment map only once.
    * 'ANIMATED': Animated, Calculate environment map at each rendering.
    * 'IMAGE_FILE': Image File, Load a saved environment map image from disk.
    (type: enum in ['STATIC', 'ANIMATED', 'IMAGE_FILE'], default 'STATIC')
    
    :type: str
    """

    viewpoint_object = None
    """Object to use as the environment map's viewpoint location
    (type: bpy.types.Object)
    
    :type: Object
    """

    zoom = 0.0
    """(type: float in [0.1, 5], default 0.0)
    
    :type: float
    """

    def clear(self):
        """Discard the environment map and free it from memory"""

    def save(self, filepath, scene=None, layout=(0.0, 0.0, 1.0, 0.0, 2.0, 0.0, 0.0, 1.0, 1.0, 1.0, 2.0, 1.0)):
        """Save the environment map to disc using the scene render settings
        
        :param filepath: File path, Location of the output file
            (type: str, (never None))
        :type filepath: str
        :param scene: Overrides the scene from which image parameters are taken
            (type: bpy.types.Scene, (optional))
        :type scene: Scene
        :param layout: File layout, Flat array describing the X,Y position of each cube face in the output image, where 1 is the size of a face - order is [+Z -Z +Y -X -Y +X] (use -1 to skip a face)
            (type: float array of 12 items in [0, 1000], (optional))
        :type layout: collections.Sequence[float]
        """


class Event(bpy_struct):
    """Window Manager Event"""

    alt = False
    """True when the Alt/Option key is held
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    ascii = ""
    """Single ASCII character for this event
    (type: string, default "", (readonly, never None))
    
    :type: str
    """

    ctrl = False
    """True when the Ctrl key is held
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_tablet = False
    """The pressure of the tablet or 1.0 if no tablet present
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    mouse_prev_x = 0
    """The window relative horizontal location of the mouse
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    mouse_prev_y = 0
    """The window relative vertical location of the mouse
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    mouse_region_x = 0
    """The region relative horizontal location of the mouse
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    mouse_region_y = 0
    """The region relative vertical location of the mouse
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    mouse_x = 0
    """The window relative horizontal location of the mouse
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    mouse_y = 0
    """The window relative vertical location of the mouse
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    oskey = False
    """True when the Cmd key is held
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    pressure = 0.0
    """The pressure of the tablet or 1.0 if no tablet present
    (type: float in [-inf, inf], default 0.0, (readonly))
    
    :type: float
    """

    shift = False
    """True when the Shift key is held
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    tilt = (0.0, 0.0)
    """The pressure of the tablet or zeroes if no tablet present
    (type: float array of 2 items in [-inf, inf], default (0.0, 0.0), (readonly))
    
    :type: collections.Sequence[float]
    """

    type = 'NONE'
    """
    * 'NONE': .
    * 'LEFTMOUSE': Left Mouse, LMB.
    * 'MIDDLEMOUSE': Middle Mouse, MMB.
    * 'RIGHTMOUSE': Right Mouse, RMB.
    * 'BUTTON4MOUSE': Button4 Mouse, MB4.
    * 'BUTTON5MOUSE': Button5 Mouse, MB5.
    * 'BUTTON6MOUSE': Button6 Mouse, MB6.
    * 'BUTTON7MOUSE': Button7 Mouse, MB7.
    * 'BUTTON8MOUSE': Button8 Mouse, MB8.
    * 'BUTTON9MOUSE': Button9 Mouse, MB9.
    * 'BUTTON10MOUSE': Button10 Mouse, MB10.
    * 'BUTTON11MOUSE': Button11 Mouse, MB11.
    * 'BUTTON12MOUSE': Button12 Mouse, MB12.
    * 'BUTTON13MOUSE': Button13 Mouse, MB13.
    * 'BUTTON14MOUSE': Button14 Mouse, MB14.
    * 'BUTTON15MOUSE': Button15 Mouse, MB15.
    * 'BUTTON16MOUSE': Button16 Mouse, MB16.
    * 'BUTTON17MOUSE': Button17 Mouse, MB17.
    * 'ACTIONMOUSE': Action Mouse, MBA.
    * 'SELECTMOUSE': Select Mouse, MBS.
    * 'PEN': Pen.
    * 'ERASER': Eraser.
    * 'MOUSEMOVE': Mouse Move, MsMov.
    * 'INBETWEEN_MOUSEMOVE': In-between Move, MsSubMov.
    * 'TRACKPADPAN': Mouse/Trackpad Pan, MsPan.
    * 'TRACKPADZOOM': Mouse/Trackpad Zoom, MsZoom.
    * 'MOUSEROTATE': Mouse/Trackpad Rotate, MsRot.
    * 'WHEELUPMOUSE': Wheel Up, WhUp.
    * 'WHEELDOWNMOUSE': Wheel Down, WhDown.
    * 'WHEELINMOUSE': Wheel In, WhIn.
    * 'WHEELOUTMOUSE': Wheel Out, WhOut.
    * 'EVT_TWEAK_L': Tweak Left, TwkL.
    * 'EVT_TWEAK_M': Tweak Middle, TwkM.
    * 'EVT_TWEAK_R': Tweak Right, TwkR.
    * 'EVT_TWEAK_A': Tweak Action, TwkA.
    * 'EVT_TWEAK_S': Tweak Select, TwkS.
    * 'A': A.
    * 'B': B.
    * 'C': C.
    * 'D': D.
    * 'E': E.
    * 'F': F.
    * 'G': G.
    * 'H': H.
    * 'I': I.
    * 'J': J.
    * 'K': K.
    * 'L': L.
    * 'M': M.
    * 'N': N.
    * 'O': O.
    * 'P': P.
    * 'Q': Q.
    * 'R': R.
    * 'S': S.
    * 'T': T.
    * 'U': U.
    * 'V': V.
    * 'W': W.
    * 'X': X.
    * 'Y': Y.
    * 'Z': Z.
    * 'ZERO': 0.
    * 'ONE': 1.
    * 'TWO': 2.
    * 'THREE': 3.
    * 'FOUR': 4.
    * 'FIVE': 5.
    * 'SIX': 6.
    * 'SEVEN': 7.
    * 'EIGHT': 8.
    * 'NINE': 9.
    * 'LEFT_CTRL': Left Ctrl, CtrlL.
    * 'LEFT_ALT': Left Alt, AltL.
    * 'LEFT_SHIFT': Left Shift, ShiftL.
    * 'RIGHT_ALT': Right Alt, AltR.
    * 'RIGHT_CTRL': Right Ctrl, CtrlR.
    * 'RIGHT_SHIFT': Right Shift, ShiftR.
    * 'OSKEY': OS Key, Cmd.
    * 'GRLESS': Grless.
    * 'ESC': Esc.
    * 'TAB': Tab.
    * 'RET': Return, Enter.
    * 'SPACE': Spacebar, Space.
    * 'LINE_FEED': Line Feed.
    * 'BACK_SPACE': Back Space, BkSpace.
    * 'DEL': Delete, Del.
    * 'COLON': :.
    * 'SEMI_COLON': ;.
    * 'PERIOD': ..
    * 'COMMA': ,.
    * 'QUOTE': ".
    * 'ACCENT_GRAVE': `.
    * 'MINUS': -.
    * 'PLUS': +.
    * 'SLASH': /.
    * 'BACK_SLASH': \.
    * 'EQUAL': =.
    * 'LEFT_BRACKET': [.
    * 'RIGHT_BRACKET': ].
    * 'ATKEY': @.
    * 'ASCIICIRCUM': ^.
    * 'LEFT_ARROW': Left Arrow, ←.
    * 'DOWN_ARROW': Down Arrow, ↓.
    * 'RIGHT_ARROW': Right Arrow, →.
    * 'UP_ARROW': Up Arrow, ↑.
    * 'NUMPAD_2': Numpad 2, Pad2.
    * 'NUMPAD_4': Numpad 4, Pad4.
    * 'NUMPAD_6': Numpad 6, Pad6.
    * 'NUMPAD_8': Numpad 8, Pad8.
    * 'NUMPAD_1': Numpad 1, Pad1.
    * 'NUMPAD_3': Numpad 3, Pad3.
    * 'NUMPAD_5': Numpad 5, Pad5.
    * 'NUMPAD_7': Numpad 7, Pad7.
    * 'NUMPAD_9': Numpad 9, Pad9.
    * 'NUMPAD_PERIOD': Numpad ., Pad..
    * 'NUMPAD_SLASH': Numpad /, Pad/.
    * 'NUMPAD_ASTERIX': Numpad *, Pad*.
    * 'NUMPAD_0': Numpad 0, Pad0.
    * 'NUMPAD_MINUS': Numpad -, Pad-.
    * 'NUMPAD_ENTER': Numpad Enter, PadEnter.
    * 'NUMPAD_PLUS': Numpad +, Pad+.
    * 'F1': F1.
    * 'F2': F2.
    * 'F3': F3.
    * 'F4': F4.
    * 'F5': F5.
    * 'F6': F6.
    * 'F7': F7.
    * 'F8': F8.
    * 'F9': F9.
    * 'F10': F10.
    * 'F11': F11.
    * 'F12': F12.
    * 'F13': F13.
    * 'F14': F14.
    * 'F15': F15.
    * 'F16': F16.
    * 'F17': F17.
    * 'F18': F18.
    * 'F19': F19.
    * 'PAUSE': Pause.
    * 'INSERT': Insert, Ins.
    * 'HOME': Home.
    * 'PAGE_UP': Page Up, PgUp.
    * 'PAGE_DOWN': Page Down, PgDown.
    * 'END': End.
    * 'HENKAN': Henkan.
    * 'MUHENKAN': Muhenkan.
    * 'KANA': Kana.
    * 'MENU': Menu.
    * 'MEDIA_PLAY': Media Play/Pause, >/||.
    * 'MEDIA_STOP': Media Stop, Stop.
    * 'MEDIA_FIRST': Media First, |<<.
    * 'MEDIA_LAST': Media Last, >>|.
    * 'TEXTINPUT': Text Input, TxtIn.
    * 'WINDOW_DEACTIVATE': Window Deactivate.
    * 'TIMER': Timer, Tmr.
    * 'TIMER0': Timer 0, Tmr0.
    * 'TIMER1': Timer 1, Tmr1.
    * 'TIMER2': Timer 2, Tmr2.
    * 'TIMER_JOBS': Timer Jobs, TmrJob.
    * 'TIMER_AUTOSAVE': Timer Autosave, TmrSave.
    * 'TIMER_REPORT': Timer Report, TmrReport.
    * 'TIMERREGION': Timer Region, TmrReg.
    * 'NDOF_MOTION': NDOF Motion, NdofMov.
    * 'NDOF_BUTTON_MENU': NDOF Menu, NdofMenu.
    * 'NDOF_BUTTON_FIT': NDOF Fit, NdofFit.
    * 'NDOF_BUTTON_TOP': NDOF Top, Ndof↑.
    * 'NDOF_BUTTON_BOTTOM': NDOF Bottom, Ndof↓.
    * 'NDOF_BUTTON_LEFT': NDOF Left, Ndof←.
    * 'NDOF_BUTTON_RIGHT': NDOF Right, Ndof→.
    * 'NDOF_BUTTON_FRONT': NDOF Front, NdofFront.
    * 'NDOF_BUTTON_BACK': NDOF Back, NdofBack.
    * 'NDOF_BUTTON_ISO1': NDOF Isometric 1, NdofIso1.
    * 'NDOF_BUTTON_ISO2': NDOF Isometric 2, NdofIso2.
    * 'NDOF_BUTTON_ROLL_CW': NDOF Roll CW, NdofRCW.
    * 'NDOF_BUTTON_ROLL_CCW': NDOF Roll CCW, NdofRCCW.
    * 'NDOF_BUTTON_SPIN_CW': NDOF Spin CW, NdofSCW.
    * 'NDOF_BUTTON_SPIN_CCW': NDOF Spin CCW, NdofSCCW.
    * 'NDOF_BUTTON_TILT_CW': NDOF Tilt CW, NdofTCW.
    * 'NDOF_BUTTON_TILT_CCW': NDOF Tilt CCW, NdofTCCW.
    * 'NDOF_BUTTON_ROTATE': NDOF Rotate, NdofRot.
    * 'NDOF_BUTTON_PANZOOM': NDOF Pan/Zoom, NdofPanZoom.
    * 'NDOF_BUTTON_DOMINANT': NDOF Dominant, NdofDom.
    * 'NDOF_BUTTON_PLUS': NDOF Plus, Ndof+.
    * 'NDOF_BUTTON_MINUS': NDOF Minus, Ndof-.
    * 'NDOF_BUTTON_ESC': NDOF Esc, NdofEsc.
    * 'NDOF_BUTTON_ALT': NDOF Alt, NdofAlt.
    * 'NDOF_BUTTON_SHIFT': NDOF Shift, NdofShift.
    * 'NDOF_BUTTON_CTRL': NDOF Ctrl, NdofCtrl.
    * 'NDOF_BUTTON_1': NDOF Button 1, NdofB1.
    * 'NDOF_BUTTON_2': NDOF Button 2, NdofB2.
    * 'NDOF_BUTTON_3': NDOF Button 3, NdofB3.
    * 'NDOF_BUTTON_4': NDOF Button 4, NdofB4.
    * 'NDOF_BUTTON_5': NDOF Button 5, NdofB5.
    * 'NDOF_BUTTON_6': NDOF Button 6, NdofB6.
    * 'NDOF_BUTTON_7': NDOF Button 7, NdofB7.
    * 'NDOF_BUTTON_8': NDOF Button 8, NdofB8.
    * 'NDOF_BUTTON_9': NDOF Button 9, NdofB9.
    * 'NDOF_BUTTON_10': NDOF Button 10, NdofB10.
    * 'NDOF_BUTTON_A': NDOF Button A, NdofBA.
    * 'NDOF_BUTTON_B': NDOF Button B, NdofBB.
    * 'NDOF_BUTTON_C': NDOF Button C, NdofBC.
    (type: enum in ['NONE', 'LEFTMOUSE', 'MIDDLEMOUSE', 'RIGHTMOUSE', 'BUTTON4MOUSE', 'BUTTON5MOUSE', 'BUTTON6MOUSE', 'BUTTON7MOUSE', 'BUTTON8MOUSE', 'BUTTON9MOUSE', 'BUTTON10MOUSE', 'BUTTON11MOUSE', 'BUTTON12MOUSE', 'BUTTON13MOUSE', 'BUTTON14MOUSE', 'BUTTON15MOUSE', 'BUTTON16MOUSE', 'BUTTON17MOUSE', 'ACTIONMOUSE', 'SELECTMOUSE', 'PEN', 'ERASER', 'MOUSEMOVE', 'INBETWEEN_MOUSEMOVE', 'TRACKPADPAN', 'TRACKPADZOOM', 'MOUSEROTATE', 'WHEELUPMOUSE', 'WHEELDOWNMOUSE', 'WHEELINMOUSE', 'WHEELOUTMOUSE', 'EVT_TWEAK_L', 'EVT_TWEAK_M', 'EVT_TWEAK_R', 'EVT_TWEAK_A', 'EVT_TWEAK_S', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'ZERO', 'ONE', 'TWO', 'THREE', 'FOUR', 'FIVE', 'SIX', 'SEVEN', 'EIGHT', 'NINE', 'LEFT_CTRL', 'LEFT_ALT', 'LEFT_SHIFT', 'RIGHT_ALT', 'RIGHT_CTRL', 'RIGHT_SHIFT', 'OSKEY', 'GRLESS', 'ESC', 'TAB', 'RET', 'SPACE', 'LINE_FEED', 'BACK_SPACE', 'DEL', 'COLON', 'SEMI_COLON', 'PERIOD', 'COMMA', 'QUOTE', 'ACCENT_GRAVE', 'MINUS', 'PLUS', 'SLASH', 'BACK_SLASH', 'EQUAL', 'LEFT_BRACKET', 'RIGHT_BRACKET', 'ATKEY', 'ASCIICIRCUM', 'LEFT_ARROW', 'DOWN_ARROW', 'RIGHT_ARROW', 'UP_ARROW', 'NUMPAD_2', 'NUMPAD_4', 'NUMPAD_6', 'NUMPAD_8', 'NUMPAD_1', 'NUMPAD_3', 'NUMPAD_5', 'NUMPAD_7', 'NUMPAD_9', 'NUMPAD_PERIOD', 'NUMPAD_SLASH', 'NUMPAD_ASTERIX', 'NUMPAD_0', 'NUMPAD_MINUS', 'NUMPAD_ENTER', 'NUMPAD_PLUS', 'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12', 'F13', 'F14', 'F15', 'F16', 'F17', 'F18', 'F19', 'PAUSE', 'INSERT', 'HOME', 'PAGE_UP', 'PAGE_DOWN', 'END', 'HENKAN', 'MUHENKAN', 'KANA', 'MENU', 'MEDIA_PLAY', 'MEDIA_STOP', 'MEDIA_FIRST', 'MEDIA_LAST', 'TEXTINPUT', 'WINDOW_DEACTIVATE', 'TIMER', 'TIMER0', 'TIMER1', 'TIMER2', 'TIMER_JOBS', 'TIMER_AUTOSAVE', 'TIMER_REPORT', 'TIMERREGION', 'NDOF_MOTION', 'NDOF_BUTTON_MENU', 'NDOF_BUTTON_FIT', 'NDOF_BUTTON_TOP', 'NDOF_BUTTON_BOTTOM', 'NDOF_BUTTON_LEFT', 'NDOF_BUTTON_RIGHT', 'NDOF_BUTTON_FRONT', 'NDOF_BUTTON_BACK', 'NDOF_BUTTON_ISO1', 'NDOF_BUTTON_ISO2', 'NDOF_BUTTON_ROLL_CW', 'NDOF_BUTTON_ROLL_CCW', 'NDOF_BUTTON_SPIN_CW', 'NDOF_BUTTON_SPIN_CCW', 'NDOF_BUTTON_TILT_CW', 'NDOF_BUTTON_TILT_CCW', 'NDOF_BUTTON_ROTATE', 'NDOF_BUTTON_PANZOOM', 'NDOF_BUTTON_DOMINANT', 'NDOF_BUTTON_PLUS', 'NDOF_BUTTON_MINUS', 'NDOF_BUTTON_ESC', 'NDOF_BUTTON_ALT', 'NDOF_BUTTON_SHIFT', 'NDOF_BUTTON_CTRL', 'NDOF_BUTTON_1', 'NDOF_BUTTON_2', 'NDOF_BUTTON_3', 'NDOF_BUTTON_4', 'NDOF_BUTTON_5', 'NDOF_BUTTON_6', 'NDOF_BUTTON_7', 'NDOF_BUTTON_8', 'NDOF_BUTTON_9', 'NDOF_BUTTON_10', 'NDOF_BUTTON_A', 'NDOF_BUTTON_B', 'NDOF_BUTTON_C'], default 'NONE', (readonly))
    
    :type: str
    """

    unicode = ""
    """Single unicode character for this event
    (type: string, default "", (readonly, never None))
    
    :type: str
    """

    value = 'NOTHING'
    """The type of event, only applies to some
    (type: enum in ['ANY', 'NOTHING', 'PRESS', 'RELEASE', 'CLICK', 'DOUBLE_CLICK', 'NORTH', 'NORTH_EAST', 'EAST', 'SOUTH_EAST', 'SOUTH', 'SOUTH_WEST', 'WEST', 'NORTH_WEST'], default 'NOTHING', (readonly))
    
    :type: str
    """


class FCurve(bpy_struct):
    """F-Curve defining values of a period of time"""

    array_index = 0
    """Index to the specific property affected by F-Curve if applicable
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    color = (0.0, 0.0, 0.0)
    """Color of the F-Curve in the Graph Editor
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    color_mode = 'AUTO_RAINBOW'
    """Method used to determine color of F-Curve in Graph Editor
    * 'AUTO_RAINBOW': Auto Rainbow, Cycle through the rainbow, trying to give each curve a unique color.
    * 'AUTO_RGB': Auto XYZ to RGB, Use axis colors for transform and color properties, and auto-rainbow for the rest.
    * 'AUTO_YRGB': Auto WXYZ to YRGB, Use axis colors for XYZ parts of transform, and yellow for the 'W' channel.
    * 'CUSTOM': User Defined, Use custom hand-picked color for F-Curve.
    (type: enum in ['AUTO_RAINBOW', 'AUTO_RGB', 'AUTO_YRGB', 'CUSTOM'], default 'AUTO_RAINBOW')
    
    :type: str
    """

    data_path = ""
    """RNA Path to property affected by F-Curve
    (type: string, default "", (never None))
    
    :type: str
    """

    driver = None
    """Channel Driver (only set for Driver F-Curves)
    (type: bpy.types.Driver, (readonly))
    
    :type: Driver
    """

    extrapolation = 'CONSTANT'
    """Method used for evaluating value of F-Curve outside first and last keyframes
    * 'CONSTANT': Constant, Hold values of endpoint keyframes.
    * 'LINEAR': Linear, Use slope of curve leading in/out of endpoint keyframes.
    (type: enum in ['CONSTANT', 'LINEAR'], default 'CONSTANT')
    
    :type: str
    """

    group = None
    """Action Group that this F-Curve belongs to
    (type: bpy.types.ActionGroup)
    
    :type: ActionGroup
    """

    hide = False
    """F-Curve and its keyframes are hidden in the Graph Editor graphs
    (type: boolean, default False)
    
    :type: bool
    """

    is_valid = False
    """False when F-Curve could not be evaluated in past, so should be skipped when evaluating
    (type: boolean, default False)
    
    :type: bool
    """

    keyframe_points = None
    """User-editable keyframes
    (type: bpy.types.FCurveKeyframePoints bpy.types.bpy_prop_collection of bpy.types.Keyframe, (readonly))
    
    :type: FCurveKeyframePoints
    """

    lock = False
    """F-Curve's settings cannot be edited
    (type: boolean, default False)
    
    :type: bool
    """

    modifiers = None
    """Modifiers affecting the shape of the F-Curve
    (type: bpy.types.FCurveModifiers bpy.types.bpy_prop_collection of bpy.types.FModifier, (readonly))
    
    :type: FCurveModifiers
    """

    mute = False
    """F-Curve is not evaluated
    (type: boolean, default False)
    
    :type: bool
    """

    sampled_points = None
    """Sampled animation data
    (type: bpy.types.bpy_prop_collection of bpy.types.FCurveSample, (readonly))
    
    :type: bpy_prop_collection
    """

    select = False
    """F-Curve is selected for editing
    (type: boolean, default False)
    
    :type: bool
    """

    def evaluate(self, frame):
        """Evaluate F-Curve
        
        :param frame: Frame, Evaluate F-Curve at given frame
            (type: float in [-inf, inf])
        :type frame: float
        :return: Value, Value of F-Curve specific frame
        :param : (type: float in [-inf, inf])
        :rtype: float
        """

    def update(self):
        """Ensure keyframes are sorted in chronological order and handles are set correctly"""

    def range(self):
        """Get the time extents for F-Curve
        
        :return: Range, Min/Max values
        :param : (type: float array of 2 items in [-inf, inf])
        :rtype: mathutils.Vector
        """

    def update_autoflags(self, data):
        """Update FCurve flags set automatically from affected property (currently, integer/discrete flags set when the property is not a float)
        
        :param data: Data, Data containing the property controlled by given FCurve
            (type: bpy.types.AnyType, (never None))
        :type data: AnyType
        """

    def convert_to_samples(self, start, end):
        """Convert current FCurve from keyframes to sample points, if necessary
        
        :param start: Start Frame
            (type: int in [-500000, 500000])
        :type start: int
        :param end: End Frame
            (type: int in [-500000, 500000])
        :type end: int
        """

    def convert_to_keyframes(self, start, end):
        """Convert current FCurve from sample points to keyframes (linear interpolation), if necessary
        
        :param start: Start Frame
            (type: int in [-500000, 500000])
        :type start: int
        :param end: End Frame
            (type: int in [-500000, 500000])
        :type end: int
        """


class FCurveKeyframePoints(bpy_struct):
    """Collection of keyframe points"""

    def insert(self, frame, value, options={}, keyframe_type='KEYFRAME'):
        """Add a keyframe point to a F-Curve
        
        :param frame: X Value of this keyframe point
            (type: float in [-inf, inf])
        :type frame: float
        :param value: Y Value of this keyframe point
            (type: float in [-inf, inf])
        :type value: float
        :param options: Keyframe options
            * 'REPLACE': Replace, Don't add any new keyframes, but just replace existing ones.
            * 'NEEDED': Needed, Only adds keyframes that are needed.
            * 'FAST': Fast, Fast keyframe insertion to avoid recalculating the curve each time.
            (type: enum set in {'REPLACE', 'NEEDED', 'FAST'}, (optional))
        :type options: enum set in {'REPLACE', 'NEEDED', 'FAST'}
        :param keyframe_type: Type of keyframe to insert
            * 'KEYFRAME': Keyframe, Normal keyframe - e.g. for key poses.
            * 'BREAKDOWN': Breakdown, A breakdown pose - e.g. for transitions between key poses.
            * 'MOVING_HOLD': Moving Hold, A keyframe that is part of a moving hold.
            * 'EXTREME': Extreme, An 'extreme' pose, or some other purpose as needed.
            * 'JITTER': Jitter, A filler or baked keyframe for keying on ones, or some other purpose as needed.
            (type: enum in ['KEYFRAME', 'BREAKDOWN', 'MOVING_HOLD', 'EXTREME', 'JITTER'], (optional))
        :type keyframe_type: str
        :return: Newly created keyframe
        :param : (type: bpy.types.Keyframe)
        :rtype: Keyframe
        """

    def add(self, count=1):
        """Add a keyframe point to a F-Curve
        
        :param count: Number, Number of points to add to the spline
            (type: int in [0, inf], (optional))
        :type count: int
        """

    def remove(self, keyframe, fast=False):
        """Remove keyframe from an F-Curve
        
        :param keyframe: Keyframe to remove
            (type: bpy.types.Keyframe, (never None))
        :type keyframe: Keyframe
        :param fast: Fast, Fast keyframe removal to avoid recalculating the curve each time
            (type: boolean, (optional))
        :type fast: bool
        """


class FCurveModifiers(bpy_struct):
    """Collection of F-Curve Modifiers"""

    active = None
    """Active F-Curve Modifier
    (type: bpy.types.FModifier)
    
    :type: FModifier
    """

    def new(self, type):
        """Add a constraint to this object
        
        :param type: Constraint type to add
            * 'NULL': Invalid.
            * 'GENERATOR': Generator, Generate a curve using a factorized or expanded polynomial.
            * 'FNGENERATOR': Built-In Function, Generate a curve using standard math functions such as sin and cos.
            * 'ENVELOPE': Envelope, Reshape F-Curve values - e.g. change amplitude of movements.
            * 'CYCLES': Cycles, Cyclic extend/repeat keyframe sequence.
            * 'NOISE': Noise, Add pseudo-random noise on top of F-Curves.
            * 'LIMITS': Limits, Restrict maximum and minimum values of F-Curve.
            * 'STEPPED': Stepped Interpolation, Snap values to nearest grid-step - e.g. for a stop-motion look.
            (type: enum in ['NULL', 'GENERATOR', 'FNGENERATOR', 'ENVELOPE', 'CYCLES', 'NOISE', 'LIMITS', 'STEPPED'])
        :type type: str
        :return: New fmodifier
        :param : (type: bpy.types.FModifier)
        :rtype: FModifier
        """

    def remove(self, modifier):
        """Remove a modifier from this F-Curve
        
        :param modifier: Removed modifier
            (type: bpy.types.FModifier, (never None))
        :type modifier: FModifier
        """


class FCurveSample(bpy_struct):
    """Sample point for F-Curve"""

    co = (0.0, 0.0)
    """Point coordinates
    (type: float array of 2 items in [-inf, inf], default (0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    select = False
    """Selection status
    (type: boolean, default False)
    
    :type: bool
    """


class FFmpegSettings(bpy_struct):
    """FFmpeg related settings for the scene"""

    audio_bitrate = 0
    """Audio bitrate (kb/s)
    (type: int in [32, 384], default 0)
    
    :type: int
    """

    audio_channels = 'MONO'
    """Audio channel count
    * 'MONO': Mono, Set audio channels to mono.
    * 'STEREO': Stereo, Set audio channels to stereo.
    * 'SURROUND4': 4 Channels, Set audio channels to 4 channels.
    * 'SURROUND51': 5.1 Surround, Set audio channels to 5.1 surround sound.
    * 'SURROUND71': 7.1 Surround, Set audio channels to 7.1 surround sound.
    (type: enum in ['MONO', 'STEREO', 'SURROUND4', 'SURROUND51', 'SURROUND71'], default 'MONO')
    
    :type: str
    """

    audio_codec = 'NONE'
    """FFmpeg audio codec to use
    (type: enum in ['NONE', 'MP2', 'MP3', 'AC3', 'AAC', 'VORBIS', 'FLAC', 'PCM'], default 'NONE')
    
    :type: str
    """

    audio_mixrate = 0
    """Audio samplerate(samples/s)
    (type: int in [8000, 192000], default 0)
    
    :type: int
    """

    audio_volume = 0.0
    """Audio volume
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    buffersize = 0
    """Rate control: buffer size (kb)
    (type: int in [0, 2000], default 0)
    
    :type: int
    """

    codec = 'H264'
    """FFmpeg codec to use
    (type: enum in ['NONE', 'MPEG1', 'MPEG2', 'MPEG4', 'HUFFYUV', 'DV', 'H264', 'THEORA', 'FLASH', 'FFV1', 'QTRLE', 'DNXHD', 'PNG'], default 'H264')
    
    :type: str
    """

    constant_rate_factor = 'MEDIUM'
    """Constant Rate Factor (CRF); tradeoff between video quality and file size
    * 'NONE': None; use constant bit-rate, Use constant bit rate, rather than constant output quality.
    * 'LOSSLESS': Lossless.
    * 'PERC_LOSSLESS': Perceptually lossless.
    * 'HIGH': High quality.
    * 'MEDIUM': Medium quality.
    * 'LOW': Low quality.
    * 'VERYLOW': Very low quality.
    * 'LOWEST': Lowest quality.
    (type: enum in ['NONE', 'LOSSLESS', 'PERC_LOSSLESS', 'HIGH', 'MEDIUM', 'LOW', 'VERYLOW', 'LOWEST'], default 'MEDIUM')
    
    :type: str
    """

    ffmpeg_preset = 'MEDIUM'
    """Tradeoff between encoding speed and compression ratio
    (type: enum in ['ULTRAFAST', 'SUPERFAST', 'VERYFAST', 'FASTER', 'FAST', 'MEDIUM', 'SLOW', 'SLOWER', 'VERYSLOW'], default 'MEDIUM')
    
    :type: str
    """

    format = 'MKV'
    """Output file container
    (type: enum in ['MPEG1', 'MPEG2', 'MPEG4', 'AVI', 'QUICKTIME', 'DV', 'OGG', 'MKV', 'FLASH'], default 'MKV')
    
    :type: str
    """

    gopsize = 25
    """Distance between key frames, also known as GOP size; influences file size and seekability
    (type: int in [0, 500], default 25)
    
    :type: int
    """

    max_b_frames = 0
    """Maximum number of B-frames between non-B-frames; influences file size and seekability
    (type: int in [0, 16], default 0)
    
    :type: int
    """

    maxrate = 0
    """Rate control: max rate (kb/s)
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    minrate = 0
    """Rate control: min rate (kb/s)
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    muxrate = 0
    """Mux rate (bits/s(!))
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    packetsize = 0
    """Mux packet size (byte)
    (type: int in [0, 16384], default 0)
    
    :type: int
    """

    use_autosplit = False
    """Autosplit output at 2GB boundary
    (type: boolean, default False)
    
    :type: bool
    """

    use_lossless_output = False
    """Use lossless output for video streams
    (type: boolean, default False)
    
    :type: bool
    """

    use_max_b_frames = False
    """Set a maximum number of B-frames
    (type: boolean, default False)
    
    :type: bool
    """

    video_bitrate = 0
    """Video bitrate (kb/s)
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """


class FModifier(bpy_struct):
    """Modifier for values of F-Curve"""

    active = False
    """F-Curve Modifier is the one being edited
    (type: boolean, default False)
    
    :type: bool
    """

    blend_in = 0.0
    """Number of frames from start frame for influence to take effect
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    blend_out = 0.0
    """Number of frames from end frame for influence to fade out
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    frame_end = 0.0
    """Frame that modifier's influence ends (if Restrict Frame Range is in use)
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    frame_start = 0.0
    """Frame that modifier's influence starts (if Restrict Frame Range is in use)
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    influence = 1.0
    """Amount of influence F-Curve Modifier will have when not fading in/out
    (type: float in [0, 1], default 1.0)
    
    :type: float
    """

    is_valid = False
    """F-Curve Modifier has invalid settings and will not be evaluated
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    mute = False
    """F-Curve Modifier will not be evaluated
    (type: boolean, default False)
    
    :type: bool
    """

    show_expanded = False
    """F-Curve Modifier's panel is expanded in UI
    (type: boolean, default False)
    
    :type: bool
    """

    type = 'NULL'
    """F-Curve Modifier Type
    * 'NULL': Invalid.
    * 'GENERATOR': Generator, Generate a curve using a factorized or expanded polynomial.
    * 'FNGENERATOR': Built-In Function, Generate a curve using standard math functions such as sin and cos.
    * 'ENVELOPE': Envelope, Reshape F-Curve values - e.g. change amplitude of movements.
    * 'CYCLES': Cycles, Cyclic extend/repeat keyframe sequence.
    * 'NOISE': Noise, Add pseudo-random noise on top of F-Curves.
    * 'LIMITS': Limits, Restrict maximum and minimum values of F-Curve.
    * 'STEPPED': Stepped Interpolation, Snap values to nearest grid-step - e.g. for a stop-motion look.
    (type: enum in ['NULL', 'GENERATOR', 'FNGENERATOR', 'ENVELOPE', 'CYCLES', 'NOISE', 'LIMITS', 'STEPPED'], default 'NULL', (readonly))
    
    :type: str
    """

    use_influence = False
    """F-Curve Modifier's effects will be tempered by a default factor
    (type: boolean, default False)
    
    :type: bool
    """

    use_restricted_range = False
    """F-Curve Modifier is only applied for the specified frame range to help mask off effects in order to chain them
    (type: boolean, default False)
    
    :type: bool
    """


class FModifierEnvelopeControlPoint(bpy_struct):
    """Control point for envelope F-Modifier"""

    frame = 0.0
    """Frame this control-point occurs on
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    max = 0.0
    """Upper bound of envelope at this control-point
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    min = 0.0
    """Lower bound of envelope at this control-point
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """


class FModifierEnvelopeControlPoints(bpy_struct):
    """Control points defining the shape of the envelope"""

    def add(self, frame):
        """Add a control point to a FModifierEnvelope
        
        :param frame: Frame to add this control-point
            (type: float in [-inf, inf])
        :type frame: float
        :return: Newly created control-point
        :param : (type: bpy.types.FModifierEnvelopeControlPoint)
        :rtype: FModifierEnvelopeControlPoint
        """

    def remove(self, point):
        """Remove a control-point from an FModifierEnvelope
        
        :param point: Control-point to remove
            (type: bpy.types.FModifierEnvelopeControlPoint, (never None))
        :type point: FModifierEnvelopeControlPoint
        """


class FieldSettings(bpy_struct):
    """Field settings for an object in physics simulation"""

    apply_to_location = False
    """Effect particles' location
    (type: boolean, default False)
    
    :type: bool
    """

    apply_to_rotation = False
    """Effect particles' dynamic rotation
    (type: boolean, default False)
    
    :type: bool
    """

    distance_max = 0.0
    """Maximum distance for the field to work
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """

    distance_min = 0.0
    """Minimum distance for the field's fall-off
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """

    falloff_power = 0.0
    """(type: float in [0, 10], default 0.0)
    
    :type: float
    """

    falloff_type = 'SPHERE'
    """(type: enum in ['SPHERE', 'TUBE', 'CONE'], default 'SPHERE')
    
    :type: str
    """

    flow = 0.0
    """Convert effector force into air flow velocity
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    guide_clump_amount = 0.0
    """Amount of clumping
    (type: float in [-1, 1], default 0.0)
    
    :type: float
    """

    guide_clump_shape = 0.0
    """Shape of clumping
    (type: float in [-0.999, 0.999], default 0.0)
    
    :type: float
    """

    guide_free = 0.0
    """Guide-free time from particle life's end
    (type: float in [0, 0.99], default 0.0)
    
    :type: float
    """

    guide_kink_amplitude = 0.0
    """The amplitude of the offset
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    guide_kink_axis = 'X'
    """Which axis to use for offset
    (type: enum in ['X', 'Y', 'Z'], default 'X')
    
    :type: str
    """

    guide_kink_frequency = 0.0
    """The frequency of the offset (1/total length)
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    guide_kink_shape = 0.0
    """Adjust the offset to the beginning/end
    (type: float in [-0.999, 0.999], default 0.0)
    
    :type: float
    """

    guide_kink_type = 'NONE'
    """Type of periodic offset on the curve
    (type: enum in ['NONE', 'CURL', 'RADIAL', 'WAVE', 'BRAID', 'ROTATION', 'ROLL'], default 'NONE')
    
    :type: str
    """

    guide_minimum = 0.0
    """The distance from which particles are affected fully
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """

    harmonic_damping = 0.0
    """Damping of the harmonic force
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    inflow = 0.0
    """Inwards component of the vortex force
    (type: float in [-10, 10], default 0.0)
    
    :type: float
    """

    linear_drag = 0.0
    """Drag component proportional to velocity
    (type: float in [-2, 2], default 0.0)
    
    :type: float
    """

    noise = 0.0
    """Amount of noise for the force strength
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    quadratic_drag = 0.0
    """Drag component proportional to the square of velocity
    (type: float in [-2, 2], default 0.0)
    
    :type: float
    """

    radial_falloff = 0.0
    """Radial falloff power (real gravitational falloff = 2)
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    radial_max = 0.0
    """Maximum radial distance for the field to work
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """

    radial_min = 0.0
    """Minimum radial distance for the field's fall-off
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """

    rest_length = 0.0
    """Rest length of the harmonic force
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """

    seed = 0
    """Seed of the noise
    (type: int in [1, 128], default 0)
    
    :type: int
    """

    shape = 'POINT'
    """Which direction is used to calculate the effector force
    (type: enum in ['POINT', 'PLANE', 'SURFACE', 'POINTS'], default 'POINT')
    
    :type: str
    """

    size = 0.0
    """Size of the turbulence
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    source_object = None
    """Select domain object of the smoke simulation
    (type: bpy.types.Object)
    
    :type: Object
    """

    strength = 0.0
    """Strength of force field
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    texture = None
    """Texture to use as force
    (type: bpy.types.Texture)
    
    :type: Texture
    """

    texture_mode = 'RGB'
    """How the texture effect is calculated (RGB & Curl need a RGB texture, else Gradient will be used instead)
    (type: enum in ['RGB', 'GRADIENT', 'CURL'], default 'RGB')
    
    :type: str
    """

    texture_nabla = 0.0
    """Defines size of derivative offset used for calculating gradient and curl
    (type: float in [0.0001, 1], default 0.0)
    
    :type: float
    """

    type = 'NONE'
    """Type of field
    * 'NONE': None.
    * 'FORCE': Force, Radial field toward the center of object.
    * 'WIND': Wind, Constant force along the force object's local Z axis.
    * 'VORTEX': Vortex, Spiraling force that twists the force object's local Z axis.
    * 'MAGNET': Magnetic, Forcefield depends on the speed of the particles.
    * 'HARMONIC': Harmonic, The source of this force field is the zero point of a harmonic oscillator.
    * 'CHARGE': Charge, Spherical forcefield based on the charge of particles, only influences other charge force fields.
    * 'LENNARDJ': Lennard-Jones, Forcefield based on the Lennard-Jones potential.
    * 'TEXTURE': Texture, Forcefield based on a texture.
    * 'GUIDE': Curve Guide, Create a force along a curve object.
    * 'BOID': Boid.
    * 'TURBULENCE': Turbulence, Create turbulence with a noise field.
    * 'DRAG': Drag, Create a force that dampens motion.
    * 'SMOKE_FLOW': Smoke Flow, Create a force based on smoke simulation air flow.
    (type: enum in ['NONE', 'FORCE', 'WIND', 'VORTEX', 'MAGNET', 'HARMONIC', 'CHARGE', 'LENNARDJ', 'TEXTURE', 'GUIDE', 'BOID', 'TURBULENCE', 'DRAG', 'SMOKE_FLOW'], default 'NONE')
    
    :type: str
    """

    use_2d_force = False
    """Apply force only in 2D
    (type: boolean, default False)
    
    :type: bool
    """

    use_absorption = False
    """Force gets absorbed by collision objects
    (type: boolean, default False)
    
    :type: bool
    """

    use_global_coords = False
    """Use effector/global coordinates for turbulence
    (type: boolean, default False)
    
    :type: bool
    """

    use_gravity_falloff = False
    """Multiply force by 1/distance²
    (type: boolean, default False)
    
    :type: bool
    """

    use_guide_path_add = False
    """Based on distance/falloff it adds a portion of the entire path
    (type: boolean, default False)
    
    :type: bool
    """

    use_guide_path_weight = False
    """Use curve weights to influence the particle influence along the curve
    (type: boolean, default False)
    
    :type: bool
    """

    use_max_distance = False
    """Use a maximum distance for the field to work
    (type: boolean, default False)
    
    :type: bool
    """

    use_min_distance = False
    """Use a minimum distance for the field's fall-off
    (type: boolean, default False)
    
    :type: bool
    """

    use_multiple_springs = False
    """Every point is effected by multiple springs
    (type: boolean, default False)
    
    :type: bool
    """

    use_object_coords = False
    """Use object/global coordinates for texture
    (type: boolean, default False)
    
    :type: bool
    """

    use_radial_max = False
    """Use a maximum radial distance for the field to work
    (type: boolean, default False)
    
    :type: bool
    """

    use_radial_min = False
    """Use a minimum radial distance for the field's fall-off
    (type: boolean, default False)
    
    :type: bool
    """

    use_root_coords = False
    """Texture coordinates from root particle locations
    (type: boolean, default False)
    
    :type: bool
    """

    use_smoke_density = False
    """Adjust force strength based on smoke density
    (type: boolean, default False)
    
    :type: bool
    """

    z_direction = 'BOTH'
    """Effect in full or only positive/negative Z direction
    (type: enum in ['BOTH', 'POSITIVE', 'NEGATIVE'], default 'BOTH')
    
    :type: str
    """


class FileBrowserFSMenuEntry(bpy_struct):
    """File Select Parameters"""

    is_valid = False
    """Whether this path is currently reachable
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    name = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    path = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    use_save = False
    """Whether this path is saved in bookmarks, or generated from OS
    (type: boolean, default False, (readonly))
    
    :type: bool
    """


class FileSelectParams(bpy_struct):
    """File Select Parameters"""

    directory = ""
    """Directory displayed in the file browser
    (type: string, default "", (never None))
    
    :type: str
    """

    display_size = 'TINY'
    """Change the size of the display (width of columns or thumbnails size)
    (type: enum in ['TINY', 'SMALL', 'NORMAL', 'LARGE'], default 'TINY')
    
    :type: str
    """

    display_type = 'LIST_SHORT'
    """Display mode for the file list
    * 'LIST_SHORT': Short List, Display files as short list.
    * 'LIST_LONG': Long List, Display files as a detailed list.
    * 'THUMBNAIL': Thumbnails, Display files as thumbnails.
    (type: enum in ['LIST_SHORT', 'LIST_LONG', 'THUMBNAIL'], default 'LIST_SHORT')
    
    :type: str
    """

    filename = ""
    """Active file in the file browser
    (type: string, default "", (never None))
    
    :type: str
    """

    filter_glob = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    filter_id = {'ACTION'}
    """Which ID types to show/hide, when browsing a library
    * 'ACTION': Actions, Show/hide Action data-blocks.
    * 'ARMATURE': Armatures, Show/hide Armature data-blocks.
    * 'BRUSH': Brushes, Show/hide Brushes data-blocks.
    * 'CAMERA': Cameras, Show/hide Camera data-blocks.
    * 'CACHEFILE': Cache Files, Show/hide Cache File data-blocks.
    * 'CURVE': Curves, Show/hide Curve data-blocks.
    * 'GREASE_PENCIL': Grease Pencil, Show/hide Grease pencil data-blocks.
    * 'GROUP': Groups, Show/hide Group data-blocks.
    * 'IMAGE': Images, Show/hide Image data-blocks.
    * 'LAMP': Lamps, Show/hide Lamp data-blocks.
    * 'LINESTYLE': Freestyle Linestyles, Show/hide Freestyle's Line Style data-blocks.
    * 'LATTICE': Lattices, Show/hide Lattice data-blocks.
    * 'MATERIAL': Materials, Show/hide Material data-blocks.
    * 'METABALL': Metaballs, Show/hide Metaball data-blocks.
    * 'MOVIE_CLIP': Movie Clips, Show/hide Movie Clip data-blocks.
    * 'MESH': Meshes, Show/hide Mesh data-blocks.
    * 'MASK': Masks, Show/hide Mask data-blocks.
    * 'NODE_TREE': Node Trees, Show/hide Node Tree data-blocks.
    * 'OBJECT': Objects, Show/hide Object data-blocks.
    * 'PARTICLE_SETTINGS': Particles Settings, Show/hide Particle Settings data-blocks.
    * 'PALETTE': Palettes, Show/hide Palette data-blocks.
    * 'PAINT_CURVE': Paint Curves, Show/hide Paint Curve data-blocks.
    * 'SCENE': Scenes, Show/hide Scene data-blocks.
    * 'SPEAKER': Speakers, Show/hide Speaker data-blocks.
    * 'SOUND': Sounds, Show/hide Sound data-blocks.
    * 'TEXTURE': Textures, Show/hide Texture data-blocks.
    * 'TEXT': Texts, Show/hide Text data-blocks.
    * 'FONT': Fonts, Show/hide Font data-blocks.
    * 'WORLD': Worlds, Show/hide World data-blocks.
    (type: enum set in {'ACTION', 'ARMATURE', 'BRUSH', 'CAMERA', 'CACHEFILE', 'CURVE', 'GREASE_PENCIL', 'GROUP', 'IMAGE', 'LAMP', 'LINESTYLE', 'LATTICE', 'MATERIAL', 'METABALL', 'MOVIE_CLIP', 'MESH', 'MASK', 'NODE_TREE', 'OBJECT', 'PARTICLE_SETTINGS', 'PALETTE', 'PAINT_CURVE', 'SCENE', 'SPEAKER', 'SOUND', 'TEXTURE', 'TEXT', 'FONT', 'WORLD'}, default {'ACTION'})
    
    :type: enum set in {'ACTION', 'ARMATURE', 'BRUSH', 'CAMERA', 'CACHEFILE', 'CURVE', 'GREASE_PENCIL', 'GROUP', 'IMAGE', 'LAMP', 'LINESTYLE', 'LATTICE', 'MATERIAL', 'METABALL', 'MOVIE_CLIP', 'MESH', 'MASK', 'NODE_TREE', 'OBJECT', 'PARTICLE_SETTINGS', 'PALETTE', 'PAINT_CURVE', 'SCENE', 'SPEAKER', 'SOUND', 'TEXTURE', 'TEXT', 'FONT', 'WORLD'}
    """

    filter_id_category = {'SCENE'}
    """Which ID categories to show/hide, when browsing a library
    * 'SCENE': Scenes, Show/hide scenes.
    * 'ANIMATION': Animations, Show/hide animation data.
    * 'OBJECT': Objects & Groups, Show/hide objects and groups.
    * 'GEOMETRY': Geometry, Show/hide meshes, curves, lattice, armatures and metaballs data.
    * 'SHADING': Shading, Show/hide materials, nodetrees, textures and Freestyle's linestyles.
    * 'IMAGE': Images & Sounds, Show/hide images, movie clips, sounds and masks.
    * 'ENVIRONMENT': Environment, Show/hide worlds, lamps, cameras and speakers.
    * 'MISC': Miscellaneous, Show/hide other data types.
    (type: enum set in {'SCENE', 'ANIMATION', 'OBJECT', 'GEOMETRY', 'SHADING', 'IMAGE', 'ENVIRONMENT', 'MISC'}, default {'SCENE'})
    
    :type: enum set in {'SCENE', 'ANIMATION', 'OBJECT', 'GEOMETRY', 'SHADING', 'IMAGE', 'ENVIRONMENT', 'MISC'}
    """

    filter_search = ""
    """Filter by name, supports '*' wildcard
    (type: string, default "", (never None))
    
    :type: str
    """

    recursion_level = 'NONE'
    """Numbers of dirtree levels to show simultaneously
    * 'NONE': None, Only list current directory's content, with no recursion.
    * 'BLEND': Blend File, List .blend files' content.
    * 'ALL_1': One Level, List all sub-directories' content, one level of recursion.
    * 'ALL_2': Two Levels, List all sub-directories' content, two levels of recursion.
    * 'ALL_3': Three Levels, List all sub-directories' content, three levels of recursion.
    (type: enum in ['NONE', 'BLEND', 'ALL_1', 'ALL_2', 'ALL_3'], default 'NONE')
    
    :type: str
    """

    show_hidden = False
    """Show hidden dot files
    (type: boolean, default False)
    
    :type: bool
    """

    sort_method = 'FILE_SORT_ALPHA'
    """
    * 'FILE_SORT_ALPHA': Sort alphabetically, Sort the file list alphabetically.
    * 'FILE_SORT_EXTENSION': Sort by extension, Sort the file list by extension/type.
    * 'FILE_SORT_TIME': Sort by time, Sort files by modification time.
    * 'FILE_SORT_SIZE': Sort by size, Sort files by size.
    (type: enum in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], default 'FILE_SORT_ALPHA')
    
    :type: str
    """

    title = ""
    """Title for the file browser
    (type: string, default "", (readonly, never None))
    
    :type: str
    """

    use_filter = False
    """Enable filtering of files
    (type: boolean, default False)
    
    :type: bool
    """

    use_filter_backup = False
    """Show .blend1, .blend2, etc. files
    (type: boolean, default False)
    
    :type: bool
    """

    use_filter_blender = False
    """Show .blend files
    (type: boolean, default False)
    
    :type: bool
    """

    use_filter_blendid = False
    """Show .blend files items (objects, materials, etc.)
    (type: boolean, default False)
    
    :type: bool
    """

    use_filter_folder = False
    """Show folders
    (type: boolean, default False)
    
    :type: bool
    """

    use_filter_font = False
    """Show font files
    (type: boolean, default False)
    
    :type: bool
    """

    use_filter_image = False
    """Show image files
    (type: boolean, default False)
    
    :type: bool
    """

    use_filter_movie = False
    """Show movie files
    (type: boolean, default False)
    
    :type: bool
    """

    use_filter_script = False
    """Show script files
    (type: boolean, default False)
    
    :type: bool
    """

    use_filter_sound = False
    """Show sound files
    (type: boolean, default False)
    
    :type: bool
    """

    use_filter_text = False
    """Show text files
    (type: boolean, default False)
    
    :type: bool
    """

    use_library_browsing = False
    """Whether we may browse blender files' content or not
    (type: boolean, default False, (readonly))
    
    :type: bool
    """


class FluidSettings(bpy_struct):
    """Fluid simulation settings for an object taking part in the simulation"""

    type = 'NONE'
    """Type of participation in the fluid simulation
    * 'NONE': None.
    * 'DOMAIN': Domain, Bounding box of this object represents the computational domain of the fluid simulation.
    * 'FLUID': Fluid, Object represents a volume of fluid in the simulation.
    * 'OBSTACLE': Obstacle, Object is a fixed obstacle.
    * 'INFLOW': Inflow, Object adds fluid to the simulation.
    * 'OUTFLOW': Outflow, Object removes fluid from the simulation.
    * 'PARTICLE': Particle, Object is made a particle system to display particles generated by a fluidsim domain object.
    * 'CONTROL': Control, Object is made a fluid control mesh, which influences the fluid.
    (type: enum in ['NONE', 'DOMAIN', 'FLUID', 'OBSTACLE', 'INFLOW', 'OUTFLOW', 'PARTICLE', 'CONTROL'], default 'NONE')
    
    :type: str
    """


class FluidVertexVelocity(bpy_struct):
    """Velocity of a simulated fluid mesh"""

    velocity = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0), (readonly))
    
    :type: collections.Sequence[float]
    """


class FreestyleLineSet(bpy_struct):
    """Line set for associating lines and style parameters"""

    edge_type_combination = 'OR'
    """Specify a logical combination of selection conditions on feature edge types
    * 'OR': Logical OR, Select feature edges satisfying at least one of edge type conditions.
    * 'AND': Logical AND, Select feature edges satisfying all edge type conditions.
    (type: enum in ['OR', 'AND'], default 'OR')
    
    :type: str
    """

    edge_type_negation = 'INCLUSIVE'
    """Specify either inclusion or exclusion of feature edges selected by edge types
    * 'INCLUSIVE': Inclusive, Select feature edges satisfying the given edge type conditions.
    * 'EXCLUSIVE': Exclusive, Select feature edges not satisfying the given edge type conditions.
    (type: enum in ['INCLUSIVE', 'EXCLUSIVE'], default 'INCLUSIVE')
    
    :type: str
    """

    exclude_border = False
    """Exclude border edges
    (type: boolean, default False)
    
    :type: bool
    """

    exclude_contour = False
    """Exclude contours
    (type: boolean, default False)
    
    :type: bool
    """

    exclude_crease = False
    """Exclude crease edges
    (type: boolean, default False)
    
    :type: bool
    """

    exclude_edge_mark = False
    """Exclude edge marks
    (type: boolean, default False)
    
    :type: bool
    """

    exclude_external_contour = False
    """Exclude external contours
    (type: boolean, default False)
    
    :type: bool
    """

    exclude_material_boundary = False
    """Exclude edges at material boundaries
    (type: boolean, default False)
    
    :type: bool
    """

    exclude_ridge_valley = False
    """Exclude ridges and valleys
    (type: boolean, default False)
    
    :type: bool
    """

    exclude_silhouette = False
    """Exclude silhouette edges
    (type: boolean, default False)
    
    :type: bool
    """

    exclude_suggestive_contour = False
    """Exclude suggestive contours
    (type: boolean, default False)
    
    :type: bool
    """

    face_mark_condition = 'ONE'
    """Specify a feature edge selection condition based on face marks
    * 'ONE': One Face, Select a feature edge if either of its adjacent faces is marked.
    * 'BOTH': Both Faces, Select a feature edge if both of its adjacent faces are marked.
    (type: enum in ['ONE', 'BOTH'], default 'ONE')
    
    :type: str
    """

    face_mark_negation = 'INCLUSIVE'
    """Specify either inclusion or exclusion of feature edges selected by face marks
    * 'INCLUSIVE': Inclusive, Select feature edges satisfying the given face mark conditions.
    * 'EXCLUSIVE': Exclusive, Select feature edges not satisfying the given face mark conditions.
    (type: enum in ['INCLUSIVE', 'EXCLUSIVE'], default 'INCLUSIVE')
    
    :type: str
    """

    group = None
    """A group of objects based on which feature edges are selected
    (type: bpy.types.Group)
    
    :type: Group
    """

    group_negation = 'INCLUSIVE'
    """Specify either inclusion or exclusion of feature edges belonging to a group of objects
    * 'INCLUSIVE': Inclusive, Select feature edges belonging to some object in the group.
    * 'EXCLUSIVE': Exclusive, Select feature edges not belonging to any object in the group.
    (type: enum in ['INCLUSIVE', 'EXCLUSIVE'], default 'INCLUSIVE')
    
    :type: str
    """

    linestyle = None
    """Line style settings
    (type: bpy.types.FreestyleLineStyle, (never None))
    
    :type: FreestyleLineStyle
    """

    name = ""
    """Line set name
    (type: string, default "", (never None))
    
    :type: str
    """

    qi_end = 0
    """Last QI value of the QI range
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    qi_start = 0
    """First QI value of the QI range
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    select_border = False
    """Select border edges (open mesh edges)
    (type: boolean, default False)
    
    :type: bool
    """

    select_by_edge_types = False
    """Select feature edges based on edge types
    (type: boolean, default False)
    
    :type: bool
    """

    select_by_face_marks = False
    """Select feature edges by face marks
    (type: boolean, default False)
    
    :type: bool
    """

    select_by_group = False
    """Select feature edges based on a group of objects
    (type: boolean, default False)
    
    :type: bool
    """

    select_by_image_border = False
    """Select feature edges by image border (less memory consumption)
    (type: boolean, default False)
    
    :type: bool
    """

    select_by_visibility = False
    """Select feature edges based on visibility
    (type: boolean, default False)
    
    :type: bool
    """

    select_contour = False
    """Select contours (outer silhouettes of each object)
    (type: boolean, default False)
    
    :type: bool
    """

    select_crease = False
    """Select crease edges (those between two faces making an angle smaller than the Crease Angle)
    (type: boolean, default False)
    
    :type: bool
    """

    select_edge_mark = False
    """Select edge marks (edges annotated by Freestyle edge marks)
    (type: boolean, default False)
    
    :type: bool
    """

    select_external_contour = False
    """Select external contours (outer silhouettes of occluding and occluded objects)
    (type: boolean, default False)
    
    :type: bool
    """

    select_material_boundary = False
    """Select edges at material boundaries
    (type: boolean, default False)
    
    :type: bool
    """

    select_ridge_valley = False
    """Select ridges and valleys (boundary lines between convex and concave areas of surface)
    (type: boolean, default False)
    
    :type: bool
    """

    select_silhouette = False
    """Select silhouettes (edges at the boundary of visible and hidden faces)
    (type: boolean, default False)
    
    :type: bool
    """

    select_suggestive_contour = False
    """Select suggestive contours (almost silhouette/contour edges)
    (type: boolean, default False)
    
    :type: bool
    """

    show_render = False
    """Enable or disable this line set during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """

    visibility = 'VISIBLE'
    """Determine how to use visibility for feature edge selection
    * 'VISIBLE': Visible, Select visible feature edges.
    * 'HIDDEN': Hidden, Select hidden feature edges.
    * 'RANGE': QI Range, Select feature edges within a range of quantitative invisibility (QI) values.
    (type: enum in ['VISIBLE', 'HIDDEN', 'RANGE'], default 'VISIBLE')
    
    :type: str
    """


class FreestyleModuleSettings(bpy_struct):
    """Style module configuration for specifying a style module"""

    script = None
    """Python script to define a style module
    (type: bpy.types.Text)
    
    :type: Text
    """

    use = False
    """Enable or disable this style module during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """


class FreestyleModules(bpy_struct):
    """A list of style modules (to be applied from top to bottom)"""

    def new(self):
        """Add a style module to scene render layer Freestyle settings
        
        :return: Newly created style module
        :param : (type: bpy.types.FreestyleModuleSettings)
        :rtype: FreestyleModuleSettings
        """

    def remove(self, module):
        """Remove a style module from scene render layer Freestyle settings
        
        :param module: Style module to remove
            (type: bpy.types.FreestyleModuleSettings, (never None))
        :type module: FreestyleModuleSettings
        """


class FreestyleSettings(bpy_struct):
    """Freestyle settings for a SceneRenderLayer data-block"""

    crease_angle = 0.0
    """Angular threshold for detecting crease edges
    (type: float in [0, 3.14159], default 0.0)
    
    :type: float
    """

    kr_derivative_epsilon = 0.0
    """Kr derivative epsilon for computing suggestive contours
    (type: float in [-1000, 1000], default 0.0)
    
    :type: float
    """

    linesets = None
    """(type: bpy.types.Linesets bpy.types.bpy_prop_collection of bpy.types.FreestyleLineSet, (readonly))
    
    :type: Linesets
    """

    mode = 'SCRIPT'
    """Select the Freestyle control mode
    * 'SCRIPT': Python Scripting Mode, Advanced mode for using style modules written in Python.
    * 'EDITOR': Parameter Editor Mode, Basic mode for interactive style parameter editing.
    (type: enum in ['SCRIPT', 'EDITOR'], default 'SCRIPT')
    
    :type: str
    """

    modules = None
    """A list of style modules (to be applied from top to bottom)
    (type: bpy.types.FreestyleModules bpy.types.bpy_prop_collection of bpy.types.FreestyleModuleSettings, (readonly))
    
    :type: FreestyleModules
    """

    sphere_radius = 0.0
    """Sphere radius for computing curvatures
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """

    use_advanced_options = False
    """Enable advanced edge detection options (sphere radius and Kr derivative epsilon)
    (type: boolean, default False)
    
    :type: bool
    """

    use_culling = False
    """If enabled, out-of-view edges are ignored
    (type: boolean, default False)
    
    :type: bool
    """

    use_material_boundaries = False
    """Enable material boundaries
    (type: boolean, default False)
    
    :type: bool
    """

    use_ridges_and_valleys = False
    """Enable ridges and valleys
    (type: boolean, default False)
    
    :type: bool
    """

    use_smoothness = False
    """Take face smoothness into account in view map calculation
    (type: boolean, default False)
    
    :type: bool
    """

    use_suggestive_contours = False
    """Enable suggestive contours
    (type: boolean, default False)
    
    :type: bool
    """

    use_view_map_cache = False
    """Keep the computed view map and avoid re-calculating it if mesh geometry is unchanged
    (type: boolean, default False)
    
    :type: bool
    """


class Function(bpy_struct):
    """RNA function definition"""

    description = ""
    """Description of the Function's purpose
    (type: string, default "", (readonly, never None))
    
    :type: str
    """

    identifier = ""
    """Unique name used in the code and scripting
    (type: string, default "", (readonly, never None))
    
    :type: str
    """

    is_registered = False
    """Function is registered as callback as part of type registration
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_registered_optional = False
    """Function is optionally registered as callback part of type registration
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    parameters = None
    """Parameters for the function
    (type: bpy.types.bpy_prop_collection of bpy.types.Property, (readonly))
    
    :type: bpy_prop_collection
    """

    use_self = False
    """Function does not pass its self as an argument (becomes a static method in python)
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_self_type = False
    """Function passes its self type as an argument (becomes a class method in python if use_self is false)
    (type: boolean, default False, (readonly))
    
    :type: bool
    """


class GPUDOFSettings(bpy_struct):
    """Settings for GPU based depth of field"""

    blades = 0
    """Blades for dof effect
    (type: int in [0, 16], default 0)
    
    :type: int
    """

    focal_length = 0.0
    """Focal length for dof effect
    (type: float in [1, inf], default 0.0)
    
    :type: float
    """

    focus_distance = 0.0
    """Viewport depth of field focus distance
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    fstop = 0.0
    """F-stop for dof effect
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    is_hq_supported = False
    """Use high quality depth of field
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    sensor = 0.0
    """Size of sensor
    (type: float in [1, inf], default 0.0)
    
    :type: float
    """

    use_high_quality = False
    """Use high quality depth of field
    (type: boolean, default False)
    
    :type: bool
    """


class GPUFXSettings(bpy_struct):
    """Settings for GPU based compositing"""

    dof = None
    """(type: bpy.types.GPUDOFSettings, (readonly, never None))
    
    :type: GPUDOFSettings
    """

    ssao = None
    """(type: bpy.types.GPUSSAOSettings, (readonly, never None))
    
    :type: GPUSSAOSettings
    """

    use_dof = False
    """Use depth of field on viewport using the values from active camera
    (type: boolean, default False)
    
    :type: bool
    """

    use_ssao = False
    """Use screen space ambient occlusion of field on viewport
    (type: boolean, default False)
    
    :type: bool
    """


class GPUSSAOSettings(bpy_struct):
    """Settings for GPU based screen space ambient occlusion"""

    attenuation = 0.0
    """Attenuation constant
    (type: float in [1, 100000], default 0.0)
    
    :type: float
    """

    color = (0.0, 0.0, 0.0)
    """Color for screen space ambient occlusion effect
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    distance_max = 0.0
    """Distance of object that contribute to the SSAO effect
    (type: float in [0, 100000], default 0.0)
    
    :type: float
    """

    factor = 0.0
    """Strength of the SSAO effect
    (type: float in [0, 250], default 0.0)
    
    :type: float
    """

    samples = 0
    """Number of samples
    (type: int in [1, 500], default 0)
    
    :type: int
    """


class GPencilBrush(bpy_struct):
    """Collection of brushes being used to control the line style of new strokes"""

    angle = 0.0
    """Direction of the stroke at which brush gives maximal thickness (0° for horizontal)
    (type: float in [-1.5708, 1.5708], default 0.0)
    
    :type: float
    """

    angle_factor = 0.0
    """Reduce brush thickness by this factor when stroke is perpendicular to 'Angle' direction
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    curve_jitter = None
    """Curve used for the jitter effect
    (type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    curve_sensitivity = None
    """Curve used for the sensitivity
    (type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    curve_strength = None
    """Curve used for the strength
    (type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    jitter = 0.0
    """Jitter factor for new strokes
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    line_width = 0
    """Thickness of strokes (in pixels)
    (type: int in [1, 300], default 0)
    
    :type: int
    """

    name = ""
    """Brush name
    (type: string, default "", (never None))
    
    :type: str
    """

    pen_sensitivity_factor = 0.0
    """Pressure sensitivity factor for new strokes
    (type: float in [0.1, 3], default 0.0)
    
    :type: float
    """

    pen_smooth_factor = 0.0
    """Amount of smoothing to apply to newly created strokes, to reduce jitter/noise
    (type: float in [0, 2], default 0.0)
    
    :type: float
    """

    pen_smooth_steps = 0
    """Number of times to smooth newly created strokes
    (type: int in [1, 3], default 0)
    
    :type: int
    """

    pen_subdivision_steps = 0
    """Number of times to subdivide newly created strokes, for less jagged strokes
    (type: int in [0, 3], default 0)
    
    :type: int
    """

    random_press = 0.0
    """Randomness factor for pressure and strength in new strokes
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    random_subdiv = 0.0
    """Randomness factor for new strokes after subdivision
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    strength = 0.0
    """Color strength for new strokes (affect alpha factor of color)
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    use_jitter_pressure = False
    """Use tablet pressure for jitter
    (type: boolean, default False)
    
    :type: bool
    """

    use_pressure = False
    """Use tablet pressure
    (type: boolean, default False)
    
    :type: bool
    """

    use_random_pressure = False
    """Use random value for pressure
    (type: boolean, default False)
    
    :type: bool
    """

    use_random_strength = False
    """Use random value for strength
    (type: boolean, default False)
    
    :type: bool
    """

    use_strength_pressure = False
    """Use tablet pressure for color strength
    (type: boolean, default False)
    
    :type: bool
    """


class GPencilFrame(bpy_struct):
    """Collection of related sketches on a particular frame"""

    frame_number = 0
    """The frame on which this sketch appears
    (type: int in [-500000, 500000], default 0)
    
    :type: int
    """

    is_edited = False
    """Frame is being edited (painted on)
    (type: boolean, default False)
    
    :type: bool
    """

    select = False
    """Frame is selected for editing in the Dope Sheet
    (type: boolean, default False)
    
    :type: bool
    """

    strokes = None
    """Freehand curves defining the sketch on this frame
    (type: bpy.types.GPencilStrokes bpy.types.bpy_prop_collection of bpy.types.GPencilStroke, (readonly))
    
    :type: GPencilStrokes
    """

    def clear(self):
        """Remove all the grease pencil frame data"""


class GPencilFrames(bpy_struct):
    """Collection of grease pencil frames"""

    def new(self, frame_number):
        """Add a new grease pencil frame
        
        :param frame_number: Frame Number, The frame on which this sketch appears
            (type: int in [-500000, 500000])
        :type frame_number: int
        :return: The newly created frame
        :param : (type: bpy.types.GPencilFrame)
        :rtype: GPencilFrame
        """

    def remove(self, frame):
        """Remove a grease pencil frame
        
        :param frame: Frame, The frame to remove
            (type: bpy.types.GPencilFrame, (never None))
        :type frame: GPencilFrame
        """

    def copy(self, source):
        """Copy a grease pencil frame
        
        :param source: Source, The source frame
            (type: bpy.types.GPencilFrame, (never None))
        :type source: GPencilFrame
        :return: The newly copied frame
        :param : (type: bpy.types.GPencilFrame)
        :rtype: GPencilFrame
        """


class GPencilInterpolateSettings(bpy_struct):
    """Settings for Grease Pencil interpolation tools"""

    amplitude = 0.0
    """Amount to boost elastic bounces for 'elastic' easing
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    back = 0.0
    """Amount of overshoot for 'back' easing
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    easing = 'AUTO'
    """Which ends of the segment between the preceding and following grease pencil frames easing interpolation is applied to
    * 'AUTO': Automatic Easing, Easing type is chosen automatically based on what the type of interpolation used (e.g. 'Ease In' for transitional types, and 'Ease Out' for dynamic effects).
    * 'EASE_IN': Ease In, Only on the end closest to the next keyframe.
    * 'EASE_OUT': Ease Out, Only on the end closest to the first keyframe.
    * 'EASE_IN_OUT': Ease In and Out, Segment between both keyframes.
    (type: enum in ['AUTO', 'EASE_IN', 'EASE_OUT', 'EASE_IN_OUT'], default 'AUTO')
    
    :type: str
    """

    interpolate_all_layers = False
    """Interpolate all layers, not only active
    (type: boolean, default False)
    
    :type: bool
    """

    interpolate_selected_only = False
    """Interpolate only selected strokes in the original frame
    (type: boolean, default False)
    
    :type: bool
    """

    interpolation_curve = None
    """Custom curve to control 'sequence' interpolation between Grease Pencil frames
    (type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    period = 0.0
    """Time between bounces for elastic easing
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    type = 'LINEAR'
    """Interpolation method to use the next time 'Interpolate Sequence' is run
    * 'LINEAR': Linear, Straight-line interpolation between A and B (i.e. no ease in/out).
    * 'CUSTOM': Custom, Custom interpolation defined using a curve map.
    * 'SINE': Sinusoidal, Sinusoidal easing (weakest, almost linear but with a slight curvature).
    * 'QUAD': Quadratic, Quadratic easing.
    * 'CUBIC': Cubic, Cubic easing.
    * 'QUART': Quartic, Quartic easing.
    * 'QUINT': Quintic, Quintic easing.
    * 'EXPO': Exponential, Exponential easing (dramatic).
    * 'CIRC': Circular, Circular easing (strongest and most dynamic).
    * 'BACK': Back, Cubic easing with overshoot and settle.
    * 'BOUNCE': Bounce, Exponentially decaying parabolic bounce, like when objects collide.
    * 'ELASTIC': Elastic, Exponentially decaying sine wave, like an elastic band.
    (type: enum in ['LINEAR', 'CUSTOM', 'SINE', 'QUAD', 'CUBIC', 'QUART', 'QUINT', 'EXPO', 'CIRC', 'BACK', 'BOUNCE', 'ELASTIC'], default 'LINEAR')
    
    :type: str
    """


class GPencilLayer(bpy_struct):
    """Collection of related sketches"""

    active_frame = None
    """Frame currently being displayed for this layer
    (type: bpy.types.GPencilFrame, (readonly))
    
    :type: GPencilFrame
    """

    after_color = (0.0, 0.0, 0.0)
    """Base color for ghosts after the active frame
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    before_color = (0.0, 0.0, 0.0)
    """Base color for ghosts before the active frame
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    frames = None
    """Sketches for this layer on different frames
    (type: bpy.types.GPencilFrames bpy.types.bpy_prop_collection of bpy.types.GPencilFrame, (readonly))
    
    :type: GPencilFrames
    """

    ghost_after_range = 0
    """Maximum number of frames to show after current frame (0 = show only the next sketch, -1 = don't show any frames after current)
    (type: int in [-1, 120], default 0)
    
    :type: int
    """

    ghost_before_range = 0
    """Maximum number of frames to show before current frame (0 = show only the previous sketch, -1 = don't show any frames before current)
    (type: int in [-1, 120], default 0)
    
    :type: int
    """

    hide = False
    """Set layer Visibility
    (type: boolean, default False)
    
    :type: bool
    """

    info = ""
    """Layer name
    (type: string, default "", (never None))
    
    :type: str
    """

    is_parented = False
    """True when the layer parent object is set
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    line_change = 0
    """Thickness change to apply to current strokes (in pixels)
    (type: int in [-32768, 32767], default 0)
    
    :type: int
    """

    lock = False
    """Protect layer from further editing and/or frame changes
    (type: boolean, default False)
    
    :type: bool
    """

    lock_frame = False
    """Lock current frame displayed by layer
    (type: boolean, default False)
    
    :type: bool
    """

    matrix_inverse = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    """Parent inverse transformation matrix
    (type: float array of 16 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Matrix
    """

    opacity = 0.0
    """Layer Opacity
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    parent = None
    """Parent Object
    (type: bpy.types.Object)
    
    :type: Object
    """

    parent_bone = ""
    """Name of parent bone in case of a bone parenting relation
    (type: string, default "", (never None))
    
    :type: str
    """

    parent_type = 'OBJECT'
    """Type of parent relation
    * 'OBJECT': Object, The layer is parented to an object.
    * 'ARMATURE': Armature.
    * 'BONE': Bone, The layer is parented to a bone.
    (type: enum in ['OBJECT', 'ARMATURE', 'BONE'], default 'OBJECT')
    
    :type: str
    """

    select = False
    """Layer is selected for editing in the Dope Sheet
    (type: boolean, default False)
    
    :type: bool
    """

    show_points = False
    """Draw the points which make up the strokes (for debugging purposes)
    (type: boolean, default False)
    
    :type: bool
    """

    show_x_ray = False
    """Make the layer draw in front of objects
    (type: boolean, default False)
    
    :type: bool
    """

    tint_color = (0.0, 0.0, 0.0)
    """Color for tinting stroke colors
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    tint_factor = 0.0
    """Factor of tinting color
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    unlock_color = False
    """Unprotect selected colors from further editing and/or frame changes
    (type: boolean, default False)
    
    :type: bool
    """

    use_ghost_custom_colors = False
    """Use custom colors for ghost frames
    (type: boolean, default False)
    
    :type: bool
    """

    use_ghosts_always = False
    """Ghosts are shown in renders and animation playback. Useful for special effects (e.g. motion blur)
    (type: boolean, default False)
    
    :type: bool
    """

    use_onion_skinning = False
    """Ghost frames on either side of frame
    (type: boolean, default False)
    
    :type: bool
    """

    use_volumetric_strokes = False
    """Draw strokes as a series of circular blobs, resulting in a volumetric effect
    (type: boolean, default False)
    
    :type: bool
    """

    def clear(self):
        """Remove all the grease pencil layer data"""


class GPencilPalette(bpy_struct):
    """Collection of related palettes"""

    colors = None
    """Colors of the palette
    (type: bpy.types.GPencilPaletteColors bpy.types.bpy_prop_collection of bpy.types.GPencilPaletteColor, (readonly))
    
    :type: GPencilPaletteColors
    """

    name = ""
    """Palette name
    (type: string, default "", (never None))
    
    :type: str
    """


class GPencilPaletteColor(bpy_struct):
    """Collection of related colors"""

    alpha = 0.0
    """Color Opacity
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    color = (0.0, 0.0, 0.0)
    """Color for strokes
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    fill_alpha = 0.0
    """Opacity for filling region bounded by each stroke
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    fill_color = (0.0, 0.0, 0.0)
    """Color for filling region bounded by each stroke
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    ghost = False
    """Display strokes using this color when showing onion skins
    (type: boolean, default False)
    
    :type: bool
    """

    hide = False
    """Set color Visibility
    (type: boolean, default False)
    
    :type: bool
    """

    is_fill_visible = False
    """True when opacity of fill is set high enough to be visible
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_stroke_visible = False
    """True when opacity of stroke is set high enough to be visible
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    lock = False
    """Protect color from further editing and/or frame changes
    (type: boolean, default False)
    
    :type: bool
    """

    name = ""
    """Color name
    (type: string, default "", (never None))
    
    :type: str
    """

    use_hq_fill = False
    """Fill strokes using high quality to avoid glitches (slower fps during animation play)
    (type: boolean, default False)
    
    :type: bool
    """

    use_volumetric_strokes = False
    """Draw strokes as a series of circular blobs, resulting in a volumetric effect
    (type: boolean, default False)
    
    :type: bool
    """


class GPencilPaletteColors(bpy_struct):
    """Collection of palette colors"""

    active = None
    """Current active color
    (type: bpy.types.GPencilPaletteColor)
    
    :type: GPencilPaletteColor
    """

    active_index = 0
    """Index of active palette color
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    def new(self):
        """Add a new color to the palette
        
        :return: The newly created color
        :param : (type: bpy.types.GPencilPaletteColor)
        :rtype: GPencilPaletteColor
        """

    def remove(self, color):
        """Remove a color from the palette
        
        :param color: The color to remove
            (type: bpy.types.GPencilPaletteColor, (never None))
        :type color: GPencilPaletteColor
        """


class GPencilSculptBrush(bpy_struct):
    """Stroke editing brush"""

    affect_pressure = False
    """Affect pressure values as well when smoothing strokes
    (type: boolean, default False)
    
    :type: bool
    """

    direction = 'ADD'
    """
    * 'ADD': Add, Add effect of brush.
    * 'SUBTRACT': Subtract, Subtract effect of brush.
    (type: enum in ['ADD', 'SUBTRACT'], default 'ADD')
    
    :type: str
    """

    size = 0
    """Radius of the brush in pixels
    (type: int in [1, 500], default 0)
    
    :type: int
    """

    strength = 0.0
    """Brush strength
    (type: float in [0.001, 1], default 0.0)
    
    :type: float
    """

    use_falloff = False
    """Strength of brush decays with distance from cursor
    (type: boolean, default False)
    
    :type: bool
    """

    use_pressure_strength = False
    """Enable tablet pressure sensitivity for strength
    (type: boolean, default False)
    
    :type: bool
    """


class GPencilSculptSettings(bpy_struct):
    """Properties for Grease Pencil stroke sculpting tool"""

    affect_position = False
    """The brush affects the position of the point
    (type: boolean, default False)
    
    :type: bool
    """

    affect_strength = False
    """The brush affects the color strength of the point
    (type: boolean, default False)
    
    :type: bool
    """

    affect_thickness = False
    """The brush affects the thickness of the point
    (type: boolean, default False)
    
    :type: bool
    """

    brush = None
    """(type: bpy.types.GPencilSculptBrush, (readonly))
    
    :type: GPencilSculptBrush
    """

    lockaxis = 'GP_LOCKAXIS_NONE'
    """
    * 'GP_LOCKAXIS_NONE': None.
    * 'GP_LOCKAXIS_X': X, Project strokes to plane locked to X.
    * 'GP_LOCKAXIS_Y': Y, Project strokes to plane locked to Y.
    * 'GP_LOCKAXIS_Z': Z, Project strokes to plane locked to Z.
    (type: enum in ['GP_LOCKAXIS_NONE', 'GP_LOCKAXIS_X', 'GP_LOCKAXIS_Y', 'GP_LOCKAXIS_Z'], default 'GP_LOCKAXIS_NONE')
    
    :type: str
    """

    selection_alpha = 0.0
    """Alpha value for selected vertices
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    tool = 'SMOOTH'
    """
    * 'SMOOTH': Smooth, Smooth stroke points.
    * 'THICKNESS': Thickness, Adjust thickness of strokes.
    * 'STRENGTH': Strength, Adjust color strength of strokes.
    * 'GRAB': Grab, Translate the set of points initially within the brush circle.
    * 'PUSH': Push, Move points out of the way, as if combing them.
    * 'TWIST': Twist, Rotate points around the midpoint of the brush.
    * 'PINCH': Pinch, Pull points towards the midpoint of the brush.
    * 'RANDOMIZE': Randomize, Introduce jitter/randomness into strokes.
    * 'CLONE': Clone, Paste copies of the strokes stored on the clipboard.
    (type: enum in ['SMOOTH', 'THICKNESS', 'STRENGTH', 'GRAB', 'PUSH', 'TWIST', 'PINCH', 'RANDOMIZE', 'CLONE'], default 'SMOOTH')
    
    :type: str
    """

    use_select_mask = False
    """Only sculpt selected stroke points
    (type: boolean, default False)
    
    :type: bool
    """


class GPencilStroke(bpy_struct):
    """Freehand curve defining part of a sketch"""

    color = None
    """Color from palette used in Stroke
    (type: bpy.types.GPencilPaletteColor, (readonly))
    
    :type: GPencilPaletteColor
    """

    colorname = ""
    """Palette color name
    (type: string, default "", (never None))
    
    :type: str
    """

    draw_cyclic = False
    """Enable cyclic drawing, closing the stroke
    (type: boolean, default False)
    
    :type: bool
    """

    draw_mode = 'SCREEN'
    """
    * 'SCREEN': Screen, Stroke is in screen-space.
    * '3DSPACE': 3D Space, Stroke is in 3D-space.
    * '2DSPACE': 2D Space, Stroke is in 2D-space.
    * '2DIMAGE': 2D Image, Stroke is in 2D-space (but with special 'image' scaling).
    (type: enum in ['SCREEN', '3DSPACE', '2DSPACE', '2DIMAGE'], default 'SCREEN')
    
    :type: str
    """

    line_width = 0
    """Thickness of stroke (in pixels)
    (type: int in [1, 300], default 0)
    
    :type: int
    """

    points = None
    """Stroke data points
    (type: bpy.types.GPencilStrokePoints bpy.types.bpy_prop_collection of bpy.types.GPencilStrokePoint, (readonly))
    
    :type: GPencilStrokePoints
    """

    select = False
    """Stroke is selected for viewport editing
    (type: boolean, default False)
    
    :type: bool
    """

    triangles = None
    """Triangulation data for HQ fill
    (type: bpy.types.bpy_prop_collection of bpy.types.GPencilTriangle, (readonly))
    
    :type: bpy_prop_collection
    """


class GPencilStrokePoint(bpy_struct):
    """Data point for freehand stroke curve"""

    co = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    pressure = 0.0
    """Pressure of tablet at point when drawing it
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    select = False
    """Point is selected for viewport editing
    (type: boolean, default False)
    
    :type: bool
    """

    strength = 0.0
    """Color intensity (alpha factor)
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """


class GPencilStrokePoints(bpy_struct):
    """Collection of grease pencil stroke points"""

    def add(self, count=1, pressure=1.0, strength=1.0):
        """Add a new grease pencil stroke point
        
        :param count: Number, Number of points to add to the stroke
            (type: int in [0, inf], (optional))
        :type count: int
        :param pressure: Pressure, Pressure for newly created points
            (type: float in [0, 1], (optional))
        :type pressure: float
        :param strength: Strength, Color intensity (alpha factor) for newly created points
            (type: float in [0, 1], (optional))
        :type strength: float
        """

    def pop(self, index=-1):
        """Remove a grease pencil stroke point
        
        :param index: Index, point index
            (type: int in [-inf, inf], (optional))
        :type index: int
        """


class GPencilStrokes(bpy_struct):
    """Collection of grease pencil stroke"""

    def new(self, colorname=""):
        """Add a new grease pencil stroke
        
        :param colorname: Color, Name of the color
            (type: str, (optional, never None))
        :type colorname: str
        :return: The newly created stroke
        :param : (type: bpy.types.GPencilStroke)
        :rtype: GPencilStroke
        """

    def remove(self, stroke):
        """Remove a grease pencil stroke
        
        :param stroke: Stroke, The stroke to remove
            (type: bpy.types.GPencilStroke, (never None))
        :type stroke: GPencilStroke
        """


class GPencilTriangle(bpy_struct):
    """Triangulation data for HQ fill"""

    v1 = 0
    """First triangle vertex index
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    v2 = 0
    """Second triangle vertex index
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    v3 = 0
    """Third triangle vertex index
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """


class GameObjectSettings(bpy_struct):
    """Game engine related settings for the object"""

    actuators = None
    """Game engine actuators to act on events
    (type: bpy.types.bpy_prop_collection of bpy.types.Actuator, (readonly))
    
    :type: bpy_prop_collection
    """

    angular_velocity_max = 0.0
    """Clamp angular velocity to this maximum speed, in angle per second
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """

    angular_velocity_min = 0.0
    """Clamp angular velocity to this minimum speed (except when totally still), in angle per second
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """

    collision_bounds_type = 'BOX'
    """Select the collision shape that better fits the object
    (type: enum in ['BOX', 'SPHERE', 'CYLINDER', 'CONE', 'CONVEX_HULL', 'TRIANGLE_MESH', 'CAPSULE'], default 'BOX')
    
    :type: str
    """

    collision_group = (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
    """The collision group of the object
    (type: boolean array of 16 items, default (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False))
    
    :type: collections.Sequence[bool]
    """

    collision_margin = 0.04
    """Extra margin around object for collision detection, small amount required for stability
    (type: float in [0, 1], default 0.04)
    
    :type: float
    """

    collision_mask = (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
    """The groups this object can collide with
    (type: boolean array of 16 items, default (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False))
    
    :type: collections.Sequence[bool]
    """

    controllers = None
    """Game engine controllers to process events, connecting sensors to actuators
    (type: bpy.types.bpy_prop_collection of bpy.types.Controller, (readonly))
    
    :type: bpy_prop_collection
    """

    damping = 0.04
    """General movement damping
    (type: float in [0, 1], default 0.04)
    
    :type: float
    """

    fall_speed = 55.0
    """Maximum speed at which the character will fall
    (type: float in [0, 1000], default 55.0)
    
    :type: float
    """

    form_factor = 0.4
    """Form factor scales the inertia tensor
    (type: float in [0, 1], default 0.4)
    
    :type: float
    """

    friction_coefficients = (0.0, 0.0, 0.0)
    """Relative friction coefficients in the in the X, Y and Z directions, when anisotropic friction is enabled
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    jump_max = 1
    """The maximum number of jumps the character can make before it hits the ground
    (type: int in [1, 255], default 1)
    
    :type: int
    """

    jump_speed = 10.0
    """Upward velocity applied to the character when jumping
    (type: float in [0, 1000], default 10.0)
    
    :type: float
    """

    lock_location_x = False
    """Disable simulation of linear motion along the X axis
    (type: boolean, default False)
    
    :type: bool
    """

    lock_location_y = False
    """Disable simulation of linear motion along the Y axis
    (type: boolean, default False)
    
    :type: bool
    """

    lock_location_z = False
    """Disable simulation of linear motion along the Z axis
    (type: boolean, default False)
    
    :type: bool
    """

    lock_rotation_x = False
    """Disable simulation of angular motion along the X axis
    (type: boolean, default False)
    
    :type: bool
    """

    lock_rotation_y = False
    """Disable simulation of angular motion along the Y axis
    (type: boolean, default False)
    
    :type: bool
    """

    lock_rotation_z = False
    """Disable simulation of angular motion along the Z axis
    (type: boolean, default False)
    
    :type: bool
    """

    mass = 1.0
    """Mass of the object
    (type: float in [0.01, 10000], default 1.0)
    
    :type: float
    """

    obstacle_radius = 1.0
    """Radius of object representation in obstacle simulation
    (type: float in [0, 1000], default 1.0)
    
    :type: float
    """

    physics_type = 'STATIC'
    """Select the type of physical representation
    * 'NO_COLLISION': No Collision, Disable collision for this object.
    * 'STATIC': Static, Stationary object.
    * 'DYNAMIC': Dynamic, Linear physics.
    * 'RIGID_BODY': Rigid Body, Linear and angular physics.
    * 'SOFT_BODY': Soft Body, Soft body.
    * 'OCCLUDER': Occluder, Occluder for optimizing scene rendering.
    * 'SENSOR': Sensor, Collision Sensor, detects static and dynamic objects but not the other collision sensor objects.
    * 'NAVMESH': Navigation Mesh, Navigation mesh.
    * 'CHARACTER': Character, Simple kinematic physics appropriate for game characters.
    (type: enum in ['NO_COLLISION', 'STATIC', 'DYNAMIC', 'RIGID_BODY', 'SOFT_BODY', 'OCCLUDER', 'SENSOR', 'NAVMESH', 'CHARACTER'], default 'STATIC')
    
    :type: str
    """

    properties = None
    """Game engine properties
    (type: bpy.types.bpy_prop_collection of bpy.types.GameProperty, (readonly))
    
    :type: bpy_prop_collection
    """

    radius = 1.0
    """Radius of bounding sphere and material physics
    (type: float in [0.01, inf], default 1.0)
    
    :type: float
    """

    rotation_damping = 0.1
    """General rotation damping
    (type: float in [0, 1], default 0.1)
    
    :type: float
    """

    sensors = None
    """Game engine sensor to detect events
    (type: bpy.types.bpy_prop_collection of bpy.types.Sensor, (readonly))
    
    :type: bpy_prop_collection
    """

    show_actuators = False
    """Shows actuators for this object in the user interface
    (type: boolean, default False)
    
    :type: bool
    """

    show_controllers = False
    """Shows controllers for this object in the user interface
    (type: boolean, default False)
    
    :type: bool
    """

    show_debug_state = False
    """Print state debug info in the game engine
    (type: boolean, default False)
    
    :type: bool
    """

    show_sensors = False
    """Shows sensors for this object in the user interface
    (type: boolean, default False)
    
    :type: bool
    """

    show_state_panel = False
    """Show state panel
    (type: boolean, default False)
    
    :type: bool
    """

    soft_body = None
    """Settings for Bullet soft body simulation
    (type: bpy.types.GameSoftBodySettings, (readonly))
    
    :type: GameSoftBodySettings
    """

    states_initial = (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
    """Initial state when the game starts
    (type: boolean array of 30 items, default (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False))
    
    :type: collections.Sequence[bool]
    """

    states_visible = (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
    """State determining which controllers are displayed
    (type: boolean array of 30 items, default (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False))
    
    :type: collections.Sequence[bool]
    """

    step_height = 0.15
    """Maximum height of steps the character can run over
    (type: float in [0.01, 1], default 0.15)
    
    :type: float
    """

    use_activity_culling = False
    """Disable simulation of angular motion along the Z axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_actor = False
    """Object is detected by the Near and Radar sensor
    (type: boolean, default False)
    
    :type: bool
    """

    use_all_states = False
    """Set all state bits
    (type: boolean, default False)
    
    :type: bool
    """

    use_anisotropic_friction = False
    """Enable anisotropic friction
    (type: boolean, default False)
    
    :type: bool
    """

    use_collision_bounds = False
    """Specify a collision bounds type other than the default
    (type: boolean, default False)
    
    :type: bool
    """

    use_collision_compound = False
    """Add children to form a compound collision object
    (type: boolean, default False)
    
    :type: bool
    """

    use_ghost = False
    """Object does not react to collisions, like a ghost
    (type: boolean, default False)
    
    :type: bool
    """

    use_material_physics_fh = False
    """React to force field physics settings in materials
    (type: boolean, default False)
    
    :type: bool
    """

    use_obstacle_create = False
    """Create representation for obstacle simulation
    (type: boolean, default False)
    
    :type: bool
    """

    use_record_animation = False
    """Record animation objects without physics
    (type: boolean, default False)
    
    :type: bool
    """

    use_rotate_from_normal = False
    """Use face normal to rotate object, so that it points away from the surface
    (type: boolean, default False)
    
    :type: bool
    """

    use_sleep = False
    """Disable auto (de)activation in physics simulation
    (type: boolean, default False)
    
    :type: bool
    """

    used_states = (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
    """States which are being used by controllers
    (type: boolean array of 30 items, default (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False), (readonly))
    
    :type: collections.Sequence[bool]
    """

    velocity_max = 0.0
    """Clamp velocity to this maximum speed, in distance per second
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """

    velocity_min = 0.0
    """Clamp velocity to this minimum speed (except when totally still), in distance per second
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """


class GameProperty(bpy_struct):
    """Game engine user defined object property"""

    name = ""
    """Available as GameObject attributes in the game engine's python API
    (type: string, default "", (never None))
    
    :type: str
    """

    show_debug = False
    """Print debug information for this property
    (type: boolean, default False)
    
    :type: bool
    """

    type = 'BOOL'
    """
    * 'BOOL': Boolean, Boolean Property.
    * 'INT': Integer, Integer Property.
    * 'FLOAT': Float, Floating-Point Property.
    * 'STRING': String, String Property.
    * 'TIMER': Timer, Timer Property.
    (type: enum in ['BOOL', 'INT', 'FLOAT', 'STRING', 'TIMER'], default 'BOOL')
    
    :type: str
    """


class GameSoftBodySettings(bpy_struct):
    """Soft body simulation settings for an object in the game engine"""

    cluster_iterations = 0
    """Number of cluster iterations
    (type: int in [1, 128], default 0)
    
    :type: int
    """

    collision_margin = 0.0
    """Collision margin for soft body. Small value makes the algorithm unstable
    (type: float in [0.01, 1], default 0.0)
    
    :type: float
    """

    dynamic_friction = 0.0
    """Dynamic Friction
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    linear_stiffness = 0.0
    """Linear stiffness of the soft body links
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    location_iterations = 0
    """Position solver iterations
    (type: int in [0, 10], default 0)
    
    :type: int
    """

    shape_threshold = 0.0
    """Shape matching threshold
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    use_bending_constraints = False
    """Enable bending constraints
    (type: boolean, default False)
    
    :type: bool
    """

    use_cluster_rigid_to_softbody = False
    """Enable cluster collision between soft and rigid body
    (type: boolean, default False)
    
    :type: bool
    """

    use_cluster_soft_to_softbody = False
    """Enable cluster collision between soft and soft body
    (type: boolean, default False)
    
    :type: bool
    """

    use_shape_match = False
    """Enable soft body shape matching goal
    (type: boolean, default False)
    
    :type: bool
    """

    weld_threshold = 0.0
    """Welding threshold: distance between nearby vertices to be considered equal => set to 0.0 to disable welding test and speed up scene loading (ok if the mesh has no duplicates)
    (type: float in [0, 0.01], default 0.0)
    
    :type: float
    """


class GreasePencilBrushes(bpy_struct):
    """Collection of grease pencil brushes"""

    active = None
    """Current active brush
    (type: bpy.types.GPencilBrush)
    
    :type: GPencilBrush
    """

    active_index = 0
    """Index of active brush
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    def new(self, name, set_active=False):
        """Add a new grease pencil brush
        
        :param name: Name, Name of the brush
            (type: str, (never None))
        :type name: str
        :param set_active: Set Active, Set the newly created brush to the active brush
            (type: boolean, (optional))
        :type set_active: bool
        :return: The newly created brush
        :param : (type: bpy.types.GPencilBrush)
        :rtype: GPencilBrush
        """

    def remove(self, brush):
        """Remove a grease pencil brush
        
        :param brush: The brush to remove
            (type: bpy.types.GPencilBrush, (never None))
        :type brush: GPencilBrush
        """


class GreasePencilLayers(bpy_struct):
    """Collection of grease pencil layers"""

    active = None
    """Active grease pencil layer
    (type: bpy.types.GPencilLayer)
    
    :type: GPencilLayer
    """

    active_index = 0
    """Index of active grease pencil layer
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    def new(self, name, set_active=True):
        """Add a new grease pencil layer
        
        :param name: Name, Name of the layer
            (type: str, (never None))
        :type name: str
        :param set_active: Set Active, Set the newly created layer to the active layer
            (type: boolean, (optional))
        :type set_active: bool
        :return: The newly created layer
        :param : (type: bpy.types.GPencilLayer)
        :rtype: GPencilLayer
        """

    def remove(self, layer):
        """Remove a grease pencil layer
        
        :param layer: The layer to remove
            (type: bpy.types.GPencilLayer, (never None))
        :type layer: GPencilLayer
        """


class GreasePencilPalettes(bpy_struct):
    """Collection of grease pencil palettes"""

    active = None
    """Current active palette
    (type: bpy.types.GPencilPalette)
    
    :type: GPencilPalette
    """

    active_index = 0
    """Index of active palette
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    def new(self, name, set_active=True):
        """Add a new grease pencil palette
        
        :param name: Name, Name of the palette
            (type: str, (never None))
        :type name: str
        :param set_active: Set Active, Activate the newly created palette
            (type: boolean, (optional))
        :type set_active: bool
        :return: The newly created palette
        :param : (type: bpy.types.GPencilPalette)
        :rtype: GPencilPalette
        """

    def remove(self, palette):
        """Remove a grease pencil palette
        
        :param palette: The palette to remove
            (type: bpy.types.GPencilPalette, (never None))
        :type palette: GPencilPalette
        """


class GroupObjects(bpy_struct):
    """Collection of group objects"""

    def link(self, object):
        """Add this object to a group
        
        :param object: Object to add
            (type: bpy.types.Object, (never None))
        :type object: Object
        """

    def unlink(self, object):
        """Remove this object to a group
        
        :param object: Object to remove
            (type: bpy.types.Object)
        :type object: Object
        """


class Header(bpy_struct):
    """Editor header containing UI elements"""

    bl_idname = ""
    """If this is set, the header gets a custom ID, otherwise it takes the name of the class used to define the panel; for example, if the class name is "OBJECT_HT_hello", and bl_idname is not set by the script, then bl_idname = "OBJECT_HT_hello"
    (type: string, default "", (never None))
    
    :type: str
    """

    bl_space_type = 'EMPTY'
    """The space where the header is going to be used in
    * 'EMPTY': Empty.
    * 'VIEW_3D': 3D View, 3D viewport.
    * 'TIMELINE': Timeline, Timeline and playback controls.
    * 'GRAPH_EDITOR': Graph Editor, Edit drivers and keyframe interpolation.
    * 'DOPESHEET_EDITOR': Dope Sheet, Adjust timing of keyframes.
    * 'NLA_EDITOR': NLA Editor, Combine and layer Actions.
    * 'IMAGE_EDITOR': UV/Image Editor, View and edit images and UV Maps.
    * 'SEQUENCE_EDITOR': Video Sequence Editor, Video editing tools.
    * 'CLIP_EDITOR': Movie Clip Editor, Motion tracking tools.
    * 'TEXT_EDITOR': Text Editor, Edit scripts and in-file documentation.
    * 'NODE_EDITOR': Node Editor, Editor for node-based shading and compositing tools.
    * 'LOGIC_EDITOR': Logic Editor, Game logic editing.
    * 'PROPERTIES': Properties, Edit properties of active object and related data-blocks.
    * 'OUTLINER': Outliner, Overview of scene graph and all available data-blocks.
    * 'USER_PREFERENCES': User Preferences, Edit persistent configuration settings.
    * 'INFO': Info, Main menu bar and list of error messages (drag down to expand and display).
    * 'FILE_BROWSER': File Browser, Browse for files and assets.
    * 'CONSOLE': Python Console, Interactive programmatic console for advanced editing and script development.
    (type: enum in ['EMPTY', 'VIEW_3D', 'TIMELINE', 'GRAPH_EDITOR', 'DOPESHEET_EDITOR', 'NLA_EDITOR', 'IMAGE_EDITOR', 'SEQUENCE_EDITOR', 'CLIP_EDITOR', 'TEXT_EDITOR', 'NODE_EDITOR', 'LOGIC_EDITOR', 'PROPERTIES', 'OUTLINER', 'USER_PREFERENCES', 'INFO', 'FILE_BROWSER', 'CONSOLE'], default 'EMPTY')
    
    :type: str
    """

    layout = None
    """Structure of the header in the UI
    (type: bpy.types.UILayout, (readonly))
    
    :type: UILayout
    """

    def draw(self, context):
        """Draw UI elements into the header UI layout"""


class Histogram(bpy_struct):
    """Statistical view of the levels of color in an image"""

    mode = 'LUMA'
    """Channels to display when drawing the histogram
    * 'LUMA': Luma, Luma.
    * 'RGB': RGB, Red Green Blue.
    * 'R': R, Red.
    * 'G': G, Green.
    * 'B': B, Blue.
    * 'A': A, Alpha.
    (type: enum in ['LUMA', 'RGB', 'R', 'G', 'B', 'A'], default 'LUMA')
    
    :type: str
    """

    show_line = False
    """Display lines rather than filled shapes
    (type: boolean, default False)
    
    :type: bool
    """


class ID(bpy_struct):
    """Base type for data-blocks, defining a unique name, linking from other libraries and garbage collection"""

    is_library_indirect = False
    """Is this ID block linked indirectly
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_updated = False
    """Data-block is tagged for recalculation
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_updated_data = False
    """Data-block data is tagged for recalculation
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    library = None
    """Library file the data-block is linked from
    (type: bpy.types.Library, (readonly))
    
    :type: Library
    """

    name = ""
    """Unique data-block ID name
    (type: string, default "", (never None))
    
    :type: str
    """

    preview = None
    """Preview image and icon of this data-block (None if not supported for this type of data)
    (type: bpy.types.ImagePreview, (readonly))
    
    :type: ImagePreview
    """

    tag = False
    """Tools can use this to tag data for their own purposes (initial state is undefined)
    (type: boolean, default False)
    
    :type: bool
    """

    use_fake_user = False
    """Save this data-block even if it has no users
    (type: boolean, default False)
    
    :type: bool
    """

    users = 0
    """Number of times this data-block is referenced
    (type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """

    def copy(self):
        """Create a copy of this data-block (not supported for all data-blocks)
        
        :return: New copy of the ID
        :param : (type: bpy.types.ID)
        :rtype: ID
        """

    def user_clear(self):
        """Clear the user count of a data-block so its not saved, on reload the data will be removed
        This function is for advanced use only, misuse can crash blender since the user
                                    count is used to prevent data being removed when it is used.
        """

    def user_remap(self, new_id):
        """Replace all usage in the .blend file of this ID by new given one
        
        :param new_id: New ID to use
            (type: bpy.types.ID, (never None))
        :type new_id: ID
        """

    def make_local(self, clear_proxy=True):
        """Make this datablock local, return local one (may be a copy of the original, in case it is also indirectly used)
        
        :param clear_proxy: Whether to clear proxies (the default behavior, note that if object has to be duplicated to be made local, proxies are always cleared)
            (type: boolean, (optional))
        :type clear_proxy: bool
        :return: This ID, or the new ID if it was copied
        :param : (type: bpy.types.ID)
        :rtype: ID
        """

    def user_of_id(self, id):
        """Count the number of times that ID uses/references given one
        
        :param id: ID to count usages
            (type: bpy.types.ID, (never None))
        :type id: ID
        :return: Number of usages/references of given id by current data-block
        :param : (type: int in [0, inf])
        :rtype: int
        """

    def animation_data_create(self):
        """Create animation data to this ID, note that not all ID types support this
        
        :return: New animation data or NULL
        :param : (type: bpy.types.AnimData)
        :rtype: AnimData
        """

    def animation_data_clear(self):
        """Clear animation on this this ID"""

    def update_tag(self, refresh={}):
        """Tag the ID to update its display data, e.g. when calling bpy.types.Scene.update
        
        :param refresh: Type of updates to perform
            (type: enum set in {'OBJECT', 'DATA', 'TIME'}, (optional))
        :type refresh: enum set in {'OBJECT', 'DATA', 'TIME'}
        """


class IDMaterials(bpy_struct):
    """Collection of materials"""

    def append(self, material):
        """Add a new material to the data-block
        
        :param material: Material to add
            (type: bpy.types.Material)
        :type material: Material
        """

    def pop(self, index=-1, update_data=False):
        """Remove a material from the data-block
        
        :param index: Index of material to remove
            (type: int in [-32766, 32766], (optional))
        :type index: int
        :param update_data: Update data by re-adjusting the material slots assigned
            (type: boolean, (optional))
        :type update_data: bool
        :return: Material to remove
        :param : (type: bpy.types.Material)
        :rtype: Material
        """

    def clear(self, update_data=False):
        """Remove all materials from the data-block
        
        :param update_data: Update data by re-adjusting the material slots assigned
            (type: boolean, (optional))
        :type update_data: bool
        """


class IKParam(bpy_struct):
    """Base type for IK solver parameters"""

    ik_solver = 'LEGACY'
    """IK solver for which these parameters are defined
    * 'LEGACY': Standard, Original IK solver.
    * 'ITASC': iTaSC, Multi constraint, stateful IK solver.
    (type: enum in ['LEGACY', 'ITASC'], default 'LEGACY', (readonly))
    
    :type: str
    """


class ImageFormatSettings(bpy_struct):
    """Settings for image formats"""

    cineon_black = 0
    """Log conversion reference blackpoint
    (type: int in [0, 1024], default 0)
    
    :type: int
    """

    cineon_gamma = 0.0
    """Log conversion gamma
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    cineon_white = 0
    """Log conversion reference whitepoint
    (type: int in [0, 1024], default 0)
    
    :type: int
    """

    color_depth = '8'
    """Bit depth per channel
    * '8': 8, 8 bit color channels.
    * '10': 10, 10 bit color channels.
    * '12': 12, 12 bit color channels.
    * '16': 16, 16 bit color channels.
    * '32': 32, 32 bit color channels.
    (type: enum in ['8', '10', '12', '16', '32'], default '8')
    
    :type: str
    """

    color_mode = 'BW'
    """Choose BW for saving grayscale images, RGB for saving red, green and blue channels, and RGBA for saving red, green, blue and alpha channels
    * 'BW': BW, Images get saved in 8 bits grayscale (only PNG, JPEG, TGA, TIF).
    * 'RGB': RGB, Images are saved with RGB (color) data.
    * 'RGBA': RGBA, Images are saved with RGB and Alpha data (if supported).
    (type: enum in ['BW', 'RGB', 'RGBA'], default 'BW')
    
    :type: str
    """

    compression = 0
    """Amount of time to determine best compression: 0 = no compression with fast file output, 100 = maximum lossless compression with slow file output
    (type: int in [0, 100], default 0)
    
    :type: int
    """

    display_settings = None
    """Settings of device saved image would be displayed on
    (type: bpy.types.ColorManagedDisplaySettings, (readonly))
    
    :type: ColorManagedDisplaySettings
    """

    exr_codec = 'NONE'
    """Codec settings for OpenEXR
    (type: enum in ['NONE', 'PXR24', 'ZIP', 'PIZ', 'RLE', 'ZIPS', 'B44', 'B44A', 'DWAA', 'DWAB'], default 'NONE')
    
    :type: str
    """

    file_format = 'TARGA'
    """File format to save the rendered images as
    * 'BMP': BMP, Output image in bitmap format.
    * 'IRIS': Iris, Output image in (old!) SGI IRIS format.
    * 'PNG': PNG, Output image in PNG format.
    * 'JPEG': JPEG, Output image in JPEG format.
    * 'JPEG2000': JPEG 2000, Output image in JPEG 2000 format.
    * 'TARGA': Targa, Output image in Targa format.
    * 'TARGA_RAW': Targa Raw, Output image in uncompressed Targa format.
    * 'CINEON': Cineon, Output image in Cineon format.
    * 'DPX': DPX, Output image in DPX format.
    * 'OPEN_EXR_MULTILAYER': OpenEXR MultiLayer, Output image in multilayer OpenEXR format.
    * 'OPEN_EXR': OpenEXR, Output image in OpenEXR format.
    * 'HDR': Radiance HDR, Output image in Radiance HDR format.
    * 'TIFF': TIFF, Output image in TIFF format.
    * 'AVI_JPEG': AVI JPEG, Output video in AVI JPEG format.
    * 'AVI_RAW': AVI Raw, Output video in AVI Raw format.
    * 'FRAMESERVER': Frame Server, Output image to a frameserver.
    * 'FFMPEG': FFmpeg video, The most versatile way to output video files.
    (type: enum in ['BMP', 'IRIS', 'PNG', 'JPEG', 'JPEG2000', 'TARGA', 'TARGA_RAW', 'CINEON', 'DPX', 'OPEN_EXR_MULTILAYER', 'OPEN_EXR', 'HDR', 'TIFF', 'AVI_JPEG', 'AVI_RAW', 'FRAMESERVER', 'FFMPEG'], default 'TARGA')
    
    :type: str
    """

    jpeg2k_codec = 'JP2'
    """Codec settings for Jpeg2000
    (type: enum in ['JP2', 'J2K'], default 'JP2')
    
    :type: str
    """

    quality = 0
    """Quality for image formats that support lossy compression
    (type: int in [0, 100], default 0)
    
    :type: int
    """

    stereo_3d_format = None
    """Settings for stereo 3d
    (type: bpy.types.Stereo3dFormat, (readonly, never None))
    
    :type: Stereo3dFormat
    """

    tiff_codec = 'DEFLATE'
    """Compression mode for TIFF
    (type: enum in ['NONE', 'DEFLATE', 'LZW', 'PACKBITS'], default 'DEFLATE')
    
    :type: str
    """

    use_cineon_log = False
    """Convert to logarithmic color space
    (type: boolean, default False)
    
    :type: bool
    """

    use_jpeg2k_cinema_48 = False
    """Use Openjpeg Cinema Preset (48fps)
    (type: boolean, default False)
    
    :type: bool
    """

    use_jpeg2k_cinema_preset = False
    """Use Openjpeg Cinema Preset
    (type: boolean, default False)
    
    :type: bool
    """

    use_jpeg2k_ycc = False
    """Save luminance-chrominance-chrominance channels instead of RGB colors
    (type: boolean, default False)
    
    :type: bool
    """

    use_preview = False
    """When rendering animations, save JPG preview images in same directory
    (type: boolean, default False)
    
    :type: bool
    """

    use_zbuffer = False
    """Save the z-depth per pixel (32 bit unsigned int z-buffer)
    (type: boolean, default False)
    
    :type: bool
    """

    view_settings = None
    """Color management settings applied on image before saving
    (type: bpy.types.ColorManagedViewSettings, (readonly))
    
    :type: ColorManagedViewSettings
    """

    views_format = 'INDIVIDUAL'
    """Format of multiview media
    * 'INDIVIDUAL': Individual, Individual files for each view with the prefix as defined by the scene views.
    * 'STEREO_3D': Stereo 3D, Single file with an encoded stereo pair.
    (type: enum in ['INDIVIDUAL', 'STEREO_3D'], default 'INDIVIDUAL')
    
    :type: str
    """


class ImagePackedFile(bpy_struct):
    """"""

    filepath = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    packed_file = None
    """(type: bpy.types.PackedFile, (readonly))
    
    :type: PackedFile
    """

    def save(self):
        """Save the packed file to its filepath"""


class ImagePreview(bpy_struct):
    """Preview image and icon"""

    icon_id = 0
    """Unique integer identifying this preview as an icon (zero means invalid)
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    icon_pixels = 0
    """Icon pixels, as bytes (always RGBA 32bits)
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    icon_pixels_float = 0.0
    """Icon pixels components, as floats (RGBA concatenated values)
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    icon_size = (0, 0)
    """Width and height in pixels
    (type: int array of 2 items in [-inf, inf], default (0, 0))
    
    :type: collections.Sequence[int]
    """

    image_pixels = 0
    """Image pixels, as bytes (always RGBA 32bits)
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    image_pixels_float = 0.0
    """Image pixels components, as floats (RGBA concatenated values)
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    image_size = (0, 0)
    """Width and height in pixels
    (type: int array of 2 items in [-inf, inf], default (0, 0))
    
    :type: collections.Sequence[int]
    """

    is_icon_custom = False
    """True if this preview icon has been modified by py script,and is no more auto-generated by Blender
    (type: boolean, default False)
    
    :type: bool
    """

    is_image_custom = False
    """True if this preview image has been modified by py script,and is no more auto-generated by Blender
    (type: boolean, default False)
    
    :type: bool
    """

    def reload(self):
        """Reload the preview from its source path"""


class ImageUser(bpy_struct):
    """Parameters defining how an Image data-block is used by another data-block"""

    fields_per_frame = 0
    """Number of fields per rendered frame (2 fields is 1 image)
    (type: int in [1, 200], default 0)
    
    :type: int
    """

    frame_current = 0
    """Current frame number in image sequence or movie
    (type: int in [-500000, 500000], default 0)
    
    :type: int
    """

    frame_duration = 0
    """Number of images of a movie to use
    (type: int in [0, 500000], default 0)
    
    :type: int
    """

    frame_offset = 0
    """Offset the number of the frame to use in the animation
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    frame_start = 0
    """Global starting frame of the movie/sequence, assuming first picture has a #1
    (type: int in [-500000, 500000], default 0)
    
    :type: int
    """

    multilayer_layer = 0
    """Layer in multilayer image
    (type: int in [0, 32767], default 0, (readonly))
    
    :type: int
    """

    multilayer_pass = 0
    """Pass in multilayer image
    (type: int in [0, 32767], default 0, (readonly))
    
    :type: int
    """

    multilayer_view = 0
    """View in multilayer image
    (type: int in [0, 32767], default 0, (readonly))
    
    :type: int
    """

    use_auto_refresh = False
    """Always refresh image on frame changes
    (type: boolean, default False)
    
    :type: bool
    """

    use_cyclic = False
    """Cycle the images in the movie
    (type: boolean, default False)
    
    :type: bool
    """


class ImapaintToolCapabilities(bpy_struct):
    """Read-only indications of which brush operations are supported by the current image paint brush"""

    has_accumulate = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    has_radius = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    has_space_attenuation = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """


class KeyConfig(bpy_struct):
    """Input configuration, including keymaps"""

    is_user_defined = False
    """Indicates that a keyconfig was defined by the user
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    keymaps = None
    """Key maps configured as part of this configuration
    (type: bpy.types.KeyMaps bpy.types.bpy_prop_collection of bpy.types.KeyMap, (readonly))
    
    :type: KeyMaps
    """

    name = ""
    """Name of the key configuration
    (type: string, default "", (never None))
    
    :type: str
    """


class KeyConfigurations(bpy_struct):
    """Collection of KeyConfigs"""

    active = None
    """Active key configuration (preset)
    (type: bpy.types.KeyConfig)
    
    :type: KeyConfig
    """

    addon = None
    """Key configuration that can be extended by add-ons, and is added to the active configuration when handling events
    (type: bpy.types.KeyConfig, (readonly))
    
    :type: KeyConfig
    """

    default = None
    """Default builtin key configuration
    (type: bpy.types.KeyConfig, (readonly))
    
    :type: KeyConfig
    """

    user = None
    """Final key configuration that combines keymaps from the active and add-on configurations, and can be edited by the user
    (type: bpy.types.KeyConfig, (readonly))
    
    :type: KeyConfig
    """

    def new(self, name):
        """new
        
        :param name: Name
            (type: str, (never None))
        :type name: str
        :return: Key Configuration, Added key configuration
        :param : (type: bpy.types.KeyConfig)
        :rtype: KeyConfig
        """

    def remove(self, keyconfig):
        """remove
        
        :param keyconfig: Key Configuration, Removed key configuration
            (type: bpy.types.KeyConfig, (never None))
        :type keyconfig: KeyConfig
        """


class KeyMap(bpy_struct):
    """Input configuration, including keymaps"""

    is_modal = False
    """Indicates that a keymap is used for translate modal events for an operator
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_user_modified = False
    """Keymap is defined by the user
    (type: boolean, default False)
    
    :type: bool
    """

    keymap_items = None
    """Items in the keymap, linking an operator to an input event
    (type: bpy.types.KeyMapItems bpy.types.bpy_prop_collection of bpy.types.KeyMapItem, (readonly))
    
    :type: KeyMapItems
    """

    name = ""
    """Name of the key map
    (type: string, default "", (readonly, never None))
    
    :type: str
    """

    region_type = 'WINDOW'
    """Optional region type keymap is associated with
    (type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW'], default 'WINDOW', (readonly))
    
    :type: str
    """

    show_expanded_children = False
    """Children expanded in the user interface
    (type: boolean, default False)
    
    :type: bool
    """

    show_expanded_items = False
    """Expanded in the user interface
    (type: boolean, default False)
    
    :type: bool
    """

    space_type = 'EMPTY'
    """Optional space type keymap is associated with
    * 'EMPTY': Empty.
    * 'VIEW_3D': 3D View, 3D viewport.
    * 'TIMELINE': Timeline, Timeline and playback controls.
    * 'GRAPH_EDITOR': Graph Editor, Edit drivers and keyframe interpolation.
    * 'DOPESHEET_EDITOR': Dope Sheet, Adjust timing of keyframes.
    * 'NLA_EDITOR': NLA Editor, Combine and layer Actions.
    * 'IMAGE_EDITOR': UV/Image Editor, View and edit images and UV Maps.
    * 'SEQUENCE_EDITOR': Video Sequence Editor, Video editing tools.
    * 'CLIP_EDITOR': Movie Clip Editor, Motion tracking tools.
    * 'TEXT_EDITOR': Text Editor, Edit scripts and in-file documentation.
    * 'NODE_EDITOR': Node Editor, Editor for node-based shading and compositing tools.
    * 'LOGIC_EDITOR': Logic Editor, Game logic editing.
    * 'PROPERTIES': Properties, Edit properties of active object and related data-blocks.
    * 'OUTLINER': Outliner, Overview of scene graph and all available data-blocks.
    * 'USER_PREFERENCES': User Preferences, Edit persistent configuration settings.
    * 'INFO': Info, Main menu bar and list of error messages (drag down to expand and display).
    * 'FILE_BROWSER': File Browser, Browse for files and assets.
    * 'CONSOLE': Python Console, Interactive programmatic console for advanced editing and script development.
    (type: enum in ['EMPTY', 'VIEW_3D', 'TIMELINE', 'GRAPH_EDITOR', 'DOPESHEET_EDITOR', 'NLA_EDITOR', 'IMAGE_EDITOR', 'SEQUENCE_EDITOR', 'CLIP_EDITOR', 'TEXT_EDITOR', 'NODE_EDITOR', 'LOGIC_EDITOR', 'PROPERTIES', 'OUTLINER', 'USER_PREFERENCES', 'INFO', 'FILE_BROWSER', 'CONSOLE'], default 'EMPTY', (readonly))
    
    :type: str
    """

    def active(self):
        """active
        
        :return: Key Map, Active key map
        :param : (type: bpy.types.KeyMap)
        :rtype: KeyMap
        """

    def restore_to_default(self):
        """restore_to_default"""

    def restore_item_to_default(self, item):
        """restore_item_to_default
        
        :param item: Item
            (type: bpy.types.KeyMapItem, (never None))
        :type item: KeyMapItem
        """


class KeyMapItem(bpy_struct):
    """Item in a Key Map"""

    active = False
    """Activate or deactivate item
    (type: boolean, default False)
    
    :type: bool
    """

    alt = False
    """Alt key pressed
    (type: boolean, default False)
    
    :type: bool
    """

    any = False
    """Any modifier keys pressed
    (type: boolean, default False)
    
    :type: bool
    """

    ctrl = False
    """Control key pressed
    (type: boolean, default False)
    
    :type: bool
    """

    id = 0
    """ID of the item
    (type: int in [-32768, 32767], default 0, (readonly))
    
    :type: int
    """

    idname = ""
    """Identifier of operator to call on input event
    (type: string, default "", (never None))
    
    :type: str
    """

    is_user_defined = False
    """Is this keymap item user defined (doesn't just replace a builtin item)
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_user_modified = False
    """Is this keymap item modified by the user
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    key_modifier = 'NONE'
    """Regular key pressed as a modifier
    * 'NONE': .
    * 'LEFTMOUSE': Left Mouse, LMB.
    * 'MIDDLEMOUSE': Middle Mouse, MMB.
    * 'RIGHTMOUSE': Right Mouse, RMB.
    * 'BUTTON4MOUSE': Button4 Mouse, MB4.
    * 'BUTTON5MOUSE': Button5 Mouse, MB5.
    * 'BUTTON6MOUSE': Button6 Mouse, MB6.
    * 'BUTTON7MOUSE': Button7 Mouse, MB7.
    * 'BUTTON8MOUSE': Button8 Mouse, MB8.
    * 'BUTTON9MOUSE': Button9 Mouse, MB9.
    * 'BUTTON10MOUSE': Button10 Mouse, MB10.
    * 'BUTTON11MOUSE': Button11 Mouse, MB11.
    * 'BUTTON12MOUSE': Button12 Mouse, MB12.
    * 'BUTTON13MOUSE': Button13 Mouse, MB13.
    * 'BUTTON14MOUSE': Button14 Mouse, MB14.
    * 'BUTTON15MOUSE': Button15 Mouse, MB15.
    * 'BUTTON16MOUSE': Button16 Mouse, MB16.
    * 'BUTTON17MOUSE': Button17 Mouse, MB17.
    * 'ACTIONMOUSE': Action Mouse, MBA.
    * 'SELECTMOUSE': Select Mouse, MBS.
    * 'PEN': Pen.
    * 'ERASER': Eraser.
    * 'MOUSEMOVE': Mouse Move, MsMov.
    * 'INBETWEEN_MOUSEMOVE': In-between Move, MsSubMov.
    * 'TRACKPADPAN': Mouse/Trackpad Pan, MsPan.
    * 'TRACKPADZOOM': Mouse/Trackpad Zoom, MsZoom.
    * 'MOUSEROTATE': Mouse/Trackpad Rotate, MsRot.
    * 'WHEELUPMOUSE': Wheel Up, WhUp.
    * 'WHEELDOWNMOUSE': Wheel Down, WhDown.
    * 'WHEELINMOUSE': Wheel In, WhIn.
    * 'WHEELOUTMOUSE': Wheel Out, WhOut.
    * 'EVT_TWEAK_L': Tweak Left, TwkL.
    * 'EVT_TWEAK_M': Tweak Middle, TwkM.
    * 'EVT_TWEAK_R': Tweak Right, TwkR.
    * 'EVT_TWEAK_A': Tweak Action, TwkA.
    * 'EVT_TWEAK_S': Tweak Select, TwkS.
    * 'A': A.
    * 'B': B.
    * 'C': C.
    * 'D': D.
    * 'E': E.
    * 'F': F.
    * 'G': G.
    * 'H': H.
    * 'I': I.
    * 'J': J.
    * 'K': K.
    * 'L': L.
    * 'M': M.
    * 'N': N.
    * 'O': O.
    * 'P': P.
    * 'Q': Q.
    * 'R': R.
    * 'S': S.
    * 'T': T.
    * 'U': U.
    * 'V': V.
    * 'W': W.
    * 'X': X.
    * 'Y': Y.
    * 'Z': Z.
    * 'ZERO': 0.
    * 'ONE': 1.
    * 'TWO': 2.
    * 'THREE': 3.
    * 'FOUR': 4.
    * 'FIVE': 5.
    * 'SIX': 6.
    * 'SEVEN': 7.
    * 'EIGHT': 8.
    * 'NINE': 9.
    * 'LEFT_CTRL': Left Ctrl, CtrlL.
    * 'LEFT_ALT': Left Alt, AltL.
    * 'LEFT_SHIFT': Left Shift, ShiftL.
    * 'RIGHT_ALT': Right Alt, AltR.
    * 'RIGHT_CTRL': Right Ctrl, CtrlR.
    * 'RIGHT_SHIFT': Right Shift, ShiftR.
    * 'OSKEY': OS Key, Cmd.
    * 'GRLESS': Grless.
    * 'ESC': Esc.
    * 'TAB': Tab.
    * 'RET': Return, Enter.
    * 'SPACE': Spacebar, Space.
    * 'LINE_FEED': Line Feed.
    * 'BACK_SPACE': Back Space, BkSpace.
    * 'DEL': Delete, Del.
    * 'COLON': :.
    * 'SEMI_COLON': ;.
    * 'PERIOD': ..
    * 'COMMA': ,.
    * 'QUOTE': ".
    * 'ACCENT_GRAVE': `.
    * 'MINUS': -.
    * 'PLUS': +.
    * 'SLASH': /.
    * 'BACK_SLASH': \.
    * 'EQUAL': =.
    * 'LEFT_BRACKET': [.
    * 'RIGHT_BRACKET': ].
    * 'ATKEY': @.
    * 'ASCIICIRCUM': ^.
    * 'LEFT_ARROW': Left Arrow, ←.
    * 'DOWN_ARROW': Down Arrow, ↓.
    * 'RIGHT_ARROW': Right Arrow, →.
    * 'UP_ARROW': Up Arrow, ↑.
    * 'NUMPAD_2': Numpad 2, Pad2.
    * 'NUMPAD_4': Numpad 4, Pad4.
    * 'NUMPAD_6': Numpad 6, Pad6.
    * 'NUMPAD_8': Numpad 8, Pad8.
    * 'NUMPAD_1': Numpad 1, Pad1.
    * 'NUMPAD_3': Numpad 3, Pad3.
    * 'NUMPAD_5': Numpad 5, Pad5.
    * 'NUMPAD_7': Numpad 7, Pad7.
    * 'NUMPAD_9': Numpad 9, Pad9.
    * 'NUMPAD_PERIOD': Numpad ., Pad..
    * 'NUMPAD_SLASH': Numpad /, Pad/.
    * 'NUMPAD_ASTERIX': Numpad *, Pad*.
    * 'NUMPAD_0': Numpad 0, Pad0.
    * 'NUMPAD_MINUS': Numpad -, Pad-.
    * 'NUMPAD_ENTER': Numpad Enter, PadEnter.
    * 'NUMPAD_PLUS': Numpad +, Pad+.
    * 'F1': F1.
    * 'F2': F2.
    * 'F3': F3.
    * 'F4': F4.
    * 'F5': F5.
    * 'F6': F6.
    * 'F7': F7.
    * 'F8': F8.
    * 'F9': F9.
    * 'F10': F10.
    * 'F11': F11.
    * 'F12': F12.
    * 'F13': F13.
    * 'F14': F14.
    * 'F15': F15.
    * 'F16': F16.
    * 'F17': F17.
    * 'F18': F18.
    * 'F19': F19.
    * 'PAUSE': Pause.
    * 'INSERT': Insert, Ins.
    * 'HOME': Home.
    * 'PAGE_UP': Page Up, PgUp.
    * 'PAGE_DOWN': Page Down, PgDown.
    * 'END': End.
    * 'HENKAN': Henkan.
    * 'MUHENKAN': Muhenkan.
    * 'KANA': Kana.
    * 'MENU': Menu.
    * 'MEDIA_PLAY': Media Play/Pause, >/||.
    * 'MEDIA_STOP': Media Stop, Stop.
    * 'MEDIA_FIRST': Media First, |<<.
    * 'MEDIA_LAST': Media Last, >>|.
    * 'TEXTINPUT': Text Input, TxtIn.
    * 'WINDOW_DEACTIVATE': Window Deactivate.
    * 'TIMER': Timer, Tmr.
    * 'TIMER0': Timer 0, Tmr0.
    * 'TIMER1': Timer 1, Tmr1.
    * 'TIMER2': Timer 2, Tmr2.
    * 'TIMER_JOBS': Timer Jobs, TmrJob.
    * 'TIMER_AUTOSAVE': Timer Autosave, TmrSave.
    * 'TIMER_REPORT': Timer Report, TmrReport.
    * 'TIMERREGION': Timer Region, TmrReg.
    * 'NDOF_MOTION': NDOF Motion, NdofMov.
    * 'NDOF_BUTTON_MENU': NDOF Menu, NdofMenu.
    * 'NDOF_BUTTON_FIT': NDOF Fit, NdofFit.
    * 'NDOF_BUTTON_TOP': NDOF Top, Ndof↑.
    * 'NDOF_BUTTON_BOTTOM': NDOF Bottom, Ndof↓.
    * 'NDOF_BUTTON_LEFT': NDOF Left, Ndof←.
    * 'NDOF_BUTTON_RIGHT': NDOF Right, Ndof→.
    * 'NDOF_BUTTON_FRONT': NDOF Front, NdofFront.
    * 'NDOF_BUTTON_BACK': NDOF Back, NdofBack.
    * 'NDOF_BUTTON_ISO1': NDOF Isometric 1, NdofIso1.
    * 'NDOF_BUTTON_ISO2': NDOF Isometric 2, NdofIso2.
    * 'NDOF_BUTTON_ROLL_CW': NDOF Roll CW, NdofRCW.
    * 'NDOF_BUTTON_ROLL_CCW': NDOF Roll CCW, NdofRCCW.
    * 'NDOF_BUTTON_SPIN_CW': NDOF Spin CW, NdofSCW.
    * 'NDOF_BUTTON_SPIN_CCW': NDOF Spin CCW, NdofSCCW.
    * 'NDOF_BUTTON_TILT_CW': NDOF Tilt CW, NdofTCW.
    * 'NDOF_BUTTON_TILT_CCW': NDOF Tilt CCW, NdofTCCW.
    * 'NDOF_BUTTON_ROTATE': NDOF Rotate, NdofRot.
    * 'NDOF_BUTTON_PANZOOM': NDOF Pan/Zoom, NdofPanZoom.
    * 'NDOF_BUTTON_DOMINANT': NDOF Dominant, NdofDom.
    * 'NDOF_BUTTON_PLUS': NDOF Plus, Ndof+.
    * 'NDOF_BUTTON_MINUS': NDOF Minus, Ndof-.
    * 'NDOF_BUTTON_ESC': NDOF Esc, NdofEsc.
    * 'NDOF_BUTTON_ALT': NDOF Alt, NdofAlt.
    * 'NDOF_BUTTON_SHIFT': NDOF Shift, NdofShift.
    * 'NDOF_BUTTON_CTRL': NDOF Ctrl, NdofCtrl.
    * 'NDOF_BUTTON_1': NDOF Button 1, NdofB1.
    * 'NDOF_BUTTON_2': NDOF Button 2, NdofB2.
    * 'NDOF_BUTTON_3': NDOF Button 3, NdofB3.
    * 'NDOF_BUTTON_4': NDOF Button 4, NdofB4.
    * 'NDOF_BUTTON_5': NDOF Button 5, NdofB5.
    * 'NDOF_BUTTON_6': NDOF Button 6, NdofB6.
    * 'NDOF_BUTTON_7': NDOF Button 7, NdofB7.
    * 'NDOF_BUTTON_8': NDOF Button 8, NdofB8.
    * 'NDOF_BUTTON_9': NDOF Button 9, NdofB9.
    * 'NDOF_BUTTON_10': NDOF Button 10, NdofB10.
    * 'NDOF_BUTTON_A': NDOF Button A, NdofBA.
    * 'NDOF_BUTTON_B': NDOF Button B, NdofBB.
    * 'NDOF_BUTTON_C': NDOF Button C, NdofBC.
    (type: enum in ['NONE', 'LEFTMOUSE', 'MIDDLEMOUSE', 'RIGHTMOUSE', 'BUTTON4MOUSE', 'BUTTON5MOUSE', 'BUTTON6MOUSE', 'BUTTON7MOUSE', 'BUTTON8MOUSE', 'BUTTON9MOUSE', 'BUTTON10MOUSE', 'BUTTON11MOUSE', 'BUTTON12MOUSE', 'BUTTON13MOUSE', 'BUTTON14MOUSE', 'BUTTON15MOUSE', 'BUTTON16MOUSE', 'BUTTON17MOUSE', 'ACTIONMOUSE', 'SELECTMOUSE', 'PEN', 'ERASER', 'MOUSEMOVE', 'INBETWEEN_MOUSEMOVE', 'TRACKPADPAN', 'TRACKPADZOOM', 'MOUSEROTATE', 'WHEELUPMOUSE', 'WHEELDOWNMOUSE', 'WHEELINMOUSE', 'WHEELOUTMOUSE', 'EVT_TWEAK_L', 'EVT_TWEAK_M', 'EVT_TWEAK_R', 'EVT_TWEAK_A', 'EVT_TWEAK_S', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'ZERO', 'ONE', 'TWO', 'THREE', 'FOUR', 'FIVE', 'SIX', 'SEVEN', 'EIGHT', 'NINE', 'LEFT_CTRL', 'LEFT_ALT', 'LEFT_SHIFT', 'RIGHT_ALT', 'RIGHT_CTRL', 'RIGHT_SHIFT', 'OSKEY', 'GRLESS', 'ESC', 'TAB', 'RET', 'SPACE', 'LINE_FEED', 'BACK_SPACE', 'DEL', 'COLON', 'SEMI_COLON', 'PERIOD', 'COMMA', 'QUOTE', 'ACCENT_GRAVE', 'MINUS', 'PLUS', 'SLASH', 'BACK_SLASH', 'EQUAL', 'LEFT_BRACKET', 'RIGHT_BRACKET', 'ATKEY', 'ASCIICIRCUM', 'LEFT_ARROW', 'DOWN_ARROW', 'RIGHT_ARROW', 'UP_ARROW', 'NUMPAD_2', 'NUMPAD_4', 'NUMPAD_6', 'NUMPAD_8', 'NUMPAD_1', 'NUMPAD_3', 'NUMPAD_5', 'NUMPAD_7', 'NUMPAD_9', 'NUMPAD_PERIOD', 'NUMPAD_SLASH', 'NUMPAD_ASTERIX', 'NUMPAD_0', 'NUMPAD_MINUS', 'NUMPAD_ENTER', 'NUMPAD_PLUS', 'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12', 'F13', 'F14', 'F15', 'F16', 'F17', 'F18', 'F19', 'PAUSE', 'INSERT', 'HOME', 'PAGE_UP', 'PAGE_DOWN', 'END', 'HENKAN', 'MUHENKAN', 'KANA', 'MENU', 'MEDIA_PLAY', 'MEDIA_STOP', 'MEDIA_FIRST', 'MEDIA_LAST', 'TEXTINPUT', 'WINDOW_DEACTIVATE', 'TIMER', 'TIMER0', 'TIMER1', 'TIMER2', 'TIMER_JOBS', 'TIMER_AUTOSAVE', 'TIMER_REPORT', 'TIMERREGION', 'NDOF_MOTION', 'NDOF_BUTTON_MENU', 'NDOF_BUTTON_FIT', 'NDOF_BUTTON_TOP', 'NDOF_BUTTON_BOTTOM', 'NDOF_BUTTON_LEFT', 'NDOF_BUTTON_RIGHT', 'NDOF_BUTTON_FRONT', 'NDOF_BUTTON_BACK', 'NDOF_BUTTON_ISO1', 'NDOF_BUTTON_ISO2', 'NDOF_BUTTON_ROLL_CW', 'NDOF_BUTTON_ROLL_CCW', 'NDOF_BUTTON_SPIN_CW', 'NDOF_BUTTON_SPIN_CCW', 'NDOF_BUTTON_TILT_CW', 'NDOF_BUTTON_TILT_CCW', 'NDOF_BUTTON_ROTATE', 'NDOF_BUTTON_PANZOOM', 'NDOF_BUTTON_DOMINANT', 'NDOF_BUTTON_PLUS', 'NDOF_BUTTON_MINUS', 'NDOF_BUTTON_ESC', 'NDOF_BUTTON_ALT', 'NDOF_BUTTON_SHIFT', 'NDOF_BUTTON_CTRL', 'NDOF_BUTTON_1', 'NDOF_BUTTON_2', 'NDOF_BUTTON_3', 'NDOF_BUTTON_4', 'NDOF_BUTTON_5', 'NDOF_BUTTON_6', 'NDOF_BUTTON_7', 'NDOF_BUTTON_8', 'NDOF_BUTTON_9', 'NDOF_BUTTON_10', 'NDOF_BUTTON_A', 'NDOF_BUTTON_B', 'NDOF_BUTTON_C'], default 'NONE')
    
    :type: str
    """

    map_type = 'KEYBOARD'
    """Type of event mapping
    (type: enum in ['KEYBOARD', 'TWEAK', 'MOUSE', 'NDOF', 'TEXTINPUT', 'TIMER'], default 'KEYBOARD')
    
    :type: str
    """

    name = ""
    """Name of operator (translated) to call on input event
    (type: string, default "", (readonly, never None))
    
    :type: str
    """

    oskey = False
    """Operating system key pressed
    (type: boolean, default False)
    
    :type: bool
    """

    properties = None
    """Properties to set when the operator is called
    (type: bpy.types.OperatorProperties, (readonly))
    
    :type: OperatorProperties
    """

    propvalue = 'NONE'
    """The value this event translates to in a modal keymap
    (type: enum in ['NONE'], default 'NONE')
    
    :type: str
    """

    shift = False
    """Shift key pressed
    (type: boolean, default False)
    
    :type: bool
    """

    show_expanded = False
    """Show key map event and property details in the user interface
    (type: boolean, default False)
    
    :type: bool
    """

    type = 'NONE'
    """Type of event
    * 'NONE': .
    * 'LEFTMOUSE': Left Mouse, LMB.
    * 'MIDDLEMOUSE': Middle Mouse, MMB.
    * 'RIGHTMOUSE': Right Mouse, RMB.
    * 'BUTTON4MOUSE': Button4 Mouse, MB4.
    * 'BUTTON5MOUSE': Button5 Mouse, MB5.
    * 'BUTTON6MOUSE': Button6 Mouse, MB6.
    * 'BUTTON7MOUSE': Button7 Mouse, MB7.
    * 'BUTTON8MOUSE': Button8 Mouse, MB8.
    * 'BUTTON9MOUSE': Button9 Mouse, MB9.
    * 'BUTTON10MOUSE': Button10 Mouse, MB10.
    * 'BUTTON11MOUSE': Button11 Mouse, MB11.
    * 'BUTTON12MOUSE': Button12 Mouse, MB12.
    * 'BUTTON13MOUSE': Button13 Mouse, MB13.
    * 'BUTTON14MOUSE': Button14 Mouse, MB14.
    * 'BUTTON15MOUSE': Button15 Mouse, MB15.
    * 'BUTTON16MOUSE': Button16 Mouse, MB16.
    * 'BUTTON17MOUSE': Button17 Mouse, MB17.
    * 'ACTIONMOUSE': Action Mouse, MBA.
    * 'SELECTMOUSE': Select Mouse, MBS.
    * 'PEN': Pen.
    * 'ERASER': Eraser.
    * 'MOUSEMOVE': Mouse Move, MsMov.
    * 'INBETWEEN_MOUSEMOVE': In-between Move, MsSubMov.
    * 'TRACKPADPAN': Mouse/Trackpad Pan, MsPan.
    * 'TRACKPADZOOM': Mouse/Trackpad Zoom, MsZoom.
    * 'MOUSEROTATE': Mouse/Trackpad Rotate, MsRot.
    * 'WHEELUPMOUSE': Wheel Up, WhUp.
    * 'WHEELDOWNMOUSE': Wheel Down, WhDown.
    * 'WHEELINMOUSE': Wheel In, WhIn.
    * 'WHEELOUTMOUSE': Wheel Out, WhOut.
    * 'EVT_TWEAK_L': Tweak Left, TwkL.
    * 'EVT_TWEAK_M': Tweak Middle, TwkM.
    * 'EVT_TWEAK_R': Tweak Right, TwkR.
    * 'EVT_TWEAK_A': Tweak Action, TwkA.
    * 'EVT_TWEAK_S': Tweak Select, TwkS.
    * 'A': A.
    * 'B': B.
    * 'C': C.
    * 'D': D.
    * 'E': E.
    * 'F': F.
    * 'G': G.
    * 'H': H.
    * 'I': I.
    * 'J': J.
    * 'K': K.
    * 'L': L.
    * 'M': M.
    * 'N': N.
    * 'O': O.
    * 'P': P.
    * 'Q': Q.
    * 'R': R.
    * 'S': S.
    * 'T': T.
    * 'U': U.
    * 'V': V.
    * 'W': W.
    * 'X': X.
    * 'Y': Y.
    * 'Z': Z.
    * 'ZERO': 0.
    * 'ONE': 1.
    * 'TWO': 2.
    * 'THREE': 3.
    * 'FOUR': 4.
    * 'FIVE': 5.
    * 'SIX': 6.
    * 'SEVEN': 7.
    * 'EIGHT': 8.
    * 'NINE': 9.
    * 'LEFT_CTRL': Left Ctrl, CtrlL.
    * 'LEFT_ALT': Left Alt, AltL.
    * 'LEFT_SHIFT': Left Shift, ShiftL.
    * 'RIGHT_ALT': Right Alt, AltR.
    * 'RIGHT_CTRL': Right Ctrl, CtrlR.
    * 'RIGHT_SHIFT': Right Shift, ShiftR.
    * 'OSKEY': OS Key, Cmd.
    * 'GRLESS': Grless.
    * 'ESC': Esc.
    * 'TAB': Tab.
    * 'RET': Return, Enter.
    * 'SPACE': Spacebar, Space.
    * 'LINE_FEED': Line Feed.
    * 'BACK_SPACE': Back Space, BkSpace.
    * 'DEL': Delete, Del.
    * 'COLON': :.
    * 'SEMI_COLON': ;.
    * 'PERIOD': ..
    * 'COMMA': ,.
    * 'QUOTE': ".
    * 'ACCENT_GRAVE': `.
    * 'MINUS': -.
    * 'PLUS': +.
    * 'SLASH': /.
    * 'BACK_SLASH': \.
    * 'EQUAL': =.
    * 'LEFT_BRACKET': [.
    * 'RIGHT_BRACKET': ].
    * 'ATKEY': @.
    * 'ASCIICIRCUM': ^.
    * 'LEFT_ARROW': Left Arrow, ←.
    * 'DOWN_ARROW': Down Arrow, ↓.
    * 'RIGHT_ARROW': Right Arrow, →.
    * 'UP_ARROW': Up Arrow, ↑.
    * 'NUMPAD_2': Numpad 2, Pad2.
    * 'NUMPAD_4': Numpad 4, Pad4.
    * 'NUMPAD_6': Numpad 6, Pad6.
    * 'NUMPAD_8': Numpad 8, Pad8.
    * 'NUMPAD_1': Numpad 1, Pad1.
    * 'NUMPAD_3': Numpad 3, Pad3.
    * 'NUMPAD_5': Numpad 5, Pad5.
    * 'NUMPAD_7': Numpad 7, Pad7.
    * 'NUMPAD_9': Numpad 9, Pad9.
    * 'NUMPAD_PERIOD': Numpad ., Pad..
    * 'NUMPAD_SLASH': Numpad /, Pad/.
    * 'NUMPAD_ASTERIX': Numpad *, Pad*.
    * 'NUMPAD_0': Numpad 0, Pad0.
    * 'NUMPAD_MINUS': Numpad -, Pad-.
    * 'NUMPAD_ENTER': Numpad Enter, PadEnter.
    * 'NUMPAD_PLUS': Numpad +, Pad+.
    * 'F1': F1.
    * 'F2': F2.
    * 'F3': F3.
    * 'F4': F4.
    * 'F5': F5.
    * 'F6': F6.
    * 'F7': F7.
    * 'F8': F8.
    * 'F9': F9.
    * 'F10': F10.
    * 'F11': F11.
    * 'F12': F12.
    * 'F13': F13.
    * 'F14': F14.
    * 'F15': F15.
    * 'F16': F16.
    * 'F17': F17.
    * 'F18': F18.
    * 'F19': F19.
    * 'PAUSE': Pause.
    * 'INSERT': Insert, Ins.
    * 'HOME': Home.
    * 'PAGE_UP': Page Up, PgUp.
    * 'PAGE_DOWN': Page Down, PgDown.
    * 'END': End.
    * 'HENKAN': Henkan.
    * 'MUHENKAN': Muhenkan.
    * 'KANA': Kana.
    * 'MENU': Menu.
    * 'MEDIA_PLAY': Media Play/Pause, >/||.
    * 'MEDIA_STOP': Media Stop, Stop.
    * 'MEDIA_FIRST': Media First, |<<.
    * 'MEDIA_LAST': Media Last, >>|.
    * 'TEXTINPUT': Text Input, TxtIn.
    * 'WINDOW_DEACTIVATE': Window Deactivate.
    * 'TIMER': Timer, Tmr.
    * 'TIMER0': Timer 0, Tmr0.
    * 'TIMER1': Timer 1, Tmr1.
    * 'TIMER2': Timer 2, Tmr2.
    * 'TIMER_JOBS': Timer Jobs, TmrJob.
    * 'TIMER_AUTOSAVE': Timer Autosave, TmrSave.
    * 'TIMER_REPORT': Timer Report, TmrReport.
    * 'TIMERREGION': Timer Region, TmrReg.
    * 'NDOF_MOTION': NDOF Motion, NdofMov.
    * 'NDOF_BUTTON_MENU': NDOF Menu, NdofMenu.
    * 'NDOF_BUTTON_FIT': NDOF Fit, NdofFit.
    * 'NDOF_BUTTON_TOP': NDOF Top, Ndof↑.
    * 'NDOF_BUTTON_BOTTOM': NDOF Bottom, Ndof↓.
    * 'NDOF_BUTTON_LEFT': NDOF Left, Ndof←.
    * 'NDOF_BUTTON_RIGHT': NDOF Right, Ndof→.
    * 'NDOF_BUTTON_FRONT': NDOF Front, NdofFront.
    * 'NDOF_BUTTON_BACK': NDOF Back, NdofBack.
    * 'NDOF_BUTTON_ISO1': NDOF Isometric 1, NdofIso1.
    * 'NDOF_BUTTON_ISO2': NDOF Isometric 2, NdofIso2.
    * 'NDOF_BUTTON_ROLL_CW': NDOF Roll CW, NdofRCW.
    * 'NDOF_BUTTON_ROLL_CCW': NDOF Roll CCW, NdofRCCW.
    * 'NDOF_BUTTON_SPIN_CW': NDOF Spin CW, NdofSCW.
    * 'NDOF_BUTTON_SPIN_CCW': NDOF Spin CCW, NdofSCCW.
    * 'NDOF_BUTTON_TILT_CW': NDOF Tilt CW, NdofTCW.
    * 'NDOF_BUTTON_TILT_CCW': NDOF Tilt CCW, NdofTCCW.
    * 'NDOF_BUTTON_ROTATE': NDOF Rotate, NdofRot.
    * 'NDOF_BUTTON_PANZOOM': NDOF Pan/Zoom, NdofPanZoom.
    * 'NDOF_BUTTON_DOMINANT': NDOF Dominant, NdofDom.
    * 'NDOF_BUTTON_PLUS': NDOF Plus, Ndof+.
    * 'NDOF_BUTTON_MINUS': NDOF Minus, Ndof-.
    * 'NDOF_BUTTON_ESC': NDOF Esc, NdofEsc.
    * 'NDOF_BUTTON_ALT': NDOF Alt, NdofAlt.
    * 'NDOF_BUTTON_SHIFT': NDOF Shift, NdofShift.
    * 'NDOF_BUTTON_CTRL': NDOF Ctrl, NdofCtrl.
    * 'NDOF_BUTTON_1': NDOF Button 1, NdofB1.
    * 'NDOF_BUTTON_2': NDOF Button 2, NdofB2.
    * 'NDOF_BUTTON_3': NDOF Button 3, NdofB3.
    * 'NDOF_BUTTON_4': NDOF Button 4, NdofB4.
    * 'NDOF_BUTTON_5': NDOF Button 5, NdofB5.
    * 'NDOF_BUTTON_6': NDOF Button 6, NdofB6.
    * 'NDOF_BUTTON_7': NDOF Button 7, NdofB7.
    * 'NDOF_BUTTON_8': NDOF Button 8, NdofB8.
    * 'NDOF_BUTTON_9': NDOF Button 9, NdofB9.
    * 'NDOF_BUTTON_10': NDOF Button 10, NdofB10.
    * 'NDOF_BUTTON_A': NDOF Button A, NdofBA.
    * 'NDOF_BUTTON_B': NDOF Button B, NdofBB.
    * 'NDOF_BUTTON_C': NDOF Button C, NdofBC.
    (type: enum in ['NONE', 'LEFTMOUSE', 'MIDDLEMOUSE', 'RIGHTMOUSE', 'BUTTON4MOUSE', 'BUTTON5MOUSE', 'BUTTON6MOUSE', 'BUTTON7MOUSE', 'BUTTON8MOUSE', 'BUTTON9MOUSE', 'BUTTON10MOUSE', 'BUTTON11MOUSE', 'BUTTON12MOUSE', 'BUTTON13MOUSE', 'BUTTON14MOUSE', 'BUTTON15MOUSE', 'BUTTON16MOUSE', 'BUTTON17MOUSE', 'ACTIONMOUSE', 'SELECTMOUSE', 'PEN', 'ERASER', 'MOUSEMOVE', 'INBETWEEN_MOUSEMOVE', 'TRACKPADPAN', 'TRACKPADZOOM', 'MOUSEROTATE', 'WHEELUPMOUSE', 'WHEELDOWNMOUSE', 'WHEELINMOUSE', 'WHEELOUTMOUSE', 'EVT_TWEAK_L', 'EVT_TWEAK_M', 'EVT_TWEAK_R', 'EVT_TWEAK_A', 'EVT_TWEAK_S', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'ZERO', 'ONE', 'TWO', 'THREE', 'FOUR', 'FIVE', 'SIX', 'SEVEN', 'EIGHT', 'NINE', 'LEFT_CTRL', 'LEFT_ALT', 'LEFT_SHIFT', 'RIGHT_ALT', 'RIGHT_CTRL', 'RIGHT_SHIFT', 'OSKEY', 'GRLESS', 'ESC', 'TAB', 'RET', 'SPACE', 'LINE_FEED', 'BACK_SPACE', 'DEL', 'COLON', 'SEMI_COLON', 'PERIOD', 'COMMA', 'QUOTE', 'ACCENT_GRAVE', 'MINUS', 'PLUS', 'SLASH', 'BACK_SLASH', 'EQUAL', 'LEFT_BRACKET', 'RIGHT_BRACKET', 'ATKEY', 'ASCIICIRCUM', 'LEFT_ARROW', 'DOWN_ARROW', 'RIGHT_ARROW', 'UP_ARROW', 'NUMPAD_2', 'NUMPAD_4', 'NUMPAD_6', 'NUMPAD_8', 'NUMPAD_1', 'NUMPAD_3', 'NUMPAD_5', 'NUMPAD_7', 'NUMPAD_9', 'NUMPAD_PERIOD', 'NUMPAD_SLASH', 'NUMPAD_ASTERIX', 'NUMPAD_0', 'NUMPAD_MINUS', 'NUMPAD_ENTER', 'NUMPAD_PLUS', 'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12', 'F13', 'F14', 'F15', 'F16', 'F17', 'F18', 'F19', 'PAUSE', 'INSERT', 'HOME', 'PAGE_UP', 'PAGE_DOWN', 'END', 'HENKAN', 'MUHENKAN', 'KANA', 'MENU', 'MEDIA_PLAY', 'MEDIA_STOP', 'MEDIA_FIRST', 'MEDIA_LAST', 'TEXTINPUT', 'WINDOW_DEACTIVATE', 'TIMER', 'TIMER0', 'TIMER1', 'TIMER2', 'TIMER_JOBS', 'TIMER_AUTOSAVE', 'TIMER_REPORT', 'TIMERREGION', 'NDOF_MOTION', 'NDOF_BUTTON_MENU', 'NDOF_BUTTON_FIT', 'NDOF_BUTTON_TOP', 'NDOF_BUTTON_BOTTOM', 'NDOF_BUTTON_LEFT', 'NDOF_BUTTON_RIGHT', 'NDOF_BUTTON_FRONT', 'NDOF_BUTTON_BACK', 'NDOF_BUTTON_ISO1', 'NDOF_BUTTON_ISO2', 'NDOF_BUTTON_ROLL_CW', 'NDOF_BUTTON_ROLL_CCW', 'NDOF_BUTTON_SPIN_CW', 'NDOF_BUTTON_SPIN_CCW', 'NDOF_BUTTON_TILT_CW', 'NDOF_BUTTON_TILT_CCW', 'NDOF_BUTTON_ROTATE', 'NDOF_BUTTON_PANZOOM', 'NDOF_BUTTON_DOMINANT', 'NDOF_BUTTON_PLUS', 'NDOF_BUTTON_MINUS', 'NDOF_BUTTON_ESC', 'NDOF_BUTTON_ALT', 'NDOF_BUTTON_SHIFT', 'NDOF_BUTTON_CTRL', 'NDOF_BUTTON_1', 'NDOF_BUTTON_2', 'NDOF_BUTTON_3', 'NDOF_BUTTON_4', 'NDOF_BUTTON_5', 'NDOF_BUTTON_6', 'NDOF_BUTTON_7', 'NDOF_BUTTON_8', 'NDOF_BUTTON_9', 'NDOF_BUTTON_10', 'NDOF_BUTTON_A', 'NDOF_BUTTON_B', 'NDOF_BUTTON_C'], default 'NONE')
    
    :type: str
    """

    value = 'NOTHING'
    """(type: enum in ['ANY', 'NOTHING', 'PRESS', 'RELEASE', 'CLICK', 'DOUBLE_CLICK', 'NORTH', 'NORTH_EAST', 'EAST', 'SOUTH_EAST', 'SOUTH', 'SOUTH_WEST', 'WEST', 'NORTH_WEST'], default 'NOTHING')
    
    :type: str
    """

    def compare(self, item):
        """compare
        
        :param item: Item
            (type: bpy.types.KeyMapItem)
        :type item: KeyMapItem
        :return: Comparison result
        :rtype: bool
        """


class KeyMapItems(bpy_struct):
    """Collection of keymap items"""

    def new(self, idname, type, value, any=False, shift=False, ctrl=False, alt=False, oskey=False, key_modifier='NONE', head=False):
        """new
        
        :param idname: Operator Identifier
            (type: str, (never None))
        :type idname: str
        :param type: Type
            * 'NONE': .
            * 'LEFTMOUSE': Left Mouse, LMB.
            * 'MIDDLEMOUSE': Middle Mouse, MMB.
            * 'RIGHTMOUSE': Right Mouse, RMB.
            * 'BUTTON4MOUSE': Button4 Mouse, MB4.
            * 'BUTTON5MOUSE': Button5 Mouse, MB5.
            * 'BUTTON6MOUSE': Button6 Mouse, MB6.
            * 'BUTTON7MOUSE': Button7 Mouse, MB7.
            * 'BUTTON8MOUSE': Button8 Mouse, MB8.
            * 'BUTTON9MOUSE': Button9 Mouse, MB9.
            * 'BUTTON10MOUSE': Button10 Mouse, MB10.
            * 'BUTTON11MOUSE': Button11 Mouse, MB11.
            * 'BUTTON12MOUSE': Button12 Mouse, MB12.
            * 'BUTTON13MOUSE': Button13 Mouse, MB13.
            * 'BUTTON14MOUSE': Button14 Mouse, MB14.
            * 'BUTTON15MOUSE': Button15 Mouse, MB15.
            * 'BUTTON16MOUSE': Button16 Mouse, MB16.
            * 'BUTTON17MOUSE': Button17 Mouse, MB17.
            * 'ACTIONMOUSE': Action Mouse, MBA.
            * 'SELECTMOUSE': Select Mouse, MBS.
            * 'PEN': Pen.
            * 'ERASER': Eraser.
            * 'MOUSEMOVE': Mouse Move, MsMov.
            * 'INBETWEEN_MOUSEMOVE': In-between Move, MsSubMov.
            * 'TRACKPADPAN': Mouse/Trackpad Pan, MsPan.
            * 'TRACKPADZOOM': Mouse/Trackpad Zoom, MsZoom.
            * 'MOUSEROTATE': Mouse/Trackpad Rotate, MsRot.
            * 'WHEELUPMOUSE': Wheel Up, WhUp.
            * 'WHEELDOWNMOUSE': Wheel Down, WhDown.
            * 'WHEELINMOUSE': Wheel In, WhIn.
            * 'WHEELOUTMOUSE': Wheel Out, WhOut.
            * 'EVT_TWEAK_L': Tweak Left, TwkL.
            * 'EVT_TWEAK_M': Tweak Middle, TwkM.
            * 'EVT_TWEAK_R': Tweak Right, TwkR.
            * 'EVT_TWEAK_A': Tweak Action, TwkA.
            * 'EVT_TWEAK_S': Tweak Select, TwkS.
            * 'A': A.
            * 'B': B.
            * 'C': C.
            * 'D': D.
            * 'E': E.
            * 'F': F.
            * 'G': G.
            * 'H': H.
            * 'I': I.
            * 'J': J.
            * 'K': K.
            * 'L': L.
            * 'M': M.
            * 'N': N.
            * 'O': O.
            * 'P': P.
            * 'Q': Q.
            * 'R': R.
            * 'S': S.
            * 'T': T.
            * 'U': U.
            * 'V': V.
            * 'W': W.
            * 'X': X.
            * 'Y': Y.
            * 'Z': Z.
            * 'ZERO': 0.
            * 'ONE': 1.
            * 'TWO': 2.
            * 'THREE': 3.
            * 'FOUR': 4.
            * 'FIVE': 5.
            * 'SIX': 6.
            * 'SEVEN': 7.
            * 'EIGHT': 8.
            * 'NINE': 9.
            * 'LEFT_CTRL': Left Ctrl, CtrlL.
            * 'LEFT_ALT': Left Alt, AltL.
            * 'LEFT_SHIFT': Left Shift, ShiftL.
            * 'RIGHT_ALT': Right Alt, AltR.
            * 'RIGHT_CTRL': Right Ctrl, CtrlR.
            * 'RIGHT_SHIFT': Right Shift, ShiftR.
            * 'OSKEY': OS Key, Cmd.
            * 'GRLESS': Grless.
            * 'ESC': Esc.
            * 'TAB': Tab.
            * 'RET': Return, Enter.
            * 'SPACE': Spacebar, Space.
            * 'LINE_FEED': Line Feed.
            * 'BACK_SPACE': Back Space, BkSpace.
            * 'DEL': Delete, Del.
            * 'COLON': :.
            * 'SEMI_COLON': ;.
            * 'PERIOD': ..
            * 'COMMA': ,.
            * 'QUOTE': ".
            * 'ACCENT_GRAVE': `.
            * 'MINUS': -.
            * 'PLUS': +.
            * 'SLASH': /.
            * 'BACK_SLASH': \.
            * 'EQUAL': =.
            * 'LEFT_BRACKET': [.
            * 'RIGHT_BRACKET': ].
            * 'ATKEY': @.
            * 'ASCIICIRCUM': ^.
            * 'LEFT_ARROW': Left Arrow, ←.
            * 'DOWN_ARROW': Down Arrow, ↓.
            * 'RIGHT_ARROW': Right Arrow, →.
            * 'UP_ARROW': Up Arrow, ↑.
            * 'NUMPAD_2': Numpad 2, Pad2.
            * 'NUMPAD_4': Numpad 4, Pad4.
            * 'NUMPAD_6': Numpad 6, Pad6.
            * 'NUMPAD_8': Numpad 8, Pad8.
            * 'NUMPAD_1': Numpad 1, Pad1.
            * 'NUMPAD_3': Numpad 3, Pad3.
            * 'NUMPAD_5': Numpad 5, Pad5.
            * 'NUMPAD_7': Numpad 7, Pad7.
            * 'NUMPAD_9': Numpad 9, Pad9.
            * 'NUMPAD_PERIOD': Numpad ., Pad..
            * 'NUMPAD_SLASH': Numpad /, Pad/.
            * 'NUMPAD_ASTERIX': Numpad *, Pad*.
            * 'NUMPAD_0': Numpad 0, Pad0.
            * 'NUMPAD_MINUS': Numpad -, Pad-.
            * 'NUMPAD_ENTER': Numpad Enter, PadEnter.
            * 'NUMPAD_PLUS': Numpad +, Pad+.
            * 'F1': F1.
            * 'F2': F2.
            * 'F3': F3.
            * 'F4': F4.
            * 'F5': F5.
            * 'F6': F6.
            * 'F7': F7.
            * 'F8': F8.
            * 'F9': F9.
            * 'F10': F10.
            * 'F11': F11.
            * 'F12': F12.
            * 'F13': F13.
            * 'F14': F14.
            * 'F15': F15.
            * 'F16': F16.
            * 'F17': F17.
            * 'F18': F18.
            * 'F19': F19.
            * 'PAUSE': Pause.
            * 'INSERT': Insert, Ins.
            * 'HOME': Home.
            * 'PAGE_UP': Page Up, PgUp.
            * 'PAGE_DOWN': Page Down, PgDown.
            * 'END': End.
            * 'HENKAN': Henkan.
            * 'MUHENKAN': Muhenkan.
            * 'KANA': Kana.
            * 'MENU': Menu.
            * 'MEDIA_PLAY': Media Play/Pause, >/||.
            * 'MEDIA_STOP': Media Stop, Stop.
            * 'MEDIA_FIRST': Media First, |<<.
            * 'MEDIA_LAST': Media Last, >>|.
            * 'TEXTINPUT': Text Input, TxtIn.
            * 'WINDOW_DEACTIVATE': Window Deactivate.
            * 'TIMER': Timer, Tmr.
            * 'TIMER0': Timer 0, Tmr0.
            * 'TIMER1': Timer 1, Tmr1.
            * 'TIMER2': Timer 2, Tmr2.
            * 'TIMER_JOBS': Timer Jobs, TmrJob.
            * 'TIMER_AUTOSAVE': Timer Autosave, TmrSave.
            * 'TIMER_REPORT': Timer Report, TmrReport.
            * 'TIMERREGION': Timer Region, TmrReg.
            * 'NDOF_MOTION': NDOF Motion, NdofMov.
            * 'NDOF_BUTTON_MENU': NDOF Menu, NdofMenu.
            * 'NDOF_BUTTON_FIT': NDOF Fit, NdofFit.
            * 'NDOF_BUTTON_TOP': NDOF Top, Ndof↑.
            * 'NDOF_BUTTON_BOTTOM': NDOF Bottom, Ndof↓.
            * 'NDOF_BUTTON_LEFT': NDOF Left, Ndof←.
            * 'NDOF_BUTTON_RIGHT': NDOF Right, Ndof→.
            * 'NDOF_BUTTON_FRONT': NDOF Front, NdofFront.
            * 'NDOF_BUTTON_BACK': NDOF Back, NdofBack.
            * 'NDOF_BUTTON_ISO1': NDOF Isometric 1, NdofIso1.
            * 'NDOF_BUTTON_ISO2': NDOF Isometric 2, NdofIso2.
            * 'NDOF_BUTTON_ROLL_CW': NDOF Roll CW, NdofRCW.
            * 'NDOF_BUTTON_ROLL_CCW': NDOF Roll CCW, NdofRCCW.
            * 'NDOF_BUTTON_SPIN_CW': NDOF Spin CW, NdofSCW.
            * 'NDOF_BUTTON_SPIN_CCW': NDOF Spin CCW, NdofSCCW.
            * 'NDOF_BUTTON_TILT_CW': NDOF Tilt CW, NdofTCW.
            * 'NDOF_BUTTON_TILT_CCW': NDOF Tilt CCW, NdofTCCW.
            * 'NDOF_BUTTON_ROTATE': NDOF Rotate, NdofRot.
            * 'NDOF_BUTTON_PANZOOM': NDOF Pan/Zoom, NdofPanZoom.
            * 'NDOF_BUTTON_DOMINANT': NDOF Dominant, NdofDom.
            * 'NDOF_BUTTON_PLUS': NDOF Plus, Ndof+.
            * 'NDOF_BUTTON_MINUS': NDOF Minus, Ndof-.
            * 'NDOF_BUTTON_ESC': NDOF Esc, NdofEsc.
            * 'NDOF_BUTTON_ALT': NDOF Alt, NdofAlt.
            * 'NDOF_BUTTON_SHIFT': NDOF Shift, NdofShift.
            * 'NDOF_BUTTON_CTRL': NDOF Ctrl, NdofCtrl.
            * 'NDOF_BUTTON_1': NDOF Button 1, NdofB1.
            * 'NDOF_BUTTON_2': NDOF Button 2, NdofB2.
            * 'NDOF_BUTTON_3': NDOF Button 3, NdofB3.
            * 'NDOF_BUTTON_4': NDOF Button 4, NdofB4.
            * 'NDOF_BUTTON_5': NDOF Button 5, NdofB5.
            * 'NDOF_BUTTON_6': NDOF Button 6, NdofB6.
            * 'NDOF_BUTTON_7': NDOF Button 7, NdofB7.
            * 'NDOF_BUTTON_8': NDOF Button 8, NdofB8.
            * 'NDOF_BUTTON_9': NDOF Button 9, NdofB9.
            * 'NDOF_BUTTON_10': NDOF Button 10, NdofB10.
            * 'NDOF_BUTTON_A': NDOF Button A, NdofBA.
            * 'NDOF_BUTTON_B': NDOF Button B, NdofBB.
            * 'NDOF_BUTTON_C': NDOF Button C, NdofBC.
            (type: enum in ['NONE', 'LEFTMOUSE', 'MIDDLEMOUSE', 'RIGHTMOUSE', 'BUTTON4MOUSE', 'BUTTON5MOUSE', 'BUTTON6MOUSE', 'BUTTON7MOUSE', 'BUTTON8MOUSE', 'BUTTON9MOUSE', 'BUTTON10MOUSE', 'BUTTON11MOUSE', 'BUTTON12MOUSE', 'BUTTON13MOUSE', 'BUTTON14MOUSE', 'BUTTON15MOUSE', 'BUTTON16MOUSE', 'BUTTON17MOUSE', 'ACTIONMOUSE', 'SELECTMOUSE', 'PEN', 'ERASER', 'MOUSEMOVE', 'INBETWEEN_MOUSEMOVE', 'TRACKPADPAN', 'TRACKPADZOOM', 'MOUSEROTATE', 'WHEELUPMOUSE', 'WHEELDOWNMOUSE', 'WHEELINMOUSE', 'WHEELOUTMOUSE', 'EVT_TWEAK_L', 'EVT_TWEAK_M', 'EVT_TWEAK_R', 'EVT_TWEAK_A', 'EVT_TWEAK_S', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'ZERO', 'ONE', 'TWO', 'THREE', 'FOUR', 'FIVE', 'SIX', 'SEVEN', 'EIGHT', 'NINE', 'LEFT_CTRL', 'LEFT_ALT', 'LEFT_SHIFT', 'RIGHT_ALT', 'RIGHT_CTRL', 'RIGHT_SHIFT', 'OSKEY', 'GRLESS', 'ESC', 'TAB', 'RET', 'SPACE', 'LINE_FEED', 'BACK_SPACE', 'DEL', 'COLON', 'SEMI_COLON', 'PERIOD', 'COMMA', 'QUOTE', 'ACCENT_GRAVE', 'MINUS', 'PLUS', 'SLASH', 'BACK_SLASH', 'EQUAL', 'LEFT_BRACKET', 'RIGHT_BRACKET', 'ATKEY', 'ASCIICIRCUM', 'LEFT_ARROW', 'DOWN_ARROW', 'RIGHT_ARROW', 'UP_ARROW', 'NUMPAD_2', 'NUMPAD_4', 'NUMPAD_6', 'NUMPAD_8', 'NUMPAD_1', 'NUMPAD_3', 'NUMPAD_5', 'NUMPAD_7', 'NUMPAD_9', 'NUMPAD_PERIOD', 'NUMPAD_SLASH', 'NUMPAD_ASTERIX', 'NUMPAD_0', 'NUMPAD_MINUS', 'NUMPAD_ENTER', 'NUMPAD_PLUS', 'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12', 'F13', 'F14', 'F15', 'F16', 'F17', 'F18', 'F19', 'PAUSE', 'INSERT', 'HOME', 'PAGE_UP', 'PAGE_DOWN', 'END', 'HENKAN', 'MUHENKAN', 'KANA', 'MENU', 'MEDIA_PLAY', 'MEDIA_STOP', 'MEDIA_FIRST', 'MEDIA_LAST', 'TEXTINPUT', 'WINDOW_DEACTIVATE', 'TIMER', 'TIMER0', 'TIMER1', 'TIMER2', 'TIMER_JOBS', 'TIMER_AUTOSAVE', 'TIMER_REPORT', 'TIMERREGION', 'NDOF_MOTION', 'NDOF_BUTTON_MENU', 'NDOF_BUTTON_FIT', 'NDOF_BUTTON_TOP', 'NDOF_BUTTON_BOTTOM', 'NDOF_BUTTON_LEFT', 'NDOF_BUTTON_RIGHT', 'NDOF_BUTTON_FRONT', 'NDOF_BUTTON_BACK', 'NDOF_BUTTON_ISO1', 'NDOF_BUTTON_ISO2', 'NDOF_BUTTON_ROLL_CW', 'NDOF_BUTTON_ROLL_CCW', 'NDOF_BUTTON_SPIN_CW', 'NDOF_BUTTON_SPIN_CCW', 'NDOF_BUTTON_TILT_CW', 'NDOF_BUTTON_TILT_CCW', 'NDOF_BUTTON_ROTATE', 'NDOF_BUTTON_PANZOOM', 'NDOF_BUTTON_DOMINANT', 'NDOF_BUTTON_PLUS', 'NDOF_BUTTON_MINUS', 'NDOF_BUTTON_ESC', 'NDOF_BUTTON_ALT', 'NDOF_BUTTON_SHIFT', 'NDOF_BUTTON_CTRL', 'NDOF_BUTTON_1', 'NDOF_BUTTON_2', 'NDOF_BUTTON_3', 'NDOF_BUTTON_4', 'NDOF_BUTTON_5', 'NDOF_BUTTON_6', 'NDOF_BUTTON_7', 'NDOF_BUTTON_8', 'NDOF_BUTTON_9', 'NDOF_BUTTON_10', 'NDOF_BUTTON_A', 'NDOF_BUTTON_B', 'NDOF_BUTTON_C'])
        :type type: str
        :param value: Value
            (type: enum in ['ANY', 'NOTHING', 'PRESS', 'RELEASE', 'CLICK', 'DOUBLE_CLICK', 'NORTH', 'NORTH_EAST', 'EAST', 'SOUTH_EAST', 'SOUTH', 'SOUTH_WEST', 'WEST', 'NORTH_WEST'])
        :type value: str
        :param any: Any
            (type: boolean, (optional))
        :type any: bool
        :param shift: Shift
            (type: boolean, (optional))
        :type shift: bool
        :param ctrl: Ctrl
            (type: boolean, (optional))
        :type ctrl: bool
        :param alt: Alt
            (type: boolean, (optional))
        :type alt: bool
        :param oskey: OS Key
            (type: boolean, (optional))
        :type oskey: bool
        :param key_modifier: Key Modifier
            * 'NONE': .
            * 'LEFTMOUSE': Left Mouse, LMB.
            * 'MIDDLEMOUSE': Middle Mouse, MMB.
            * 'RIGHTMOUSE': Right Mouse, RMB.
            * 'BUTTON4MOUSE': Button4 Mouse, MB4.
            * 'BUTTON5MOUSE': Button5 Mouse, MB5.
            * 'BUTTON6MOUSE': Button6 Mouse, MB6.
            * 'BUTTON7MOUSE': Button7 Mouse, MB7.
            * 'BUTTON8MOUSE': Button8 Mouse, MB8.
            * 'BUTTON9MOUSE': Button9 Mouse, MB9.
            * 'BUTTON10MOUSE': Button10 Mouse, MB10.
            * 'BUTTON11MOUSE': Button11 Mouse, MB11.
            * 'BUTTON12MOUSE': Button12 Mouse, MB12.
            * 'BUTTON13MOUSE': Button13 Mouse, MB13.
            * 'BUTTON14MOUSE': Button14 Mouse, MB14.
            * 'BUTTON15MOUSE': Button15 Mouse, MB15.
            * 'BUTTON16MOUSE': Button16 Mouse, MB16.
            * 'BUTTON17MOUSE': Button17 Mouse, MB17.
            * 'ACTIONMOUSE': Action Mouse, MBA.
            * 'SELECTMOUSE': Select Mouse, MBS.
            * 'PEN': Pen.
            * 'ERASER': Eraser.
            * 'MOUSEMOVE': Mouse Move, MsMov.
            * 'INBETWEEN_MOUSEMOVE': In-between Move, MsSubMov.
            * 'TRACKPADPAN': Mouse/Trackpad Pan, MsPan.
            * 'TRACKPADZOOM': Mouse/Trackpad Zoom, MsZoom.
            * 'MOUSEROTATE': Mouse/Trackpad Rotate, MsRot.
            * 'WHEELUPMOUSE': Wheel Up, WhUp.
            * 'WHEELDOWNMOUSE': Wheel Down, WhDown.
            * 'WHEELINMOUSE': Wheel In, WhIn.
            * 'WHEELOUTMOUSE': Wheel Out, WhOut.
            * 'EVT_TWEAK_L': Tweak Left, TwkL.
            * 'EVT_TWEAK_M': Tweak Middle, TwkM.
            * 'EVT_TWEAK_R': Tweak Right, TwkR.
            * 'EVT_TWEAK_A': Tweak Action, TwkA.
            * 'EVT_TWEAK_S': Tweak Select, TwkS.
            * 'A': A.
            * 'B': B.
            * 'C': C.
            * 'D': D.
            * 'E': E.
            * 'F': F.
            * 'G': G.
            * 'H': H.
            * 'I': I.
            * 'J': J.
            * 'K': K.
            * 'L': L.
            * 'M': M.
            * 'N': N.
            * 'O': O.
            * 'P': P.
            * 'Q': Q.
            * 'R': R.
            * 'S': S.
            * 'T': T.
            * 'U': U.
            * 'V': V.
            * 'W': W.
            * 'X': X.
            * 'Y': Y.
            * 'Z': Z.
            * 'ZERO': 0.
            * 'ONE': 1.
            * 'TWO': 2.
            * 'THREE': 3.
            * 'FOUR': 4.
            * 'FIVE': 5.
            * 'SIX': 6.
            * 'SEVEN': 7.
            * 'EIGHT': 8.
            * 'NINE': 9.
            * 'LEFT_CTRL': Left Ctrl, CtrlL.
            * 'LEFT_ALT': Left Alt, AltL.
            * 'LEFT_SHIFT': Left Shift, ShiftL.
            * 'RIGHT_ALT': Right Alt, AltR.
            * 'RIGHT_CTRL': Right Ctrl, CtrlR.
            * 'RIGHT_SHIFT': Right Shift, ShiftR.
            * 'OSKEY': OS Key, Cmd.
            * 'GRLESS': Grless.
            * 'ESC': Esc.
            * 'TAB': Tab.
            * 'RET': Return, Enter.
            * 'SPACE': Spacebar, Space.
            * 'LINE_FEED': Line Feed.
            * 'BACK_SPACE': Back Space, BkSpace.
            * 'DEL': Delete, Del.
            * 'COLON': :.
            * 'SEMI_COLON': ;.
            * 'PERIOD': ..
            * 'COMMA': ,.
            * 'QUOTE': ".
            * 'ACCENT_GRAVE': `.
            * 'MINUS': -.
            * 'PLUS': +.
            * 'SLASH': /.
            * 'BACK_SLASH': \.
            * 'EQUAL': =.
            * 'LEFT_BRACKET': [.
            * 'RIGHT_BRACKET': ].
            * 'ATKEY': @.
            * 'ASCIICIRCUM': ^.
            * 'LEFT_ARROW': Left Arrow, ←.
            * 'DOWN_ARROW': Down Arrow, ↓.
            * 'RIGHT_ARROW': Right Arrow, →.
            * 'UP_ARROW': Up Arrow, ↑.
            * 'NUMPAD_2': Numpad 2, Pad2.
            * 'NUMPAD_4': Numpad 4, Pad4.
            * 'NUMPAD_6': Numpad 6, Pad6.
            * 'NUMPAD_8': Numpad 8, Pad8.
            * 'NUMPAD_1': Numpad 1, Pad1.
            * 'NUMPAD_3': Numpad 3, Pad3.
            * 'NUMPAD_5': Numpad 5, Pad5.
            * 'NUMPAD_7': Numpad 7, Pad7.
            * 'NUMPAD_9': Numpad 9, Pad9.
            * 'NUMPAD_PERIOD': Numpad ., Pad..
            * 'NUMPAD_SLASH': Numpad /, Pad/.
            * 'NUMPAD_ASTERIX': Numpad *, Pad*.
            * 'NUMPAD_0': Numpad 0, Pad0.
            * 'NUMPAD_MINUS': Numpad -, Pad-.
            * 'NUMPAD_ENTER': Numpad Enter, PadEnter.
            * 'NUMPAD_PLUS': Numpad +, Pad+.
            * 'F1': F1.
            * 'F2': F2.
            * 'F3': F3.
            * 'F4': F4.
            * 'F5': F5.
            * 'F6': F6.
            * 'F7': F7.
            * 'F8': F8.
            * 'F9': F9.
            * 'F10': F10.
            * 'F11': F11.
            * 'F12': F12.
            * 'F13': F13.
            * 'F14': F14.
            * 'F15': F15.
            * 'F16': F16.
            * 'F17': F17.
            * 'F18': F18.
            * 'F19': F19.
            * 'PAUSE': Pause.
            * 'INSERT': Insert, Ins.
            * 'HOME': Home.
            * 'PAGE_UP': Page Up, PgUp.
            * 'PAGE_DOWN': Page Down, PgDown.
            * 'END': End.
            * 'HENKAN': Henkan.
            * 'MUHENKAN': Muhenkan.
            * 'KANA': Kana.
            * 'MENU': Menu.
            * 'MEDIA_PLAY': Media Play/Pause, >/||.
            * 'MEDIA_STOP': Media Stop, Stop.
            * 'MEDIA_FIRST': Media First, |<<.
            * 'MEDIA_LAST': Media Last, >>|.
            * 'TEXTINPUT': Text Input, TxtIn.
            * 'WINDOW_DEACTIVATE': Window Deactivate.
            * 'TIMER': Timer, Tmr.
            * 'TIMER0': Timer 0, Tmr0.
            * 'TIMER1': Timer 1, Tmr1.
            * 'TIMER2': Timer 2, Tmr2.
            * 'TIMER_JOBS': Timer Jobs, TmrJob.
            * 'TIMER_AUTOSAVE': Timer Autosave, TmrSave.
            * 'TIMER_REPORT': Timer Report, TmrReport.
            * 'TIMERREGION': Timer Region, TmrReg.
            * 'NDOF_MOTION': NDOF Motion, NdofMov.
            * 'NDOF_BUTTON_MENU': NDOF Menu, NdofMenu.
            * 'NDOF_BUTTON_FIT': NDOF Fit, NdofFit.
            * 'NDOF_BUTTON_TOP': NDOF Top, Ndof↑.
            * 'NDOF_BUTTON_BOTTOM': NDOF Bottom, Ndof↓.
            * 'NDOF_BUTTON_LEFT': NDOF Left, Ndof←.
            * 'NDOF_BUTTON_RIGHT': NDOF Right, Ndof→.
            * 'NDOF_BUTTON_FRONT': NDOF Front, NdofFront.
            * 'NDOF_BUTTON_BACK': NDOF Back, NdofBack.
            * 'NDOF_BUTTON_ISO1': NDOF Isometric 1, NdofIso1.
            * 'NDOF_BUTTON_ISO2': NDOF Isometric 2, NdofIso2.
            * 'NDOF_BUTTON_ROLL_CW': NDOF Roll CW, NdofRCW.
            * 'NDOF_BUTTON_ROLL_CCW': NDOF Roll CCW, NdofRCCW.
            * 'NDOF_BUTTON_SPIN_CW': NDOF Spin CW, NdofSCW.
            * 'NDOF_BUTTON_SPIN_CCW': NDOF Spin CCW, NdofSCCW.
            * 'NDOF_BUTTON_TILT_CW': NDOF Tilt CW, NdofTCW.
            * 'NDOF_BUTTON_TILT_CCW': NDOF Tilt CCW, NdofTCCW.
            * 'NDOF_BUTTON_ROTATE': NDOF Rotate, NdofRot.
            * 'NDOF_BUTTON_PANZOOM': NDOF Pan/Zoom, NdofPanZoom.
            * 'NDOF_BUTTON_DOMINANT': NDOF Dominant, NdofDom.
            * 'NDOF_BUTTON_PLUS': NDOF Plus, Ndof+.
            * 'NDOF_BUTTON_MINUS': NDOF Minus, Ndof-.
            * 'NDOF_BUTTON_ESC': NDOF Esc, NdofEsc.
            * 'NDOF_BUTTON_ALT': NDOF Alt, NdofAlt.
            * 'NDOF_BUTTON_SHIFT': NDOF Shift, NdofShift.
            * 'NDOF_BUTTON_CTRL': NDOF Ctrl, NdofCtrl.
            * 'NDOF_BUTTON_1': NDOF Button 1, NdofB1.
            * 'NDOF_BUTTON_2': NDOF Button 2, NdofB2.
            * 'NDOF_BUTTON_3': NDOF Button 3, NdofB3.
            * 'NDOF_BUTTON_4': NDOF Button 4, NdofB4.
            * 'NDOF_BUTTON_5': NDOF Button 5, NdofB5.
            * 'NDOF_BUTTON_6': NDOF Button 6, NdofB6.
            * 'NDOF_BUTTON_7': NDOF Button 7, NdofB7.
            * 'NDOF_BUTTON_8': NDOF Button 8, NdofB8.
            * 'NDOF_BUTTON_9': NDOF Button 9, NdofB9.
            * 'NDOF_BUTTON_10': NDOF Button 10, NdofB10.
            * 'NDOF_BUTTON_A': NDOF Button A, NdofBA.
            * 'NDOF_BUTTON_B': NDOF Button B, NdofBB.
            * 'NDOF_BUTTON_C': NDOF Button C, NdofBC.
            (type: enum in ['NONE', 'LEFTMOUSE', 'MIDDLEMOUSE', 'RIGHTMOUSE', 'BUTTON4MOUSE', 'BUTTON5MOUSE', 'BUTTON6MOUSE', 'BUTTON7MOUSE', 'BUTTON8MOUSE', 'BUTTON9MOUSE', 'BUTTON10MOUSE', 'BUTTON11MOUSE', 'BUTTON12MOUSE', 'BUTTON13MOUSE', 'BUTTON14MOUSE', 'BUTTON15MOUSE', 'BUTTON16MOUSE', 'BUTTON17MOUSE', 'ACTIONMOUSE', 'SELECTMOUSE', 'PEN', 'ERASER', 'MOUSEMOVE', 'INBETWEEN_MOUSEMOVE', 'TRACKPADPAN', 'TRACKPADZOOM', 'MOUSEROTATE', 'WHEELUPMOUSE', 'WHEELDOWNMOUSE', 'WHEELINMOUSE', 'WHEELOUTMOUSE', 'EVT_TWEAK_L', 'EVT_TWEAK_M', 'EVT_TWEAK_R', 'EVT_TWEAK_A', 'EVT_TWEAK_S', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'ZERO', 'ONE', 'TWO', 'THREE', 'FOUR', 'FIVE', 'SIX', 'SEVEN', 'EIGHT', 'NINE', 'LEFT_CTRL', 'LEFT_ALT', 'LEFT_SHIFT', 'RIGHT_ALT', 'RIGHT_CTRL', 'RIGHT_SHIFT', 'OSKEY', 'GRLESS', 'ESC', 'TAB', 'RET', 'SPACE', 'LINE_FEED', 'BACK_SPACE', 'DEL', 'COLON', 'SEMI_COLON', 'PERIOD', 'COMMA', 'QUOTE', 'ACCENT_GRAVE', 'MINUS', 'PLUS', 'SLASH', 'BACK_SLASH', 'EQUAL', 'LEFT_BRACKET', 'RIGHT_BRACKET', 'ATKEY', 'ASCIICIRCUM', 'LEFT_ARROW', 'DOWN_ARROW', 'RIGHT_ARROW', 'UP_ARROW', 'NUMPAD_2', 'NUMPAD_4', 'NUMPAD_6', 'NUMPAD_8', 'NUMPAD_1', 'NUMPAD_3', 'NUMPAD_5', 'NUMPAD_7', 'NUMPAD_9', 'NUMPAD_PERIOD', 'NUMPAD_SLASH', 'NUMPAD_ASTERIX', 'NUMPAD_0', 'NUMPAD_MINUS', 'NUMPAD_ENTER', 'NUMPAD_PLUS', 'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12', 'F13', 'F14', 'F15', 'F16', 'F17', 'F18', 'F19', 'PAUSE', 'INSERT', 'HOME', 'PAGE_UP', 'PAGE_DOWN', 'END', 'HENKAN', 'MUHENKAN', 'KANA', 'MENU', 'MEDIA_PLAY', 'MEDIA_STOP', 'MEDIA_FIRST', 'MEDIA_LAST', 'TEXTINPUT', 'WINDOW_DEACTIVATE', 'TIMER', 'TIMER0', 'TIMER1', 'TIMER2', 'TIMER_JOBS', 'TIMER_AUTOSAVE', 'TIMER_REPORT', 'TIMERREGION', 'NDOF_MOTION', 'NDOF_BUTTON_MENU', 'NDOF_BUTTON_FIT', 'NDOF_BUTTON_TOP', 'NDOF_BUTTON_BOTTOM', 'NDOF_BUTTON_LEFT', 'NDOF_BUTTON_RIGHT', 'NDOF_BUTTON_FRONT', 'NDOF_BUTTON_BACK', 'NDOF_BUTTON_ISO1', 'NDOF_BUTTON_ISO2', 'NDOF_BUTTON_ROLL_CW', 'NDOF_BUTTON_ROLL_CCW', 'NDOF_BUTTON_SPIN_CW', 'NDOF_BUTTON_SPIN_CCW', 'NDOF_BUTTON_TILT_CW', 'NDOF_BUTTON_TILT_CCW', 'NDOF_BUTTON_ROTATE', 'NDOF_BUTTON_PANZOOM', 'NDOF_BUTTON_DOMINANT', 'NDOF_BUTTON_PLUS', 'NDOF_BUTTON_MINUS', 'NDOF_BUTTON_ESC', 'NDOF_BUTTON_ALT', 'NDOF_BUTTON_SHIFT', 'NDOF_BUTTON_CTRL', 'NDOF_BUTTON_1', 'NDOF_BUTTON_2', 'NDOF_BUTTON_3', 'NDOF_BUTTON_4', 'NDOF_BUTTON_5', 'NDOF_BUTTON_6', 'NDOF_BUTTON_7', 'NDOF_BUTTON_8', 'NDOF_BUTTON_9', 'NDOF_BUTTON_10', 'NDOF_BUTTON_A', 'NDOF_BUTTON_B', 'NDOF_BUTTON_C'], (optional))
        :type key_modifier: str
        :param head: At Head, Force item to be added at start (not end) of key map so that it doesn't get blocked by an existing key map item
            (type: boolean, (optional))
        :type head: bool
        :return: Item, Added key map item
        :param : (type: bpy.types.KeyMapItem)
        :rtype: KeyMapItem
        """

    def new_modal(self, propvalue, type, value, any=False, shift=False, ctrl=False, alt=False, oskey=False, key_modifier='NONE'):
        """new_modal
        
        :param propvalue: Property Value
            (type: str, (never None))
        :type propvalue: str
        :param type: Type
            * 'NONE': .
            * 'LEFTMOUSE': Left Mouse, LMB.
            * 'MIDDLEMOUSE': Middle Mouse, MMB.
            * 'RIGHTMOUSE': Right Mouse, RMB.
            * 'BUTTON4MOUSE': Button4 Mouse, MB4.
            * 'BUTTON5MOUSE': Button5 Mouse, MB5.
            * 'BUTTON6MOUSE': Button6 Mouse, MB6.
            * 'BUTTON7MOUSE': Button7 Mouse, MB7.
            * 'BUTTON8MOUSE': Button8 Mouse, MB8.
            * 'BUTTON9MOUSE': Button9 Mouse, MB9.
            * 'BUTTON10MOUSE': Button10 Mouse, MB10.
            * 'BUTTON11MOUSE': Button11 Mouse, MB11.
            * 'BUTTON12MOUSE': Button12 Mouse, MB12.
            * 'BUTTON13MOUSE': Button13 Mouse, MB13.
            * 'BUTTON14MOUSE': Button14 Mouse, MB14.
            * 'BUTTON15MOUSE': Button15 Mouse, MB15.
            * 'BUTTON16MOUSE': Button16 Mouse, MB16.
            * 'BUTTON17MOUSE': Button17 Mouse, MB17.
            * 'ACTIONMOUSE': Action Mouse, MBA.
            * 'SELECTMOUSE': Select Mouse, MBS.
            * 'PEN': Pen.
            * 'ERASER': Eraser.
            * 'MOUSEMOVE': Mouse Move, MsMov.
            * 'INBETWEEN_MOUSEMOVE': In-between Move, MsSubMov.
            * 'TRACKPADPAN': Mouse/Trackpad Pan, MsPan.
            * 'TRACKPADZOOM': Mouse/Trackpad Zoom, MsZoom.
            * 'MOUSEROTATE': Mouse/Trackpad Rotate, MsRot.
            * 'WHEELUPMOUSE': Wheel Up, WhUp.
            * 'WHEELDOWNMOUSE': Wheel Down, WhDown.
            * 'WHEELINMOUSE': Wheel In, WhIn.
            * 'WHEELOUTMOUSE': Wheel Out, WhOut.
            * 'EVT_TWEAK_L': Tweak Left, TwkL.
            * 'EVT_TWEAK_M': Tweak Middle, TwkM.
            * 'EVT_TWEAK_R': Tweak Right, TwkR.
            * 'EVT_TWEAK_A': Tweak Action, TwkA.
            * 'EVT_TWEAK_S': Tweak Select, TwkS.
            * 'A': A.
            * 'B': B.
            * 'C': C.
            * 'D': D.
            * 'E': E.
            * 'F': F.
            * 'G': G.
            * 'H': H.
            * 'I': I.
            * 'J': J.
            * 'K': K.
            * 'L': L.
            * 'M': M.
            * 'N': N.
            * 'O': O.
            * 'P': P.
            * 'Q': Q.
            * 'R': R.
            * 'S': S.
            * 'T': T.
            * 'U': U.
            * 'V': V.
            * 'W': W.
            * 'X': X.
            * 'Y': Y.
            * 'Z': Z.
            * 'ZERO': 0.
            * 'ONE': 1.
            * 'TWO': 2.
            * 'THREE': 3.
            * 'FOUR': 4.
            * 'FIVE': 5.
            * 'SIX': 6.
            * 'SEVEN': 7.
            * 'EIGHT': 8.
            * 'NINE': 9.
            * 'LEFT_CTRL': Left Ctrl, CtrlL.
            * 'LEFT_ALT': Left Alt, AltL.
            * 'LEFT_SHIFT': Left Shift, ShiftL.
            * 'RIGHT_ALT': Right Alt, AltR.
            * 'RIGHT_CTRL': Right Ctrl, CtrlR.
            * 'RIGHT_SHIFT': Right Shift, ShiftR.
            * 'OSKEY': OS Key, Cmd.
            * 'GRLESS': Grless.
            * 'ESC': Esc.
            * 'TAB': Tab.
            * 'RET': Return, Enter.
            * 'SPACE': Spacebar, Space.
            * 'LINE_FEED': Line Feed.
            * 'BACK_SPACE': Back Space, BkSpace.
            * 'DEL': Delete, Del.
            * 'COLON': :.
            * 'SEMI_COLON': ;.
            * 'PERIOD': ..
            * 'COMMA': ,.
            * 'QUOTE': ".
            * 'ACCENT_GRAVE': `.
            * 'MINUS': -.
            * 'PLUS': +.
            * 'SLASH': /.
            * 'BACK_SLASH': \.
            * 'EQUAL': =.
            * 'LEFT_BRACKET': [.
            * 'RIGHT_BRACKET': ].
            * 'ATKEY': @.
            * 'ASCIICIRCUM': ^.
            * 'LEFT_ARROW': Left Arrow, ←.
            * 'DOWN_ARROW': Down Arrow, ↓.
            * 'RIGHT_ARROW': Right Arrow, →.
            * 'UP_ARROW': Up Arrow, ↑.
            * 'NUMPAD_2': Numpad 2, Pad2.
            * 'NUMPAD_4': Numpad 4, Pad4.
            * 'NUMPAD_6': Numpad 6, Pad6.
            * 'NUMPAD_8': Numpad 8, Pad8.
            * 'NUMPAD_1': Numpad 1, Pad1.
            * 'NUMPAD_3': Numpad 3, Pad3.
            * 'NUMPAD_5': Numpad 5, Pad5.
            * 'NUMPAD_7': Numpad 7, Pad7.
            * 'NUMPAD_9': Numpad 9, Pad9.
            * 'NUMPAD_PERIOD': Numpad ., Pad..
            * 'NUMPAD_SLASH': Numpad /, Pad/.
            * 'NUMPAD_ASTERIX': Numpad *, Pad*.
            * 'NUMPAD_0': Numpad 0, Pad0.
            * 'NUMPAD_MINUS': Numpad -, Pad-.
            * 'NUMPAD_ENTER': Numpad Enter, PadEnter.
            * 'NUMPAD_PLUS': Numpad +, Pad+.
            * 'F1': F1.
            * 'F2': F2.
            * 'F3': F3.
            * 'F4': F4.
            * 'F5': F5.
            * 'F6': F6.
            * 'F7': F7.
            * 'F8': F8.
            * 'F9': F9.
            * 'F10': F10.
            * 'F11': F11.
            * 'F12': F12.
            * 'F13': F13.
            * 'F14': F14.
            * 'F15': F15.
            * 'F16': F16.
            * 'F17': F17.
            * 'F18': F18.
            * 'F19': F19.
            * 'PAUSE': Pause.
            * 'INSERT': Insert, Ins.
            * 'HOME': Home.
            * 'PAGE_UP': Page Up, PgUp.
            * 'PAGE_DOWN': Page Down, PgDown.
            * 'END': End.
            * 'HENKAN': Henkan.
            * 'MUHENKAN': Muhenkan.
            * 'KANA': Kana.
            * 'MENU': Menu.
            * 'MEDIA_PLAY': Media Play/Pause, >/||.
            * 'MEDIA_STOP': Media Stop, Stop.
            * 'MEDIA_FIRST': Media First, |<<.
            * 'MEDIA_LAST': Media Last, >>|.
            * 'TEXTINPUT': Text Input, TxtIn.
            * 'WINDOW_DEACTIVATE': Window Deactivate.
            * 'TIMER': Timer, Tmr.
            * 'TIMER0': Timer 0, Tmr0.
            * 'TIMER1': Timer 1, Tmr1.
            * 'TIMER2': Timer 2, Tmr2.
            * 'TIMER_JOBS': Timer Jobs, TmrJob.
            * 'TIMER_AUTOSAVE': Timer Autosave, TmrSave.
            * 'TIMER_REPORT': Timer Report, TmrReport.
            * 'TIMERREGION': Timer Region, TmrReg.
            * 'NDOF_MOTION': NDOF Motion, NdofMov.
            * 'NDOF_BUTTON_MENU': NDOF Menu, NdofMenu.
            * 'NDOF_BUTTON_FIT': NDOF Fit, NdofFit.
            * 'NDOF_BUTTON_TOP': NDOF Top, Ndof↑.
            * 'NDOF_BUTTON_BOTTOM': NDOF Bottom, Ndof↓.
            * 'NDOF_BUTTON_LEFT': NDOF Left, Ndof←.
            * 'NDOF_BUTTON_RIGHT': NDOF Right, Ndof→.
            * 'NDOF_BUTTON_FRONT': NDOF Front, NdofFront.
            * 'NDOF_BUTTON_BACK': NDOF Back, NdofBack.
            * 'NDOF_BUTTON_ISO1': NDOF Isometric 1, NdofIso1.
            * 'NDOF_BUTTON_ISO2': NDOF Isometric 2, NdofIso2.
            * 'NDOF_BUTTON_ROLL_CW': NDOF Roll CW, NdofRCW.
            * 'NDOF_BUTTON_ROLL_CCW': NDOF Roll CCW, NdofRCCW.
            * 'NDOF_BUTTON_SPIN_CW': NDOF Spin CW, NdofSCW.
            * 'NDOF_BUTTON_SPIN_CCW': NDOF Spin CCW, NdofSCCW.
            * 'NDOF_BUTTON_TILT_CW': NDOF Tilt CW, NdofTCW.
            * 'NDOF_BUTTON_TILT_CCW': NDOF Tilt CCW, NdofTCCW.
            * 'NDOF_BUTTON_ROTATE': NDOF Rotate, NdofRot.
            * 'NDOF_BUTTON_PANZOOM': NDOF Pan/Zoom, NdofPanZoom.
            * 'NDOF_BUTTON_DOMINANT': NDOF Dominant, NdofDom.
            * 'NDOF_BUTTON_PLUS': NDOF Plus, Ndof+.
            * 'NDOF_BUTTON_MINUS': NDOF Minus, Ndof-.
            * 'NDOF_BUTTON_ESC': NDOF Esc, NdofEsc.
            * 'NDOF_BUTTON_ALT': NDOF Alt, NdofAlt.
            * 'NDOF_BUTTON_SHIFT': NDOF Shift, NdofShift.
            * 'NDOF_BUTTON_CTRL': NDOF Ctrl, NdofCtrl.
            * 'NDOF_BUTTON_1': NDOF Button 1, NdofB1.
            * 'NDOF_BUTTON_2': NDOF Button 2, NdofB2.
            * 'NDOF_BUTTON_3': NDOF Button 3, NdofB3.
            * 'NDOF_BUTTON_4': NDOF Button 4, NdofB4.
            * 'NDOF_BUTTON_5': NDOF Button 5, NdofB5.
            * 'NDOF_BUTTON_6': NDOF Button 6, NdofB6.
            * 'NDOF_BUTTON_7': NDOF Button 7, NdofB7.
            * 'NDOF_BUTTON_8': NDOF Button 8, NdofB8.
            * 'NDOF_BUTTON_9': NDOF Button 9, NdofB9.
            * 'NDOF_BUTTON_10': NDOF Button 10, NdofB10.
            * 'NDOF_BUTTON_A': NDOF Button A, NdofBA.
            * 'NDOF_BUTTON_B': NDOF Button B, NdofBB.
            * 'NDOF_BUTTON_C': NDOF Button C, NdofBC.
            (type: enum in ['NONE', 'LEFTMOUSE', 'MIDDLEMOUSE', 'RIGHTMOUSE', 'BUTTON4MOUSE', 'BUTTON5MOUSE', 'BUTTON6MOUSE', 'BUTTON7MOUSE', 'BUTTON8MOUSE', 'BUTTON9MOUSE', 'BUTTON10MOUSE', 'BUTTON11MOUSE', 'BUTTON12MOUSE', 'BUTTON13MOUSE', 'BUTTON14MOUSE', 'BUTTON15MOUSE', 'BUTTON16MOUSE', 'BUTTON17MOUSE', 'ACTIONMOUSE', 'SELECTMOUSE', 'PEN', 'ERASER', 'MOUSEMOVE', 'INBETWEEN_MOUSEMOVE', 'TRACKPADPAN', 'TRACKPADZOOM', 'MOUSEROTATE', 'WHEELUPMOUSE', 'WHEELDOWNMOUSE', 'WHEELINMOUSE', 'WHEELOUTMOUSE', 'EVT_TWEAK_L', 'EVT_TWEAK_M', 'EVT_TWEAK_R', 'EVT_TWEAK_A', 'EVT_TWEAK_S', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'ZERO', 'ONE', 'TWO', 'THREE', 'FOUR', 'FIVE', 'SIX', 'SEVEN', 'EIGHT', 'NINE', 'LEFT_CTRL', 'LEFT_ALT', 'LEFT_SHIFT', 'RIGHT_ALT', 'RIGHT_CTRL', 'RIGHT_SHIFT', 'OSKEY', 'GRLESS', 'ESC', 'TAB', 'RET', 'SPACE', 'LINE_FEED', 'BACK_SPACE', 'DEL', 'COLON', 'SEMI_COLON', 'PERIOD', 'COMMA', 'QUOTE', 'ACCENT_GRAVE', 'MINUS', 'PLUS', 'SLASH', 'BACK_SLASH', 'EQUAL', 'LEFT_BRACKET', 'RIGHT_BRACKET', 'ATKEY', 'ASCIICIRCUM', 'LEFT_ARROW', 'DOWN_ARROW', 'RIGHT_ARROW', 'UP_ARROW', 'NUMPAD_2', 'NUMPAD_4', 'NUMPAD_6', 'NUMPAD_8', 'NUMPAD_1', 'NUMPAD_3', 'NUMPAD_5', 'NUMPAD_7', 'NUMPAD_9', 'NUMPAD_PERIOD', 'NUMPAD_SLASH', 'NUMPAD_ASTERIX', 'NUMPAD_0', 'NUMPAD_MINUS', 'NUMPAD_ENTER', 'NUMPAD_PLUS', 'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12', 'F13', 'F14', 'F15', 'F16', 'F17', 'F18', 'F19', 'PAUSE', 'INSERT', 'HOME', 'PAGE_UP', 'PAGE_DOWN', 'END', 'HENKAN', 'MUHENKAN', 'KANA', 'MENU', 'MEDIA_PLAY', 'MEDIA_STOP', 'MEDIA_FIRST', 'MEDIA_LAST', 'TEXTINPUT', 'WINDOW_DEACTIVATE', 'TIMER', 'TIMER0', 'TIMER1', 'TIMER2', 'TIMER_JOBS', 'TIMER_AUTOSAVE', 'TIMER_REPORT', 'TIMERREGION', 'NDOF_MOTION', 'NDOF_BUTTON_MENU', 'NDOF_BUTTON_FIT', 'NDOF_BUTTON_TOP', 'NDOF_BUTTON_BOTTOM', 'NDOF_BUTTON_LEFT', 'NDOF_BUTTON_RIGHT', 'NDOF_BUTTON_FRONT', 'NDOF_BUTTON_BACK', 'NDOF_BUTTON_ISO1', 'NDOF_BUTTON_ISO2', 'NDOF_BUTTON_ROLL_CW', 'NDOF_BUTTON_ROLL_CCW', 'NDOF_BUTTON_SPIN_CW', 'NDOF_BUTTON_SPIN_CCW', 'NDOF_BUTTON_TILT_CW', 'NDOF_BUTTON_TILT_CCW', 'NDOF_BUTTON_ROTATE', 'NDOF_BUTTON_PANZOOM', 'NDOF_BUTTON_DOMINANT', 'NDOF_BUTTON_PLUS', 'NDOF_BUTTON_MINUS', 'NDOF_BUTTON_ESC', 'NDOF_BUTTON_ALT', 'NDOF_BUTTON_SHIFT', 'NDOF_BUTTON_CTRL', 'NDOF_BUTTON_1', 'NDOF_BUTTON_2', 'NDOF_BUTTON_3', 'NDOF_BUTTON_4', 'NDOF_BUTTON_5', 'NDOF_BUTTON_6', 'NDOF_BUTTON_7', 'NDOF_BUTTON_8', 'NDOF_BUTTON_9', 'NDOF_BUTTON_10', 'NDOF_BUTTON_A', 'NDOF_BUTTON_B', 'NDOF_BUTTON_C'])
        :type type: str
        :param value: Value
            (type: enum in ['ANY', 'NOTHING', 'PRESS', 'RELEASE', 'CLICK', 'DOUBLE_CLICK', 'NORTH', 'NORTH_EAST', 'EAST', 'SOUTH_EAST', 'SOUTH', 'SOUTH_WEST', 'WEST', 'NORTH_WEST'])
        :type value: str
        :param any: Any
            (type: boolean, (optional))
        :type any: bool
        :param shift: Shift
            (type: boolean, (optional))
        :type shift: bool
        :param ctrl: Ctrl
            (type: boolean, (optional))
        :type ctrl: bool
        :param alt: Alt
            (type: boolean, (optional))
        :type alt: bool
        :param oskey: OS Key
            (type: boolean, (optional))
        :type oskey: bool
        :param key_modifier: Key Modifier
            * 'NONE': .
            * 'LEFTMOUSE': Left Mouse, LMB.
            * 'MIDDLEMOUSE': Middle Mouse, MMB.
            * 'RIGHTMOUSE': Right Mouse, RMB.
            * 'BUTTON4MOUSE': Button4 Mouse, MB4.
            * 'BUTTON5MOUSE': Button5 Mouse, MB5.
            * 'BUTTON6MOUSE': Button6 Mouse, MB6.
            * 'BUTTON7MOUSE': Button7 Mouse, MB7.
            * 'BUTTON8MOUSE': Button8 Mouse, MB8.
            * 'BUTTON9MOUSE': Button9 Mouse, MB9.
            * 'BUTTON10MOUSE': Button10 Mouse, MB10.
            * 'BUTTON11MOUSE': Button11 Mouse, MB11.
            * 'BUTTON12MOUSE': Button12 Mouse, MB12.
            * 'BUTTON13MOUSE': Button13 Mouse, MB13.
            * 'BUTTON14MOUSE': Button14 Mouse, MB14.
            * 'BUTTON15MOUSE': Button15 Mouse, MB15.
            * 'BUTTON16MOUSE': Button16 Mouse, MB16.
            * 'BUTTON17MOUSE': Button17 Mouse, MB17.
            * 'ACTIONMOUSE': Action Mouse, MBA.
            * 'SELECTMOUSE': Select Mouse, MBS.
            * 'PEN': Pen.
            * 'ERASER': Eraser.
            * 'MOUSEMOVE': Mouse Move, MsMov.
            * 'INBETWEEN_MOUSEMOVE': In-between Move, MsSubMov.
            * 'TRACKPADPAN': Mouse/Trackpad Pan, MsPan.
            * 'TRACKPADZOOM': Mouse/Trackpad Zoom, MsZoom.
            * 'MOUSEROTATE': Mouse/Trackpad Rotate, MsRot.
            * 'WHEELUPMOUSE': Wheel Up, WhUp.
            * 'WHEELDOWNMOUSE': Wheel Down, WhDown.
            * 'WHEELINMOUSE': Wheel In, WhIn.
            * 'WHEELOUTMOUSE': Wheel Out, WhOut.
            * 'EVT_TWEAK_L': Tweak Left, TwkL.
            * 'EVT_TWEAK_M': Tweak Middle, TwkM.
            * 'EVT_TWEAK_R': Tweak Right, TwkR.
            * 'EVT_TWEAK_A': Tweak Action, TwkA.
            * 'EVT_TWEAK_S': Tweak Select, TwkS.
            * 'A': A.
            * 'B': B.
            * 'C': C.
            * 'D': D.
            * 'E': E.
            * 'F': F.
            * 'G': G.
            * 'H': H.
            * 'I': I.
            * 'J': J.
            * 'K': K.
            * 'L': L.
            * 'M': M.
            * 'N': N.
            * 'O': O.
            * 'P': P.
            * 'Q': Q.
            * 'R': R.
            * 'S': S.
            * 'T': T.
            * 'U': U.
            * 'V': V.
            * 'W': W.
            * 'X': X.
            * 'Y': Y.
            * 'Z': Z.
            * 'ZERO': 0.
            * 'ONE': 1.
            * 'TWO': 2.
            * 'THREE': 3.
            * 'FOUR': 4.
            * 'FIVE': 5.
            * 'SIX': 6.
            * 'SEVEN': 7.
            * 'EIGHT': 8.
            * 'NINE': 9.
            * 'LEFT_CTRL': Left Ctrl, CtrlL.
            * 'LEFT_ALT': Left Alt, AltL.
            * 'LEFT_SHIFT': Left Shift, ShiftL.
            * 'RIGHT_ALT': Right Alt, AltR.
            * 'RIGHT_CTRL': Right Ctrl, CtrlR.
            * 'RIGHT_SHIFT': Right Shift, ShiftR.
            * 'OSKEY': OS Key, Cmd.
            * 'GRLESS': Grless.
            * 'ESC': Esc.
            * 'TAB': Tab.
            * 'RET': Return, Enter.
            * 'SPACE': Spacebar, Space.
            * 'LINE_FEED': Line Feed.
            * 'BACK_SPACE': Back Space, BkSpace.
            * 'DEL': Delete, Del.
            * 'COLON': :.
            * 'SEMI_COLON': ;.
            * 'PERIOD': ..
            * 'COMMA': ,.
            * 'QUOTE': ".
            * 'ACCENT_GRAVE': `.
            * 'MINUS': -.
            * 'PLUS': +.
            * 'SLASH': /.
            * 'BACK_SLASH': \.
            * 'EQUAL': =.
            * 'LEFT_BRACKET': [.
            * 'RIGHT_BRACKET': ].
            * 'ATKEY': @.
            * 'ASCIICIRCUM': ^.
            * 'LEFT_ARROW': Left Arrow, ←.
            * 'DOWN_ARROW': Down Arrow, ↓.
            * 'RIGHT_ARROW': Right Arrow, →.
            * 'UP_ARROW': Up Arrow, ↑.
            * 'NUMPAD_2': Numpad 2, Pad2.
            * 'NUMPAD_4': Numpad 4, Pad4.
            * 'NUMPAD_6': Numpad 6, Pad6.
            * 'NUMPAD_8': Numpad 8, Pad8.
            * 'NUMPAD_1': Numpad 1, Pad1.
            * 'NUMPAD_3': Numpad 3, Pad3.
            * 'NUMPAD_5': Numpad 5, Pad5.
            * 'NUMPAD_7': Numpad 7, Pad7.
            * 'NUMPAD_9': Numpad 9, Pad9.
            * 'NUMPAD_PERIOD': Numpad ., Pad..
            * 'NUMPAD_SLASH': Numpad /, Pad/.
            * 'NUMPAD_ASTERIX': Numpad *, Pad*.
            * 'NUMPAD_0': Numpad 0, Pad0.
            * 'NUMPAD_MINUS': Numpad -, Pad-.
            * 'NUMPAD_ENTER': Numpad Enter, PadEnter.
            * 'NUMPAD_PLUS': Numpad +, Pad+.
            * 'F1': F1.
            * 'F2': F2.
            * 'F3': F3.
            * 'F4': F4.
            * 'F5': F5.
            * 'F6': F6.
            * 'F7': F7.
            * 'F8': F8.
            * 'F9': F9.
            * 'F10': F10.
            * 'F11': F11.
            * 'F12': F12.
            * 'F13': F13.
            * 'F14': F14.
            * 'F15': F15.
            * 'F16': F16.
            * 'F17': F17.
            * 'F18': F18.
            * 'F19': F19.
            * 'PAUSE': Pause.
            * 'INSERT': Insert, Ins.
            * 'HOME': Home.
            * 'PAGE_UP': Page Up, PgUp.
            * 'PAGE_DOWN': Page Down, PgDown.
            * 'END': End.
            * 'HENKAN': Henkan.
            * 'MUHENKAN': Muhenkan.
            * 'KANA': Kana.
            * 'MENU': Menu.
            * 'MEDIA_PLAY': Media Play/Pause, >/||.
            * 'MEDIA_STOP': Media Stop, Stop.
            * 'MEDIA_FIRST': Media First, |<<.
            * 'MEDIA_LAST': Media Last, >>|.
            * 'TEXTINPUT': Text Input, TxtIn.
            * 'WINDOW_DEACTIVATE': Window Deactivate.
            * 'TIMER': Timer, Tmr.
            * 'TIMER0': Timer 0, Tmr0.
            * 'TIMER1': Timer 1, Tmr1.
            * 'TIMER2': Timer 2, Tmr2.
            * 'TIMER_JOBS': Timer Jobs, TmrJob.
            * 'TIMER_AUTOSAVE': Timer Autosave, TmrSave.
            * 'TIMER_REPORT': Timer Report, TmrReport.
            * 'TIMERREGION': Timer Region, TmrReg.
            * 'NDOF_MOTION': NDOF Motion, NdofMov.
            * 'NDOF_BUTTON_MENU': NDOF Menu, NdofMenu.
            * 'NDOF_BUTTON_FIT': NDOF Fit, NdofFit.
            * 'NDOF_BUTTON_TOP': NDOF Top, Ndof↑.
            * 'NDOF_BUTTON_BOTTOM': NDOF Bottom, Ndof↓.
            * 'NDOF_BUTTON_LEFT': NDOF Left, Ndof←.
            * 'NDOF_BUTTON_RIGHT': NDOF Right, Ndof→.
            * 'NDOF_BUTTON_FRONT': NDOF Front, NdofFront.
            * 'NDOF_BUTTON_BACK': NDOF Back, NdofBack.
            * 'NDOF_BUTTON_ISO1': NDOF Isometric 1, NdofIso1.
            * 'NDOF_BUTTON_ISO2': NDOF Isometric 2, NdofIso2.
            * 'NDOF_BUTTON_ROLL_CW': NDOF Roll CW, NdofRCW.
            * 'NDOF_BUTTON_ROLL_CCW': NDOF Roll CCW, NdofRCCW.
            * 'NDOF_BUTTON_SPIN_CW': NDOF Spin CW, NdofSCW.
            * 'NDOF_BUTTON_SPIN_CCW': NDOF Spin CCW, NdofSCCW.
            * 'NDOF_BUTTON_TILT_CW': NDOF Tilt CW, NdofTCW.
            * 'NDOF_BUTTON_TILT_CCW': NDOF Tilt CCW, NdofTCCW.
            * 'NDOF_BUTTON_ROTATE': NDOF Rotate, NdofRot.
            * 'NDOF_BUTTON_PANZOOM': NDOF Pan/Zoom, NdofPanZoom.
            * 'NDOF_BUTTON_DOMINANT': NDOF Dominant, NdofDom.
            * 'NDOF_BUTTON_PLUS': NDOF Plus, Ndof+.
            * 'NDOF_BUTTON_MINUS': NDOF Minus, Ndof-.
            * 'NDOF_BUTTON_ESC': NDOF Esc, NdofEsc.
            * 'NDOF_BUTTON_ALT': NDOF Alt, NdofAlt.
            * 'NDOF_BUTTON_SHIFT': NDOF Shift, NdofShift.
            * 'NDOF_BUTTON_CTRL': NDOF Ctrl, NdofCtrl.
            * 'NDOF_BUTTON_1': NDOF Button 1, NdofB1.
            * 'NDOF_BUTTON_2': NDOF Button 2, NdofB2.
            * 'NDOF_BUTTON_3': NDOF Button 3, NdofB3.
            * 'NDOF_BUTTON_4': NDOF Button 4, NdofB4.
            * 'NDOF_BUTTON_5': NDOF Button 5, NdofB5.
            * 'NDOF_BUTTON_6': NDOF Button 6, NdofB6.
            * 'NDOF_BUTTON_7': NDOF Button 7, NdofB7.
            * 'NDOF_BUTTON_8': NDOF Button 8, NdofB8.
            * 'NDOF_BUTTON_9': NDOF Button 9, NdofB9.
            * 'NDOF_BUTTON_10': NDOF Button 10, NdofB10.
            * 'NDOF_BUTTON_A': NDOF Button A, NdofBA.
            * 'NDOF_BUTTON_B': NDOF Button B, NdofBB.
            * 'NDOF_BUTTON_C': NDOF Button C, NdofBC.
            (type: enum in ['NONE', 'LEFTMOUSE', 'MIDDLEMOUSE', 'RIGHTMOUSE', 'BUTTON4MOUSE', 'BUTTON5MOUSE', 'BUTTON6MOUSE', 'BUTTON7MOUSE', 'BUTTON8MOUSE', 'BUTTON9MOUSE', 'BUTTON10MOUSE', 'BUTTON11MOUSE', 'BUTTON12MOUSE', 'BUTTON13MOUSE', 'BUTTON14MOUSE', 'BUTTON15MOUSE', 'BUTTON16MOUSE', 'BUTTON17MOUSE', 'ACTIONMOUSE', 'SELECTMOUSE', 'PEN', 'ERASER', 'MOUSEMOVE', 'INBETWEEN_MOUSEMOVE', 'TRACKPADPAN', 'TRACKPADZOOM', 'MOUSEROTATE', 'WHEELUPMOUSE', 'WHEELDOWNMOUSE', 'WHEELINMOUSE', 'WHEELOUTMOUSE', 'EVT_TWEAK_L', 'EVT_TWEAK_M', 'EVT_TWEAK_R', 'EVT_TWEAK_A', 'EVT_TWEAK_S', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'ZERO', 'ONE', 'TWO', 'THREE', 'FOUR', 'FIVE', 'SIX', 'SEVEN', 'EIGHT', 'NINE', 'LEFT_CTRL', 'LEFT_ALT', 'LEFT_SHIFT', 'RIGHT_ALT', 'RIGHT_CTRL', 'RIGHT_SHIFT', 'OSKEY', 'GRLESS', 'ESC', 'TAB', 'RET', 'SPACE', 'LINE_FEED', 'BACK_SPACE', 'DEL', 'COLON', 'SEMI_COLON', 'PERIOD', 'COMMA', 'QUOTE', 'ACCENT_GRAVE', 'MINUS', 'PLUS', 'SLASH', 'BACK_SLASH', 'EQUAL', 'LEFT_BRACKET', 'RIGHT_BRACKET', 'ATKEY', 'ASCIICIRCUM', 'LEFT_ARROW', 'DOWN_ARROW', 'RIGHT_ARROW', 'UP_ARROW', 'NUMPAD_2', 'NUMPAD_4', 'NUMPAD_6', 'NUMPAD_8', 'NUMPAD_1', 'NUMPAD_3', 'NUMPAD_5', 'NUMPAD_7', 'NUMPAD_9', 'NUMPAD_PERIOD', 'NUMPAD_SLASH', 'NUMPAD_ASTERIX', 'NUMPAD_0', 'NUMPAD_MINUS', 'NUMPAD_ENTER', 'NUMPAD_PLUS', 'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12', 'F13', 'F14', 'F15', 'F16', 'F17', 'F18', 'F19', 'PAUSE', 'INSERT', 'HOME', 'PAGE_UP', 'PAGE_DOWN', 'END', 'HENKAN', 'MUHENKAN', 'KANA', 'MENU', 'MEDIA_PLAY', 'MEDIA_STOP', 'MEDIA_FIRST', 'MEDIA_LAST', 'TEXTINPUT', 'WINDOW_DEACTIVATE', 'TIMER', 'TIMER0', 'TIMER1', 'TIMER2', 'TIMER_JOBS', 'TIMER_AUTOSAVE', 'TIMER_REPORT', 'TIMERREGION', 'NDOF_MOTION', 'NDOF_BUTTON_MENU', 'NDOF_BUTTON_FIT', 'NDOF_BUTTON_TOP', 'NDOF_BUTTON_BOTTOM', 'NDOF_BUTTON_LEFT', 'NDOF_BUTTON_RIGHT', 'NDOF_BUTTON_FRONT', 'NDOF_BUTTON_BACK', 'NDOF_BUTTON_ISO1', 'NDOF_BUTTON_ISO2', 'NDOF_BUTTON_ROLL_CW', 'NDOF_BUTTON_ROLL_CCW', 'NDOF_BUTTON_SPIN_CW', 'NDOF_BUTTON_SPIN_CCW', 'NDOF_BUTTON_TILT_CW', 'NDOF_BUTTON_TILT_CCW', 'NDOF_BUTTON_ROTATE', 'NDOF_BUTTON_PANZOOM', 'NDOF_BUTTON_DOMINANT', 'NDOF_BUTTON_PLUS', 'NDOF_BUTTON_MINUS', 'NDOF_BUTTON_ESC', 'NDOF_BUTTON_ALT', 'NDOF_BUTTON_SHIFT', 'NDOF_BUTTON_CTRL', 'NDOF_BUTTON_1', 'NDOF_BUTTON_2', 'NDOF_BUTTON_3', 'NDOF_BUTTON_4', 'NDOF_BUTTON_5', 'NDOF_BUTTON_6', 'NDOF_BUTTON_7', 'NDOF_BUTTON_8', 'NDOF_BUTTON_9', 'NDOF_BUTTON_10', 'NDOF_BUTTON_A', 'NDOF_BUTTON_B', 'NDOF_BUTTON_C'], (optional))
        :type key_modifier: str
        :return: Item, Added key map item
        :param : (type: bpy.types.KeyMapItem)
        :rtype: KeyMapItem
        """

    def remove(self, item):
        """remove
        
        :param item: Item
            (type: bpy.types.KeyMapItem, (never None))
        :type item: KeyMapItem
        """

    def from_id(self, id):
        """from_id
        
        :param id: id, ID of the item
            (type: int in [-inf, inf])
        :type id: int
        :return: Item
        :param : (type: bpy.types.KeyMapItem)
        :rtype: KeyMapItem
        """


class KeyMaps(bpy_struct):
    """Collection of keymaps"""

    def new(self, name, space_type='EMPTY', region_type='WINDOW', modal=False):
        """new
        
        :param name: Name
            (type: str, (never None))
        :type name: str
        :param space_type: Space Type
            * 'EMPTY': Empty.
            * 'VIEW_3D': 3D View, 3D viewport.
            * 'TIMELINE': Timeline, Timeline and playback controls.
            * 'GRAPH_EDITOR': Graph Editor, Edit drivers and keyframe interpolation.
            * 'DOPESHEET_EDITOR': Dope Sheet, Adjust timing of keyframes.
            * 'NLA_EDITOR': NLA Editor, Combine and layer Actions.
            * 'IMAGE_EDITOR': UV/Image Editor, View and edit images and UV Maps.
            * 'SEQUENCE_EDITOR': Video Sequence Editor, Video editing tools.
            * 'CLIP_EDITOR': Movie Clip Editor, Motion tracking tools.
            * 'TEXT_EDITOR': Text Editor, Edit scripts and in-file documentation.
            * 'NODE_EDITOR': Node Editor, Editor for node-based shading and compositing tools.
            * 'LOGIC_EDITOR': Logic Editor, Game logic editing.
            * 'PROPERTIES': Properties, Edit properties of active object and related data-blocks.
            * 'OUTLINER': Outliner, Overview of scene graph and all available data-blocks.
            * 'USER_PREFERENCES': User Preferences, Edit persistent configuration settings.
            * 'INFO': Info, Main menu bar and list of error messages (drag down to expand and display).
            * 'FILE_BROWSER': File Browser, Browse for files and assets.
            * 'CONSOLE': Python Console, Interactive programmatic console for advanced editing and script development.
            (type: enum in ['EMPTY', 'VIEW_3D', 'TIMELINE', 'GRAPH_EDITOR', 'DOPESHEET_EDITOR', 'NLA_EDITOR', 'IMAGE_EDITOR', 'SEQUENCE_EDITOR', 'CLIP_EDITOR', 'TEXT_EDITOR', 'NODE_EDITOR', 'LOGIC_EDITOR', 'PROPERTIES', 'OUTLINER', 'USER_PREFERENCES', 'INFO', 'FILE_BROWSER', 'CONSOLE'], (optional))
        :type space_type: str
        :param region_type: Region Type
            (type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW'], (optional))
        :type region_type: str
        :param modal: Modal
            (type: boolean, (optional))
        :type modal: bool
        :return: Key Map, Added key map
        :param : (type: bpy.types.KeyMap)
        :rtype: KeyMap
        """

    def remove(self, keymap):
        """remove
        
        :param keymap: Key Map, Removed key map
            (type: bpy.types.KeyMap, (never None))
        :type keymap: KeyMap
        """

    def find(self, name, space_type='EMPTY', region_type='WINDOW'):
        """find
        
        :param name: Name
            (type: str, (never None))
        :type name: str
        :param space_type: Space Type
            * 'EMPTY': Empty.
            * 'VIEW_3D': 3D View, 3D viewport.
            * 'TIMELINE': Timeline, Timeline and playback controls.
            * 'GRAPH_EDITOR': Graph Editor, Edit drivers and keyframe interpolation.
            * 'DOPESHEET_EDITOR': Dope Sheet, Adjust timing of keyframes.
            * 'NLA_EDITOR': NLA Editor, Combine and layer Actions.
            * 'IMAGE_EDITOR': UV/Image Editor, View and edit images and UV Maps.
            * 'SEQUENCE_EDITOR': Video Sequence Editor, Video editing tools.
            * 'CLIP_EDITOR': Movie Clip Editor, Motion tracking tools.
            * 'TEXT_EDITOR': Text Editor, Edit scripts and in-file documentation.
            * 'NODE_EDITOR': Node Editor, Editor for node-based shading and compositing tools.
            * 'LOGIC_EDITOR': Logic Editor, Game logic editing.
            * 'PROPERTIES': Properties, Edit properties of active object and related data-blocks.
            * 'OUTLINER': Outliner, Overview of scene graph and all available data-blocks.
            * 'USER_PREFERENCES': User Preferences, Edit persistent configuration settings.
            * 'INFO': Info, Main menu bar and list of error messages (drag down to expand and display).
            * 'FILE_BROWSER': File Browser, Browse for files and assets.
            * 'CONSOLE': Python Console, Interactive programmatic console for advanced editing and script development.
            (type: enum in ['EMPTY', 'VIEW_3D', 'TIMELINE', 'GRAPH_EDITOR', 'DOPESHEET_EDITOR', 'NLA_EDITOR', 'IMAGE_EDITOR', 'SEQUENCE_EDITOR', 'CLIP_EDITOR', 'TEXT_EDITOR', 'NODE_EDITOR', 'LOGIC_EDITOR', 'PROPERTIES', 'OUTLINER', 'USER_PREFERENCES', 'INFO', 'FILE_BROWSER', 'CONSOLE'], (optional))
        :type space_type: str
        :param region_type: Region Type
            (type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW'], (optional))
        :type region_type: str
        :return: Key Map, Corresponding key map
        :param : (type: bpy.types.KeyMap)
        :rtype: KeyMap
        """

    def find_modal(self, name):
        """find_modal
        
        :param name: Operator Name
            (type: str, (never None))
        :type name: str
        :return: Key Map, Corresponding key map
        :param : (type: bpy.types.KeyMap)
        :rtype: KeyMap
        """


class Keyframe(bpy_struct):
    """Bezier curve point with two handles defining a Keyframe on an F-Curve"""

    amplitude = 0.0
    """Amount to boost elastic bounces for 'elastic' easing
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    back = 0.0
    """Amount of overshoot for 'back' easing
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    co = (0.0, 0.0)
    """Coordinates of the control point
    (type: float array of 2 items in [-inf, inf], default (0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    easing = 'AUTO'
    """Which ends of the segment between this and the next keyframe easing interpolation is applied to
    * 'AUTO': Automatic Easing, Easing type is chosen automatically based on what the type of interpolation used (e.g. 'Ease In' for transitional types, and 'Ease Out' for dynamic effects).
    * 'EASE_IN': Ease In, Only on the end closest to the next keyframe.
    * 'EASE_OUT': Ease Out, Only on the end closest to the first keyframe.
    * 'EASE_IN_OUT': Ease In and Out, Segment between both keyframes.
    (type: enum in ['AUTO', 'EASE_IN', 'EASE_OUT', 'EASE_IN_OUT'], default 'AUTO')
    
    :type: str
    """

    handle_left = (0.0, 0.0)
    """Coordinates of the left handle (before the control point)
    (type: float array of 2 items in [-inf, inf], default (0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    handle_left_type = 'FREE'
    """Handle types
    * 'FREE': Free.
    * 'VECTOR': Vector.
    * 'ALIGNED': Aligned.
    * 'AUTO': Automatic.
    * 'AUTO_CLAMPED': Auto Clamped, Auto handles clamped to not overshoot.
    (type: enum in ['FREE', 'VECTOR', 'ALIGNED', 'AUTO', 'AUTO_CLAMPED'], default 'FREE')
    
    :type: str
    """

    handle_right = (0.0, 0.0)
    """Coordinates of the right handle (after the control point)
    (type: float array of 2 items in [-inf, inf], default (0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    handle_right_type = 'FREE'
    """Handle types
    * 'FREE': Free.
    * 'VECTOR': Vector.
    * 'ALIGNED': Aligned.
    * 'AUTO': Automatic.
    * 'AUTO_CLAMPED': Auto Clamped, Auto handles clamped to not overshoot.
    (type: enum in ['FREE', 'VECTOR', 'ALIGNED', 'AUTO', 'AUTO_CLAMPED'], default 'FREE')
    
    :type: str
    """

    interpolation = 'CONSTANT'
    """Interpolation method to use for segment of the F-Curve from this Keyframe until the next Keyframe
    * 'CONSTANT': Constant, No interpolation, value of A gets held until B is encountered.
    * 'LINEAR': Linear, Straight-line interpolation between A and B (i.e. no ease in/out).
    * 'BEZIER': Bezier, Smooth interpolation between A and B, with some control over curve shape.
    * 'SINE': Sinusoidal, Sinusoidal easing (weakest, almost linear but with a slight curvature).
    * 'QUAD': Quadratic, Quadratic easing.
    * 'CUBIC': Cubic, Cubic easing.
    * 'QUART': Quartic, Quartic easing.
    * 'QUINT': Quintic, Quintic easing.
    * 'EXPO': Exponential, Exponential easing (dramatic).
    * 'CIRC': Circular, Circular easing (strongest and most dynamic).
    * 'BACK': Back, Cubic easing with overshoot and settle.
    * 'BOUNCE': Bounce, Exponentially decaying parabolic bounce, like when objects collide.
    * 'ELASTIC': Elastic, Exponentially decaying sine wave, like an elastic band.
    (type: enum in ['CONSTANT', 'LINEAR', 'BEZIER', 'SINE', 'QUAD', 'CUBIC', 'QUART', 'QUINT', 'EXPO', 'CIRC', 'BACK', 'BOUNCE', 'ELASTIC'], default 'CONSTANT')
    
    :type: str
    """

    period = 0.0
    """Time between bounces for elastic easing
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    select_control_point = False
    """Control point selection status
    (type: boolean, default False)
    
    :type: bool
    """

    select_left_handle = False
    """Left handle selection status
    (type: boolean, default False)
    
    :type: bool
    """

    select_right_handle = False
    """Right handle selection status
    (type: boolean, default False)
    
    :type: bool
    """

    type = 'KEYFRAME'
    """Type of keyframe (for visual purposes only)
    * 'KEYFRAME': Keyframe, Normal keyframe - e.g. for key poses.
    * 'BREAKDOWN': Breakdown, A breakdown pose - e.g. for transitions between key poses.
    * 'MOVING_HOLD': Moving Hold, A keyframe that is part of a moving hold.
    * 'EXTREME': Extreme, An 'extreme' pose, or some other purpose as needed.
    * 'JITTER': Jitter, A filler or baked keyframe for keying on ones, or some other purpose as needed.
    (type: enum in ['KEYFRAME', 'BREAKDOWN', 'MOVING_HOLD', 'EXTREME', 'JITTER'], default 'KEYFRAME')
    
    :type: str
    """


class KeyingSet(bpy_struct):
    """Settings that should be keyframed together"""

    bl_description = ""
    """A short description of the keying set
    (type: string, default "", (never None))
    
    :type: str
    """

    bl_idname = ""
    """If this is set, the Keying Set gets a custom ID, otherwise it takes the name of the class used to define the Keying Set (for example, if the class name is "BUILTIN_KSI_location", and bl_idname is not set by the script, then bl_idname = "BUILTIN_KSI_location")
    (type: string, default "", (never None))
    
    :type: str
    """

    bl_label = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    is_path_absolute = False
    """Keying Set defines specific paths/settings to be keyframed (i.e. is not reliant on context info)
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    paths = None
    """Keying Set Paths to define settings that get keyframed together
    (type: bpy.types.KeyingSetPaths bpy.types.bpy_prop_collection of bpy.types.KeyingSetPath, (readonly))
    
    :type: KeyingSetPaths
    """

    type_info = None
    """Callback function defines for built-in Keying Sets
    (type: bpy.types.KeyingSetInfo, (readonly))
    
    :type: KeyingSetInfo
    """

    use_insertkey_needed = False
    """Only insert keyframes where they're needed in the relevant F-Curves
    (type: boolean, default False)
    
    :type: bool
    """

    use_insertkey_override_needed = False
    """Override default setting to only insert keyframes where they're needed in the relevant F-Curves
    (type: boolean, default False)
    
    :type: bool
    """

    use_insertkey_override_visual = False
    """Override default setting to insert keyframes based on 'visual transforms'
    (type: boolean, default False)
    
    :type: bool
    """

    use_insertkey_override_xyz_to_rgb = False
    """Override default setting to set color for newly added transformation F-Curves (Location, Rotation, Scale) to be based on the transform axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_insertkey_visual = False
    """Insert keyframes based on 'visual transforms'
    (type: boolean, default False)
    
    :type: bool
    """

    use_insertkey_xyz_to_rgb = False
    """Color for newly added transformation F-Curves (Location, Rotation, Scale) is based on the transform axis
    (type: boolean, default False)
    
    :type: bool
    """

    def refresh(self):
        """Refresh Keying Set to ensure that it is valid for the current context (call before each use of one)"""


class KeyingSetInfo(bpy_struct):
    """Callback function defines for builtin Keying Sets"""

    bl_description = ""
    """A short description of the keying set
    (type: string, default "", (never None))
    
    :type: str
    """

    bl_idname = ""
    """If this is set, the Keying Set gets a custom ID, otherwise it takes the name of the class used to define the Keying Set (for example, if the class name is "BUILTIN_KSI_location", and bl_idname is not set by the script, then bl_idname = "BUILTIN_KSI_location")
    (type: string, default "", (never None))
    
    :type: str
    """

    bl_label = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    bl_options = {'INSERTKEY_NEEDED'}
    """Keying Set options to use when inserting keyframes
    * 'INSERTKEY_NEEDED': Only Needed, Only insert keyframes where they're needed in the relevant F-Curves.
    * 'INSERTKEY_VISUAL': Visual Keying, Insert keyframes based on 'visual transforms'.
    * 'INSERTKEY_XYZ_TO_RGB': XYZ=RGB Colors, Color for newly added transformation F-Curves (Location, Rotation, Scale) and also Color is based on the transform axis.
    (type: enum set in {'INSERTKEY_NEEDED', 'INSERTKEY_VISUAL', 'INSERTKEY_XYZ_TO_RGB'}, default {'INSERTKEY_NEEDED'})
    
    :type: enum set in {'INSERTKEY_NEEDED', 'INSERTKEY_VISUAL', 'INSERTKEY_XYZ_TO_RGB'}
    """

    def poll(self, context):
        """Test if Keying Set can be used or not
        
        :rtype: bool
        """

    def iterator(self, context, ks):
        """Call generate() on the structs which have properties to be keyframed"""

    def generate(self, context, ks, data):
        """Add Paths to the Keying Set to keyframe the properties of the given data"""


class KeyingSetPath(bpy_struct):
    """Path to a setting for use in a Keying Set"""

    array_index = 0
    """Index to the specific setting if applicable
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    data_path = ""
    """Path to property setting
    (type: string, default "", (never None))
    
    :type: str
    """

    group = ""
    """Name of Action Group to assign setting(s) for this path to
    (type: string, default "", (never None))
    
    :type: str
    """

    group_method = 'NAMED'
    """Method used to define which Group-name to use
    (type: enum in ['NAMED', 'NONE', 'KEYINGSET'], default 'NAMED')
    
    :type: str
    """

    id = None
    """ID-Block that keyframes for Keying Set should be added to (for Absolute Keying Sets only)
    (type: bpy.types.ID)
    
    :type: ID
    """

    id_type = 'OBJECT'
    """Type of ID-block that can be used
    (type: enum in ['ACTION', 'ARMATURE', 'BRUSH', 'CAMERA', 'CACHEFILE', 'CURVE', 'FONT', 'GREASEPENCIL', 'GROUP', 'IMAGE', 'KEY', 'LAMP', 'LIBRARY', 'LINESTYLE', 'LATTICE', 'MASK', 'MATERIAL', 'META', 'MESH', 'MOVIECLIP', 'NODETREE', 'OBJECT', 'PAINTCURVE', 'PALETTE', 'PARTICLE', 'SCENE', 'SCREEN', 'SOUND', 'SPEAKER', 'TEXT', 'TEXTURE', 'WINDOWMANAGER', 'WORLD'], default 'OBJECT')
    
    :type: str
    """

    use_entire_array = False
    """When an 'array/vector' type is chosen (Location, Rotation, Color, etc.), entire array is to be used
    (type: boolean, default False)
    
    :type: bool
    """

    use_insertkey_needed = False
    """Only insert keyframes where they're needed in the relevant F-Curves
    (type: boolean, default False)
    
    :type: bool
    """

    use_insertkey_override_needed = False
    """Override default setting to only insert keyframes where they're needed in the relevant F-Curves
    (type: boolean, default False)
    
    :type: bool
    """

    use_insertkey_override_visual = False
    """Override default setting to insert keyframes based on 'visual transforms'
    (type: boolean, default False)
    
    :type: bool
    """

    use_insertkey_override_xyz_to_rgb = False
    """Override default setting to set color for newly added transformation F-Curves (Location, Rotation, Scale) to be based on the transform axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_insertkey_visual = False
    """Insert keyframes based on 'visual transforms'
    (type: boolean, default False)
    
    :type: bool
    """

    use_insertkey_xyz_to_rgb = False
    """Color for newly added transformation F-Curves (Location, Rotation, Scale) is based on the transform axis
    (type: boolean, default False)
    
    :type: bool
    """


class KeyingSetPaths(bpy_struct):
    """Collection of keying set paths"""

    active = None
    """Active Keying Set used to insert/delete keyframes
    (type: bpy.types.KeyingSetPath)
    
    :type: KeyingSetPath
    """

    active_index = 0
    """Current Keying Set index
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    def add(self, target_id, data_path, index=-1, group_method='KEYINGSET', group_name=""):
        """Add a new path for the Keying Set
        
        :param target_id: Target ID, ID data-block for the destination
            (type: bpy.types.ID)
        :type target_id: ID
        :param data_path: Data-Path, RNA-Path to destination property
            (type: str, (never None))
        :type data_path: str
        :param index: Index, The index of the destination property (i.e. axis of Location/Rotation/etc.), or -1 for the entire array
            (type: int in [-1, inf], (optional))
        :type index: int
        :param group_method: Grouping Method, Method used to define which Group-name to use
            (type: enum in ['NAMED', 'NONE', 'KEYINGSET'], (optional))
        :type group_method: str
        :param group_name: Group Name, Name of Action Group to assign destination to (only if grouping mode is to use this name)
            (type: str, (optional, never None))
        :type group_name: str
        :return: New Path, Path created and added to the Keying Set
        :param : (type: bpy.types.KeyingSetPath)
        :rtype: KeyingSetPath
        """

    def remove(self, path):
        """Remove the given path from the Keying Set
        
        :param path: Path
            (type: bpy.types.KeyingSetPath, (never None))
        :type path: KeyingSetPath
        """

    def clear(self):
        """Remove all the paths from the Keying Set"""


class KeyingSets(bpy_struct):
    """Scene keying sets"""

    active = None
    """Active Keying Set used to insert/delete keyframes
    (type: bpy.types.KeyingSet)
    
    :type: KeyingSet
    """

    active_index = 0
    """Current Keying Set index (negative for 'builtin' and positive for 'absolute')
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    def new(self, idname="KeyingSet", name="KeyingSet"):
        """Add a new Keying Set to Scene
        
        :param idname: IDName, Internal identifier of Keying Set
            (type: str, (optional, never None))
        :type idname: str
        :param name: Name, User visible name of Keying Set
            (type: str, (optional, never None))
        :type name: str
        :return: Newly created Keying Set
        :param : (type: bpy.types.KeyingSet)
        :rtype: KeyingSet
        """


class KeyingSetsAll(bpy_struct):
    """All available keying sets"""

    active = None
    """Active Keying Set used to insert/delete keyframes
    (type: bpy.types.KeyingSet)
    
    :type: KeyingSet
    """

    active_index = 0
    """Current Keying Set index (negative for 'builtin' and positive for 'absolute')
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """


class LampSkySettings(bpy_struct):
    """Sky related settings for a sun lamp"""

    atmosphere_distance_factor = 0.0
    """Multiplier to convert blender units to physical distance
    (type: float in [0, 500], default 0.0)
    
    :type: float
    """

    atmosphere_extinction = 0.0
    """Extinction scattering contribution factor
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    atmosphere_inscattering = 0.0
    """Scatter contribution factor
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    atmosphere_turbidity = 0.0
    """Sky turbidity
    (type: float in [1, 30], default 0.0)
    
    :type: float
    """

    backscattered_light = 0.0
    """Backscattered light
    (type: float in [-1, 1], default 0.0)
    
    :type: float
    """

    horizon_brightness = 0.0
    """Horizon brightness
    (type: float in [0, 20], default 0.0)
    
    :type: float
    """

    sky_blend = 0.0
    """Blend factor with sky
    (type: float in [0, 2], default 0.0)
    
    :type: float
    """

    sky_blend_type = 'MIX'
    """Blend mode for combining sun sky with world sky
    (type: enum in ['MIX', 'ADD', 'MULTIPLY', 'SUBTRACT', 'SCREEN', 'DIVIDE', 'DIFFERENCE', 'DARKEN', 'LIGHTEN', 'OVERLAY', 'DODGE', 'BURN', 'HUE', 'SATURATION', 'VALUE', 'COLOR', 'SOFT_LIGHT', 'LINEAR_LIGHT'], default 'MIX')
    
    :type: str
    """

    sky_color_space = 'SMPTE'
    """Color space to use for internal XYZ->RGB color conversion
    (type: enum in ['SMPTE', 'REC709', 'CIE'], default 'SMPTE')
    
    :type: str
    """

    sky_exposure = 0.0
    """Strength of sky shading exponential exposure correction
    (type: float in [0, 20], default 0.0)
    
    :type: float
    """

    spread = 0.0
    """Horizon Spread
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    sun_brightness = 0.0
    """Sun brightness
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    sun_intensity = 0.0
    """Sun intensity
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    sun_size = 0.0
    """Sun size
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    use_atmosphere = False
    """Apply sun effect on atmosphere
    (type: boolean, default False)
    
    :type: bool
    """

    use_sky = False
    """Apply sun effect on sky
    (type: boolean, default False)
    
    :type: bool
    """


class LampTextureSlots(bpy_struct):
    """Collection of texture slots"""

    def add(self):
        """add
        
        :return: The newly initialized mtex
        :param : (type: bpy.types.LampTextureSlot)
        :rtype: LampTextureSlot
        """

    def create(self, index):
        """create
        
        :param index: Index, Slot index to initialize
            (type: int in [0, inf])
        :type index: int
        :return: The newly initialized mtex
        :param : (type: bpy.types.LampTextureSlot)
        :rtype: LampTextureSlot
        """

    def clear(self, index):
        """clear
        
        :param index: Index, Slot index to clear
            (type: int in [0, inf])
        :type index: int
        """


class LatticePoint(bpy_struct):
    """Point in the lattice grid"""

    co = (0.0, 0.0, 0.0)
    """Original undeformed location used to calculate the strength of the deform effect (edit/animate the Deformed Location instead)
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0), (readonly))
    
    :type: mathutils.Vector
    """

    co_deform = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    groups = None
    """Weights for the vertex groups this point is member of
    (type: bpy.types.bpy_prop_collection of bpy.types.VertexGroupElement, (readonly))
    
    :type: bpy_prop_collection
    """

    select = False
    """Selection status
    (type: boolean, default False)
    
    :type: bool
    """

    weight_softbody = 0.0
    """Softbody goal weight
    (type: float in [0.01, 100], default 0.0)
    
    :type: float
    """


class LineStyleAlphaModifiers(bpy_struct):
    """Alpha modifiers for changing line alphas"""

    def new(self, name, type):
        """Add a alpha modifier to line style
        
        :param name: New name for the alpha modifier (not unique)
            (type: str, (never None))
        :type name: str
        :param type: Alpha modifier type to add
            (type: enum in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT'])
        :type type: str
        :return: Newly added alpha modifier
        :param : (type: bpy.types.LineStyleAlphaModifier)
        :rtype: LineStyleAlphaModifier
        """

    def remove(self, modifier):
        """Remove a alpha modifier from line style
        
        :param modifier: Alpha modifier to remove
            (type: bpy.types.LineStyleAlphaModifier, (never None))
        :type modifier: LineStyleAlphaModifier
        """


class LineStyleColorModifiers(bpy_struct):
    """Color modifiers for changing line colors"""

    def new(self, name, type):
        """Add a color modifier to line style
        
        :param name: New name for the color modifier (not unique)
            (type: str, (never None))
        :type name: str
        :param type: Color modifier type to add
            (type: enum in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT'])
        :type type: str
        :return: Newly added color modifier
        :param : (type: bpy.types.LineStyleColorModifier)
        :rtype: LineStyleColorModifier
        """

    def remove(self, modifier):
        """Remove a color modifier from line style
        
        :param modifier: Color modifier to remove
            (type: bpy.types.LineStyleColorModifier, (never None))
        :type modifier: LineStyleColorModifier
        """


class LineStyleGeometryModifiers(bpy_struct):
    """Geometry modifiers for changing line geometries"""

    def new(self, name, type):
        """Add a geometry modifier to line style
        
        :param name: New name for the geometry modifier (not unique)
            (type: str, (never None))
        :type name: str
        :param type: Geometry modifier type to add
            (type: enum in ['2D_OFFSET', '2D_TRANSFORM', 'BACKBONE_STRETCHER', 'BEZIER_CURVE', 'BLUEPRINT', 'GUIDING_LINES', 'PERLIN_NOISE_1D', 'PERLIN_NOISE_2D', 'POLYGONIZATION', 'SAMPLING', 'SIMPLIFICATION', 'SINUS_DISPLACEMENT', 'SPATIAL_NOISE', 'TIP_REMOVER'])
        :type type: str
        :return: Newly added geometry modifier
        :param : (type: bpy.types.LineStyleGeometryModifier)
        :rtype: LineStyleGeometryModifier
        """

    def remove(self, modifier):
        """Remove a geometry modifier from line style
        
        :param modifier: Geometry modifier to remove
            (type: bpy.types.LineStyleGeometryModifier, (never None))
        :type modifier: LineStyleGeometryModifier
        """


class LineStyleModifier(bpy_struct):
    """Base type to define modifiers"""


class LineStyleTextureSlots(bpy_struct):
    """Collection of texture slots"""

    def add(self):
        """add
        
        :return: The newly initialized mtex
        :param : (type: bpy.types.LineStyleTextureSlot)
        :rtype: LineStyleTextureSlot
        """

    def create(self, index):
        """create
        
        :param index: Index, Slot index to initialize
            (type: int in [0, inf])
        :type index: int
        :return: The newly initialized mtex
        :param : (type: bpy.types.LineStyleTextureSlot)
        :rtype: LineStyleTextureSlot
        """

    def clear(self, index):
        """clear
        
        :param index: Index, Slot index to clear
            (type: int in [0, inf])
        :type index: int
        """


class LineStyleThicknessModifiers(bpy_struct):
    """Thickness modifiers for changing line thickness"""

    def new(self, name, type):
        """Add a thickness modifier to line style
        
        :param name: New name for the thickness modifier (not unique)
            (type: str, (never None))
        :type name: str
        :param type: Thickness modifier type to add
            (type: enum in ['ALONG_STROKE', 'CALLIGRAPHY', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT'])
        :type type: str
        :return: Newly added thickness modifier
        :param : (type: bpy.types.LineStyleThicknessModifier)
        :rtype: LineStyleThicknessModifier
        """

    def remove(self, modifier):
        """Remove a thickness modifier from line style
        
        :param modifier: Thickness modifier to remove
            (type: bpy.types.LineStyleThicknessModifier, (never None))
        :type modifier: LineStyleThicknessModifier
        """


class Linesets(bpy_struct):
    """Line sets for associating lines and style parameters"""

    active = None
    """Active line set being displayed
    (type: bpy.types.FreestyleLineSet, (readonly))
    
    :type: FreestyleLineSet
    """

    active_index = 0
    """Index of active line set slot
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    def new(self, name):
        """Add a line set to scene render layer Freestyle settings
        
        :param name: New name for the line set (not unique)
            (type: str, (never None))
        :type name: str
        :return: Newly created line set
        :param : (type: bpy.types.FreestyleLineSet)
        :rtype: FreestyleLineSet
        """

    def remove(self, lineset):
        """Remove a line set from scene render layer Freestyle settings
        
        :param lineset: Line set to remove
            (type: bpy.types.FreestyleLineSet, (never None))
        :type lineset: FreestyleLineSet
        """


class LodLevel(bpy_struct):
    """"""

    distance = 0.0
    """Distance to begin using this level of detail
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    object = None
    """Object to use for this level of detail
    (type: bpy.types.Object)
    
    :type: Object
    """

    object_hysteresis_percentage = 0
    """Minimum distance change required to transition to the previous level of detail
    (type: int in [0, 100], default 0)
    
    :type: int
    """

    use_material = False
    """Use the material from this object at this level of detail
    (type: boolean, default False)
    
    :type: bool
    """

    use_mesh = False
    """Use the mesh from this object at this level of detail
    (type: boolean, default False)
    
    :type: bool
    """

    use_object_hysteresis = False
    """Override LoD Hysteresis scene setting for this LoD level
    (type: boolean, default False)
    
    :type: bool
    """


class LoopColors(bpy_struct):
    """Collection of vertex colors"""

    active = None
    """Active vertex color layer
    (type: bpy.types.MeshLoopColorLayer)
    
    :type: MeshLoopColorLayer
    """

    active_index = 0
    """Active vertex color index
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    def new(self, name="Col"):
        """Add a vertex color layer to Mesh
        
        :param name: Vertex color name
            (type: str, (optional, never None))
        :type name: str
        :return: The newly created layer
        :param : (type: bpy.types.MeshLoopColorLayer)
        :rtype: MeshLoopColorLayer
        """

    def remove(self, layer):
        """Remove a vertex color layer
        
        :param layer: The layer to remove
            (type: bpy.types.MeshLoopColorLayer, (never None))
        :type layer: MeshLoopColorLayer
        """


class Macro(bpy_struct):
    """Storage of a macro operator being executed, or registered after execution"""

    bl_description = ""
    """(type: string, default "")
    
    :type: str
    """

    bl_idname = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    bl_label = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    bl_options = {'REGISTER'}
    """Options for this operator type
    * 'REGISTER': Register, Display in the info window and support the redo toolbar panel.
    * 'UNDO': Undo, Push an undo event (needed for operator redo).
    * 'UNDO_GROUPED': Grouped Undo, Push a single undo event for repetead instances of this operator.
    * 'BLOCKING': Blocking, Block anything else from using the cursor.
    * 'MACRO': Macro, Use to check if an operator is a macro.
    * 'GRAB_CURSOR': Grab Pointer, Use so the operator grabs the mouse focus, enables wrapping when continuous grab is enabled.
    * 'PRESET': Preset, Display a preset button with the operators settings.
    * 'INTERNAL': Internal, Removes the operator from search results.
    (type: enum set in {'REGISTER', 'UNDO', 'UNDO_GROUPED', 'BLOCKING', 'MACRO', 'GRAB_CURSOR', 'PRESET', 'INTERNAL'}, default {'REGISTER'})
    
    :type: enum set in {'REGISTER', 'UNDO', 'UNDO_GROUPED', 'BLOCKING', 'MACRO', 'GRAB_CURSOR', 'PRESET', 'INTERNAL'}
    """

    bl_translation_context = "Operator"
    """(type: string, default "Operator")
    
    :type: str
    """

    bl_undo_group = ""
    """(type: string, default "")
    
    :type: str
    """

    name = ""
    """(type: string, default "", (readonly, never None))
    
    :type: str
    """

    properties = None
    """(type: bpy.types.OperatorProperties, (readonly, never None))
    
    :type: OperatorProperties
    """

    def report(self, type, message):
        """report
        
        :param type: Type
        :type type: enum set in {'DEBUG', 'INFO', 'OPERATOR', 'PROPERTY', 'WARNING', 'ERROR', 'ERROR_INVALID_INPUT', 'ERROR_INVALID_CONTEXT', 'ERROR_OUT_OF_MEMORY'}
        :param message: Report Message
            (type: str, (never None))
        :type message: str
        """

    def poll(self, context):
        """Test if the operator can be called or not
        
        :rtype: bool
        """

    def draw(self, context):
        """Draw function for the operator"""


class MaskLayer(bpy_struct):
    """Single layer used for masking pixels"""

    alpha = 0.0
    """Render Opacity
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    blend = 'ADD'
    """Method of blending mask layers
    (type: enum in ['MERGE_ADD', 'MERGE_SUBTRACT', 'ADD', 'SUBTRACT', 'LIGHTEN', 'DARKEN', 'MUL', 'REPLACE', 'DIFFERENCE'], default 'ADD')
    
    :type: str
    """

    falloff = 'SMOOTH'
    """Falloff type the feather
    * 'SMOOTH': Smooth, Smooth falloff.
    * 'SPHERE': Sphere, Spherical falloff.
    * 'ROOT': Root, Root falloff.
    * 'INVERSE_SQUARE': Inverse Square, Inverse Square falloff.
    * 'SHARP': Sharp, Sharp falloff.
    * 'LINEAR': Linear, Linear falloff.
    (type: enum in ['SMOOTH', 'SPHERE', 'ROOT', 'INVERSE_SQUARE', 'SHARP', 'LINEAR'], default 'SMOOTH')
    
    :type: str
    """

    hide = False
    """Restrict visibility in the viewport
    (type: boolean, default False)
    
    :type: bool
    """

    hide_render = False
    """Restrict renderability
    (type: boolean, default False)
    
    :type: bool
    """

    hide_select = False
    """Restrict selection in the viewport
    (type: boolean, default False)
    
    :type: bool
    """

    invert = False
    """Invert the mask black/white
    (type: boolean, default False)
    
    :type: bool
    """

    name = ""
    """Unique name of layer
    (type: string, default "", (never None))
    
    :type: str
    """

    select = False
    """Layer is selected for editing in the Dope Sheet
    (type: boolean, default False)
    
    :type: bool
    """

    splines = None
    """Collection of splines which defines this layer
    (type: bpy.types.MaskSplines bpy.types.bpy_prop_collection of bpy.types.MaskSpline, (readonly))
    
    :type: MaskSplines
    """

    use_fill_holes = False
    """Calculate holes when filling overlapping curves
    (type: boolean, default False)
    
    :type: bool
    """

    use_fill_overlap = False
    """Calculate self intersections and overlap before filling
    (type: boolean, default False)
    
    :type: bool
    """


class MaskLayers(bpy_struct):
    """Collection of layers used by mask"""

    active = None
    """Active layer in this mask
    (type: bpy.types.MaskLayer)
    
    :type: MaskLayer
    """

    def new(self, name=""):
        """Add layer to this mask
        
        :param name: Name, Name of new layer
            (type: str, (optional, never None))
        :type name: str
        :return: New mask layer
        :param : (type: bpy.types.MaskLayer)
        :rtype: MaskLayer
        """

    def remove(self, layer):
        """Remove layer from this mask
        
        :param layer: Shape to be removed
            (type: bpy.types.MaskLayer, (never None))
        :type layer: MaskLayer
        """

    def clear(self):
        """Remove all mask layers"""


class MaskParent(bpy_struct):
    """Parenting settings for masking element"""

    id = None
    """ID-block to which masking element would be parented to or to it's property
    (type: bpy.types.ID)
    
    :type: ID
    """

    id_type = 'MOVIECLIP'
    """Type of ID-block that can be used
    (type: enum in ['MOVIECLIP'], default 'MOVIECLIP')
    
    :type: str
    """

    parent = ""
    """Name of parent object in specified data-block to which parenting happens
    (type: string, default "", (never None))
    
    :type: str
    """

    sub_parent = ""
    """Name of parent sub-object in specified data-block to which parenting happens
    (type: string, default "", (never None))
    
    :type: str
    """

    type = 'POINT_TRACK'
    """Parent Type
    (type: enum in ['POINT_TRACK', 'PLANE_TRACK'], default 'POINT_TRACK')
    
    :type: str
    """


class MaskSpline(bpy_struct):
    """Single spline used for defining mask shape"""

    offset_mode = 'EVEN'
    """The method used for calculating the feather offset
    * 'EVEN': Even, Calculate even feather offset.
    * 'SMOOTH': Smooth, Calculate feather offset as a second curve.
    (type: enum in ['EVEN', 'SMOOTH'], default 'EVEN')
    
    :type: str
    """

    points = None
    """Collection of points
    (type: bpy.types.MaskSplinePoints bpy.types.bpy_prop_collection of bpy.types.MaskSplinePoint, (readonly))
    
    :type: MaskSplinePoints
    """

    use_cyclic = False
    """Make this spline a closed loop
    (type: boolean, default False)
    
    :type: bool
    """

    use_fill = False
    """Make this spline filled
    (type: boolean, default False)
    
    :type: bool
    """

    use_self_intersection_check = False
    """Prevent feather from self-intersections
    (type: boolean, default False)
    
    :type: bool
    """

    weight_interpolation = 'LINEAR'
    """The type of weight interpolation for spline
    (type: enum in ['LINEAR', 'EASE'], default 'LINEAR')
    
    :type: str
    """


class MaskSplinePoint(bpy_struct):
    """Single point in spline used for defining mask"""

    co = (0.0, 0.0)
    """Coordinates of the control point
    (type: float array of 2 items in [-inf, inf], default (0.0, 0.0))
    
    :type: mathutils.Vector
    """

    feather_points = None
    """Points defining feather
    (type: bpy.types.bpy_prop_collection of bpy.types.MaskSplinePointUW, (readonly))
    
    :type: bpy_prop_collection
    """

    handle_left = (0.0, 0.0)
    """Coordinates of the first handle
    (type: float array of 2 items in [-inf, inf], default (0.0, 0.0))
    
    :type: mathutils.Vector
    """

    handle_left_type = 'FREE'
    """Handle type
    (type: enum in ['AUTO', 'VECTOR', 'ALIGNED', 'ALIGNED_DOUBLESIDE', 'FREE'], default 'FREE')
    
    :type: str
    """

    handle_right = (0.0, 0.0)
    """Coordinates of the second handle
    (type: float array of 2 items in [-inf, inf], default (0.0, 0.0))
    
    :type: mathutils.Vector
    """

    handle_right_type = 'FREE'
    """Handle type
    (type: enum in ['AUTO', 'VECTOR', 'ALIGNED', 'ALIGNED_DOUBLESIDE', 'FREE'], default 'FREE')
    
    :type: str
    """

    handle_type = 'FREE'
    """Handle type
    (type: enum in ['AUTO', 'VECTOR', 'ALIGNED', 'ALIGNED_DOUBLESIDE', 'FREE'], default 'FREE')
    
    :type: str
    """

    parent = None
    """(type: bpy.types.MaskParent, (readonly))
    
    :type: MaskParent
    """

    select = False
    """Selection status
    (type: boolean, default False)
    
    :type: bool
    """

    weight = 0.0
    """Weight of the point
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """


class MaskSplinePointUW(bpy_struct):
    """Single point in spline segment defining feather"""

    select = False
    """Selection status
    (type: boolean, default False)
    
    :type: bool
    """

    u = 0.0
    """U coordinate of point along spline segment
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    weight = 0.0
    """Weight of feather point
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """


class MaskSplinePoints(bpy_struct):
    """Collection of masking spline points"""

    def add(self, count=1):
        """Add a number of point to this spline
        
        :param count: Number, Number of points to add to the spline
            (type: int in [0, inf], (optional))
        :type count: int
        """

    def remove(self, point):
        """Remove a point from a spline
        
        :param point: The point to remove
            (type: bpy.types.MaskSplinePoint, (never None))
        :type point: MaskSplinePoint
        """


class MaskSplines(bpy_struct):
    """Collection of masking splines"""

    active = None
    """Active spline of masking layer
    (type: bpy.types.MaskSpline)
    
    :type: MaskSpline
    """

    active_point = None
    """Active spline of masking layer
    (type: bpy.types.MaskSplinePoint)
    
    :type: MaskSplinePoint
    """

    def new(self):
        """Add a new spline to the layer
        
        :return: The newly created spline
        :param : (type: bpy.types.MaskSpline)
        :rtype: MaskSpline
        """

    def remove(self, spline):
        """Remove a spline from a layer
        
        :param spline: The spline to remove
            (type: bpy.types.MaskSpline, (never None))
        :type spline: MaskSpline
        """


class MaterialGameSettings(bpy_struct):
    """Game Engine settings for a Material data-block"""

    alpha_blend = 'OPAQUE'
    """Blend Mode for Transparent Faces
    * 'OPAQUE': Opaque, Render color of textured face as color.
    * 'ADD': Add, Render face transparent and add color of face.
    * 'CLIP': Alpha Clip, Use the image alpha values clipped with no blending (binary alpha).
    * 'ALPHA': Alpha Blend, Render polygon transparent, depending on alpha channel of the texture.
    * 'ALPHA_SORT': Alpha Sort, Sort faces for correct alpha drawing (slow, use Alpha Clip instead when possible).
    * 'ALPHA_ANTIALIASING': Alpha Anti-Aliasing, Use textures alpha as anti-aliasing mask, requires multi-sample OpenGL display.
    (type: enum in ['OPAQUE', 'ADD', 'CLIP', 'ALPHA', 'ALPHA_SORT', 'ALPHA_ANTIALIASING'], default 'OPAQUE')
    
    :type: str
    """

    face_orientation = 'NORMAL'
    """Especial face orientation options
    * 'NORMAL': Normal, No transformation.
    * 'HALO': Halo, Screen aligned billboard.
    * 'BILLBOARD': Billboard, Billboard with Z-axis constraint.
    * 'SHADOW': Shadow, Faces are used for shadow.
    (type: enum in ['NORMAL', 'HALO', 'BILLBOARD', 'SHADOW'], default 'NORMAL')
    
    :type: str
    """

    invisible = False
    """Make face invisible
    (type: boolean, default False)
    
    :type: bool
    """

    physics = False
    """Use physics properties of materials
    (type: boolean, default False)
    
    :type: bool
    """

    text = False
    """Use material as text in Game Engine
    (type: boolean, default False)
    
    :type: bool
    """

    use_backface_culling = False
    """Hide Back of the face in Game Engine
    (type: boolean, default False)
    
    :type: bool
    """


class MaterialHalo(bpy_struct):
    """Halo particle effect settings for a Material data-block"""

    add = 0.0
    """Strength of the add effect
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    flare_boost = 0.0
    """Give the flare extra strength
    (type: float in [0.1, 10], default 0.0)
    
    :type: float
    """

    flare_seed = 0
    """Offset in the flare seed table
    (type: int in [0, 255], default 0)
    
    :type: int
    """

    flare_size = 0.0
    """Factor by which the flare is larger than the halo
    (type: float in [0.1, 25], default 0.0)
    
    :type: float
    """

    flare_subflare_count = 0
    """Number of sub-flares
    (type: int in [1, 32], default 0)
    
    :type: int
    """

    flare_subflare_size = 0.0
    """Dimension of the sub-flares, dots and circles
    (type: float in [0.1, 25], default 0.0)
    
    :type: float
    """

    hardness = 0
    """Hardness of the halo
    (type: int in [0, 127], default 0)
    
    :type: int
    """

    line_count = 0
    """Number of star shaped lines rendered over the halo
    (type: int in [0, 250], default 0)
    
    :type: int
    """

    ring_count = 0
    """Number of rings rendered over the halo
    (type: int in [0, 24], default 0)
    
    :type: int
    """

    seed = 0
    """Randomize ring dimension and line location
    (type: int in [0, 255], default 0)
    
    :type: int
    """

    size = 0.0
    """Dimension of the halo
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    star_tip_count = 0
    """Number of points on the star shaped halo
    (type: int in [3, 50], default 0)
    
    :type: int
    """

    use_extreme_alpha = False
    """Use extreme alpha
    (type: boolean, default False)
    
    :type: bool
    """

    use_flare_mode = False
    """Render halo as a lens flare
    (type: boolean, default False)
    
    :type: bool
    """

    use_lines = False
    """Render star shaped lines over halo
    (type: boolean, default False)
    
    :type: bool
    """

    use_ring = False
    """Render rings over halo
    (type: boolean, default False)
    
    :type: bool
    """

    use_shaded = False
    """Let halo receive light and shadows from external objects
    (type: boolean, default False)
    
    :type: bool
    """

    use_soft = False
    """Soften the edges of halos at intersections with other geometry
    (type: boolean, default False)
    
    :type: bool
    """

    use_star = False
    """Render halo as a star
    (type: boolean, default False)
    
    :type: bool
    """

    use_texture = False
    """Give halo a texture
    (type: boolean, default False)
    
    :type: bool
    """

    use_vertex_normal = False
    """Use the vertex normal to specify the dimension of the halo
    (type: boolean, default False)
    
    :type: bool
    """


class MaterialPhysics(bpy_struct):
    """Physics settings for a Material data-block"""

    elasticity = 0.0
    """Elasticity of collisions
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    fh_damping = 0.0
    """Damping of the spring force, when inside the physics distance area
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    fh_distance = 0.0
    """Distance of the physics area
    (type: float in [0, 20], default 0.0)
    
    :type: float
    """

    fh_force = 0.0
    """Upward spring force, when inside the physics distance area
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    friction = 0.0
    """Coulomb friction coefficient, when inside the physics distance area
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    use_fh_normal = False
    """Align dynamic game objects along the surface normal, when inside the physics distance area
    (type: boolean, default False)
    
    :type: bool
    """


class MaterialRaytraceMirror(bpy_struct):
    """Raytraced reflection settings for a Material data-block"""

    depth = 0
    """Maximum allowed number of light inter-reflections
    (type: int in [0, 32767], default 0)
    
    :type: int
    """

    distance = 0.0
    """Maximum distance of reflected rays (reflections further than this range fade to sky color or material color)
    (type: float in [0, 10000], default 0.0)
    
    :type: float
    """

    fade_to = 'FADE_TO_SKY'
    """The color that rays with no intersection within the Max Distance take (material color can be best for indoor scenes, sky color for outdoor)
    (type: enum in ['FADE_TO_SKY', 'FADE_TO_MATERIAL'], default 'FADE_TO_SKY')
    
    :type: str
    """

    fresnel = 0.0
    """Power of Fresnel for mirror reflection
    (type: float in [0, 5], default 0.0)
    
    :type: float
    """

    fresnel_factor = 0.0
    """Blending factor for Fresnel
    (type: float in [0, 5], default 0.0)
    
    :type: float
    """

    gloss_anisotropic = 0.0
    """The shape of the reflection, from 0.0 (circular) to 1.0 (fully stretched along the tangent
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    gloss_factor = 0.0
    """The shininess of the reflection (values < 1.0 give diffuse, blurry reflections)
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    gloss_samples = 0
    """Number of cone samples averaged for blurry reflections
    (type: int in [0, 1024], default 0)
    
    :type: int
    """

    gloss_threshold = 0.0
    """Threshold for adaptive sampling (if a sample contributes less than this amount [as a percentage], sampling is stopped)
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    reflect_factor = 0.0
    """Amount of mirror reflection for raytrace
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    use = False
    """Enable raytraced reflections
    (type: boolean, default False)
    
    :type: bool
    """


class MaterialRaytraceTransparency(bpy_struct):
    """Raytraced refraction settings for a Material data-block"""

    depth = 0
    """Maximum allowed number of light inter-refractions
    (type: int in [0, 32767], default 0)
    
    :type: int
    """

    depth_max = 0.0
    """Maximum depth for light to travel through the transparent material before becoming fully filtered (0.0 is disabled)
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    falloff = 0.0
    """Falloff power for transmissivity filter effect (1.0 is linear)
    (type: float in [0.1, 10], default 0.0)
    
    :type: float
    """

    filter = 0.0
    """Amount to blend in the material's diffuse color in raytraced transparency (simulating absorption)
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    fresnel = 0.0
    """Power of Fresnel for transparency (Ray or ZTransp)
    (type: float in [0, 5], default 0.0)
    
    :type: float
    """

    fresnel_factor = 0.0
    """Blending factor for Fresnel
    (type: float in [1, 5], default 0.0)
    
    :type: float
    """

    gloss_factor = 0.0
    """The clarity of the refraction. Values < 1.0 give diffuse, blurry refractions
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    gloss_samples = 0
    """Number of cone samples averaged for blurry refractions
    (type: int in [0, 1024], default 0)
    
    :type: int
    """

    gloss_threshold = 0.0
    """Threshold for adaptive sampling. If a sample contributes less than this amount (as a percentage), sampling is stopped
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    ior = 0.0
    """Angular index of refraction for raytraced refraction
    (type: float in [0.25, 4], default 0.0)
    
    :type: float
    """


class MaterialSlot(bpy_struct):
    """Material slot in an object"""

    link = 'DATA'
    """Link material to object or the object's data
    (type: enum in ['OBJECT', 'DATA'], default 'DATA')
    
    :type: str
    """

    material = None
    """Material data-block used by this material slot
    (type: bpy.types.Material)
    
    :type: Material
    """

    name = ""
    """Material slot name
    (type: string, default "", (readonly, never None))
    
    :type: str
    """


class MaterialStrand(bpy_struct):
    """Strand settings for a Material data-block"""

    blend_distance = 0.0
    """Worldspace distance over which to blend in the surface normal
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    root_size = 0.0
    """Start size of strands in pixels or Blender units
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    shape = 0.0
    """Positive values make strands rounder, negative ones make strands spiky
    (type: float in [-0.9, 0.9], default 0.0)
    
    :type: float
    """

    size_min = 0.0
    """Minimum size of strands in pixels
    (type: float in [0.001, 10], default 0.0)
    
    :type: float
    """

    tip_size = 0.0
    """End size of strands in pixels or Blender units
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    use_blender_units = False
    """Use Blender units for widths instead of pixels
    (type: boolean, default False)
    
    :type: bool
    """

    use_surface_diffuse = False
    """Make diffuse shading more similar to shading the surface
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_tangent_shading = False
    """Use direction of strands as normal for tangent-shading
    (type: boolean, default False)
    
    :type: bool
    """

    uv_layer = ""
    """Name of UV map to override
    (type: string, default "", (never None))
    
    :type: str
    """

    width_fade = 0.0
    """Transparency along the width of the strand
    (type: float in [0, 2], default 0.0)
    
    :type: float
    """


class MaterialSubsurfaceScattering(bpy_struct):
    """Diffuse subsurface scattering settings for a Material data-block"""

    back = 0.0
    """Back scattering weight
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    color = (0.0, 0.0, 0.0)
    """Scattering color
    (type: float array of 3 items in [0, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    color_factor = 0.0
    """Blend factor for SSS colors
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    error_threshold = 0.0
    """Error tolerance (low values are slower and higher quality)
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    front = 0.0
    """Front scattering weight
    (type: float in [0, 2], default 0.0)
    
    :type: float
    """

    ior = 0.0
    """Index of refraction (higher values are denser)
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    radius = (0.0, 0.0, 0.0)
    """Mean red/green/blue scattering path length
    (type: float array of 3 items in [0.001, inf], default (0.0, 0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    scale = 0.0
    """Object scale factor
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    texture_factor = 0.0
    """Texture scattering blend factor
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    use = False
    """Enable diffuse subsurface scattering effects in a material
    (type: boolean, default False)
    
    :type: bool
    """


class MaterialTextureSlots(bpy_struct):
    """Collection of texture slots"""

    def add(self):
        """add
        
        :return: The newly initialized mtex
        :param : (type: bpy.types.MaterialTextureSlot)
        :rtype: MaterialTextureSlot
        """

    def create(self, index):
        """create
        
        :param index: Index, Slot index to initialize
            (type: int in [0, inf])
        :type index: int
        :return: The newly initialized mtex
        :param : (type: bpy.types.MaterialTextureSlot)
        :rtype: MaterialTextureSlot
        """

    def clear(self, index):
        """clear
        
        :param index: Index, Slot index to clear
            (type: int in [0, inf])
        :type index: int
        """


class MaterialVolume(bpy_struct):
    """Volume rendering settings for a Material data-block"""

    asymmetry = 0.0
    """Back scattering (-1.0) to Forward scattering (1.0) and the range in between
    (type: float in [-1, 1], default 0.0)
    
    :type: float
    """

    cache_resolution = 0
    """Resolution of the voxel grid, low resolutions are faster, high resolutions use more memory
    (type: int in [1, 1024], default 0)
    
    :type: int
    """

    density = 0.0
    """The base density of the volume
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    density_scale = 0.0
    """Multiplier for the material's density
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    depth_threshold = 0.0
    """Stop ray marching early if transmission drops below this luminance - higher values give speedups in dense volumes at the expense of accuracy
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    emission = 0.0
    """Amount of light that gets emitted by the volume
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    emission_color = (0.0, 0.0, 0.0)
    """Color of emitted light
    (type: float array of 3 items in [0, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    light_method = 'SHADELESS'
    """Method of shading, attenuating, and scattering light through the volume
    * 'SHADELESS': Shadeless, Do not calculate lighting and shadows.
    * 'SHADOWED': Shadowed.
    * 'SHADED': Shaded.
    * 'MULTIPLE_SCATTERING': Multiple Scattering.
    * 'SHADED_PLUS_MULTIPLE_SCATTERING': Shaded + Multiple Scattering.
    (type: enum in ['SHADELESS', 'SHADOWED', 'SHADED', 'MULTIPLE_SCATTERING', 'SHADED_PLUS_MULTIPLE_SCATTERING'], default 'SHADELESS')
    
    :type: str
    """

    ms_diffusion = 0.0
    """Diffusion factor, the strength of the blurring effect
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    ms_intensity = 0.0
    """Multiplier for multiple scattered light energy
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    ms_spread = 0.0
    """Proportional distance over which the light is diffused
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    reflection = 0.0
    """Multiplier to make out-scattered light brighter or darker (non-physically correct)
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    reflection_color = (0.0, 0.0, 0.0)
    """Color of light scattered out of the volume (does not affect transmission)
    (type: float array of 3 items in [0, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    scattering = 0.0
    """Amount of light that gets scattered out by the volume - the more out-scattering, the shallower the light will penetrate
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    step_method = 'RANDOMIZED'
    """Method of calculating the steps through the volume
    (type: enum in ['RANDOMIZED', 'CONSTANT'], default 'RANDOMIZED')
    
    :type: str
    """

    step_size = 0.0
    """Distance between subsequent volume depth samples
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    transmission_color = (0.0, 0.0, 0.0)
    """Result color of the volume, after other light has been scattered/absorbed
    (type: float array of 3 items in [0, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    use_external_shadows = False
    """Receive shadows from sources outside the volume (temporary)
    (type: boolean, default False)
    
    :type: bool
    """

    use_light_cache = False
    """Pre-calculate the shading information into a voxel grid, speeds up shading at slightly less accuracy
    (type: boolean, default False)
    
    :type: bool
    """


class Menu(bpy_struct):
    """Editor menu containing buttons"""

    bl_description = ""
    """(type: string, default "")
    
    :type: str
    """

    bl_idname = ""
    """If this is set, the menu gets a custom ID, otherwise it takes the name of the class used to define the menu (for example, if the class name is "OBJECT_MT_hello", and bl_idname is not set by the script, then bl_idname = "OBJECT_MT_hello")
    (type: string, default "", (never None))
    
    :type: str
    """

    bl_label = ""
    """The menu label
    (type: string, default "", (never None))
    
    :type: str
    """

    bl_translation_context = "*"
    """(type: string, default "*", (never None))
    
    :type: str
    """

    layout = None
    """Defines the structure of the menu in the UI
    (type: bpy.types.UILayout, (readonly))
    
    :type: UILayout
    """

    def poll(self, context):
        """If this method returns a non-null output, then the menu can be drawn
        
        :rtype: bool
        """

    def draw(self, context):
        """Draw UI elements into the menu UI layout"""

    def draw_preset(self, context):
        """Define these on the subclass:
                                        - preset_operator (string)
                                        - preset_subdir (string)
        Optionally:
                                        - preset_extensions (set of strings)
                                        - preset_operator_defaults (dict of keyword args)
        """

    def path_menu(self, searchpaths, operator, *, props_default=None, prop_filepath='filepath', filter_ext=None, filter_path=None, display_name=None):
        """Populate a menu from a list of paths.
        
        :param searchpaths: Paths to scan.
            (type: sequence of strings.)
        :type searchpaths: collections.Sequence
        :param operator: The operator id to use with each file.
        :type operator: str
        :param prop_filepath: Optional operator filepath property (defaults to "filepath").
        :type prop_filepath: str
        :param props_default: Properties to assign to each operator.
        :type props_default: dict
        :param filter_ext: Optional callback that takes the file extensions.
            Returning false excludes the file from the list.
        :type filter_ext: Callable that takes a string and returns a bool.
        :param display_name: Optional callback that takes the full path, returns the name to display.
        :type display_name: Callable that takes a string and returns a string.
        """


class MeshColor(bpy_struct):
    """Vertex colors for a face in a Mesh"""

    color1 = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    color2 = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    color3 = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    color4 = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """


class MeshColorLayer(bpy_struct):
    """Layer of vertex colors in a Mesh data-block"""

    active = False
    """Sets the layer as active for display and editing
    (type: boolean, default False)
    
    :type: bool
    """

    active_render = False
    """Sets the layer as active for rendering
    (type: boolean, default False)
    
    :type: bool
    """

    data = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.MeshColor, (readonly))
    
    :type: bpy_prop_collection
    """

    name = ""
    """Name of Vertex color layer
    (type: string, default "", (never None))
    
    :type: str
    """


class MeshEdge(bpy_struct):
    """Edge in a Mesh data-block"""

    bevel_weight = 0.0
    """Weight used by the Bevel modifier
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    crease = 0.0
    """Weight used by the Subdivision Surface modifier for creasing
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    hide = False
    """(type: boolean, default False)
    
    :type: bool
    """

    index = 0
    """Index of this edge
    (type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """

    is_loose = False
    """Loose edge
    (type: boolean, default False)
    
    :type: bool
    """

    select = False
    """(type: boolean, default False)
    
    :type: bool
    """

    use_edge_sharp = False
    """Sharp edge for the Edge Split modifier
    (type: boolean, default False)
    
    :type: bool
    """

    use_freestyle_mark = False
    """Edge mark for Freestyle line rendering
    (type: boolean, default False)
    
    :type: bool
    """

    use_seam = False
    """Seam edge for UV unwrapping
    (type: boolean, default False)
    
    :type: bool
    """

    vertices = (0, 0)
    """Vertex indices
    (type: int array of 2 items in [0, inf], default (0, 0))
    
    :type: collections.Sequence[int]
    """

    key = None
    """(readonly)"""


class MeshEdges(bpy_struct):
    """Collection of mesh edges"""

    def add(self, count=0):
        """add
        
        :param count: Count, Number of edges to add
            (type: int in [0, inf], (optional))
        :type count: int
        """


class MeshLoop(bpy_struct):
    """Loop in a Mesh data-block"""

    bitangent = (0.0, 0.0, 0.0)
    """Bitangent vector of this vertex for this polygon (must be computed beforehand using calc_tangents, use it only if really needed, slower access than bitangent_sign)
    (type: float array of 3 items in [-1, 1], default (0.0, 0.0, 0.0), (readonly))
    
    :type: mathutils.Vector
    """

    bitangent_sign = 0.0
    """Sign of the bitangent vector of this vertex for this polygon (must be computed beforehand using calc_tangents, bitangent = bitangent_sign * cross(normal, tangent))
    (type: float in [-1, 1], default 0.0, (readonly))
    
    :type: float
    """

    edge_index = 0
    """Edge index
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    index = 0
    """Index of this loop
    (type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """

    normal = (0.0, 0.0, 0.0)
    """Local space unit length split normal vector of this vertex for this polygon (must be computed beforehand using calc_normals_split or calc_tangents)
    (type: float array of 3 items in [-1, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    tangent = (0.0, 0.0, 0.0)
    """Local space unit length tangent vector of this vertex for this polygon (must be computed beforehand using calc_tangents)
    (type: float array of 3 items in [-1, 1], default (0.0, 0.0, 0.0), (readonly))
    
    :type: mathutils.Vector
    """

    vertex_index = 0
    """Vertex index
    (type: int in [0, inf], default 0)
    
    :type: int
    """


class MeshLoopColor(bpy_struct):
    """Vertex loop colors in a Mesh"""

    color = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """


class MeshLoopColorLayer(bpy_struct):
    """Layer of vertex colors in a Mesh data-block"""

    active = False
    """Sets the layer as active for display and editing
    (type: boolean, default False)
    
    :type: bool
    """

    active_render = False
    """Sets the layer as active for rendering
    (type: boolean, default False)
    
    :type: bool
    """

    data = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.MeshLoopColor, (readonly))
    
    :type: bpy_prop_collection
    """

    name = ""
    """Name of Vertex color layer
    (type: string, default "", (never None))
    
    :type: str
    """


class MeshLoops(bpy_struct):
    """Collection of mesh loops"""

    def add(self, count=0):
        """add
        
        :param count: Count, Number of loops to add
            (type: int in [0, inf], (optional))
        :type count: int
        """


class MeshPaintMaskLayer(bpy_struct):
    """Per-vertex paint mask data"""

    data = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.MeshPaintMaskProperty, (readonly))
    
    :type: bpy_prop_collection
    """


class MeshPaintMaskProperty(bpy_struct):
    """Floating point paint mask value"""

    value = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """


class MeshPolygon(bpy_struct):
    """Polygon in a Mesh data-block"""

    area = 0.0
    """Read only area of this polygon
    (type: float in [0, inf], default 0.0, (readonly))
    
    :type: float
    """

    center = (0.0, 0.0, 0.0)
    """Center of this polygon
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0), (readonly))
    
    :type: mathutils.Vector
    """

    hide = False
    """(type: boolean, default False)
    
    :type: bool
    """

    index = 0
    """Index of this polygon
    (type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """

    loop_start = 0
    """Index of the first loop of this polygon
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    loop_total = 0
    """Number of loops used by this polygon
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    material_index = 0
    """(type: int in [0, 32767], default 0)
    
    :type: int
    """

    normal = (0.0, 0.0, 0.0)
    """Local space unit length normal vector for this polygon
    (type: float array of 3 items in [-1, 1], default (0.0, 0.0, 0.0), (readonly))
    
    :type: mathutils.Vector
    """

    select = False
    """(type: boolean, default False)
    
    :type: bool
    """

    use_freestyle_mark = False
    """Face mark for Freestyle line rendering
    (type: boolean, default False)
    
    :type: bool
    """

    use_smooth = False
    """(type: boolean, default False)
    
    :type: bool
    """

    vertices = (0, 0, 0)
    """Vertex indices
    (type: int array of 3 items in [0, inf], default (0, 0, 0))
    
    :type: collections.Sequence[int]
    """

    edge_keys = None
    """(readonly)"""

    loop_indices = None
    """(readonly)"""

    def flip(self):
        """Invert winding of this polygon (flip its normal)"""


class MeshPolygonFloatProperty(bpy_struct):
    """User defined floating point number value in a float properties layer"""

    value = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """


class MeshPolygonFloatPropertyLayer(bpy_struct):
    """User defined layer of floating point number values"""

    data = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.MeshPolygonFloatProperty, (readonly))
    
    :type: bpy_prop_collection
    """

    name = ""
    """(type: string, default "", (never None))
    
    :type: str
    """


class MeshPolygonIntProperty(bpy_struct):
    """User defined integer number value in an integer properties layer"""

    value = 0
    """(type: int in [-inf, inf], default 0)
    
    :type: int
    """


class MeshPolygonIntPropertyLayer(bpy_struct):
    """User defined layer of integer number values"""

    data = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.MeshPolygonIntProperty, (readonly))
    
    :type: bpy_prop_collection
    """

    name = ""
    """(type: string, default "", (never None))
    
    :type: str
    """


class MeshPolygonStringProperty(bpy_struct):
    """User defined string text value in a string properties layer"""

    value = ""
    """(type: string, default "", (never None))
    
    :type: str
    """


class MeshPolygonStringPropertyLayer(bpy_struct):
    """User defined layer of string text values"""

    data = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.MeshPolygonStringProperty, (readonly))
    
    :type: bpy_prop_collection
    """

    name = ""
    """(type: string, default "", (never None))
    
    :type: str
    """


class MeshPolygons(bpy_struct):
    """Collection of mesh polygons"""

    active = 0
    """The active polygon for this mesh
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    def add(self, count=0):
        """add
        
        :param count: Count, Number of polygons to add
            (type: int in [0, inf], (optional))
        :type count: int
        """


class MeshSkinVertex(bpy_struct):
    """Per-vertex skin data for use with the Skin modifier"""

    radius = (0.0, 0.0)
    """Radius of the skin
    (type: float array of 2 items in [0, inf], default (0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    use_loose = False
    """If vertex has multiple adjacent edges, it is hulled to them directly
    (type: boolean, default False)
    
    :type: bool
    """

    use_root = False
    """Vertex is a root for rotation calculations and armature generation
    (type: boolean, default False)
    
    :type: bool
    """


class MeshSkinVertexLayer(bpy_struct):
    """Per-vertex skin data for use with the Skin modifier"""

    data = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.MeshSkinVertex, (readonly))
    
    :type: bpy_prop_collection
    """

    name = ""
    """Name of skin layer
    (type: string, default "", (never None))
    
    :type: str
    """


class MeshStatVis(bpy_struct):
    """"""

    distort_max = 0.5
    """Maximum angle to display
    (type: float in [0, 3.14159], default 0.5)
    
    :type: float
    """

    distort_min = 0.5
    """Minimum angle to display
    (type: float in [0, 3.14159], default 0.5)
    
    :type: float
    """

    overhang_axis = 'POS_X'
    """(type: enum in ['POS_X', 'POS_Y', 'POS_Z', 'NEG_X', 'NEG_Y', 'NEG_Z'], default 'POS_X')
    
    :type: str
    """

    overhang_max = 0.5
    """Maximum angle to display
    (type: float in [0, 3.14159], default 0.5)
    
    :type: float
    """

    overhang_min = 0.5
    """Minimum angle to display
    (type: float in [0, 3.14159], default 0.5)
    
    :type: float
    """

    sharp_max = 0.5
    """Maximum angle to display
    (type: float in [-3.14159, 3.14159], default 0.5)
    
    :type: float
    """

    sharp_min = 0.5
    """Minimum angle to display
    (type: float in [-3.14159, 3.14159], default 0.5)
    
    :type: float
    """

    thickness_max = 0.5
    """Maximum for measuring thickness
    (type: float in [0, 1000], default 0.5)
    
    :type: float
    """

    thickness_min = 0.5
    """Minimum for measuring thickness
    (type: float in [0, 1000], default 0.5)
    
    :type: float
    """

    thickness_samples = 0
    """Number of samples to test per face
    (type: int in [1, 32], default 0)
    
    :type: int
    """

    type = 'OVERHANG'
    """Type of data to visualize/check
    (type: enum in ['OVERHANG', 'THICKNESS', 'INTERSECT', 'DISTORT', 'SHARP'], default 'OVERHANG')
    
    :type: str
    """


class MeshTessFace(bpy_struct):
    """TessFace in a Mesh data-block"""

    area = 0.0
    """Read only area of this face
    (type: float in [0, inf], default 0.0, (readonly))
    
    :type: float
    """

    hide = False
    """(type: boolean, default False)
    
    :type: bool
    """

    index = 0
    """Index of this face
    (type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """

    material_index = 0
    """(type: int in [0, 32767], default 0)
    
    :type: int
    """

    normal = (0.0, 0.0, 0.0)
    """Local space unit length normal vector for this face
    (type: float array of 3 items in [-1, 1], default (0.0, 0.0, 0.0), (readonly))
    
    :type: mathutils.Vector
    """

    select = False
    """(type: boolean, default False)
    
    :type: bool
    """

    split_normals = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    """Local space unit length split normals vectors of the vertices of this face (must be computed beforehand using calc_normals_split or calc_tangents, and then calc_tessface)
    (type: float array of 12 items in [-1, 1], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (readonly))
    
    :type: mathutils.Vector
    """

    use_smooth = False
    """(type: boolean, default False)
    
    :type: bool
    """

    vertices = (0, 0, 0, 0)
    """Vertex indices
    (type: int array of 4 items in [0, inf], default (0, 0, 0, 0))
    
    :type: collections.Sequence[int]
    """

    vertices_raw = (0, 0, 0, 0)
    """Fixed size vertex indices array
    (type: int array of 4 items in [0, inf], default (0, 0, 0, 0))
    
    :type: collections.Sequence[int]
    """

    center = None
    """The midpoint of the face.
                                (readonly)
    """

    edge_keys = None
    """(readonly)"""


class MeshTessFaces(bpy_struct):
    """Collection of mesh faces"""

    active = 0
    """The active face for this mesh
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    def add(self, count=0):
        """add
        
        :param count: Count, Number of faces to add
            (type: int in [0, inf], (optional))
        :type count: int
        """


class MeshTextureFace(bpy_struct):
    """UV map and image texture for a face"""

    image = None
    """(type: bpy.types.Image)
    
    :type: Image
    """

    uv = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    """(type: float array of 8 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    uv1 = (0.0, 0.0)
    """(type: float array of 2 items in [-inf, inf], default (0.0, 0.0))
    
    :type: mathutils.Vector
    """

    uv2 = (0.0, 0.0)
    """(type: float array of 2 items in [-inf, inf], default (0.0, 0.0))
    
    :type: mathutils.Vector
    """

    uv3 = (0.0, 0.0)
    """(type: float array of 2 items in [-inf, inf], default (0.0, 0.0))
    
    :type: mathutils.Vector
    """

    uv4 = (0.0, 0.0)
    """(type: float array of 2 items in [-inf, inf], default (0.0, 0.0))
    
    :type: mathutils.Vector
    """

    uv_raw = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    """Fixed size UV coordinates array
    (type: float array of 8 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))
    
    :type: collections.Sequence[float]
    """


class MeshTextureFaceLayer(bpy_struct):
    """UV map with assigned image textures in a Mesh data-block"""

    active = False
    """Set the map as active for display and editing
    (type: boolean, default False)
    
    :type: bool
    """

    active_clone = False
    """Set the map as active for cloning
    (type: boolean, default False)
    
    :type: bool
    """

    active_render = False
    """Set the map as active for rendering
    (type: boolean, default False)
    
    :type: bool
    """

    data = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.MeshTextureFace, (readonly))
    
    :type: bpy_prop_collection
    """

    name = ""
    """Name of UV map
    (type: string, default "", (never None))
    
    :type: str
    """


class MeshTexturePoly(bpy_struct):
    """UV map and image texture for a face"""

    image = None
    """(type: bpy.types.Image)
    
    :type: Image
    """


class MeshTexturePolyLayer(bpy_struct):
    """UV map with assigned image textures in a Mesh data-block"""

    active = False
    """Set the map as active for display and editing
    (type: boolean, default False)
    
    :type: bool
    """

    active_clone = False
    """Set the map as active for cloning
    (type: boolean, default False)
    
    :type: bool
    """

    active_render = False
    """Set the map as active for rendering
    (type: boolean, default False)
    
    :type: bool
    """

    data = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.MeshTexturePoly, (readonly))
    
    :type: bpy_prop_collection
    """

    name = ""
    """Name of UV map
    (type: string, default "", (never None))
    
    :type: str
    """


class MeshUVLoop(bpy_struct):
    """"""

    pin_uv = False
    """(type: boolean, default False)
    
    :type: bool
    """

    select = False
    """(type: boolean, default False)
    
    :type: bool
    """

    select_edge = False
    """(type: boolean, default False)
    
    :type: bool
    """

    uv = (0.0, 0.0)
    """(type: float array of 2 items in [-inf, inf], default (0.0, 0.0))
    
    :type: mathutils.Vector
    """


class MeshUVLoopLayer(bpy_struct):
    """"""

    data = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.MeshUVLoop, (readonly))
    
    :type: bpy_prop_collection
    """

    name = ""
    """Name of UV map
    (type: string, default "", (never None))
    
    :type: str
    """


class MeshVertex(bpy_struct):
    """Vertex in a Mesh data-block"""

    bevel_weight = 0.0
    """Weight used by the Bevel modifier 'Only Vertices' option
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    co = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    groups = None
    """Weights for the vertex groups this vertex is member of
    (type: bpy.types.bpy_prop_collection of bpy.types.VertexGroupElement, (readonly))
    
    :type: bpy_prop_collection
    """

    hide = False
    """(type: boolean, default False)
    
    :type: bool
    """

    index = 0
    """Index of this vertex
    (type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """

    normal = (0.0, 0.0, 0.0)
    """Vertex Normal
    (type: float array of 3 items in [-1, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    select = False
    """(type: boolean, default False)
    
    :type: bool
    """

    undeformed_co = (0.0, 0.0, 0.0)
    """For meshes with modifiers applied, the coordinate of the vertex with no deforming modifiers applied, as used for generated texture coordinates
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0), (readonly))
    
    :type: mathutils.Vector
    """


class MeshVertexFloatProperty(bpy_struct):
    """User defined floating point number value in a float properties layer"""

    value = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """


class MeshVertexFloatPropertyLayer(bpy_struct):
    """User defined layer of floating point number values"""

    data = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.MeshVertexFloatProperty, (readonly))
    
    :type: bpy_prop_collection
    """

    name = ""
    """(type: string, default "", (never None))
    
    :type: str
    """


class MeshVertexIntProperty(bpy_struct):
    """User defined integer number value in an integer properties layer"""

    value = 0
    """(type: int in [-inf, inf], default 0)
    
    :type: int
    """


class MeshVertexIntPropertyLayer(bpy_struct):
    """User defined layer of integer number values"""

    data = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.MeshVertexIntProperty, (readonly))
    
    :type: bpy_prop_collection
    """

    name = ""
    """(type: string, default "", (never None))
    
    :type: str
    """


class MeshVertexStringProperty(bpy_struct):
    """User defined string text value in a string properties layer"""

    value = ""
    """(type: string, default "", (never None))
    
    :type: str
    """


class MeshVertexStringPropertyLayer(bpy_struct):
    """User defined layer of string text values"""

    data = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.MeshVertexStringProperty, (readonly))
    
    :type: bpy_prop_collection
    """

    name = ""
    """(type: string, default "", (never None))
    
    :type: str
    """


class MeshVertices(bpy_struct):
    """Collection of mesh vertices"""

    def add(self, count=0):
        """add
        
        :param count: Count, Number of vertices to add
            (type: int in [0, inf], (optional))
        :type count: int
        """


class MetaBallElements(bpy_struct):
    """Collection of metaball elements"""

    active = None
    """Last selected element
    (type: bpy.types.MetaElement, (readonly))
    
    :type: MetaElement
    """

    def new(self, type='BALL'):
        """Add a new element to the metaball
        
        :param type: type for the new meta-element
            (type: enum in ['BALL', 'CAPSULE', 'PLANE', 'ELLIPSOID', 'CUBE'], (optional))
        :type type: str
        :return: The newly created meta-element
        :param : (type: bpy.types.MetaElement)
        :rtype: MetaElement
        """

    def remove(self, element):
        """Remove an element from the metaball
        
        :param element: The element to remove
            (type: bpy.types.MetaElement, (never None))
        :type element: MetaElement
        """

    def clear(self):
        """Remove all elements from the metaball"""


class MetaElement(bpy_struct):
    """Blobby element in a Metaball data-block"""

    co = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    hide = False
    """Hide element
    (type: boolean, default False)
    
    :type: bool
    """

    radius = 0.0
    """(type: float in [0, inf], default 0.0)
    
    :type: float
    """

    rotation = (0.0, 0.0, 0.0, 0.0)
    """Normalized quaternion rotation
    (type: float array of 4 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Quaternion
    """

    size_x = 0.0
    """Size of element, use of components depends on element type
    (type: float in [0, 20], default 0.0)
    
    :type: float
    """

    size_y = 0.0
    """Size of element, use of components depends on element type
    (type: float in [0, 20], default 0.0)
    
    :type: float
    """

    size_z = 0.0
    """Size of element, use of components depends on element type
    (type: float in [0, 20], default 0.0)
    
    :type: float
    """

    stiffness = 0.0
    """Stiffness defines how much of the element to fill
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    type = 'BALL'
    """Metaball types
    (type: enum in ['BALL', 'CAPSULE', 'PLANE', 'ELLIPSOID', 'CUBE'], default 'BALL')
    
    :type: str
    """

    use_negative = False
    """Set metaball as negative one
    (type: boolean, default False)
    
    :type: bool
    """


class Modifier(bpy_struct):
    """Modifier affecting the geometry data of an object"""

    name = ""
    """Modifier name
    (type: string, default "", (never None))
    
    :type: str
    """

    show_expanded = False
    """Set modifier expanded in the user interface
    (type: boolean, default False)
    
    :type: bool
    """

    show_in_editmode = False
    """Display modifier in Edit mode
    (type: boolean, default False)
    
    :type: bool
    """

    show_on_cage = False
    """Adjust edit cage to modifier result
    (type: boolean, default False)
    
    :type: bool
    """

    show_render = False
    """Use modifier during render
    (type: boolean, default False)
    
    :type: bool
    """

    show_viewport = False
    """Display modifier in viewport
    (type: boolean, default False)
    
    :type: bool
    """

    type = 'DATA_TRANSFER'
    """
    * 'DATA_TRANSFER': Data Transfer.
    * 'MESH_CACHE': Mesh Cache.
    * 'MESH_SEQUENCE_CACHE': Mesh Sequence Cache.
    * 'NORMAL_EDIT': Normal Edit.
    * 'UV_PROJECT': UV Project.
    * 'UV_WARP': UV Warp.
    * 'VERTEX_WEIGHT_EDIT': Vertex Weight Edit.
    * 'VERTEX_WEIGHT_MIX': Vertex Weight Mix.
    * 'VERTEX_WEIGHT_PROXIMITY': Vertex Weight Proximity.
    * 'ARRAY': Array.
    * 'BEVEL': Bevel.
    * 'BOOLEAN': Boolean.
    * 'BUILD': Build.
    * 'DECIMATE': Decimate.
    * 'EDGE_SPLIT': Edge Split.
    * 'MASK': Mask.
    * 'MIRROR': Mirror.
    * 'MULTIRES': Multiresolution.
    * 'REMESH': Remesh.
    * 'SCREW': Screw.
    * 'SKIN': Skin.
    * 'SOLIDIFY': Solidify.
    * 'SUBSURF': Subdivision Surface.
    * 'TRIANGULATE': Triangulate.
    * 'WIREFRAME': Wireframe, Generate a wireframe on the edges of a mesh.
    * 'ARMATURE': Armature.
    * 'CAST': Cast.
    * 'CORRECTIVE_SMOOTH': Corrective Smooth.
    * 'CURVE': Curve.
    * 'DISPLACE': Displace.
    * 'HOOK': Hook.
    * 'LAPLACIANSMOOTH': Laplacian Smooth.
    * 'LAPLACIANDEFORM': Laplacian Deform.
    * 'LATTICE': Lattice.
    * 'MESH_DEFORM': Mesh Deform.
    * 'SHRINKWRAP': Shrinkwrap.
    * 'SIMPLE_DEFORM': Simple Deform.
    * 'SMOOTH': Smooth.
    * 'SURFACE_DEFORM': Surface Deform.
    * 'WARP': Warp.
    * 'WAVE': Wave.
    * 'CLOTH': Cloth.
    * 'COLLISION': Collision.
    * 'DYNAMIC_PAINT': Dynamic Paint.
    * 'EXPLODE': Explode.
    * 'FLUID_SIMULATION': Fluid Simulation.
    * 'OCEAN': Ocean.
    * 'PARTICLE_INSTANCE': Particle Instance.
    * 'PARTICLE_SYSTEM': Particle System.
    * 'SMOKE': Smoke.
    * 'SOFT_BODY': Soft Body.
    * 'SURFACE': Surface.
    (type: enum in ['DATA_TRANSFER', 'MESH_CACHE', 'MESH_SEQUENCE_CACHE', 'NORMAL_EDIT', 'UV_PROJECT', 'UV_WARP', 'VERTEX_WEIGHT_EDIT', 'VERTEX_WEIGHT_MIX', 'VERTEX_WEIGHT_PROXIMITY', 'ARRAY', 'BEVEL', 'BOOLEAN', 'BUILD', 'DECIMATE', 'EDGE_SPLIT', 'MASK', 'MIRROR', 'MULTIRES', 'REMESH', 'SCREW', 'SKIN', 'SOLIDIFY', 'SUBSURF', 'TRIANGULATE', 'WIREFRAME', 'ARMATURE', 'CAST', 'CORRECTIVE_SMOOTH', 'CURVE', 'DISPLACE', 'HOOK', 'LAPLACIANSMOOTH', 'LAPLACIANDEFORM', 'LATTICE', 'MESH_DEFORM', 'SHRINKWRAP', 'SIMPLE_DEFORM', 'SMOOTH', 'SURFACE_DEFORM', 'WARP', 'WAVE', 'CLOTH', 'COLLISION', 'DYNAMIC_PAINT', 'EXPLODE', 'FLUID_SIMULATION', 'OCEAN', 'PARTICLE_INSTANCE', 'PARTICLE_SYSTEM', 'SMOKE', 'SOFT_BODY', 'SURFACE'], default 'DATA_TRANSFER', (readonly))
    
    :type: str
    """

    use_apply_on_spline = False
    """Apply this and all preceding deformation modifiers on splines' points rather than on filled curve/surface
    (type: boolean, default False)
    
    :type: bool
    """


class MotionPath(bpy_struct):
    """Cache of the worldspace positions of an element over a frame range"""

    color = (0.0, 0.0, 0.0)
    """Custom color for motion path
    (type: float array of 3 items in [0, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    frame_end = 0
    """End frame of the stored range
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    frame_start = 0
    """Starting frame of the stored range
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    is_modified = False
    """Path is being edited
    (type: boolean, default False)
    
    :type: bool
    """

    length = 0
    """Number of frames cached
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    line_thickness = 0
    """Line thickness for drawing path
    (type: int in [1, 6], default 0)
    
    :type: int
    """

    lines = False
    """Draw straight lines between keyframe points
    (type: boolean, default False)
    
    :type: bool
    """

    points = None
    """Cached positions per frame
    (type: bpy.types.bpy_prop_collection of bpy.types.MotionPathVert, (readonly))
    
    :type: bpy_prop_collection
    """

    use_bone_head = False
    """For PoseBone paths, use the bone head location when calculating this path
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_custom_color = False
    """Use custom color for this motion path
    (type: boolean, default False)
    
    :type: bool
    """


class MotionPathVert(bpy_struct):
    """Cached location on path"""

    co = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    select = False
    """Path point is selected for editing
    (type: boolean, default False)
    
    :type: bool
    """


class MovieClipProxy(bpy_struct):
    """Proxy parameters for a movie clip"""

    build_100 = False
    """Build proxy resolution 100% of the original footage dimension
    (type: boolean, default False)
    
    :type: bool
    """

    build_25 = False
    """Build proxy resolution 25% of the original footage dimension
    (type: boolean, default False)
    
    :type: bool
    """

    build_50 = False
    """Build proxy resolution 50% of the original footage dimension
    (type: boolean, default False)
    
    :type: bool
    """

    build_75 = False
    """Build proxy resolution 75% of the original footage dimension
    (type: boolean, default False)
    
    :type: bool
    """

    build_free_run = False
    """Build free run time code index
    (type: boolean, default False)
    
    :type: bool
    """

    build_free_run_rec_date = False
    """Build free run time code index using Record Date/Time
    (type: boolean, default False)
    
    :type: bool
    """

    build_record_run = False
    """Build record run time code index
    (type: boolean, default False)
    
    :type: bool
    """

    build_undistorted_100 = False
    """Build proxy resolution 100% of the original undistorted footage dimension
    (type: boolean, default False)
    
    :type: bool
    """

    build_undistorted_25 = False
    """Build proxy resolution 25% of the original undistorted footage dimension
    (type: boolean, default False)
    
    :type: bool
    """

    build_undistorted_50 = False
    """Build proxy resolution 50% of the original undistorted footage dimension
    (type: boolean, default False)
    
    :type: bool
    """

    build_undistorted_75 = False
    """Build proxy resolution 75% of the original undistorted footage dimension
    (type: boolean, default False)
    
    :type: bool
    """

    directory = ""
    """Location to store the proxy files
    (type: string, default "", (never None))
    
    :type: str
    """

    quality = 0
    """JPEG quality of proxy images
    (type: int in [0, 32767], default 0)
    
    :type: int
    """

    timecode = 'NONE'
    """
    * 'NONE': No TC in use.
    * 'RECORD_RUN': Record Run, Use images in the order they are recorded.
    * 'FREE_RUN': Free Run, Use global timestamp written by recording device.
    * 'FREE_RUN_REC_DATE': Free Run (rec date), Interpolate a global timestamp using the record date and time written by recording device.
    * 'FREE_RUN_NO_GAPS': Free Run No Gaps, Record run, but ignore timecode, changes in framerate or dropouts.
    (type: enum in ['NONE', 'RECORD_RUN', 'FREE_RUN', 'FREE_RUN_REC_DATE', 'FREE_RUN_NO_GAPS'], default 'NONE')
    
    :type: str
    """


class MovieClipScopes(bpy_struct):
    """Scopes for statistical view of a movie clip"""


class MovieClipUser(bpy_struct):
    """Parameters defining how a MovieClip data-block is used by another data-block"""

    frame_current = 0
    """Current frame number in movie or image sequence
    (type: int in [-500000, 500000], default 0)
    
    :type: int
    """

    proxy_render_size = 'FULL'
    """Draw preview using full resolution or different proxy resolutions
    (type: enum in ['PROXY_25', 'PROXY_50', 'PROXY_75', 'PROXY_100', 'FULL'], default 'FULL')
    
    :type: str
    """

    use_render_undistorted = False
    """Render preview using undistorted proxy
    (type: boolean, default False)
    
    :type: bool
    """


class MovieReconstructedCamera(bpy_struct):
    """Match-moving reconstructed camera data from tracker"""

    average_error = 0.0
    """Average error of reconstruction
    (type: float in [-inf, inf], default 0.0, (readonly))
    
    :type: float
    """

    frame = 0
    """Frame number marker is keyframed on
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    matrix = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    """Worldspace transformation matrix
    (type: float array of 16 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (readonly))
    
    :type: mathutils.Matrix
    """


class MovieTracking(bpy_struct):
    """Match-moving data for tracking"""

    active_object_index = 0
    """Index of active object
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    camera = None
    """(type: bpy.types.MovieTrackingCamera, (readonly))
    
    :type: MovieTrackingCamera
    """

    dopesheet = None
    """(type: bpy.types.MovieTrackingDopesheet, (readonly))
    
    :type: MovieTrackingDopesheet
    """

    objects = None
    """Collection of objects in this tracking data object
    (type: bpy.types.MovieTrackingObjects bpy.types.bpy_prop_collection of bpy.types.MovieTrackingObject, (readonly))
    
    :type: MovieTrackingObjects
    """

    plane_tracks = None
    """Collection of plane tracks in this tracking data object
    (type: bpy.types.MovieTrackingPlaneTracks bpy.types.bpy_prop_collection of bpy.types.MovieTrackingPlaneTrack, (readonly))
    
    :type: MovieTrackingPlaneTracks
    """

    reconstruction = None
    """(type: bpy.types.MovieTrackingReconstruction, (readonly))
    
    :type: MovieTrackingReconstruction
    """

    settings = None
    """(type: bpy.types.MovieTrackingSettings, (readonly))
    
    :type: MovieTrackingSettings
    """

    stabilization = None
    """(type: bpy.types.MovieTrackingStabilization, (readonly))
    
    :type: MovieTrackingStabilization
    """

    tracks = None
    """Collection of tracks in this tracking data object
    (type: bpy.types.MovieTrackingTracks bpy.types.bpy_prop_collection of bpy.types.MovieTrackingTrack, (readonly))
    
    :type: MovieTrackingTracks
    """


class MovieTrackingCamera(bpy_struct):
    """Match-moving camera data for tracking"""

    distortion_model = 'POLYNOMIAL'
    """Distortion model used for camera lenses
    * 'POLYNOMIAL': Polynomial, Radial distortion model which fits common cameras.
    * 'DIVISION': Divisions, Division distortion model which better represents wide-angle cameras.
    (type: enum in ['POLYNOMIAL', 'DIVISION'], default 'POLYNOMIAL')
    
    :type: str
    """

    division_k1 = 0.0
    """First coefficient of second order division distortion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    division_k2 = 0.0
    """First coefficient of second order division distortion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    focal_length = 0.0
    """Camera's focal length
    (type: float in [0.0001, inf], default 0.0)
    
    :type: float
    """

    focal_length_pixels = 0.0
    """Camera's focal length
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    k1 = 0.0
    """First coefficient of third order polynomial radial distortion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    k2 = 0.0
    """Second coefficient of third order polynomial radial distortion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    k3 = 0.0
    """Third coefficient of third order polynomial radial distortion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    pixel_aspect = 1.0
    """Pixel aspect ratio
    (type: float in [0.1, inf], default 1.0)
    
    :type: float
    """

    principal = (0.0, 0.0)
    """Optical center of lens
    (type: float array of 2 items in [-inf, inf], default (0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    sensor_width = 0.0
    """Width of CCD sensor in millimeters
    (type: float in [0, 500], default 0.0)
    
    :type: float
    """

    units = 'PIXELS'
    """Units used for camera focal length
    * 'PIXELS': px, Use pixels for units of focal length.
    * 'MILLIMETERS': mm, Use millimeters for units of focal length.
    (type: enum in ['PIXELS', 'MILLIMETERS'], default 'PIXELS')
    
    :type: str
    """


class MovieTrackingDopesheet(bpy_struct):
    """Match-moving dopesheet data"""

    show_hidden = False
    """Include channels from objects/bone that aren't visible
    (type: boolean, default False)
    
    :type: bool
    """

    show_only_selected = False
    """Only include channels relating to selected objects and data
    (type: boolean, default False)
    
    :type: bool
    """

    sort_method = 'NAME'
    """Method to be used to sort channels in dopesheet view
    * 'NAME': Name, Sort channels by their names.
    * 'LONGEST': Longest, Sort channels by longest tracked segment.
    * 'TOTAL': Total, Sort channels by overall amount of tracked segments.
    * 'AVERAGE_ERROR': Average Error, Sort channels by average reprojection error of tracks after solve.
    (type: enum in ['NAME', 'LONGEST', 'TOTAL', 'AVERAGE_ERROR'], default 'NAME')
    
    :type: str
    """

    use_invert_sort = False
    """Invert sort order of dopesheet channels
    (type: boolean, default False)
    
    :type: bool
    """


class MovieTrackingMarker(bpy_struct):
    """Match-moving marker data for tracking"""

    co = (0.0, 0.0)
    """Marker position at frame in normalized coordinates
    (type: float array of 2 items in [-inf, inf], default (0.0, 0.0))
    
    :type: mathutils.Vector
    """

    frame = 0
    """Frame number marker is keyframed on
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    is_keyed = False
    """Whether the position of the marker is keyframed or tracked
    (type: boolean, default False)
    
    :type: bool
    """

    mute = False
    """Is marker muted for current frame
    (type: boolean, default False)
    
    :type: bool
    """

    pattern_bound_box = (0.0, 0.0, 0.0, 0.0)
    """Pattern area bounding box in normalized coordinates
    (type: float array of 4 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0), (readonly))
    
    :type: collections.Sequence[float]
    """

    pattern_corners = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    """Array of coordinates which represents pattern's corners in normalized coordinates relative to marker position
    (type: float array of 8 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Matrix
    """

    search_max = (0.0, 0.0)
    """Right-bottom corner of search area in normalized coordinates relative to marker position
    (type: float array of 2 items in [-inf, inf], default (0.0, 0.0))
    
    :type: mathutils.Vector
    """

    search_min = (0.0, 0.0)
    """Left-bottom corner of search area in normalized coordinates relative to marker position
    (type: float array of 2 items in [-inf, inf], default (0.0, 0.0))
    
    :type: mathutils.Vector
    """


class MovieTrackingMarkers(bpy_struct):
    """Collection of markers for movie tracking track"""

    def find_frame(self, frame, exact=True):
        """Get marker for specified frame
        
        :param frame: Frame, Frame number to find marker for
            (type: int in [0, 500000])
        :type frame: int
        :param exact: Exact, Get marker at exact frame number rather than get estimated marker
            (type: boolean, (optional))
        :type exact: bool
        :return: Marker for specified frame
        :param : (type: bpy.types.MovieTrackingMarker)
        :rtype: MovieTrackingMarker
        """

    def insert_frame(self, frame, co=(0.0, 0.0)):
        """Insert a new marker at the specified frame
        
        :param frame: Frame, Frame number to insert marker to
            (type: int in [0, 500000])
        :type frame: int
        :param co: Coordinate, Place new marker at the given frame using specified in normalized space coordinates
            (type: float array of 2 items in [-1, 1], (optional))
        :type co: mathutils.Vector
        :return: Newly created marker
        :param : (type: bpy.types.MovieTrackingMarker)
        :rtype: MovieTrackingMarker
        """

    def delete_frame(self, frame):
        """Delete marker at specified frame
        
        :param frame: Frame, Frame number to delete marker from
            (type: int in [0, 500000])
        :type frame: int
        """


class MovieTrackingObject(bpy_struct):
    """Match-moving object tracking and reconstruction data"""

    is_camera = False
    """Object is used for camera tracking
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    keyframe_a = 0
    """First keyframe used for reconstruction initialization
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    keyframe_b = 0
    """Second keyframe used for reconstruction initialization
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    name = ""
    """Unique name of object
    (type: string, default "", (never None))
    
    :type: str
    """

    plane_tracks = None
    """Collection of plane tracks in this tracking data object
    (type: bpy.types.MovieTrackingObjectPlaneTracks bpy.types.bpy_prop_collection of bpy.types.MovieTrackingPlaneTrack, (readonly))
    
    :type: MovieTrackingObjectPlaneTracks
    """

    reconstruction = None
    """(type: bpy.types.MovieTrackingReconstruction, (readonly))
    
    :type: MovieTrackingReconstruction
    """

    scale = 1.0
    """Scale of object solution in camera space
    (type: float in [0.0001, 10000], default 1.0)
    
    :type: float
    """

    tracks = None
    """Collection of tracks in this tracking data object
    (type: bpy.types.MovieTrackingObjectTracks bpy.types.bpy_prop_collection of bpy.types.MovieTrackingTrack, (readonly))
    
    :type: MovieTrackingObjectTracks
    """


class MovieTrackingObjectPlaneTracks(bpy_struct):
    """Collection of tracking plane tracks"""

    active = None
    """Active track in this tracking data object
    (type: bpy.types.MovieTrackingTrack)
    
    :type: MovieTrackingTrack
    """


class MovieTrackingObjectTracks(bpy_struct):
    """Collection of movie tracking tracks"""

    active = None
    """Active track in this tracking data object
    (type: bpy.types.MovieTrackingTrack)
    
    :type: MovieTrackingTrack
    """

    def new(self, name="", frame=1):
        """create new motion track in this movie clip
        
        :param name: Name of new track
            (type: str, (optional, never None))
        :type name: str
        :param frame: Frame, Frame number to add tracks on
            (type: int in [0, 500000], (optional))
        :type frame: int
        :return: Newly created track
        :param : (type: bpy.types.MovieTrackingTrack)
        :rtype: MovieTrackingTrack
        """


class MovieTrackingObjects(bpy_struct):
    """Collection of movie tracking objects"""

    active = None
    """Active object in this tracking data object
    (type: bpy.types.MovieTrackingObject)
    
    :type: MovieTrackingObject
    """

    def new(self, name):
        """Add tracking object to this movie clip
        
        :param name: Name of new object
            (type: str, (never None))
        :type name: str
        :return: New motion tracking object
        :param : (type: bpy.types.MovieTrackingObject)
        :rtype: MovieTrackingObject
        """

    def remove(self, object):
        """Remove tracking object from this movie clip
        
        :param object: Motion tracking object to be removed
            (type: bpy.types.MovieTrackingObject, (never None))
        :type object: MovieTrackingObject
        """


class MovieTrackingPlaneMarker(bpy_struct):
    """Match-moving plane marker data for tracking"""

    corners = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    """Array of coordinates which represents UI rectangle corners in frame normalized coordinates
    (type: float array of 8 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Matrix
    """

    frame = 0
    """Frame number marker is keyframed on
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    mute = False
    """Is marker muted for current frame
    (type: boolean, default False)
    
    :type: bool
    """


class MovieTrackingPlaneMarkers(bpy_struct):
    """Collection of markers for movie tracking plane track"""

    def find_frame(self, frame, exact=True):
        """Get plane marker for specified frame
        
        :param frame: Frame, Frame number to find marker for
            (type: int in [0, 500000])
        :type frame: int
        :param exact: Exact, Get plane marker at exact frame number rather than get estimated marker
            (type: boolean, (optional))
        :type exact: bool
        :return: Plane marker for specified frame
        :param : (type: bpy.types.MovieTrackingPlaneMarker)
        :rtype: MovieTrackingPlaneMarker
        """

    def insert_frame(self, frame):
        """Insert a new plane marker at the specified frame
        
        :param frame: Frame, Frame number to insert marker to
            (type: int in [0, 500000])
        :type frame: int
        :return: Newly created plane marker
        :param : (type: bpy.types.MovieTrackingPlaneMarker)
        :rtype: MovieTrackingPlaneMarker
        """

    def delete_frame(self, frame):
        """Delete plane marker at specified frame
        
        :param frame: Frame, Frame number to delete plane marker from
            (type: int in [0, 500000])
        :type frame: int
        """


class MovieTrackingPlaneTrack(bpy_struct):
    """Match-moving plane track data for tracking"""

    image = None
    """Image displayed in the track during editing in clip editor
    (type: bpy.types.Image)
    
    :type: Image
    """

    image_opacity = 0.0
    """Opacity of the image
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    markers = None
    """Collection of markers in track
    (type: bpy.types.MovieTrackingPlaneMarkers bpy.types.bpy_prop_collection of bpy.types.MovieTrackingPlaneMarker, (readonly))
    
    :type: MovieTrackingPlaneMarkers
    """

    name = ""
    """Unique name of track
    (type: string, default "", (never None))
    
    :type: str
    """

    select = False
    """Plane track is selected
    (type: boolean, default False)
    
    :type: bool
    """

    use_auto_keying = False
    """Automatic keyframe insertion when moving plane corners
    (type: boolean, default False)
    
    :type: bool
    """


class MovieTrackingPlaneTracks(bpy_struct):
    """Collection of movie tracking plane tracks"""

    active = None
    """Active plane track in this tracking data object
    (type: bpy.types.MovieTrackingPlaneTrack)
    
    :type: MovieTrackingPlaneTrack
    """


class MovieTrackingReconstructedCameras(bpy_struct):
    """Collection of solved cameras"""

    def find_frame(self, frame=1):
        """Find a reconstructed camera for a give frame number
        
        :param frame: Frame, Frame number to find camera for
            (type: int in [0, 500000], (optional))
        :type frame: int
        :return: Camera for a given frame
        :param : (type: bpy.types.MovieReconstructedCamera)
        :rtype: MovieReconstructedCamera
        """

    def matrix_from_frame(self, frame=1):
        """Return interpolated camera matrix for a given frame
        
        :param frame: Frame, Frame number to find camera for
            (type: int in [0, 500000], (optional))
        :type frame: int
        :return: Matrix, Interpolated camera matrix for a given frame
        :param : (type: float array of 16 items in [-inf, inf])
        :rtype: mathutils.Matrix
        """


class MovieTrackingReconstruction(bpy_struct):
    """Match-moving reconstruction data from tracker"""

    average_error = 0.0
    """Average error of reconstruction
    (type: float in [-inf, inf], default 0.0, (readonly))
    
    :type: float
    """

    cameras = None
    """Collection of solved cameras
    (type: bpy.types.MovieTrackingReconstructedCameras bpy.types.bpy_prop_collection of bpy.types.MovieReconstructedCamera, (readonly))
    
    :type: MovieTrackingReconstructedCameras
    """

    is_valid = False
    """Is tracking data contains valid reconstruction information
    (type: boolean, default False, (readonly))
    
    :type: bool
    """


class MovieTrackingSettings(bpy_struct):
    """Match moving settings"""

    clean_action = 'SELECT'
    """Cleanup action to execute
    * 'SELECT': Select, Select unclean tracks.
    * 'DELETE_TRACK': Delete Track, Delete unclean tracks.
    * 'DELETE_SEGMENTS': Delete Segments, Delete unclean segments of tracks.
    (type: enum in ['SELECT', 'DELETE_TRACK', 'DELETE_SEGMENTS'], default 'SELECT')
    
    :type: str
    """

    clean_error = 0.0
    """Effect on tracks which have a larger re-projection error
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    clean_frames = 0
    """Effect on tracks which are tracked less than the specified amount of frames
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    default_correlation_min = 0.0
    """Default minimum value of correlation between matched pattern and reference that is still treated as successful tracking
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    default_frames_limit = 0
    """Every tracking cycle, this number of frames are tracked
    (type: int in [0, 32767], default 0)
    
    :type: int
    """

    default_margin = 0
    """Default distance from image boundary at which marker stops tracking
    (type: int in [0, 300], default 0)
    
    :type: int
    """

    default_motion_model = 'Loc'
    """Default motion model to use for tracking
    * 'Perspective': Perspective, Search for markers that are perspectively deformed (homography) between frames.
    * 'Affine': Affine, Search for markers that are affine-deformed (t, r, k, and skew) between frames.
    * 'LocRotScale': LocRotScale, Search for markers that are translated, rotated, and scaled between frames.
    * 'LocScale': LocScale, Search for markers that are translated and scaled between frames.
    * 'LocRot': LocRot, Search for markers that are translated and rotated between frames.
    * 'Loc': Loc, Search for markers that are translated between frames.
    (type: enum in ['Perspective', 'Affine', 'LocRotScale', 'LocScale', 'LocRot', 'Loc'], default 'Loc')
    
    :type: str
    """

    default_pattern_match = 'KEYFRAME'
    """Track pattern from given frame when tracking marker to next frame
    * 'KEYFRAME': Keyframe, Track pattern from keyframe to next frame.
    * 'PREV_FRAME': Previous frame, Track pattern from current frame to next frame.
    (type: enum in ['KEYFRAME', 'PREV_FRAME'], default 'KEYFRAME')
    
    :type: str
    """

    default_pattern_size = 0
    """Size of pattern area for newly created tracks
    (type: int in [5, 1000], default 0)
    
    :type: int
    """

    default_search_size = 0
    """Size of search area for newly created tracks
    (type: int in [5, 1000], default 0)
    
    :type: int
    """

    default_weight = 0.0
    """Influence of newly created track on a final solution
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    distance = 1.0
    """Distance between two bundles used for scene scaling
    (type: float in [-inf, inf], default 1.0)
    
    :type: float
    """

    object_distance = 1.0
    """Distance between two bundles used for object scaling
    (type: float in [0.001, 10000], default 1.0)
    
    :type: float
    """

    refine_intrinsics = 'NONE'
    """Refine intrinsics during camera solving
    * 'NONE': Nothing, Do not refine camera intrinsics.
    * 'FOCAL_LENGTH': Focal Length, Refine focal length.
    * 'FOCAL_LENGTH_RADIAL_K1': Focal length, K1, Refine focal length and radial distortion K1.
    * 'FOCAL_LENGTH_RADIAL_K1_K2': Focal length, K1, K2, Refine focal length and radial distortion K1 and K2.
    * 'FOCAL_LENGTH_PRINCIPAL_POINT_RADIAL_K1_K2': Focal Length, Optical Center, K1, K2, Refine focal length, optical center and radial distortion K1 and K2.
    * 'FOCAL_LENGTH_PRINCIPAL_POINT': Focal Length, Optical Center, Refine focal length and optical center.
    * 'RADIAL_K1_K2': K1, K2, Refine radial distortion K1 and K2.
    (type: enum in ['NONE', 'FOCAL_LENGTH', 'FOCAL_LENGTH_RADIAL_K1', 'FOCAL_LENGTH_RADIAL_K1_K2', 'FOCAL_LENGTH_PRINCIPAL_POINT_RADIAL_K1_K2', 'FOCAL_LENGTH_PRINCIPAL_POINT', 'RADIAL_K1_K2'], default 'NONE')
    
    :type: str
    """

    show_default_expanded = False
    """Show default options expanded in the user interface
    (type: boolean, default False)
    
    :type: bool
    """

    show_extra_expanded = False
    """Show extra options expanded in the user interface
    (type: boolean, default False)
    
    :type: bool
    """

    speed = 'FASTEST'
    """Limit speed of tracking to make visual feedback easier (this does not affect the tracking quality)
    * 'FASTEST': Fastest, Track as fast as it's possible.
    * 'DOUBLE': Double, Track with double speed.
    * 'REALTIME': Realtime, Track with realtime speed.
    * 'HALF': Half, Track with half of realtime speed.
    * 'QUARTER': Quarter, Track with quarter of realtime speed.
    (type: enum in ['FASTEST', 'DOUBLE', 'REALTIME', 'HALF', 'QUARTER'], default 'FASTEST')
    
    :type: str
    """

    use_default_blue_channel = False
    """Use blue channel from footage for tracking
    (type: boolean, default False)
    
    :type: bool
    """

    use_default_brute = False
    """Use a brute-force translation-only initialization when tracking
    (type: boolean, default False)
    
    :type: bool
    """

    use_default_green_channel = False
    """Use green channel from footage for tracking
    (type: boolean, default False)
    
    :type: bool
    """

    use_default_mask = False
    """Use a grease pencil data-block as a mask to use only specified areas of pattern when tracking
    (type: boolean, default False)
    
    :type: bool
    """

    use_default_normalization = False
    """Normalize light intensities while tracking (slower)
    (type: boolean, default False)
    
    :type: bool
    """

    use_default_red_channel = False
    """Use red channel from footage for tracking
    (type: boolean, default False)
    
    :type: bool
    """

    use_keyframe_selection = False
    """Automatically select keyframes when solving camera/object motion
    (type: boolean, default False)
    
    :type: bool
    """

    use_tripod_solver = False
    """Use special solver to track a stable camera position, such as a tripod
    (type: boolean, default False)
    
    :type: bool
    """


class MovieTrackingStabilization(bpy_struct):
    """2D stabilization based on tracking markers"""

    active_rotation_track_index = 0
    """Index of active track in rotation stabilization tracks list
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    active_track_index = 0
    """Index of active track in translation stabilization tracks list
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    anchor_frame = 0
    """Reference point to anchor stabilization (other frames will be adjusted relative to this frame's position)
    (type: int in [0, 500000], default 0)
    
    :type: int
    """

    filter_type = 'NEAREST'
    """Interpolation to use for sub-pixel shifts and rotations due to stabilization
    * 'NEAREST': Nearest, No interpolation, use nearest neighbor pixel.
    * 'BILINEAR': Bilinear, Simple interpolation between adjacent pixels.
    * 'BICUBIC': Bicubic, High quality pixel interpolation.
    (type: enum in ['NEAREST', 'BILINEAR', 'BICUBIC'], default 'NEAREST')
    
    :type: str
    """

    influence_location = 0.0
    """Influence of stabilization algorithm on footage location
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    influence_rotation = 0.0
    """Influence of stabilization algorithm on footage rotation
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    influence_scale = 0.0
    """Influence of stabilization algorithm on footage scale
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    rotation_tracks = None
    """Collection of tracks used for 2D stabilization (translation)
    (type: bpy.types.bpy_prop_collection of bpy.types.MovieTrackingTrack, (readonly))
    
    :type: bpy_prop_collection
    """

    scale_max = 0.0
    """Limit the amount of automatic scaling
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    show_tracks_expanded = False
    """Show UI list of tracks participating in stabilization
    (type: boolean, default False)
    
    :type: bool
    """

    target_position = (0.0, 0.0)
    """Known relative offset of original shot, will be subtracted (e.g. for panning shot, can be animated)
    (type: float array of 2 items in [-inf, inf], default (0.0, 0.0))
    
    :type: mathutils.Vector
    """

    target_rotation = 0.0
    """Rotation present on original shot, will be compensated (e.g. for deliberate tilting)
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    target_scale = 0.0
    """Explicitly scale resulting frame to compensate zoom of original shot
    (type: float in [1.192e-07, inf], default 0.0)
    
    :type: float
    """

    tracks = None
    """Collection of tracks used for 2D stabilization (translation)
    (type: bpy.types.bpy_prop_collection of bpy.types.MovieTrackingTrack, (readonly))
    
    :type: bpy_prop_collection
    """

    use_2d_stabilization = False
    """Use 2D stabilization for footage
    (type: boolean, default False)
    
    :type: bool
    """

    use_autoscale = False
    """Automatically scale footage to cover unfilled areas when stabilizing
    (type: boolean, default False)
    
    :type: bool
    """

    use_stabilize_rotation = False
    """Stabilize detected rotation around center of frame
    (type: boolean, default False)
    
    :type: bool
    """

    use_stabilize_scale = False
    """Compensate any scale changes relative to center of rotation
    (type: boolean, default False)
    
    :type: bool
    """


class MovieTrackingTrack(bpy_struct):
    """Match-moving track data for tracking"""

    average_error = 0.0
    """Average error of re-projection
    (type: float in [-inf, inf], default 0.0, (readonly))
    
    :type: float
    """

    bundle = (0.0, 0.0, 0.0)
    """Position of bundle reconstructed from this track
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0), (readonly))
    
    :type: mathutils.Vector
    """

    color = (0.0, 0.0, 0.0)
    """Color of the track in the Movie Clip Editor and the 3D viewport after a solve
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    correlation_min = 0.0
    """Minimal value of correlation between matched pattern and reference that is still treated as successful tracking
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    frames_limit = 0
    """Every tracking cycle, this number of frames are tracked
    (type: int in [0, 32767], default 0)
    
    :type: int
    """

    grease_pencil = None
    """Grease pencil data for this track
    (type: bpy.types.GreasePencil)
    
    :type: GreasePencil
    """

    has_bundle = False
    """True if track has a valid bundle
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    hide = False
    """Track is hidden
    (type: boolean, default False)
    
    :type: bool
    """

    lock = False
    """Track is locked and all changes to it are disabled
    (type: boolean, default False)
    
    :type: bool
    """

    margin = 0
    """Distance from image boundary at which marker stops tracking
    (type: int in [0, 300], default 0)
    
    :type: int
    """

    markers = None
    """Collection of markers in track
    (type: bpy.types.MovieTrackingMarkers bpy.types.bpy_prop_collection of bpy.types.MovieTrackingMarker, (readonly))
    
    :type: MovieTrackingMarkers
    """

    motion_model = 'Loc'
    """Default motion model to use for tracking
    * 'Perspective': Perspective, Search for markers that are perspectively deformed (homography) between frames.
    * 'Affine': Affine, Search for markers that are affine-deformed (t, r, k, and skew) between frames.
    * 'LocRotScale': LocRotScale, Search for markers that are translated, rotated, and scaled between frames.
    * 'LocScale': LocScale, Search for markers that are translated and scaled between frames.
    * 'LocRot': LocRot, Search for markers that are translated and rotated between frames.
    * 'Loc': Loc, Search for markers that are translated between frames.
    (type: enum in ['Perspective', 'Affine', 'LocRotScale', 'LocScale', 'LocRot', 'Loc'], default 'Loc')
    
    :type: str
    """

    name = ""
    """Unique name of track
    (type: string, default "", (never None))
    
    :type: str
    """

    offset = (0.0, 0.0)
    """Offset of track from the parenting point
    (type: float array of 2 items in [-inf, inf], default (0.0, 0.0))
    
    :type: mathutils.Vector
    """

    pattern_match = 'KEYFRAME'
    """Track pattern from given frame when tracking marker to next frame
    * 'KEYFRAME': Keyframe, Track pattern from keyframe to next frame.
    * 'PREV_FRAME': Previous frame, Track pattern from current frame to next frame.
    (type: enum in ['KEYFRAME', 'PREV_FRAME'], default 'KEYFRAME')
    
    :type: str
    """

    select = False
    """Track is selected
    (type: boolean, default False)
    
    :type: bool
    """

    select_anchor = False
    """Track's anchor point is selected
    (type: boolean, default False)
    
    :type: bool
    """

    select_pattern = False
    """Track's pattern area is selected
    (type: boolean, default False)
    
    :type: bool
    """

    select_search = False
    """Track's search area is selected
    (type: boolean, default False)
    
    :type: bool
    """

    use_alpha_preview = False
    """Apply track's mask on displaying preview
    (type: boolean, default False)
    
    :type: bool
    """

    use_blue_channel = False
    """Use blue channel from footage for tracking
    (type: boolean, default False)
    
    :type: bool
    """

    use_brute = False
    """Use a brute-force translation only pre-track before refinement
    (type: boolean, default False)
    
    :type: bool
    """

    use_custom_color = False
    """Use custom color instead of theme-defined
    (type: boolean, default False)
    
    :type: bool
    """

    use_grayscale_preview = False
    """Display what the tracking algorithm sees in the preview
    (type: boolean, default False)
    
    :type: bool
    """

    use_green_channel = False
    """Use green channel from footage for tracking
    (type: boolean, default False)
    
    :type: bool
    """

    use_mask = False
    """Use a grease pencil data-block as a mask to use only specified areas of pattern when tracking
    (type: boolean, default False)
    
    :type: bool
    """

    use_normalization = False
    """Normalize light intensities while tracking. Slower
    (type: boolean, default False)
    
    :type: bool
    """

    use_red_channel = False
    """Use red channel from footage for tracking
    (type: boolean, default False)
    
    :type: bool
    """

    weight = 0.0
    """Influence of this track on a final solution
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    weight_stab = 0.0
    """Influence of this track on 2D stabilization
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """


class MovieTrackingTracks(bpy_struct):
    """Collection of movie tracking tracks"""

    active = None
    """Active track in this tracking data object
    (type: bpy.types.MovieTrackingTrack)
    
    :type: MovieTrackingTrack
    """

    def new(self, name="", frame=1):
        """Create new motion track in this movie clip
        
        :param name: Name of new track
            (type: str, (optional, never None))
        :type name: str
        :param frame: Frame, Frame number to add track on
            (type: int in [0, 500000], (optional))
        :type frame: int
        :return: Newly created track
        :param : (type: bpy.types.MovieTrackingTrack)
        :rtype: MovieTrackingTrack
        """


class NlaStrip(bpy_struct):
    """A container referencing an existing Action"""

    action = None
    """Action referenced by this strip
    (type: bpy.types.Action)
    
    :type: Action
    """

    action_frame_end = 0.0
    """Last frame from action to use
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    action_frame_start = 0.0
    """First frame from action to use
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    active = False
    """NLA Strip is active
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    blend_in = 0.0
    """Number of frames at start of strip to fade in influence
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    blend_out = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    blend_type = 'REPLACE'
    """Method used for combining strip's result with accumulated result
    * 'REPLACE': Replace, Result strip replaces the accumulated results by amount specified by influence.
    * 'ADD': Add, Weighted result of strip is added to the accumulated results.
    * 'SUBTRACT': Subtract, Weighted result of strip is removed from the accumulated results.
    * 'MULTIPLY': Multiply, Weighted result of strip is multiplied with the accumulated results.
    (type: enum in ['REPLACE', 'ADD', 'SUBTRACT', 'MULTIPLY'], default 'REPLACE')
    
    :type: str
    """

    extrapolation = 'HOLD'
    """Action to take for gaps past the strip extents
    * 'NOTHING': Nothing, Strip has no influence past its extents.
    * 'HOLD': Hold, Hold the first frame if no previous strips in track, and always hold last frame.
    * 'HOLD_FORWARD': Hold Forward, Only hold last frame.
    (type: enum in ['NOTHING', 'HOLD', 'HOLD_FORWARD'], default 'HOLD')
    
    :type: str
    """

    fcurves = None
    """F-Curves for controlling the strip's influence and timing
    (type: bpy.types.NlaStripFCurves bpy.types.bpy_prop_collection of bpy.types.FCurve, (readonly))
    
    :type: NlaStripFCurves
    """

    frame_end = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    frame_start = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    influence = 0.0
    """Amount the strip contributes to the current result
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    modifiers = None
    """Modifiers affecting all the F-Curves in the referenced Action
    (type: bpy.types.bpy_prop_collection of bpy.types.FModifier, (readonly))
    
    :type: bpy_prop_collection
    """

    mute = False
    """NLA Strip is not evaluated
    (type: boolean, default False)
    
    :type: bool
    """

    name = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    repeat = 0.0
    """Number of times to repeat the action range
    (type: float in [0.1, 1000], default 0.0)
    
    :type: float
    """

    scale = 0.0
    """Scaling factor for action
    (type: float in [0.0001, 1000], default 0.0)
    
    :type: float
    """

    select = False
    """NLA Strip is selected
    (type: boolean, default False)
    
    :type: bool
    """

    strip_time = 0.0
    """Frame of referenced Action to evaluate
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    strips = None
    """NLA Strips that this strip acts as a container for (if it is of type Meta)
    (type: bpy.types.bpy_prop_collection of bpy.types.NlaStrip, (readonly))
    
    :type: bpy_prop_collection
    """

    type = 'CLIP'
    """Type of NLA Strip
    * 'CLIP': Action Clip, NLA Strip references some Action.
    * 'TRANSITION': Transition, NLA Strip 'transitions' between adjacent strips.
    * 'META': Meta, NLA Strip acts as a container for adjacent strips.
    * 'SOUND': Sound Clip, NLA Strip representing a sound event for speakers.
    (type: enum in ['CLIP', 'TRANSITION', 'META', 'SOUND'], default 'CLIP', (readonly))
    
    :type: str
    """

    use_animated_influence = False
    """Influence setting is controlled by an F-Curve rather than automatically determined
    (type: boolean, default False)
    
    :type: bool
    """

    use_animated_time = False
    """Strip time is controlled by an F-Curve rather than automatically determined
    (type: boolean, default False)
    
    :type: bool
    """

    use_animated_time_cyclic = False
    """Cycle the animated time within the action start & end
    (type: boolean, default False)
    
    :type: bool
    """

    use_auto_blend = False
    """Number of frames for Blending In/Out is automatically determined from overlapping strips
    (type: boolean, default False)
    
    :type: bool
    """

    use_reverse = False
    """NLA Strip is played back in reverse order (only when timing is automatically determined)
    (type: boolean, default False)
    
    :type: bool
    """

    use_sync_length = False
    """Update range of frames referenced from action after tweaking strip and its keyframes
    (type: boolean, default False)
    
    :type: bool
    """


class NlaStripFCurves(bpy_struct):
    """Collection of NLA strip F-Curves"""

    def find(self, data_path, index=0):
        """Find an F-Curve. Note that this function performs a linear scan of all F-Curves in the NLA strip.
        
        :param data_path: Data Path, F-Curve data path
            (type: str, (never None))
        :type data_path: str
        :param index: Index, Array index
            (type: int in [0, inf], (optional))
        :type index: int
        :return: The found F-Curve, or None if it doesn't exist
        :param : (type: bpy.types.FCurve)
        :rtype: FCurve
        """


class NlaStrips(bpy_struct):
    """Collection of Nla Strips"""

    def new(self, name, start, action):
        """Add a new Action-Clip strip to the track
        
        :param name: Name for the NLA Strips
            (type: str, (never None))
        :type name: str
        :param start: Start Frame, Start frame for this strip
            (type: int in [-inf, inf])
        :type start: int
        :param action: Action to assign to this strip
            (type: bpy.types.Action, (never None))
        :type action: Action
        :return: New NLA Strip
        :param : (type: bpy.types.NlaStrip)
        :rtype: NlaStrip
        """

    def remove(self, strip):
        """Remove a NLA Strip
        
        :param strip: NLA Strip to remove
            (type: bpy.types.NlaStrip, (never None))
        :type strip: NlaStrip
        """


class NlaTrack(bpy_struct):
    """A animation layer containing Actions referenced as NLA strips"""

    active = False
    """NLA Track is active
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_solo = False
    """NLA Track is evaluated itself (i.e. active Action and all other NLA Tracks in the same AnimData block are disabled)
    (type: boolean, default False)
    
    :type: bool
    """

    lock = False
    """NLA Track is locked
    (type: boolean, default False)
    
    :type: bool
    """

    mute = False
    """NLA Track is not evaluated
    (type: boolean, default False)
    
    :type: bool
    """

    name = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    select = False
    """NLA Track is selected
    (type: boolean, default False)
    
    :type: bool
    """

    strips = None
    """NLA Strips on this NLA-track
    (type: bpy.types.NlaStrips bpy.types.bpy_prop_collection of bpy.types.NlaStrip, (readonly))
    
    :type: NlaStrips
    """


class NlaTracks(bpy_struct):
    """Collection of NLA Tracks"""

    active = None
    """Active Object constraint
    (type: bpy.types.NlaTrack)
    
    :type: NlaTrack
    """

    def new(self, prev=None):
        """Add a new NLA Track
        
        :param prev: NLA Track to add the new one after
            (type: bpy.types.NlaTrack, (optional))
        :type prev: NlaTrack
        :return: New NLA Track
        :param : (type: bpy.types.NlaTrack)
        :rtype: NlaTrack
        """

    def remove(self, track):
        """Remove a NLA Track
        
        :param track: NLA Track to remove
            (type: bpy.types.NlaTrack, (never None))
        :type track: NlaTrack
        """


class Node(bpy_struct):
    """Node in a node tree"""

    bl_description = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    bl_height_default = 0.0
    """(type: float in [0, inf], default 0.0)
    
    :type: float
    """

    bl_height_max = 0.0
    """(type: float in [0, inf], default 0.0)
    
    :type: float
    """

    bl_height_min = 0.0
    """(type: float in [0, inf], default 0.0)
    
    :type: float
    """

    bl_icon = 'NODE'
    """The node icon
    (type: enum in ['NONE', 'QUESTION', 'ERROR', 'CANCEL', 'TRIA_RIGHT', 'TRIA_DOWN', 'TRIA_LEFT', 'TRIA_UP', 'ARROW_LEFTRIGHT', 'PLUS', 'DISCLOSURE_TRI_DOWN', 'DISCLOSURE_TRI_RIGHT', 'RADIOBUT_OFF', 'RADIOBUT_ON', 'MENU_PANEL', 'BLENDER', 'GRIP', 'DOT', 'COLLAPSEMENU', 'X', 'GO_LEFT', 'PLUG', 'UI', 'NODE', 'NODE_SEL', 'FULLSCREEN', 'SPLITSCREEN', 'RIGHTARROW_THIN', 'BORDERMOVE', 'VIEWZOOM', 'ZOOMIN', 'ZOOMOUT', 'PANEL_CLOSE', 'COPY_ID', 'EYEDROPPER', 'LINK_AREA', 'AUTO', 'CHECKBOX_DEHLT', 'CHECKBOX_HLT', 'UNLOCKED', 'LOCKED', 'UNPINNED', 'PINNED', 'SCREEN_BACK', 'RIGHTARROW', 'DOWNARROW_HLT', 'DOTSUP', 'DOTSDOWN', 'LINK', 'INLINK', 'PLUGIN', 'HELP', 'GHOST_ENABLED', 'COLOR', 'LINKED', 'UNLINKED', 'HAND', 'ZOOM_ALL', 'ZOOM_SELECTED', 'ZOOM_PREVIOUS', 'ZOOM_IN', 'ZOOM_OUT', 'RENDER_REGION', 'BORDER_RECT', 'BORDER_LASSO', 'FREEZE', 'STYLUS_PRESSURE', 'GHOST_DISABLED', 'NEW', 'FILE_TICK', 'QUIT', 'URL', 'RECOVER_LAST', 'FULLSCREEN_ENTER', 'FULLSCREEN_EXIT', 'BLANK1', 'LAMP', 'MATERIAL', 'TEXTURE', 'ANIM', 'WORLD', 'SCENE', 'EDIT', 'GAME', 'RADIO', 'SCRIPT', 'PARTICLES', 'PHYSICS', 'SPEAKER', 'TEXTURE_SHADED', 'VIEW3D', 'IPO', 'OOPS', 'BUTS', 'FILESEL', 'IMAGE_COL', 'INFO', 'SEQUENCE', 'TEXT', 'IMASEL', 'SOUND', 'ACTION', 'NLA', 'SCRIPTWIN', 'TIME', 'NODETREE', 'LOGIC', 'CONSOLE', 'PREFERENCES', 'CLIP', 'ASSET_MANAGER', 'OBJECT_DATAMODE', 'EDITMODE_HLT', 'FACESEL_HLT', 'VPAINT_HLT', 'TPAINT_HLT', 'WPAINT_HLT', 'SCULPTMODE_HLT', 'POSE_HLT', 'PARTICLEMODE', 'LIGHTPAINT', 'SCENE_DATA', 'RENDERLAYERS', 'WORLD_DATA', 'OBJECT_DATA', 'MESH_DATA', 'CURVE_DATA', 'META_DATA', 'LATTICE_DATA', 'LAMP_DATA', 'MATERIAL_DATA', 'TEXTURE_DATA', 'ANIM_DATA', 'CAMERA_DATA', 'PARTICLE_DATA', 'LIBRARY_DATA_DIRECT', 'GROUP', 'ARMATURE_DATA', 'POSE_DATA', 'BONE_DATA', 'CONSTRAINT', 'SHAPEKEY_DATA', 'CONSTRAINT_BONE', 'CAMERA_STEREO', 'PACKAGE', 'UGLYPACKAGE', 'BRUSH_DATA', 'IMAGE_DATA', 'FILE', 'FCURVE', 'FONT_DATA', 'RENDER_RESULT', 'SURFACE_DATA', 'EMPTY_DATA', 'SETTINGS', 'RENDER_ANIMATION', 'RENDER_STILL', 'LIBRARY_DATA_BROKEN', 'BOIDS', 'STRANDS', 'LIBRARY_DATA_INDIRECT', 'GREASEPENCIL', 'LINE_DATA', 'GROUP_BONE', 'GROUP_VERTEX', 'GROUP_VCOL', 'GROUP_UVS', 'RNA', 'RNA_ADD', 'OUTLINER_OB_EMPTY', 'OUTLINER_OB_MESH', 'OUTLINER_OB_CURVE', 'OUTLINER_OB_LATTICE', 'OUTLINER_OB_META', 'OUTLINER_OB_LAMP', 'OUTLINER_OB_CAMERA', 'OUTLINER_OB_ARMATURE', 'OUTLINER_OB_FONT', 'OUTLINER_OB_SURFACE', 'OUTLINER_OB_SPEAKER', 'RESTRICT_COLOR_OFF', 'RESTRICT_COLOR_ON', 'RESTRICT_VIEW_OFF', 'RESTRICT_VIEW_ON', 'RESTRICT_SELECT_OFF', 'RESTRICT_SELECT_ON', 'RESTRICT_RENDER_OFF', 'RESTRICT_RENDER_ON', 'OUTLINER_DATA_EMPTY', 'OUTLINER_DATA_MESH', 'OUTLINER_DATA_CURVE', 'OUTLINER_DATA_LATTICE', 'OUTLINER_DATA_META', 'OUTLINER_DATA_LAMP', 'OUTLINER_DATA_CAMERA', 'OUTLINER_DATA_ARMATURE', 'OUTLINER_DATA_FONT', 'OUTLINER_DATA_SURFACE', 'OUTLINER_DATA_SPEAKER', 'OUTLINER_DATA_POSE', 'MESH_PLANE', 'MESH_CUBE', 'MESH_CIRCLE', 'MESH_UVSPHERE', 'MESH_ICOSPHERE', 'MESH_GRID', 'MESH_MONKEY', 'MESH_CYLINDER', 'MESH_TORUS', 'MESH_CONE', 'MESH_CAPSULE', 'LAMP_POINT', 'LAMP_SUN', 'LAMP_SPOT', 'LAMP_HEMI', 'LAMP_AREA', 'META_EMPTY', 'META_PLANE', 'META_CUBE', 'META_BALL', 'META_ELLIPSOID', 'META_CAPSULE', 'SURFACE_NCURVE', 'SURFACE_NCIRCLE', 'SURFACE_NSURFACE', 'SURFACE_NCYLINDER', 'SURFACE_NSPHERE', 'SURFACE_NTORUS', 'CURVE_BEZCURVE', 'CURVE_BEZCIRCLE', 'CURVE_NCURVE', 'CURVE_NCIRCLE', 'CURVE_PATH', 'COLOR_RED', 'COLOR_GREEN', 'COLOR_BLUE', 'TRIA_RIGHT_BAR', 'TRIA_DOWN_BAR', 'TRIA_LEFT_BAR', 'TRIA_UP_BAR', 'FORCE_FORCE', 'FORCE_WIND', 'FORCE_VORTEX', 'FORCE_MAGNETIC', 'FORCE_HARMONIC', 'FORCE_CHARGE', 'FORCE_LENNARDJONES', 'FORCE_TEXTURE', 'FORCE_CURVE', 'FORCE_BOID', 'FORCE_TURBULENCE', 'FORCE_DRAG', 'FORCE_SMOKEFLOW', 'NODE_INSERT_ON', 'NODE_INSERT_OFF', 'MODIFIER', 'MOD_WAVE', 'MOD_BUILD', 'MOD_DECIM', 'MOD_MIRROR', 'MOD_SOFT', 'MOD_SUBSURF', 'HOOK', 'MOD_PHYSICS', 'MOD_PARTICLES', 'MOD_BOOLEAN', 'MOD_EDGESPLIT', 'MOD_ARRAY', 'MOD_UVPROJECT', 'MOD_DISPLACE', 'MOD_CURVE', 'MOD_LATTICE', 'CONSTRAINT_DATA', 'MOD_ARMATURE', 'MOD_SHRINKWRAP', 'MOD_CAST', 'MOD_MESHDEFORM', 'MOD_BEVEL', 'MOD_SMOOTH', 'MOD_SIMPLEDEFORM', 'MOD_MASK', 'MOD_CLOTH', 'MOD_EXPLODE', 'MOD_FLUIDSIM', 'MOD_MULTIRES', 'MOD_SMOKE', 'MOD_SOLIDIFY', 'MOD_SCREW', 'MOD_VERTEX_WEIGHT', 'MOD_DYNAMICPAINT', 'MOD_REMESH', 'MOD_OCEAN', 'MOD_WARP', 'MOD_SKIN', 'MOD_TRIANGULATE', 'MOD_WIREFRAME', 'MOD_DATA_TRANSFER', 'MOD_NORMALEDIT', 'REC', 'PLAY', 'FF', 'REW', 'PAUSE', 'PREV_KEYFRAME', 'NEXT_KEYFRAME', 'PLAY_AUDIO', 'PLAY_REVERSE', 'PREVIEW_RANGE', 'ACTION_TWEAK', 'PMARKER_ACT', 'PMARKER_SEL', 'PMARKER', 'MARKER_HLT', 'MARKER', 'SPACE2', 'SPACE3', 'KEYINGSET', 'KEY_DEHLT', 'KEY_HLT', 'MUTE_IPO_OFF', 'MUTE_IPO_ON', 'VISIBLE_IPO_OFF', 'VISIBLE_IPO_ON', 'DRIVER', 'SOLO_OFF', 'SOLO_ON', 'FRAME_PREV', 'FRAME_NEXT', 'NLA_PUSHDOWN', 'IPO_CONSTANT', 'IPO_LINEAR', 'IPO_BEZIER', 'IPO_SINE', 'IPO_QUAD', 'IPO_CUBIC', 'IPO_QUART', 'IPO_QUINT', 'IPO_EXPO', 'IPO_CIRC', 'IPO_BOUNCE', 'IPO_ELASTIC', 'IPO_BACK', 'IPO_EASE_IN', 'IPO_EASE_OUT', 'IPO_EASE_IN_OUT', 'NORMALIZE_FCURVES', 'VERTEXSEL', 'EDGESEL', 'FACESEL', 'LOOPSEL', 'ROTATE', 'CURSOR', 'ROTATECOLLECTION', 'ROTATECENTER', 'ROTACTIVE', 'ALIGN', 'SMOOTHCURVE', 'SPHERECURVE', 'ROOTCURVE', 'SHARPCURVE', 'LINCURVE', 'NOCURVE', 'RNDCURVE', 'PROP_OFF', 'PROP_ON', 'PROP_CON', 'SCULPT_DYNTOPO', 'PARTICLE_POINT', 'PARTICLE_TIP', 'PARTICLE_PATH', 'MAN_TRANS', 'MAN_ROT', 'MAN_SCALE', 'MANIPUL', 'SNAP_OFF', 'SNAP_ON', 'SNAP_NORMAL', 'SNAP_GRID', 'SNAP_VERTEX', 'SNAP_EDGE', 'SNAP_FACE', 'SNAP_VOLUME', 'SNAP_INCREMENT', 'STICKY_UVS_LOC', 'STICKY_UVS_DISABLE', 'STICKY_UVS_VERT', 'CLIPUV_DEHLT', 'CLIPUV_HLT', 'SNAP_PEEL_OBJECT', 'GRID', 'PASTEDOWN', 'COPYDOWN', 'PASTEFLIPUP', 'PASTEFLIPDOWN', 'SNAP_SURFACE', 'AUTOMERGE_ON', 'AUTOMERGE_OFF', 'RETOPO', 'UV_VERTEXSEL', 'UV_EDGESEL', 'UV_FACESEL', 'UV_ISLANDSEL', 'UV_SYNC_SELECT', 'BBOX', 'WIRE', 'SOLID', 'SMOOTH', 'POTATO', 'ORTHO', 'LOCKVIEW_OFF', 'LOCKVIEW_ON', 'AXIS_SIDE', 'AXIS_FRONT', 'AXIS_TOP', 'NDOF_DOM', 'NDOF_TURN', 'NDOF_FLY', 'NDOF_TRANS', 'LAYER_USED', 'LAYER_ACTIVE', 'SORTALPHA', 'SORTBYEXT', 'SORTTIME', 'SORTSIZE', 'LONGDISPLAY', 'SHORTDISPLAY', 'GHOST', 'IMGDISPLAY', 'SAVE_AS', 'SAVE_COPY', 'BOOKMARKS', 'FONTPREVIEW', 'FILTER', 'NEWFOLDER', 'OPEN_RECENT', 'FILE_PARENT', 'FILE_REFRESH', 'FILE_FOLDER', 'FILE_BLANK', 'FILE_BLEND', 'FILE_IMAGE', 'FILE_MOVIE', 'FILE_SCRIPT', 'FILE_SOUND', 'FILE_FONT', 'FILE_TEXT', 'RECOVER_AUTO', 'SAVE_PREFS', 'LINK_BLEND', 'APPEND_BLEND', 'IMPORT', 'EXPORT', 'EXTERNAL_DATA', 'LOAD_FACTORY', 'LOOP_BACK', 'LOOP_FORWARDS', 'BACK', 'FORWARD', 'FILE_HIDDEN', 'FILE_BACKUP', 'DISK_DRIVE', 'MATPLANE', 'MATSPHERE', 'MATCUBE', 'MONKEY', 'HAIR', 'ALIASED', 'ANTIALIASED', 'MAT_SPHERE_SKY', 'WORDWRAP_OFF', 'WORDWRAP_ON', 'SYNTAX_OFF', 'SYNTAX_ON', 'LINENUMBERS_OFF', 'LINENUMBERS_ON', 'SCRIPTPLUGINS', 'SEQ_SEQUENCER', 'SEQ_PREVIEW', 'SEQ_LUMA_WAVEFORM', 'SEQ_CHROMA_SCOPE', 'SEQ_HISTOGRAM', 'SEQ_SPLITVIEW', 'IMAGE_RGB', 'IMAGE_RGB_ALPHA', 'IMAGE_ALPHA', 'IMAGE_ZDEPTH', 'IMAGEFILE', 'BRUSH_ADD', 'BRUSH_BLOB', 'BRUSH_BLUR', 'BRUSH_CLAY', 'BRUSH_CLAY_STRIPS', 'BRUSH_CLONE', 'BRUSH_CREASE', 'BRUSH_DARKEN', 'BRUSH_FILL', 'BRUSH_FLATTEN', 'BRUSH_GRAB', 'BRUSH_INFLATE', 'BRUSH_LAYER', 'BRUSH_LIGHTEN', 'BRUSH_MASK', 'BRUSH_MIX', 'BRUSH_MULTIPLY', 'BRUSH_NUDGE', 'BRUSH_PINCH', 'BRUSH_SCRAPE', 'BRUSH_SCULPT_DRAW', 'BRUSH_SMEAR', 'BRUSH_SMOOTH', 'BRUSH_SNAKE_HOOK', 'BRUSH_SOFTEN', 'BRUSH_SUBTRACT', 'BRUSH_TEXDRAW', 'BRUSH_TEXFILL', 'BRUSH_TEXMASK', 'BRUSH_THUMB', 'BRUSH_ROTATE', 'BRUSH_VERTEXDRAW', 'MATCAP_01', 'MATCAP_02', 'MATCAP_03', 'MATCAP_04', 'MATCAP_05', 'MATCAP_06', 'MATCAP_07', 'MATCAP_08', 'MATCAP_09', 'MATCAP_10', 'MATCAP_11', 'MATCAP_12', 'MATCAP_13', 'MATCAP_14', 'MATCAP_15', 'MATCAP_16', 'MATCAP_17', 'MATCAP_18', 'MATCAP_19', 'MATCAP_20', 'MATCAP_21', 'MATCAP_22', 'MATCAP_23', 'MATCAP_24'], default 'NODE')
    
    :type: str
    """

    bl_idname = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    bl_label = ""
    """The node label
    (type: string, default "", (never None))
    
    :type: str
    """

    bl_static_type = 'CUSTOM'
    """Node type (deprecated, use with care)
    * 'CUSTOM': Custom, Custom Node.
    (type: enum in ['CUSTOM'], default 'CUSTOM')
    
    :type: str
    """

    bl_width_default = 0.0
    """(type: float in [0, inf], default 0.0)
    
    :type: float
    """

    bl_width_max = 0.0
    """(type: float in [0, inf], default 0.0)
    
    :type: float
    """

    bl_width_min = 0.0
    """(type: float in [0, inf], default 0.0)
    
    :type: float
    """

    color = (0.0, 0.0, 0.0)
    """Custom color of the node body
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    dimensions = (0.0, 0.0)
    """Absolute bounding box dimensions of the node
    (type: float array of 2 items in [-inf, inf], default (0.0, 0.0), (readonly))
    
    :type: collections.Sequence[float]
    """

    height = 0.0
    """Height of the node
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    hide = False
    """(type: boolean, default False)
    
    :type: bool
    """

    inputs = None
    """(type: bpy.types.NodeInputs bpy.types.bpy_prop_collection of bpy.types.NodeSocket, (readonly))
    
    :type: NodeInputs
    """

    internal_links = None
    """Internal input-to-output connections for muting
    (type: bpy.types.bpy_prop_collection of bpy.types.NodeLink, (readonly))
    
    :type: bpy_prop_collection
    """

    label = ""
    """Optional custom node label
    (type: string, default "", (never None))
    
    :type: str
    """

    location = (0.0, 0.0)
    """(type: float array of 2 items in [-100000, 100000], default (0.0, 0.0))
    
    :type: mathutils.Vector
    """

    mute = False
    """(type: boolean, default False)
    
    :type: bool
    """

    name = ""
    """Unique node identifier
    (type: string, default "", (never None))
    
    :type: str
    """

    outputs = None
    """(type: bpy.types.NodeOutputs bpy.types.bpy_prop_collection of bpy.types.NodeSocket, (readonly))
    
    :type: NodeOutputs
    """

    parent = None
    """Parent this node is attached to
    (type: bpy.types.Node)
    
    :type: Node
    """

    select = False
    """Node selection state
    (type: boolean, default False)
    
    :type: bool
    """

    shading_compatibility = {'OLD_SHADING'}
    """
    * 'OLD_SHADING': Old Shading, Old shading system compatibility.
    * 'NEW_SHADING': New Shading, New shading system compatibility.
    (type: enum set in {'OLD_SHADING', 'NEW_SHADING'}, default {'OLD_SHADING'}, (readonly))
    
    :type: enum set in {'OLD_SHADING', 'NEW_SHADING'}
    """

    show_options = False
    """(type: boolean, default False)
    
    :type: bool
    """

    show_preview = False
    """(type: boolean, default False)
    
    :type: bool
    """

    show_texture = False
    """Draw node in viewport textured draw mode
    (type: boolean, default False)
    
    :type: bool
    """

    type = 'CUSTOM'
    """Node type (deprecated, use bl_static_type or bl_idname for the actual identifier string)
    * 'CUSTOM': Custom, Custom Node.
    (type: enum in ['CUSTOM'], default 'CUSTOM', (readonly))
    
    :type: str
    """

    use_custom_color = False
    """Use custom color for the node
    (type: boolean, default False)
    
    :type: bool
    """

    width = 0.0
    """Width of the node
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    width_hidden = 0.0
    """Width of the node in hidden state
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    def socket_value_update(self, context):
        """Update after property changes"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def poll(self, node_tree):
        """If non-null output is returned, the node type can be added to the tree
        
        :param node_tree: Node Tree
            (type: bpy.types.NodeTree)
        :type node_tree: NodeTree
        :rtype: bool
        """

    def poll_instance(self, node_tree):
        """If non-null output is returned, the node can be added to the tree
        
        :param node_tree: Node Tree
            (type: bpy.types.NodeTree)
        :type node_tree: NodeTree
        :rtype: bool
        """

    def update(self):
        """Update on editor changes"""

    def insert_link(self, link):
        """Handle creation of a link to or from the node
        
        :param link: Link, Node link that will be inserted
            (type: bpy.types.NodeLink, (never None))
        :type link: NodeLink
        """

    def init(self, context):
        """Initialize a new instance of this node"""

    def copy(self, node):
        """Initialize a new instance of this node from an existing node
        
        :param node: Node, Existing node to copy
            (type: bpy.types.Node, (never None))
        :type node: Node
        """

    def free(self):
        """Clean up node on removal"""

    def draw_buttons(self, context, layout):
        """Draw node buttons
        
        :param layout: Layout, Layout in the UI
            (type: bpy.types.UILayout, (never None))
        :type layout: UILayout
        """

    def draw_buttons_ext(self, context, layout):
        """Draw node buttons in the sidebar
        
        :param layout: Layout, Layout in the UI
            (type: bpy.types.UILayout, (never None))
        :type layout: UILayout
        """

    def draw_label(self):
        """Returns a dynamic label string
        
        :return: Label
        :param : (type: string, (never None))
        :rtype: str
        """


class NodeInputs(bpy_struct):
    """Collection of Node Sockets"""

    def new(self, type, name, identifier=""):
        """Add a socket to this node
        
        :param type: Type, Data type
            (type: str, (never None))
        :type type: str
        :param name: Name
            (type: str, (never None))
        :type name: str
        :param identifier: Identifier, Unique socket identifier
            (type: str, (optional, never None))
        :type identifier: str
        :return: New socket
        :param : (type: bpy.types.NodeSocket)
        :rtype: NodeSocket
        """

    def remove(self, socket):
        """Remove a socket from this node
        
        :param socket: The socket to remove
            (type: bpy.types.NodeSocket)
        :type socket: NodeSocket
        """

    def clear(self):
        """Remove all sockets from this node"""

    def move(self, from_index, to_index):
        """Move a socket to another position
        
        :param from_index: From Index, Index of the socket to move
            (type: int in [0, inf])
        :type from_index: int
        :param to_index: To Index, Target index for the socket
            (type: int in [0, inf])
        :type to_index: int
        """


class NodeInstanceHash(bpy_struct):
    """Hash table containing node instance data"""


class NodeInternalSocketTemplate(bpy_struct):
    """Type and default value of a node socket"""

    identifier = ""
    """Identifier of the socket
    (type: string, default "", (readonly, never None))
    
    :type: str
    """

    name = ""
    """Name of the socket
    (type: string, default "", (readonly, never None))
    
    :type: str
    """

    type = 'VALUE'
    """Data type of the socket
    (type: enum in ['CUSTOM', 'VALUE', 'INT', 'BOOLEAN', 'VECTOR', 'STRING', 'RGBA', 'SHADER'], default 'VALUE', (readonly))
    
    :type: str
    """


class NodeLink(bpy_struct):
    """Link is valid"""

    from_node = None
    """(type: bpy.types.Node, (readonly))
    
    :type: Node
    """

    from_socket = None
    """(type: bpy.types.NodeSocket, (readonly))
    
    :type: NodeSocket
    """

    is_hidden = False
    """Link is hidden due to invisible sockets
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_valid = False
    """(type: boolean, default False)
    
    :type: bool
    """

    to_node = None
    """(type: bpy.types.Node, (readonly))
    
    :type: Node
    """

    to_socket = None
    """(type: bpy.types.NodeSocket, (readonly))
    
    :type: NodeSocket
    """


class NodeLinks(bpy_struct):
    """Collection of Node Links"""

    def new(self, input, output, verify_limits=True):
        """Add a node link to this node tree
        
        :param input: The input socket
            (type: bpy.types.NodeSocket, (never None))
        :type input: NodeSocket
        :param output: The output socket
            (type: bpy.types.NodeSocket, (never None))
        :type output: NodeSocket
        :param verify_limits: Verify Limits, Remove existing links if connection limit is exceeded
            (type: boolean, (optional))
        :type verify_limits: bool
        :return: New node link
        :param : (type: bpy.types.NodeLink)
        :rtype: NodeLink
        """

    def remove(self, link):
        """remove a node link from the node tree
        
        :param link: The node link to remove
            (type: bpy.types.NodeLink, (never None))
        :type link: NodeLink
        """

    def clear(self):
        """remove all node links from the node tree"""


class NodeOutputFileSlotFile(bpy_struct):
    """Single layer file slot of the file output node"""

    format = None
    """(type: bpy.types.ImageFormatSettings, (readonly))
    
    :type: ImageFormatSettings
    """

    path = ""
    """Subpath used for this slot
    (type: string, default "", (never None))
    
    :type: str
    """

    use_node_format = False
    """(type: boolean, default False)
    
    :type: bool
    """


class NodeOutputFileSlotLayer(bpy_struct):
    """Multilayer slot of the file output node"""

    name = ""
    """OpenEXR layer name used for this slot
    (type: string, default "", (never None))
    
    :type: str
    """


class NodeOutputs(bpy_struct):
    """Collection of Node Sockets"""

    def new(self, type, name, identifier=""):
        """Add a socket to this node
        
        :param type: Type, Data type
            (type: str, (never None))
        :type type: str
        :param name: Name
            (type: str, (never None))
        :type name: str
        :param identifier: Identifier, Unique socket identifier
            (type: str, (optional, never None))
        :type identifier: str
        :return: New socket
        :param : (type: bpy.types.NodeSocket)
        :rtype: NodeSocket
        """

    def remove(self, socket):
        """Remove a socket from this node
        
        :param socket: The socket to remove
            (type: bpy.types.NodeSocket)
        :type socket: NodeSocket
        """

    def clear(self):
        """Remove all sockets from this node"""

    def move(self, from_index, to_index):
        """Move a socket to another position
        
        :param from_index: From Index, Index of the socket to move
            (type: int in [0, inf])
        :type from_index: int
        :param to_index: To Index, Target index for the socket
            (type: int in [0, inf])
        :type to_index: int
        """


class NodeSocket(bpy_struct):
    """Input or output socket of a node"""

    bl_idname = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    enabled = False
    """Enable the socket
    (type: boolean, default False)
    
    :type: bool
    """

    hide = False
    """Hide the socket
    (type: boolean, default False)
    
    :type: bool
    """

    hide_value = False
    """Hide the socket input value
    (type: boolean, default False)
    
    :type: bool
    """

    identifier = ""
    """Unique identifier for mapping sockets
    (type: string, default "", (readonly, never None))
    
    :type: str
    """

    is_linked = False
    """True if the socket is connected
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_output = False
    """True if the socket is an output, otherwise input
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    link_limit = 0
    """Max number of links allowed for this socket
    (type: int in [1, 4095], default 0)
    
    :type: int
    """

    name = ""
    """Socket name
    (type: string, default "", (never None))
    
    :type: str
    """

    node = None
    """Node owning this socket
    (type: bpy.types.Node, (readonly))
    
    :type: Node
    """

    show_expanded = False
    """Socket links are expanded in the user interface
    (type: boolean, default False)
    
    :type: bool
    """

    type = 'VALUE'
    """Data type
    (type: enum in ['CUSTOM', 'VALUE', 'INT', 'BOOLEAN', 'VECTOR', 'STRING', 'RGBA', 'SHADER'], default 'VALUE')
    
    :type: str
    """

    links = None
    """List of node links from or to this socket
                                (readonly)
    """

    def draw(self, context, layout, node, text):
        """Draw socket
        
        :param layout: Layout, Layout in the UI
            (type: bpy.types.UILayout, (never None))
        :type layout: UILayout
        :param node: Node, Node the socket belongs to
            (type: bpy.types.Node, (never None))
        :type node: Node
        :param text: Text, Text label to draw alongside properties
            (type: str, (never None))
        :type text: str
        """

    def draw_color(self, context, node):
        """Color of the socket icon
        
        :param node: Node, Node the socket belongs to
            (type: bpy.types.Node, (never None))
        :type node: Node
        :return: Color
        :param : (type: float array of 4 items in [0, 1])
        :rtype: collections.Sequence[float]
        """


class NodeSocketInterface(bpy_struct):
    """Parameters to define node sockets"""

    bl_socket_idname = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    identifier = ""
    """Unique identifier for mapping sockets
    (type: string, default "", (readonly, never None))
    
    :type: str
    """

    is_output = False
    """True if the socket is an output, otherwise input
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    name = ""
    """Socket name
    (type: string, default "", (never None))
    
    :type: str
    """

    def draw(self, context, layout):
        """Draw template settings
        
        :param layout: Layout, Layout in the UI
            (type: bpy.types.UILayout, (never None))
        :type layout: UILayout
        """

    def draw_color(self, context):
        """Color of the socket icon
        
        :return: Color
        :param : (type: float array of 4 items in [0, 1])
        :rtype: collections.Sequence[float]
        """

    def register_properties(self, data_rna_type):
        """Define RNA properties of a socket
        
        :param data_rna_type: Data RNA Type, RNA type for special socket properties
            (type: bpy.types.Struct)
        :type data_rna_type: Struct
        """

    def init_socket(self, node, socket, data_path):
        """Initialize a node socket instance
        
        :param node: Node, Node of the socket to initialize
            (type: bpy.types.Node, (never None))
        :type node: Node
        :param socket: Socket, Socket to initialize
            (type: bpy.types.NodeSocket, (never None))
        :type socket: NodeSocket
        :param data_path: Data Path, Path to specialized socket data
            (type: str, (never None))
        :type data_path: str
        """

    def from_socket(self, node, socket):
        """Setup template parameters from an existing socket
        
        :param node: Node, Node of the original socket
            (type: bpy.types.Node, (never None))
        :type node: Node
        :param socket: Socket, Original socket
            (type: bpy.types.NodeSocket, (never None))
        :type socket: NodeSocket
        """


class NodeTreeInputs(bpy_struct):
    """Collection of Node Tree Sockets"""

    def new(self, type, name):
        """Add a socket to this node tree
        
        :param type: Type, Data type
            (type: str, (never None))
        :type type: str
        :param name: Name
            (type: str, (never None))
        :type name: str
        :return: New socket
        :param : (type: bpy.types.NodeSocketInterface)
        :rtype: NodeSocketInterface
        """

    def remove(self, socket):
        """Remove a socket from this node tree
        
        :param socket: The socket to remove
            (type: bpy.types.NodeSocketInterface)
        :type socket: NodeSocketInterface
        """

    def clear(self):
        """Remove all sockets from this node tree"""

    def move(self, from_index, to_index):
        """Move a socket to another position
        
        :param from_index: From Index, Index of the socket to move
            (type: int in [0, inf])
        :type from_index: int
        :param to_index: To Index, Target index for the socket
            (type: int in [0, inf])
        :type to_index: int
        """


class NodeTreeOutputs(bpy_struct):
    """Collection of Node Tree Sockets"""

    def new(self, type, name):
        """Add a socket to this node tree
        
        :param type: Type, Data type
            (type: str, (never None))
        :type type: str
        :param name: Name
            (type: str, (never None))
        :type name: str
        :return: New socket
        :param : (type: bpy.types.NodeSocketInterface)
        :rtype: NodeSocketInterface
        """

    def remove(self, socket):
        """Remove a socket from this node tree
        
        :param socket: The socket to remove
            (type: bpy.types.NodeSocketInterface)
        :type socket: NodeSocketInterface
        """

    def clear(self):
        """Remove all sockets from this node tree"""

    def move(self, from_index, to_index):
        """Move a socket to another position
        
        :param from_index: From Index, Index of the socket to move
            (type: int in [0, inf])
        :type from_index: int
        :param to_index: To Index, Target index for the socket
            (type: int in [0, inf])
        :type to_index: int
        """


class NodeTreePath(bpy_struct):
    """Element of the node space tree path"""

    node_tree = None
    """Base node tree from context
    (type: bpy.types.NodeTree, (readonly))
    
    :type: NodeTree
    """


class Nodes(bpy_struct):
    """Collection of Nodes"""

    active = None
    """Active node in this tree
    (type: bpy.types.Node)
    
    :type: Node
    """

    def new(self, type):
        """Add a node to this node tree
        
        :param type: Type, Type of node to add (Warning: should be same as node.bl_idname, not node.type!)
            (type: str, (never None))
        :type type: str
        :return: New node
        :param : (type: bpy.types.Node)
        :rtype: Node
        """

    def remove(self, node):
        """Remove a node from this node tree
        
        :param node: The node to remove
            (type: bpy.types.Node, (never None))
        :type node: Node
        """

    def clear(self):
        """Remove all nodes from this node tree"""


class ObjectBase(bpy_struct):
    """An object instance in a scene"""

    layers = (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
    """Layers the object base is on
    (type: boolean array of 20 items, default (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False))
    
    :type: collections.Sequence[bool]
    """

    layers_local_view = (False, False, False, False, False, False, False, False)
    """3D local view layers the object base is on
    (type: boolean array of 8 items, default (False, False, False, False, False, False, False, False), (readonly))
    
    :type: collections.Sequence[bool]
    """

    object = None
    """Object this base links to
    (type: bpy.types.Object, (readonly))
    
    :type: Object
    """

    select = False
    """Object base selection state
    (type: boolean, default False)
    
    :type: bool
    """

    def layers_from_view(self, view):
        """Sets the object layers from a 3D View (use when adding an object in local view)"""


class ObjectConstraints(bpy_struct):
    """Collection of object constraints"""

    active = None
    """Active Object constraint
    (type: bpy.types.Constraint)
    
    :type: Constraint
    """

    def new(self, type):
        """Add a new constraint to this object
        
        :param type: Constraint type to add
            * 'CAMERA_SOLVER': Camera Solver.
            * 'FOLLOW_TRACK': Follow Track.
            * 'OBJECT_SOLVER': Object Solver.
            * 'COPY_LOCATION': Copy Location, Copy the location of a target (with an optional offset), so that they move together.
            * 'COPY_ROTATION': Copy Rotation, Copy the rotation of a target (with an optional offset), so that they rotate together.
            * 'COPY_SCALE': Copy Scale, Copy the scale factors of a target (with an optional offset), so that they are scaled by the same amount.
            * 'COPY_TRANSFORMS': Copy Transforms, Copy all the transformations of a target, so that they move together.
            * 'LIMIT_DISTANCE': Limit Distance, Restrict movements to within a certain distance of a target (at the time of constraint evaluation only).
            * 'LIMIT_LOCATION': Limit Location, Restrict movement along each axis within given ranges.
            * 'LIMIT_ROTATION': Limit Rotation, Restrict rotation along each axis within given ranges.
            * 'LIMIT_SCALE': Limit Scale, Restrict scaling along each axis with given ranges.
            * 'MAINTAIN_VOLUME': Maintain Volume, Compensate for scaling one axis by applying suitable scaling to the other two axes.
            * 'TRANSFORM': Transformation, Use one transform property from target to control another (or same) property on owner.
            * 'TRANSFORM_CACHE': Transform Cache, Look up the transformation matrix from an external file.
            * 'CLAMP_TO': Clamp To, Restrict movements to lie along a curve by remapping location along curve's longest axis.
            * 'DAMPED_TRACK': Damped Track, Point towards a target by performing the smallest rotation necessary.
            * 'IK': Inverse Kinematics, Control a chain of bones by specifying the endpoint target (Bones only).
            * 'LOCKED_TRACK': Locked Track, Rotate around the specified ('locked') axis to point towards a target.
            * 'SPLINE_IK': Spline IK, Align chain of bones along a curve (Bones only).
            * 'STRETCH_TO': Stretch To, Stretch along Y-Axis to point towards a target.
            * 'TRACK_TO': Track To, Legacy tracking constraint prone to twisting artifacts.
            * 'ACTION': Action, Use transform property of target to look up pose for owner from an Action.
            * 'CHILD_OF': Child Of, Make target the 'detachable' parent of owner.
            * 'FLOOR': Floor, Use position (and optionally rotation) of target to define a 'wall' or 'floor' that the owner can not cross.
            * 'FOLLOW_PATH': Follow Path, Use to animate an object/bone following a path.
            * 'PIVOT': Pivot, Change pivot point for transforms (buggy).
            * 'RIGID_BODY_JOINT': Rigid Body Joint, Use to define a Rigid Body Constraint (for Game Engine use only).
            * 'SCRIPT': Script, Custom constraint(s) written in Python (Not yet implemented).
            * 'SHRINKWRAP': Shrinkwrap, Restrict movements to surface of target mesh.
            (type: enum in ['CAMERA_SOLVER', 'FOLLOW_TRACK', 'OBJECT_SOLVER', 'COPY_LOCATION', 'COPY_ROTATION', 'COPY_SCALE', 'COPY_TRANSFORMS', 'LIMIT_DISTANCE', 'LIMIT_LOCATION', 'LIMIT_ROTATION', 'LIMIT_SCALE', 'MAINTAIN_VOLUME', 'TRANSFORM', 'TRANSFORM_CACHE', 'CLAMP_TO', 'DAMPED_TRACK', 'IK', 'LOCKED_TRACK', 'SPLINE_IK', 'STRETCH_TO', 'TRACK_TO', 'ACTION', 'CHILD_OF', 'FLOOR', 'FOLLOW_PATH', 'PIVOT', 'RIGID_BODY_JOINT', 'SCRIPT', 'SHRINKWRAP'])
        :type type: str
        :return: New constraint
        :param : (type: bpy.types.Constraint)
        :rtype: Constraint
        """

    def remove(self, constraint):
        """Remove a constraint from this object
        
        :param constraint: Removed constraint
            (type: bpy.types.Constraint, (never None))
        :type constraint: Constraint
        """

    def clear(self):
        """Remove all constraint from this object"""


class ObjectModifiers(bpy_struct):
    """Collection of object modifiers"""

    def new(self, name, type):
        """Add a new modifier
        
        :param name: New name for the modifier
            (type: str, (never None))
        :type name: str
        :param type: Modifier type to add
            * 'DATA_TRANSFER': Data Transfer.
            * 'MESH_CACHE': Mesh Cache.
            * 'MESH_SEQUENCE_CACHE': Mesh Sequence Cache.
            * 'NORMAL_EDIT': Normal Edit.
            * 'UV_PROJECT': UV Project.
            * 'UV_WARP': UV Warp.
            * 'VERTEX_WEIGHT_EDIT': Vertex Weight Edit.
            * 'VERTEX_WEIGHT_MIX': Vertex Weight Mix.
            * 'VERTEX_WEIGHT_PROXIMITY': Vertex Weight Proximity.
            * 'ARRAY': Array.
            * 'BEVEL': Bevel.
            * 'BOOLEAN': Boolean.
            * 'BUILD': Build.
            * 'DECIMATE': Decimate.
            * 'EDGE_SPLIT': Edge Split.
            * 'MASK': Mask.
            * 'MIRROR': Mirror.
            * 'MULTIRES': Multiresolution.
            * 'REMESH': Remesh.
            * 'SCREW': Screw.
            * 'SKIN': Skin.
            * 'SOLIDIFY': Solidify.
            * 'SUBSURF': Subdivision Surface.
            * 'TRIANGULATE': Triangulate.
            * 'WIREFRAME': Wireframe, Generate a wireframe on the edges of a mesh.
            * 'ARMATURE': Armature.
            * 'CAST': Cast.
            * 'CORRECTIVE_SMOOTH': Corrective Smooth.
            * 'CURVE': Curve.
            * 'DISPLACE': Displace.
            * 'HOOK': Hook.
            * 'LAPLACIANSMOOTH': Laplacian Smooth.
            * 'LAPLACIANDEFORM': Laplacian Deform.
            * 'LATTICE': Lattice.
            * 'MESH_DEFORM': Mesh Deform.
            * 'SHRINKWRAP': Shrinkwrap.
            * 'SIMPLE_DEFORM': Simple Deform.
            * 'SMOOTH': Smooth.
            * 'SURFACE_DEFORM': Surface Deform.
            * 'WARP': Warp.
            * 'WAVE': Wave.
            * 'CLOTH': Cloth.
            * 'COLLISION': Collision.
            * 'DYNAMIC_PAINT': Dynamic Paint.
            * 'EXPLODE': Explode.
            * 'FLUID_SIMULATION': Fluid Simulation.
            * 'OCEAN': Ocean.
            * 'PARTICLE_INSTANCE': Particle Instance.
            * 'PARTICLE_SYSTEM': Particle System.
            * 'SMOKE': Smoke.
            * 'SOFT_BODY': Soft Body.
            * 'SURFACE': Surface.
            (type: enum in ['DATA_TRANSFER', 'MESH_CACHE', 'MESH_SEQUENCE_CACHE', 'NORMAL_EDIT', 'UV_PROJECT', 'UV_WARP', 'VERTEX_WEIGHT_EDIT', 'VERTEX_WEIGHT_MIX', 'VERTEX_WEIGHT_PROXIMITY', 'ARRAY', 'BEVEL', 'BOOLEAN', 'BUILD', 'DECIMATE', 'EDGE_SPLIT', 'MASK', 'MIRROR', 'MULTIRES', 'REMESH', 'SCREW', 'SKIN', 'SOLIDIFY', 'SUBSURF', 'TRIANGULATE', 'WIREFRAME', 'ARMATURE', 'CAST', 'CORRECTIVE_SMOOTH', 'CURVE', 'DISPLACE', 'HOOK', 'LAPLACIANSMOOTH', 'LAPLACIANDEFORM', 'LATTICE', 'MESH_DEFORM', 'SHRINKWRAP', 'SIMPLE_DEFORM', 'SMOOTH', 'SURFACE_DEFORM', 'WARP', 'WAVE', 'CLOTH', 'COLLISION', 'DYNAMIC_PAINT', 'EXPLODE', 'FLUID_SIMULATION', 'OCEAN', 'PARTICLE_INSTANCE', 'PARTICLE_SYSTEM', 'SMOKE', 'SOFT_BODY', 'SURFACE'])
        :type type: str
        :return: Newly created modifier
        :param : (type: bpy.types.Modifier)
        :rtype: Modifier
        """

    def remove(self, modifier):
        """Remove an existing modifier from the object
        
        :param modifier: Modifier to remove
            (type: bpy.types.Modifier, (never None))
        :type modifier: Modifier
        """

    def clear(self):
        """Remove all modifiers from the object"""


class OceanTexData(bpy_struct):
    """Ocean Texture settings"""

    ocean_object = None
    """Object containing the ocean modifier
    (type: bpy.types.Object)
    
    :type: Object
    """

    output = 'DISPLACEMENT'
    """The data that is output by the texture
    * 'DISPLACEMENT': Displacement, Output XYZ displacement in RGB channels.
    * 'FOAM': Foam, Output Foam (wave overlap) amount in single channel.
    * 'JPLUS': Eigenvalues, Positive Eigenvalues.
    * 'EMINUS': Eigenvectors (-), Negative Eigenvectors.
    * 'EPLUS': Eigenvectors (+), Positive Eigenvectors.
    (type: enum in ['DISPLACEMENT', 'FOAM', 'JPLUS', 'EMINUS', 'EPLUS'], default 'DISPLACEMENT')
    
    :type: str
    """


class Operator(bpy_struct):
    """Storage of an operator being executed, or registered after execution"""

    bl_description = ""
    """(type: string, default "")
    
    :type: str
    """

    bl_idname = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    bl_label = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    bl_options = {'REGISTER'}
    """Options for this operator type
    * 'REGISTER': Register, Display in the info window and support the redo toolbar panel.
    * 'UNDO': Undo, Push an undo event (needed for operator redo).
    * 'UNDO_GROUPED': Grouped Undo, Push a single undo event for repetead instances of this operator.
    * 'BLOCKING': Blocking, Block anything else from using the cursor.
    * 'MACRO': Macro, Use to check if an operator is a macro.
    * 'GRAB_CURSOR': Grab Pointer, Use so the operator grabs the mouse focus, enables wrapping when continuous grab is enabled.
    * 'PRESET': Preset, Display a preset button with the operators settings.
    * 'INTERNAL': Internal, Removes the operator from search results.
    (type: enum set in {'REGISTER', 'UNDO', 'UNDO_GROUPED', 'BLOCKING', 'MACRO', 'GRAB_CURSOR', 'PRESET', 'INTERNAL'}, default {'REGISTER'})
    
    :type: enum set in {'REGISTER', 'UNDO', 'UNDO_GROUPED', 'BLOCKING', 'MACRO', 'GRAB_CURSOR', 'PRESET', 'INTERNAL'}
    """

    bl_translation_context = "Operator"
    """(type: string, default "Operator")
    
    :type: str
    """

    bl_undo_group = ""
    """(type: string, default "")
    
    :type: str
    """

    has_reports = False
    """Operator has a set of reports (warnings and errors) from last execution
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    layout = None
    """(type: bpy.types.UILayout, (readonly))
    
    :type: UILayout
    """

    macros = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.Macro, (readonly))
    
    :type: bpy_prop_collection
    """

    name = ""
    """(type: string, default "", (readonly, never None))
    
    :type: str
    """

    options = None
    """Runtime options
    (type: bpy.types.OperatorOptions, (readonly, never None))
    
    :type: OperatorOptions
    """

    properties = None
    """(type: bpy.types.OperatorProperties, (readonly, never None))
    
    :type: OperatorProperties
    """

    bl_property = None
    """The name of a property to use as this operators primary property.
                                    Currently this is only used to select the default property when
                                    expanding an operator into a menu.
                                    :type: string
    """

    def report(self, type, message):
        """report
        
        :param type: Type
        :type type: enum set in {'DEBUG', 'INFO', 'OPERATOR', 'PROPERTY', 'WARNING', 'ERROR', 'ERROR_INVALID_INPUT', 'ERROR_INVALID_CONTEXT', 'ERROR_OUT_OF_MEMORY'}
        :param message: Report Message
            (type: str, (never None))
        :type message: str
        """

    def is_repeat(self):
        """is_repeat
        
        :return: result
        :rtype: bool
        """

    def poll(self, context):
        """Test if the operator can be called or not
        
        :rtype: bool
        """

    def execute(self, context):
        """Execute the operator
        
        :return: result
            * 'RUNNING_MODAL': Running Modal, Keep the operator running with blender.
            * 'CANCELLED': Cancelled, When no action has been taken, operator exits.
            * 'FINISHED': Finished, When the operator is complete, operator exits.
            * 'PASS_THROUGH': Pass Through, Do nothing and pass the event on.
            * 'INTERFACE': Interface, Handled but not executed (popup menus).
        :rtype: enum set in {'RUNNING_MODAL', 'CANCELLED', 'FINISHED', 'PASS_THROUGH', 'INTERFACE'}
        """

    def check(self, context):
        """Check the operator settings, return True to signal a change to redraw
        
        :return: result
        :rtype: bool
        """

    def invoke(self, context, event):
        """Invoke the operator
        
        :return: result
            * 'RUNNING_MODAL': Running Modal, Keep the operator running with blender.
            * 'CANCELLED': Cancelled, When no action has been taken, operator exits.
            * 'FINISHED': Finished, When the operator is complete, operator exits.
            * 'PASS_THROUGH': Pass Through, Do nothing and pass the event on.
            * 'INTERFACE': Interface, Handled but not executed (popup menus).
        :rtype: enum set in {'RUNNING_MODAL', 'CANCELLED', 'FINISHED', 'PASS_THROUGH', 'INTERFACE'}
        """

    def modal(self, context, event):
        """Modal operator function
        
        :return: result
            * 'RUNNING_MODAL': Running Modal, Keep the operator running with blender.
            * 'CANCELLED': Cancelled, When no action has been taken, operator exits.
            * 'FINISHED': Finished, When the operator is complete, operator exits.
            * 'PASS_THROUGH': Pass Through, Do nothing and pass the event on.
            * 'INTERFACE': Interface, Handled but not executed (popup menus).
        :rtype: enum set in {'RUNNING_MODAL', 'CANCELLED', 'FINISHED', 'PASS_THROUGH', 'INTERFACE'}
        """

    def draw(self, context):
        """Draw function for the operator"""

    def cancel(self, context):
        """Called when the operator is canceled"""

    def as_keywords(self, ignore=()):
        """Return a copy of the properties as a dictionary"""


class OperatorMacro(bpy_struct):
    """Storage of a sub operator in a macro after it has been added"""

    properties = None
    """(type: bpy.types.OperatorProperties, (readonly, never None))
    
    :type: OperatorProperties
    """


class OperatorOptions(bpy_struct):
    """Runtime options"""

    is_grab_cursor = False
    """True when the cursor is grabbed
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_invoke = False
    """True when invoked (even if only the execute callbacks available)
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_cursor_region = False
    """Enable to use the region under the cursor for modal execution
    (type: boolean, default False)
    
    :type: bool
    """


class OperatorProperties(bpy_struct):
    """Input properties of an Operator"""


class PackedFile(bpy_struct):
    """External file packed into the .blend file"""

    data = ""
    """Raw data (bytes, exact content of the embedded file)
    (type: string, default "", (readonly, never None))
    
    :type: str
    """

    size = 0
    """Size of packed file in bytes
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """


class Paint(bpy_struct):
    """"""

    brush = None
    """Active Brush
    (type: bpy.types.Brush)
    
    :type: Brush
    """

    cavity_curve = None
    """Editable cavity curve
    (type: bpy.types.CurveMapping, (readonly, never None))
    
    :type: CurveMapping
    """

    input_samples = 0
    """Average multiple input samples together to smooth the brush stroke
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    palette = None
    """Active Palette
    (type: bpy.types.Palette)
    
    :type: Palette
    """

    show_brush = False
    """(type: boolean, default False)
    
    :type: bool
    """

    show_brush_on_surface = False
    """(type: boolean, default False)
    
    :type: bool
    """

    show_low_resolution = False
    """For multires, show low resolution while navigating the view
    (type: boolean, default False)
    
    :type: bool
    """

    tile_offset = (0.0, 0.0, 0.0)
    """Stride at which tiled strokes are copied
    (type: float array of 3 items in [0.01, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    tile_x = False
    """Tile along X axis
    (type: boolean, default False)
    
    :type: bool
    """

    tile_y = False
    """Tile along Y axis
    (type: boolean, default False)
    
    :type: bool
    """

    tile_z = False
    """Tile along Z axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_cavity = False
    """Mask painting according to mesh geometry cavity
    (type: boolean, default False)
    
    :type: bool
    """

    use_symmetry_feather = False
    """Reduce the strength of the brush where it overlaps symmetrical daubs
    (type: boolean, default False)
    
    :type: bool
    """

    use_symmetry_x = False
    """Mirror brush across the X axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_symmetry_y = False
    """Mirror brush across the Y axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_symmetry_z = False
    """Mirror brush across the Z axis
    (type: boolean, default False)
    
    :type: bool
    """


class PaletteColor(bpy_struct):
    """"""

    color = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    strength = 0.0
    """(type: float in [0, 1], default 0.0)
    
    :type: float
    """

    weight = 0.0
    """(type: float in [0, 1], default 0.0)
    
    :type: float
    """


class PaletteColors(bpy_struct):
    """Collection of palette colors"""

    active = None
    """(type: bpy.types.PaletteColor)
    
    :type: PaletteColor
    """

    def new(self):
        """Add a new color to the palette
        
        :return: The newly created color
        :param : (type: bpy.types.PaletteColor)
        :rtype: PaletteColor
        """

    def remove(self, color):
        """Remove a color from the palette
        
        :param color: The color to remove
            (type: bpy.types.PaletteColor, (never None))
        :type color: PaletteColor
        """

    def clear(self):
        """Remove all colors from the palette"""


class Panel(bpy_struct):
    """Panel containing UI elements"""

    bl_category = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    bl_context = ""
    """The context in which the panel belongs to. (TODO: explain the possible combinations bl_context/bl_region_type/bl_space_type)
    (type: string, default "", (never None))
    
    :type: str
    """

    bl_idname = ""
    """If this is set, the panel gets a custom ID, otherwise it takes the name of the class used to define the panel. For example, if the class name is "OBJECT_PT_hello", and bl_idname is not set by the script, then bl_idname = "OBJECT_PT_hello"
    (type: string, default "", (never None))
    
    :type: str
    """

    bl_label = ""
    """The panel label, shows up in the panel header at the right of the triangle used to collapse the panel
    (type: string, default "", (never None))
    
    :type: str
    """

    bl_options = {'DEFAULT_CLOSED'}
    """Options for this panel type
    * 'DEFAULT_CLOSED': Default Closed, Defines if the panel has to be open or collapsed at the time of its creation.
    * 'HIDE_HEADER': Hide Header, If set to False, the panel shows a header, which contains a clickable arrow to collapse the panel and the label (see bl_label).
    (type: enum set in {'DEFAULT_CLOSED', 'HIDE_HEADER'}, default {'DEFAULT_CLOSED'})
    
    :type: enum set in {'DEFAULT_CLOSED', 'HIDE_HEADER'}
    """

    bl_region_type = 'WINDOW'
    """The region where the panel is going to be used in
    (type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW'], default 'WINDOW')
    
    :type: str
    """

    bl_space_type = 'EMPTY'
    """The space where the panel is going to be used in
    * 'EMPTY': Empty.
    * 'VIEW_3D': 3D View, 3D viewport.
    * 'TIMELINE': Timeline, Timeline and playback controls.
    * 'GRAPH_EDITOR': Graph Editor, Edit drivers and keyframe interpolation.
    * 'DOPESHEET_EDITOR': Dope Sheet, Adjust timing of keyframes.
    * 'NLA_EDITOR': NLA Editor, Combine and layer Actions.
    * 'IMAGE_EDITOR': UV/Image Editor, View and edit images and UV Maps.
    * 'SEQUENCE_EDITOR': Video Sequence Editor, Video editing tools.
    * 'CLIP_EDITOR': Movie Clip Editor, Motion tracking tools.
    * 'TEXT_EDITOR': Text Editor, Edit scripts and in-file documentation.
    * 'NODE_EDITOR': Node Editor, Editor for node-based shading and compositing tools.
    * 'LOGIC_EDITOR': Logic Editor, Game logic editing.
    * 'PROPERTIES': Properties, Edit properties of active object and related data-blocks.
    * 'OUTLINER': Outliner, Overview of scene graph and all available data-blocks.
    * 'USER_PREFERENCES': User Preferences, Edit persistent configuration settings.
    * 'INFO': Info, Main menu bar and list of error messages (drag down to expand and display).
    * 'FILE_BROWSER': File Browser, Browse for files and assets.
    * 'CONSOLE': Python Console, Interactive programmatic console for advanced editing and script development.
    (type: enum in ['EMPTY', 'VIEW_3D', 'TIMELINE', 'GRAPH_EDITOR', 'DOPESHEET_EDITOR', 'NLA_EDITOR', 'IMAGE_EDITOR', 'SEQUENCE_EDITOR', 'CLIP_EDITOR', 'TEXT_EDITOR', 'NODE_EDITOR', 'LOGIC_EDITOR', 'PROPERTIES', 'OUTLINER', 'USER_PREFERENCES', 'INFO', 'FILE_BROWSER', 'CONSOLE'], default 'EMPTY')
    
    :type: str
    """

    bl_translation_context = "*"
    """(type: string, default "*", (never None))
    
    :type: str
    """

    layout = None
    """Defines the structure of the panel in the UI
    (type: bpy.types.UILayout, (readonly))
    
    :type: UILayout
    """

    text = ""
    """XXX todo
    (type: string, default "", (never None))
    
    :type: str
    """

    use_pin = False
    """(type: boolean, default False)
    
    :type: bool
    """

    def poll(self, context):
        """If this method returns a non-null output, then the panel can be drawn
        
        :rtype: bool
        """

    def draw(self, context):
        """Draw UI elements into the panel UI layout"""

    def draw_header(self, context):
        """Draw UI elements into the panel's header UI layout"""


class Particle(bpy_struct):
    """Particle in a particle system"""

    alive_state = 'DEAD'
    """(type: enum in ['DEAD', 'UNBORN', 'ALIVE', 'DYING'], default 'DEAD')
    
    :type: str
    """

    angular_velocity = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    birth_time = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    die_time = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    hair_keys = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.ParticleHairKey, (readonly))
    
    :type: bpy_prop_collection
    """

    is_exist = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_visible = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    lifetime = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    location = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    particle_keys = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.ParticleKey, (readonly))
    
    :type: bpy_prop_collection
    """

    prev_angular_velocity = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    prev_location = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    prev_rotation = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Quaternion
    """

    prev_velocity = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    rotation = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Quaternion
    """

    size = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    velocity = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    def uv_on_emitter(self, modifier):
        """Obtain uv for particle on derived mesh
        
        :param modifier: Particle modifier
            (type: bpy.types.ParticleSystemModifier, (never None))
        :type modifier: ParticleSystemModifier
        :return: uv
        :param : (type: float array of 2 items in [-inf, inf])
        :rtype: collections.Sequence[float]
        """


class ParticleBrush(bpy_struct):
    """Particle editing brush"""

    count = 0
    """Particle count
    (type: int in [1, 1000], default 0)
    
    :type: int
    """

    curve = None
    """(type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    length_mode = 'GROW'
    """
    * 'GROW': Grow, Make hairs longer.
    * 'SHRINK': Shrink, Make hairs shorter.
    (type: enum in ['GROW', 'SHRINK'], default 'GROW')
    
    :type: str
    """

    puff_mode = 'ADD'
    """
    * 'ADD': Add, Make hairs more puffy.
    * 'SUB': Sub, Make hairs less puffy.
    (type: enum in ['ADD', 'SUB'], default 'ADD')
    
    :type: str
    """

    size = 0
    """Radius of the brush in pixels
    (type: int in [1, 32767], default 0)
    
    :type: int
    """

    steps = 0
    """Brush steps
    (type: int in [1, 32767], default 0)
    
    :type: int
    """

    strength = 0.0
    """Brush strength
    (type: float in [0.001, 1], default 0.0)
    
    :type: float
    """

    use_puff_volume = False
    """Apply puff to unselected end-points (helps maintain hair volume when puffing root)
    (type: boolean, default False)
    
    :type: bool
    """


class ParticleDupliWeight(bpy_struct):
    """Weight of a particle dupliobject in a group"""

    count = 0
    """The number of times this object is repeated with respect to other objects
    (type: int in [0, 32767], default 0)
    
    :type: int
    """

    name = ""
    """Particle dupliobject name
    (type: string, default "", (readonly, never None))
    
    :type: str
    """


class ParticleEdit(bpy_struct):
    """Properties of particle editing mode"""

    brush = None
    """(type: bpy.types.ParticleBrush, (readonly))
    
    :type: ParticleBrush
    """

    default_key_count = 0
    """How many keys to make new particles with
    (type: int in [2, 32767], default 0)
    
    :type: int
    """

    draw_step = 0
    """How many steps to draw the path with
    (type: int in [1, 10], default 0)
    
    :type: int
    """

    emitter_distance = 0.0
    """Distance to keep particles away from the emitter
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    fade_frames = 0
    """How many frames to fade
    (type: int in [1, 100], default 0)
    
    :type: int
    """

    is_editable = False
    """A valid edit mode exists
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_hair = False
    """Editing hair
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    object = None
    """The edited object
    (type: bpy.types.Object, (readonly))
    
    :type: Object
    """

    select_mode = 'PATH'
    """Particle select and display mode
    * 'PATH': Path, Path edit mode.
    * 'POINT': Point, Point select mode.
    * 'TIP': Tip, Tip select mode.
    (type: enum in ['PATH', 'POINT', 'TIP'], default 'PATH')
    
    :type: str
    """

    shape_object = None
    """Outer shape to use for tools
    (type: bpy.types.Object)
    
    :type: Object
    """

    show_particles = False
    """Draw actual particles
    (type: boolean, default False)
    
    :type: bool
    """

    tool = 'COMB'
    """
    * 'NONE': None, Don't use any brush.
    * 'COMB': Comb, Comb hairs.
    * 'SMOOTH': Smooth, Smooth hairs.
    * 'ADD': Add, Add hairs.
    * 'LENGTH': Length, Make hairs longer or shorter.
    * 'PUFF': Puff, Make hairs stand up.
    * 'CUT': Cut, Cut hairs.
    * 'WEIGHT': Weight, Weight hair particles.
    (type: enum in ['NONE', 'COMB', 'SMOOTH', 'ADD', 'LENGTH', 'PUFF', 'CUT', 'WEIGHT'], default 'COMB')
    
    :type: str
    """

    type = 'PARTICLES'
    """(type: enum in ['PARTICLES', 'SOFT_BODY', 'CLOTH'], default 'PARTICLES')
    
    :type: str
    """

    use_auto_velocity = False
    """Calculate point velocities automatically
    (type: boolean, default False)
    
    :type: bool
    """

    use_default_interpolate = False
    """Interpolate new particles from the existing ones
    (type: boolean, default False)
    
    :type: bool
    """

    use_emitter_deflect = False
    """Keep paths from intersecting the emitter
    (type: boolean, default False)
    
    :type: bool
    """

    use_fade_time = False
    """Fade paths and keys further away from current frame
    (type: boolean, default False)
    
    :type: bool
    """

    use_preserve_length = False
    """Keep path lengths constant
    (type: boolean, default False)
    
    :type: bool
    """

    use_preserve_root = False
    """Keep root keys unmodified
    (type: boolean, default False)
    
    :type: bool
    """


class ParticleHairKey(bpy_struct):
    """Particle key for hair particle system"""

    co = (0.0, 0.0, 0.0)
    """Location of the hair key in object space
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    co_local = (0.0, 0.0, 0.0)
    """Location of the hair key in its local coordinate system, relative to the emitting face
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    time = 0.0
    """Relative time of key over hair length
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    weight = 0.0
    """Weight for cloth simulation
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    def co_object(self, object, modifier, particle):
        """Obtain hairkey location with particle and modifier data
        
        :param object: Object
            (type: bpy.types.Object, (never None))
        :type object: Object
        :param modifier: Particle modifier
            (type: bpy.types.ParticleSystemModifier, (never None))
        :type modifier: ParticleSystemModifier
        :param particle: hair particle
            (type: bpy.types.Particle, (never None))
        :type particle: Particle
        :return: Co, Exported hairkey location
        :param : (type: float array of 3 items in [-inf, inf])
        :rtype: mathutils.Vector
        """


class ParticleKey(bpy_struct):
    """Key location for a particle over time"""

    angular_velocity = (0.0, 0.0, 0.0)
    """Key angular velocity
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    location = (0.0, 0.0, 0.0)
    """Key location
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    rotation = (0.0, 0.0, 0.0, 0.0)
    """Key rotation quaternion
    (type: float array of 4 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Quaternion
    """

    time = 0.0
    """Time of key over the simulation
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    velocity = (0.0, 0.0, 0.0)
    """Key velocity
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: collections.Sequence[float]
    """


class ParticleSettingsTextureSlots(bpy_struct):
    """Collection of texture slots"""

    def add(self):
        """add
        
        :return: The newly initialized mtex
        :param : (type: bpy.types.ParticleSettingsTextureSlot)
        :rtype: ParticleSettingsTextureSlot
        """

    def create(self, index):
        """create
        
        :param index: Index, Slot index to initialize
            (type: int in [0, inf])
        :type index: int
        :return: The newly initialized mtex
        :param : (type: bpy.types.ParticleSettingsTextureSlot)
        :rtype: ParticleSettingsTextureSlot
        """

    def clear(self, index):
        """clear
        
        :param index: Index, Slot index to clear
            (type: int in [0, inf])
        :type index: int
        """


class ParticleSystem(bpy_struct):
    """Particle system in an object"""

    active_particle_target = None
    """(type: bpy.types.ParticleTarget, (readonly))
    
    :type: ParticleTarget
    """

    active_particle_target_index = 0
    """(type: int in [0, inf], default 0)
    
    :type: int
    """

    billboard_normal_uv = ""
    """UV map to control billboard normals
    (type: string, default "", (never None))
    
    :type: str
    """

    billboard_split_uv = ""
    """UV map to control billboard splitting
    (type: string, default "", (never None))
    
    :type: str
    """

    billboard_time_index_uv = ""
    """UV map to control billboard time index (X-Y)
    (type: string, default "", (never None))
    
    :type: str
    """

    child_particles = None
    """Child particles generated by the particle system
    (type: bpy.types.bpy_prop_collection of bpy.types.ChildParticle, (readonly))
    
    :type: bpy_prop_collection
    """

    child_seed = 0
    """Offset in the random number table for child particles, to get a different randomized result
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    cloth = None
    """Cloth dynamics for hair
    (type: bpy.types.ClothModifier, (readonly, never None))
    
    :type: ClothModifier
    """

    dt_frac = 0.0
    """The current simulation time step size, as a fraction of a frame
    (type: float in [0.00990099, 1], default 0.0, (readonly))
    
    :type: float
    """

    has_multiple_caches = False
    """Particle system has multiple point caches
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    invert_vertex_group_clump = False
    """Negate the effect of the clump vertex group
    (type: boolean, default False)
    
    :type: bool
    """

    invert_vertex_group_density = False
    """Negate the effect of the density vertex group
    (type: boolean, default False)
    
    :type: bool
    """

    invert_vertex_group_field = False
    """Negate the effect of the field vertex group
    (type: boolean, default False)
    
    :type: bool
    """

    invert_vertex_group_kink = False
    """Negate the effect of the kink vertex group
    (type: boolean, default False)
    
    :type: bool
    """

    invert_vertex_group_length = False
    """Negate the effect of the length vertex group
    (type: boolean, default False)
    
    :type: bool
    """

    invert_vertex_group_rotation = False
    """Negate the effect of the rotation vertex group
    (type: boolean, default False)
    
    :type: bool
    """

    invert_vertex_group_roughness_1 = False
    """Negate the effect of the roughness 1 vertex group
    (type: boolean, default False)
    
    :type: bool
    """

    invert_vertex_group_roughness_2 = False
    """Negate the effect of the roughness 2 vertex group
    (type: boolean, default False)
    
    :type: bool
    """

    invert_vertex_group_roughness_end = False
    """Negate the effect of the roughness end vertex group
    (type: boolean, default False)
    
    :type: bool
    """

    invert_vertex_group_size = False
    """Negate the effect of the size vertex group
    (type: boolean, default False)
    
    :type: bool
    """

    invert_vertex_group_tangent = False
    """Negate the effect of the tangent vertex group
    (type: boolean, default False)
    
    :type: bool
    """

    invert_vertex_group_velocity = False
    """Negate the effect of the velocity vertex group
    (type: boolean, default False)
    
    :type: bool
    """

    is_editable = False
    """Particle system can be edited in particle mode
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_edited = False
    """Particle system has been edited in particle mode
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_global_hair = False
    """Hair keys are in global coordinate space
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    name = ""
    """Particle system name
    (type: string, default "", (never None))
    
    :type: str
    """

    parent = None
    """Use this object's coordinate system instead of global coordinate system
    (type: bpy.types.Object)
    
    :type: Object
    """

    particles = None
    """Particles generated by the particle system
    (type: bpy.types.bpy_prop_collection of bpy.types.Particle, (readonly))
    
    :type: bpy_prop_collection
    """

    point_cache = None
    """(type: bpy.types.PointCache, (readonly, never None))
    
    :type: PointCache
    """

    reactor_target_object = None
    """For reactor systems, the object that has the target particle system (empty if same object)
    (type: bpy.types.Object)
    
    :type: Object
    """

    reactor_target_particle_system = 0
    """For reactor systems, index of particle system on the target object
    (type: int in [1, 32767], default 0)
    
    :type: int
    """

    seed = 0
    """Offset in the random number table, to get a different randomized result
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    settings = None
    """Particle system settings
    (type: bpy.types.ParticleSettings, (never None))
    
    :type: ParticleSettings
    """

    targets = None
    """Target particle systems
    (type: bpy.types.bpy_prop_collection of bpy.types.ParticleTarget, (readonly))
    
    :type: bpy_prop_collection
    """

    use_hair_dynamics = False
    """Enable hair dynamics using cloth simulation
    (type: boolean, default False)
    
    :type: bool
    """

    use_keyed_timing = False
    """Use key times
    (type: boolean, default False)
    
    :type: bool
    """

    vertex_group_clump = ""
    """Vertex group to control clump
    (type: string, default "", (never None))
    
    :type: str
    """

    vertex_group_density = ""
    """Vertex group to control density
    (type: string, default "", (never None))
    
    :type: str
    """

    vertex_group_field = ""
    """Vertex group to control field
    (type: string, default "", (never None))
    
    :type: str
    """

    vertex_group_kink = ""
    """Vertex group to control kink
    (type: string, default "", (never None))
    
    :type: str
    """

    vertex_group_length = ""
    """Vertex group to control length
    (type: string, default "", (never None))
    
    :type: str
    """

    vertex_group_rotation = ""
    """Vertex group to control rotation
    (type: string, default "", (never None))
    
    :type: str
    """

    vertex_group_roughness_1 = ""
    """Vertex group to control roughness 1
    (type: string, default "", (never None))
    
    :type: str
    """

    vertex_group_roughness_2 = ""
    """Vertex group to control roughness 2
    (type: string, default "", (never None))
    
    :type: str
    """

    vertex_group_roughness_end = ""
    """Vertex group to control roughness end
    (type: string, default "", (never None))
    
    :type: str
    """

    vertex_group_size = ""
    """Vertex group to control size
    (type: string, default "", (never None))
    
    :type: str
    """

    vertex_group_tangent = ""
    """Vertex group to control tangent
    (type: string, default "", (never None))
    
    :type: str
    """

    vertex_group_velocity = ""
    """Vertex group to control velocity
    (type: string, default "", (never None))
    
    :type: str
    """

    def set_resolution(self, scene=None, object=None, resolution='PREVIEW'):
        """Set the resolution to use for the number of particles
        
        :param scene: Scene
            (type: bpy.types.Scene, (optional))
        :type scene: Scene
        :param object: Object
            (type: bpy.types.Object, (optional))
        :type object: Object
        :param resolution: Resolution settings to apply
            * 'PREVIEW': Preview, Apply modifier preview settings.
            * 'RENDER': Render, Apply modifier render settings.
            (type: enum in ['PREVIEW', 'RENDER'], (optional))
        :type resolution: str
        """

    def co_hair(self, object, particle_no=0, step=0):
        """Obtain cache hair data
        
        :param object: Object
            (type: bpy.types.Object, (never None))
        :type object: Object
        :param particle_no: Particle no
            (type: int in [-inf, inf], (optional))
        :type particle_no: int
        :param step: step no
            (type: int in [-inf, inf], (optional))
        :type step: int
        :return: Co, Exported hairkey location
        :param : (type: float array of 3 items in [-inf, inf])
        :rtype: mathutils.Vector
        """

    def uv_on_emitter(self, modifier, particle=None, particle_no=0, uv_no=0):
        """Obtain uv for all particles
        
        :param modifier: Particle modifier
            (type: bpy.types.ParticleSystemModifier, (never None))
        :type modifier: ParticleSystemModifier
        :param particle: Particle
            (type: bpy.types.Particle, (optional))
        :type particle: Particle
        :param particle_no: Particle no
            (type: int in [-inf, inf], (optional))
        :type particle_no: int
        :param uv_no: UV no
            (type: int in [-inf, inf], (optional))
        :type uv_no: int
        :return: uv
        :param : (type: float array of 2 items in [-inf, inf])
        :rtype: collections.Sequence[float]
        """

    def mcol_on_emitter(self, modifier, particle, particle_no=0, vcol_no=0):
        """Obtain mcol for all particles
        
        :param modifier: Particle modifier
            (type: bpy.types.ParticleSystemModifier, (never None))
        :type modifier: ParticleSystemModifier
        :param particle: Particle
            (type: bpy.types.Particle, (never None))
        :type particle: Particle
        :param particle_no: Particle no
            (type: int in [-inf, inf], (optional))
        :type particle_no: int
        :param vcol_no: vcol no
            (type: int in [-inf, inf], (optional))
        :type vcol_no: int
        :return: mcol
        :param : (type: float array of 3 items in [0, inf])
        :rtype: mathutils.Color
        """


class ParticleSystems(bpy_struct):
    """Collection of particle systems"""

    active = None
    """Active particle system being displayed
    (type: bpy.types.ParticleSystem, (readonly))
    
    :type: ParticleSystem
    """

    active_index = 0
    """Index of active particle system slot
    (type: int in [0, inf], default 0)
    
    :type: int
    """


class ParticleTarget(bpy_struct):
    """Target particle system"""

    alliance = 'NEUTRAL'
    """(type: enum in ['FRIEND', 'NEUTRAL', 'ENEMY'], default 'NEUTRAL')
    
    :type: str
    """

    duration = 0.0
    """(type: float in [0, 30000], default 0.0)
    
    :type: float
    """

    is_valid = False
    """Keyed particles target is valid
    (type: boolean, default False)
    
    :type: bool
    """

    name = ""
    """Particle target name
    (type: string, default "", (readonly, never None))
    
    :type: str
    """

    object = None
    """The object that has the target particle system (empty if same object)
    (type: bpy.types.Object)
    
    :type: Object
    """

    system = 0
    """The index of particle system on the target object
    (type: int in [1, inf], default 0)
    
    :type: int
    """

    time = 0.0
    """(type: float in [0, 30000], default 0.0)
    
    :type: float
    """


class PathCompare(bpy_struct):
    """Match paths against this value"""

    path = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    use_glob = False
    """Enable wildcard globbing
    (type: boolean, default False)
    
    :type: bool
    """


class PathCompareCollection(bpy_struct):
    """Collection of paths"""

    def new(self):
        """Add a new path
        
        :param : (type: bpy.types.PathCompare)
        :rtype: PathCompare
        """

    def remove(self, pathcmp):
        """Remove path"""


class PointCache(bpy_struct):
    """Point cache for physics simulations"""

    compression = 'NO'
    """Compression method to be used
    * 'NO': No, No compression.
    * 'LIGHT': Light, Fast but not so effective compression.
    * 'HEAVY': Heavy, Effective but slow compression.
    (type: enum in ['NO', 'LIGHT', 'HEAVY'], default 'NO')
    
    :type: str
    """

    filepath = ""
    """Cache file path
    (type: string, default "", (never None))
    
    :type: str
    """

    frame_end = 0
    """Frame on which the simulation stops
    (type: int in [1, 500000], default 0)
    
    :type: int
    """

    frame_start = 0
    """Frame on which the simulation starts
    (type: int in [-500000, 500000], default 0)
    
    :type: int
    """

    frame_step = 0
    """Number of frames between cached frames
    (type: int in [1, 20], default 0)
    
    :type: int
    """

    index = 0
    """Index number of cache files
    (type: int in [-1, 100], default 0)
    
    :type: int
    """

    info = ""
    """Info on current cache status
    (type: string, default "", (readonly, never None))
    
    :type: str
    """

    is_baked = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_baking = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_frame_skip = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_outdated = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    name = ""
    """Cache name
    (type: string, default "", (never None))
    
    :type: str
    """

    point_caches = None
    """Point cache list
    (type: bpy.types.PointCaches bpy.types.bpy_prop_collection of bpy.types.PointCache, (readonly))
    
    :type: PointCaches
    """

    use_disk_cache = False
    """Save cache files to disk (.blend file must be saved first)
    (type: boolean, default False)
    
    :type: bool
    """

    use_external = False
    """Read cache from an external location
    (type: boolean, default False)
    
    :type: bool
    """

    use_library_path = False
    """Use this file's path for the disk cache when library linked into another file (for local bakes per scene file, disable this option)
    (type: boolean, default False)
    
    :type: bool
    """


class PointCaches(bpy_struct):
    """Collection of point caches"""

    active_index = 0
    """(type: int in [0, inf], default 0)
    
    :type: int
    """


class PointDensity(bpy_struct):
    """Point density settings"""

    color_ramp = None
    """(type: bpy.types.ColorRamp, (readonly))
    
    :type: ColorRamp
    """

    falloff = 'STANDARD'
    """Method of attenuating density by distance from the point
    * 'STANDARD': Standard.
    * 'SMOOTH': Smooth.
    * 'SOFT': Soft.
    * 'CONSTANT': Constant, Density is constant within lookup radius.
    * 'ROOT': Root.
    * 'PARTICLE_AGE': Particle Age.
    * 'PARTICLE_VELOCITY': Particle Velocity.
    (type: enum in ['STANDARD', 'SMOOTH', 'SOFT', 'CONSTANT', 'ROOT', 'PARTICLE_AGE', 'PARTICLE_VELOCITY'], default 'STANDARD')
    
    :type: str
    """

    falloff_curve = None
    """(type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    falloff_soft = 0.0
    """Softness of the 'soft' falloff option
    (type: float in [0.01, inf], default 0.0)
    
    :type: float
    """

    falloff_speed_scale = 0.0
    """Multiplier to bring particle speed within an acceptable range
    (type: float in [0.001, 100], default 0.0)
    
    :type: float
    """

    noise_basis = 'BLENDER_ORIGINAL'
    """Noise formula used for turbulence
    * 'BLENDER_ORIGINAL': Blender Original, Noise algorithm - Blender original: Smooth interpolated noise.
    * 'ORIGINAL_PERLIN': Original Perlin, Noise algorithm - Original Perlin: Smooth interpolated noise.
    * 'IMPROVED_PERLIN': Improved Perlin, Noise algorithm - Improved Perlin: Smooth interpolated noise.
    * 'VORONOI_F1': Voronoi F1, Noise algorithm - Voronoi F1: Returns distance to the closest feature point.
    * 'VORONOI_F2': Voronoi F2, Noise algorithm - Voronoi F2: Returns distance to the 2nd closest feature point.
    * 'VORONOI_F3': Voronoi F3, Noise algorithm - Voronoi F3: Returns distance to the 3rd closest feature point.
    * 'VORONOI_F4': Voronoi F4, Noise algorithm - Voronoi F4: Returns distance to the 4th closest feature point.
    * 'VORONOI_F2_F1': Voronoi F2-F1, Noise algorithm - Voronoi F1-F2.
    * 'VORONOI_CRACKLE': Voronoi Crackle, Noise algorithm - Voronoi Crackle: Voronoi tessellation with sharp edges.
    * 'CELL_NOISE': Cell Noise, Noise algorithm - Cell Noise: Square cell tessellation.
    (type: enum in ['BLENDER_ORIGINAL', 'ORIGINAL_PERLIN', 'IMPROVED_PERLIN', 'VORONOI_F1', 'VORONOI_F2', 'VORONOI_F3', 'VORONOI_F4', 'VORONOI_F2_F1', 'VORONOI_CRACKLE', 'CELL_NOISE'], default 'BLENDER_ORIGINAL')
    
    :type: str
    """

    object = None
    """Object to take point data from
    (type: bpy.types.Object)
    
    :type: Object
    """

    particle_cache_space = 'OBJECT_LOCATION'
    """Coordinate system to cache particles in
    (type: enum in ['OBJECT_LOCATION', 'OBJECT_SPACE', 'WORLD_SPACE'], default 'OBJECT_LOCATION')
    
    :type: str
    """

    particle_color_source = 'CONSTANT'
    """Data to derive color results from
    * 'CONSTANT': Constant.
    * 'PARTICLE_AGE': Particle Age, Lifetime mapped as 0.0 - 1.0 intensity.
    * 'PARTICLE_SPEED': Particle Speed, Particle speed (absolute magnitude of velocity) mapped as 0.0-1.0 intensity.
    * 'PARTICLE_VELOCITY': Particle Velocity, XYZ velocity mapped to RGB colors.
    (type: enum in ['CONSTANT', 'PARTICLE_AGE', 'PARTICLE_SPEED', 'PARTICLE_VELOCITY'], default 'CONSTANT')
    
    :type: str
    """

    particle_system = None
    """Particle System to render as points
    (type: bpy.types.ParticleSystem)
    
    :type: ParticleSystem
    """

    point_source = 'PARTICLE_SYSTEM'
    """Point data to use as renderable point density
    * 'PARTICLE_SYSTEM': Particle System, Generate point density from a particle system.
    * 'OBJECT': Object Vertices, Generate point density from an object's vertices.
    (type: enum in ['PARTICLE_SYSTEM', 'OBJECT'], default 'PARTICLE_SYSTEM')
    
    :type: str
    """

    radius = 0.0
    """Radius from the shaded sample to look for points within
    (type: float in [0.001, inf], default 0.0)
    
    :type: float
    """

    speed_scale = 0.0
    """Multiplier to bring particle speed within an acceptable range
    (type: float in [0.001, 100], default 0.0)
    
    :type: float
    """

    turbulence_depth = 0
    """Level of detail in the added turbulent noise
    (type: int in [0, 30], default 0)
    
    :type: int
    """

    turbulence_influence = 'STATIC'
    """Method for driving added turbulent noise
    * 'STATIC': Static, Noise patterns will remain unchanged, faster and suitable for stills.
    * 'PARTICLE_VELOCITY': Particle Velocity, Turbulent noise driven by particle velocity.
    * 'PARTICLE_AGE': Particle Age, Turbulent noise driven by the particle's age between birth and death.
    * 'GLOBAL_TIME': Global Time, Turbulent noise driven by the global current frame.
    (type: enum in ['STATIC', 'PARTICLE_VELOCITY', 'PARTICLE_AGE', 'GLOBAL_TIME'], default 'STATIC')
    
    :type: str
    """

    turbulence_scale = 0.0
    """Scale of the added turbulent noise
    (type: float in [0.01, inf], default 0.0)
    
    :type: float
    """

    turbulence_strength = 0.0
    """Strength of the added turbulent noise
    (type: float in [0.01, inf], default 0.0)
    
    :type: float
    """

    use_falloff_curve = False
    """Use a custom falloff curve
    (type: boolean, default False)
    
    :type: bool
    """

    use_turbulence = False
    """Add directed noise to the density at render-time
    (type: boolean, default False)
    
    :type: bool
    """

    vertex_attribute_name = ""
    """Vertex attribute to use for color
    (type: string, default "", (never None))
    
    :type: str
    """

    vertex_cache_space = 'OBJECT_LOCATION'
    """Coordinate system to cache vertices in
    (type: enum in ['OBJECT_LOCATION', 'OBJECT_SPACE', 'WORLD_SPACE'], default 'OBJECT_LOCATION')
    
    :type: str
    """

    vertex_color_source = 'CONSTANT'
    """Data to derive color results from
    * 'CONSTANT': Constant.
    * 'VERTEX_COLOR': Vertex Color, Vertex color layer.
    * 'VERTEX_WEIGHT': Vertex Weight, Vertex group weight.
    * 'VERTEX_NORMAL': Vertex Normal, XYZ normal vector mapped to RGB colors.
    (type: enum in ['CONSTANT', 'VERTEX_COLOR', 'VERTEX_WEIGHT', 'VERTEX_NORMAL'], default 'CONSTANT')
    
    :type: str
    """


class PolygonFloatProperties(bpy_struct):
    """Collection of float properties"""

    def new(self, name="Float Prop"):
        """Add a float property layer to Mesh
        
        :param name: Float property name
            (type: str, (optional, never None))
        :type name: str
        :return: The newly created layer
        :param : (type: bpy.types.MeshPolygonFloatPropertyLayer)
        :rtype: MeshPolygonFloatPropertyLayer
        """


class PolygonIntProperties(bpy_struct):
    """Collection of int properties"""

    def new(self, name="Int Prop"):
        """Add a integer property layer to Mesh
        
        :param name: Int property name
            (type: str, (optional, never None))
        :type name: str
        :return: The newly created layer
        :param : (type: bpy.types.MeshPolygonIntPropertyLayer)
        :rtype: MeshPolygonIntPropertyLayer
        """


class PolygonStringProperties(bpy_struct):
    """Collection of string properties"""

    def new(self, name="String Prop"):
        """Add a string property layer to Mesh
        
        :param name: String property name
            (type: str, (optional, never None))
        :type name: str
        :return: The newly created layer
        :param : (type: bpy.types.MeshPolygonStringPropertyLayer)
        :rtype: MeshPolygonStringPropertyLayer
        """


class Pose(bpy_struct):
    """A collection of pose channels, including settings for animating bones"""

    animation_visualization = None
    """Animation data for this data-block
    (type: bpy.types.AnimViz, (readonly, never None))
    
    :type: AnimViz
    """

    bone_groups = None
    """Groups of the bones
    (type: bpy.types.BoneGroups bpy.types.bpy_prop_collection of bpy.types.BoneGroup, (readonly))
    
    :type: BoneGroups
    """

    bones = None
    """Individual pose bones for the armature
    (type: bpy.types.bpy_prop_collection of bpy.types.PoseBone, (readonly))
    
    :type: bpy_prop_collection
    """

    ik_param = None
    """Parameters for IK solver
    (type: bpy.types.IKParam, (readonly))
    
    :type: IKParam
    """

    ik_solver = 'LEGACY'
    """Selection of IK solver for IK chain
    * 'LEGACY': Standard, Original IK solver.
    * 'ITASC': iTaSC, Multi constraint, stateful IK solver.
    (type: enum in ['LEGACY', 'ITASC'], default 'LEGACY')
    
    :type: str
    """


class PoseBone(bpy_struct):
    """Channel defining pose data for a bone in a Pose"""

    bbone_curveinx = 0.0
    """X-axis handle offset for start of the B-Bone's curve, adjusts curvature
    (type: float in [-5, 5], default 0.0)
    
    :type: float
    """

    bbone_curveiny = 0.0
    """Y-axis handle offset for start of the B-Bone's curve, adjusts curvature
    (type: float in [-5, 5], default 0.0)
    
    :type: float
    """

    bbone_curveoutx = 0.0
    """X-axis handle offset for end of the B-Bone's curve, adjusts curvature
    (type: float in [-5, 5], default 0.0)
    
    :type: float
    """

    bbone_curveouty = 0.0
    """Y-axis handle offset for end of the B-Bone's curve, adjusts curvature
    (type: float in [-5, 5], default 0.0)
    
    :type: float
    """

    bbone_custom_handle_end = None
    """Bone that serves as the end handle for the B-Bone curve
    (type: bpy.types.PoseBone)
    
    :type: PoseBone
    """

    bbone_custom_handle_start = None
    """Bone that serves as the start handle for the B-Bone curve
    (type: bpy.types.PoseBone)
    
    :type: PoseBone
    """

    bbone_rollin = 0.0
    """Roll offset for the start of the B-Bone, adjusts twist
    (type: float in [-6.28319, 6.28319], default 0.0)
    
    :type: float
    """

    bbone_rollout = 0.0
    """Roll offset for the end of the B-Bone, adjusts twist
    (type: float in [-6.28319, 6.28319], default 0.0)
    
    :type: float
    """

    bbone_scalein = 1.0
    """Scale factor for start of the B-Bone, adjusts thickness (for tapering effects)
    (type: float in [0, 5], default 1.0)
    
    :type: float
    """

    bbone_scaleout = 1.0
    """Scale factor for end of the B-Bone, adjusts thickness (for tapering effects)
    (type: float in [0, 5], default 1.0)
    
    :type: float
    """

    bone = None
    """Bone associated with this PoseBone
    (type: bpy.types.Bone, (readonly, never None))
    
    :type: Bone
    """

    bone_group = None
    """Bone Group this pose channel belongs to
    (type: bpy.types.BoneGroup)
    
    :type: BoneGroup
    """

    bone_group_index = 0
    """Bone Group this pose channel belongs to (0=no group)
    (type: int in [-32768, 32767], default 0)
    
    :type: int
    """

    child = None
    """Child of this pose bone
    (type: bpy.types.PoseBone, (readonly))
    
    :type: PoseBone
    """

    constraints = None
    """Constraints that act on this PoseChannel
    (type: bpy.types.PoseBoneConstraints bpy.types.bpy_prop_collection of bpy.types.Constraint, (readonly))
    
    :type: PoseBoneConstraints
    """

    custom_shape = None
    """Object that defines custom draw type for this bone
    (type: bpy.types.Object)
    
    :type: Object
    """

    custom_shape_scale = 0.0
    """Adjust the size of the custom shape
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """

    custom_shape_transform = None
    """Bone that defines the display transform of this custom shape
    (type: bpy.types.PoseBone)
    
    :type: PoseBone
    """

    head = (0.0, 0.0, 0.0)
    """Location of head of the channel's bone
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0), (readonly))
    
    :type: mathutils.Vector
    """

    ik_linear_weight = 0.0
    """Weight of scale constraint for IK
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    ik_max_x = 0.0
    """Maximum angles for IK Limit
    (type: float in [0, 3.14159], default 0.0)
    
    :type: float
    """

    ik_max_y = 0.0
    """Maximum angles for IK Limit
    (type: float in [0, 3.14159], default 0.0)
    
    :type: float
    """

    ik_max_z = 0.0
    """Maximum angles for IK Limit
    (type: float in [0, 3.14159], default 0.0)
    
    :type: float
    """

    ik_min_x = 0.0
    """Minimum angles for IK Limit
    (type: float in [-3.14159, 0], default 0.0)
    
    :type: float
    """

    ik_min_y = 0.0
    """Minimum angles for IK Limit
    (type: float in [-3.14159, 0], default 0.0)
    
    :type: float
    """

    ik_min_z = 0.0
    """Minimum angles for IK Limit
    (type: float in [-3.14159, 0], default 0.0)
    
    :type: float
    """

    ik_rotation_weight = 0.0
    """Weight of rotation constraint for IK
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    ik_stiffness_x = 0.0
    """IK stiffness around the X axis
    (type: float in [0, 0.99], default 0.0)
    
    :type: float
    """

    ik_stiffness_y = 0.0
    """IK stiffness around the Y axis
    (type: float in [0, 0.99], default 0.0)
    
    :type: float
    """

    ik_stiffness_z = 0.0
    """IK stiffness around the Z axis
    (type: float in [0, 0.99], default 0.0)
    
    :type: float
    """

    ik_stretch = 0.0
    """Allow scaling of the bone for IK
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    is_in_ik_chain = False
    """Is part of an IK chain
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    location = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    lock_ik_x = False
    """Disallow movement around the X axis
    (type: boolean, default False)
    
    :type: bool
    """

    lock_ik_y = False
    """Disallow movement around the Y axis
    (type: boolean, default False)
    
    :type: bool
    """

    lock_ik_z = False
    """Disallow movement around the Z axis
    (type: boolean, default False)
    
    :type: bool
    """

    lock_location = (False, False, False)
    """Lock editing of location in the interface
    (type: boolean array of 3 items, default (False, False, False))
    
    :type: collections.Sequence[bool]
    """

    lock_rotation = (False, False, False)
    """Lock editing of rotation in the interface
    (type: boolean array of 3 items, default (False, False, False))
    
    :type: collections.Sequence[bool]
    """

    lock_rotation_w = False
    """Lock editing of 'angle' component of four-component rotations in the interface
    (type: boolean, default False)
    
    :type: bool
    """

    lock_rotations_4d = False
    """Lock editing of four component rotations by components (instead of as Eulers)
    (type: boolean, default False)
    
    :type: bool
    """

    lock_scale = (False, False, False)
    """Lock editing of scale in the interface
    (type: boolean array of 3 items, default (False, False, False))
    
    :type: collections.Sequence[bool]
    """

    matrix = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    """Final 4x4 matrix after constraints and drivers are applied (object space)
    (type: float array of 16 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Matrix
    """

    matrix_basis = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    """Alternative access to location/scale/rotation relative to the parent and own rest bone
    (type: float array of 16 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Matrix
    """

    matrix_channel = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    """4x4 matrix, before constraints
    (type: float array of 16 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (readonly))
    
    :type: mathutils.Matrix
    """

    motion_path = None
    """Motion Path for this element
    (type: bpy.types.MotionPath, (readonly))
    
    :type: MotionPath
    """

    name = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    parent = None
    """Parent of this pose bone
    (type: bpy.types.PoseBone, (readonly))
    
    :type: PoseBone
    """

    rotation_axis_angle = (0.0, 0.0, 1.0, 0.0)
    """Angle of Rotation for Axis-Angle rotation representation
    (type: float array of 4 items in [-inf, inf], default (0.0, 0.0, 1.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    rotation_euler = (0.0, 0.0, 0.0)
    """Rotation in Eulers
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Euler
    """

    rotation_mode = 'QUATERNION'
    """
    * 'QUATERNION': Quaternion (WXYZ), No Gimbal Lock (default).
    * 'XYZ': XYZ Euler, XYZ Rotation Order (prone to Gimbal Lock).
    * 'XZY': XZY Euler, XZY Rotation Order (prone to Gimbal Lock).
    * 'YXZ': YXZ Euler, YXZ Rotation Order (prone to Gimbal Lock).
    * 'YZX': YZX Euler, YZX Rotation Order (prone to Gimbal Lock).
    * 'ZXY': ZXY Euler, ZXY Rotation Order (prone to Gimbal Lock).
    * 'ZYX': ZYX Euler, ZYX Rotation Order (prone to Gimbal Lock).
    * 'AXIS_ANGLE': Axis Angle, Axis Angle (W+XYZ), defines a rotation around some axis defined by 3D-Vector.
    (type: enum in ['QUATERNION', 'XYZ', 'XZY', 'YXZ', 'YZX', 'ZXY', 'ZYX', 'AXIS_ANGLE'], default 'QUATERNION')
    
    :type: str
    """

    rotation_quaternion = (1.0, 0.0, 0.0, 0.0)
    """Rotation in Quaternions
    (type: float array of 4 items in [-inf, inf], default (1.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Quaternion
    """

    scale = (1.0, 1.0, 1.0)
    """(type: float array of 3 items in [-inf, inf], default (1.0, 1.0, 1.0))
    
    :type: mathutils.Vector
    """

    tail = (0.0, 0.0, 0.0)
    """Location of tail of the channel's bone
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0), (readonly))
    
    :type: mathutils.Vector
    """

    use_bbone_custom_handles = False
    """Use custom reference bones as handles for B-Bones instead of next/previous bones, leave these blank to use only B-Bone offset properties to control the shape
    (type: boolean, default False)
    
    :type: bool
    """

    use_bbone_relative_end_handle = False
    """Treat custom end handle position as a relative value
    (type: boolean, default False)
    
    :type: bool
    """

    use_bbone_relative_start_handle = False
    """Treat custom start handle position as a relative value
    (type: boolean, default False)
    
    :type: bool
    """

    use_custom_shape_bone_size = False
    """Scale the custom object by the bone length
    (type: boolean, default False)
    
    :type: bool
    """

    use_ik_limit_x = False
    """Limit movement around the X axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_ik_limit_y = False
    """Limit movement around the Y axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_ik_limit_z = False
    """Limit movement around the Z axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_ik_linear_control = False
    """Apply channel size as IK constraint if stretching is enabled
    (type: boolean, default False)
    
    :type: bool
    """

    use_ik_rotation_control = False
    """Apply channel rotation as IK constraint
    (type: boolean, default False)
    
    :type: bool
    """

    basename = None
    """The name of this bone before any '.' character
                                (readonly)
    """

    center = None
    """The midpoint between the head and the tail.
                                (readonly)
    """

    children = None
    """(readonly)"""

    children_recursive = None
    """A list of all children from this bone.
                                (readonly)
    """

    children_recursive_basename = None
    """Returns a chain of children with the same base name as this bone.
                                Only direct chains are supported, forks caused by multiple children
                                with matching base names will terminate the function
                                and not be returned.
                                (readonly)
    """

    length = None
    """The distance from head to tail,
                                when set the head is moved to fit the length.
    """

    parent_recursive = None
    """A list of parents, starting with the immediate parent
                                (readonly)
    """

    vector = None
    """The direction this bone is pointing.
                                Utility function for (tail - head)
                                (readonly)
    """

    x_axis = None
    """Vector pointing down the x-axis of the bone.
                                (readonly)
    """

    y_axis = None
    """Vector pointing down the y-axis of the bone.
                                (readonly)
    """

    z_axis = None
    """Vector pointing down the z-axis of the bone.
                                (readonly)
    """

    def evaluate_envelope(self, point):
        """Calculate bone envelope at given point
        
        :param point: Point, Position in 3d space to evaluate
            (type: float array of 3 items in [-inf, inf])
        :type point: collections.Sequence[float]
        :return: Factor, Envelope factor
        :param : (type: float in [-inf, inf])
        :rtype: float
        """

    def parent_index(self, parent_test):
        """The same as 'bone in other_bone.parent_recursive'
                                    but saved generating a list.
        """

    def translate(self, vec):
        """Utility function to add vec to the head and tail of this bone"""


class PoseBoneConstraints(bpy_struct):
    """Collection of pose bone constraints"""

    active = None
    """Active PoseChannel constraint
    (type: bpy.types.Constraint)
    
    :type: Constraint
    """

    def new(self, type):
        """Add a constraint to this object
        
        :param type: Constraint type to add
            * 'CAMERA_SOLVER': Camera Solver.
            * 'FOLLOW_TRACK': Follow Track.
            * 'OBJECT_SOLVER': Object Solver.
            * 'COPY_LOCATION': Copy Location, Copy the location of a target (with an optional offset), so that they move together.
            * 'COPY_ROTATION': Copy Rotation, Copy the rotation of a target (with an optional offset), so that they rotate together.
            * 'COPY_SCALE': Copy Scale, Copy the scale factors of a target (with an optional offset), so that they are scaled by the same amount.
            * 'COPY_TRANSFORMS': Copy Transforms, Copy all the transformations of a target, so that they move together.
            * 'LIMIT_DISTANCE': Limit Distance, Restrict movements to within a certain distance of a target (at the time of constraint evaluation only).
            * 'LIMIT_LOCATION': Limit Location, Restrict movement along each axis within given ranges.
            * 'LIMIT_ROTATION': Limit Rotation, Restrict rotation along each axis within given ranges.
            * 'LIMIT_SCALE': Limit Scale, Restrict scaling along each axis with given ranges.
            * 'MAINTAIN_VOLUME': Maintain Volume, Compensate for scaling one axis by applying suitable scaling to the other two axes.
            * 'TRANSFORM': Transformation, Use one transform property from target to control another (or same) property on owner.
            * 'TRANSFORM_CACHE': Transform Cache, Look up the transformation matrix from an external file.
            * 'CLAMP_TO': Clamp To, Restrict movements to lie along a curve by remapping location along curve's longest axis.
            * 'DAMPED_TRACK': Damped Track, Point towards a target by performing the smallest rotation necessary.
            * 'IK': Inverse Kinematics, Control a chain of bones by specifying the endpoint target (Bones only).
            * 'LOCKED_TRACK': Locked Track, Rotate around the specified ('locked') axis to point towards a target.
            * 'SPLINE_IK': Spline IK, Align chain of bones along a curve (Bones only).
            * 'STRETCH_TO': Stretch To, Stretch along Y-Axis to point towards a target.
            * 'TRACK_TO': Track To, Legacy tracking constraint prone to twisting artifacts.
            * 'ACTION': Action, Use transform property of target to look up pose for owner from an Action.
            * 'CHILD_OF': Child Of, Make target the 'detachable' parent of owner.
            * 'FLOOR': Floor, Use position (and optionally rotation) of target to define a 'wall' or 'floor' that the owner can not cross.
            * 'FOLLOW_PATH': Follow Path, Use to animate an object/bone following a path.
            * 'PIVOT': Pivot, Change pivot point for transforms (buggy).
            * 'RIGID_BODY_JOINT': Rigid Body Joint, Use to define a Rigid Body Constraint (for Game Engine use only).
            * 'SCRIPT': Script, Custom constraint(s) written in Python (Not yet implemented).
            * 'SHRINKWRAP': Shrinkwrap, Restrict movements to surface of target mesh.
            (type: enum in ['CAMERA_SOLVER', 'FOLLOW_TRACK', 'OBJECT_SOLVER', 'COPY_LOCATION', 'COPY_ROTATION', 'COPY_SCALE', 'COPY_TRANSFORMS', 'LIMIT_DISTANCE', 'LIMIT_LOCATION', 'LIMIT_ROTATION', 'LIMIT_SCALE', 'MAINTAIN_VOLUME', 'TRANSFORM', 'TRANSFORM_CACHE', 'CLAMP_TO', 'DAMPED_TRACK', 'IK', 'LOCKED_TRACK', 'SPLINE_IK', 'STRETCH_TO', 'TRACK_TO', 'ACTION', 'CHILD_OF', 'FLOOR', 'FOLLOW_PATH', 'PIVOT', 'RIGID_BODY_JOINT', 'SCRIPT', 'SHRINKWRAP'])
        :type type: str
        :return: New constraint
        :param : (type: bpy.types.Constraint)
        :rtype: Constraint
        """

    def remove(self, constraint):
        """Remove a constraint from this object
        
        :param constraint: Removed constraint
            (type: bpy.types.Constraint, (never None))
        :type constraint: Constraint
        """


class Property(bpy_struct):
    """RNA property definition"""

    description = ""
    """Description of the property for tooltips
    (type: string, default "", (readonly, never None))
    
    :type: str
    """

    icon = 'NONE'
    """Icon of the item
    (type: enum in ['NONE', 'QUESTION', 'ERROR', 'CANCEL', 'TRIA_RIGHT', 'TRIA_DOWN', 'TRIA_LEFT', 'TRIA_UP', 'ARROW_LEFTRIGHT', 'PLUS', 'DISCLOSURE_TRI_DOWN', 'DISCLOSURE_TRI_RIGHT', 'RADIOBUT_OFF', 'RADIOBUT_ON', 'MENU_PANEL', 'BLENDER', 'GRIP', 'DOT', 'COLLAPSEMENU', 'X', 'GO_LEFT', 'PLUG', 'UI', 'NODE', 'NODE_SEL', 'FULLSCREEN', 'SPLITSCREEN', 'RIGHTARROW_THIN', 'BORDERMOVE', 'VIEWZOOM', 'ZOOMIN', 'ZOOMOUT', 'PANEL_CLOSE', 'COPY_ID', 'EYEDROPPER', 'LINK_AREA', 'AUTO', 'CHECKBOX_DEHLT', 'CHECKBOX_HLT', 'UNLOCKED', 'LOCKED', 'UNPINNED', 'PINNED', 'SCREEN_BACK', 'RIGHTARROW', 'DOWNARROW_HLT', 'DOTSUP', 'DOTSDOWN', 'LINK', 'INLINK', 'PLUGIN', 'HELP', 'GHOST_ENABLED', 'COLOR', 'LINKED', 'UNLINKED', 'HAND', 'ZOOM_ALL', 'ZOOM_SELECTED', 'ZOOM_PREVIOUS', 'ZOOM_IN', 'ZOOM_OUT', 'RENDER_REGION', 'BORDER_RECT', 'BORDER_LASSO', 'FREEZE', 'STYLUS_PRESSURE', 'GHOST_DISABLED', 'NEW', 'FILE_TICK', 'QUIT', 'URL', 'RECOVER_LAST', 'FULLSCREEN_ENTER', 'FULLSCREEN_EXIT', 'BLANK1', 'LAMP', 'MATERIAL', 'TEXTURE', 'ANIM', 'WORLD', 'SCENE', 'EDIT', 'GAME', 'RADIO', 'SCRIPT', 'PARTICLES', 'PHYSICS', 'SPEAKER', 'TEXTURE_SHADED', 'VIEW3D', 'IPO', 'OOPS', 'BUTS', 'FILESEL', 'IMAGE_COL', 'INFO', 'SEQUENCE', 'TEXT', 'IMASEL', 'SOUND', 'ACTION', 'NLA', 'SCRIPTWIN', 'TIME', 'NODETREE', 'LOGIC', 'CONSOLE', 'PREFERENCES', 'CLIP', 'ASSET_MANAGER', 'OBJECT_DATAMODE', 'EDITMODE_HLT', 'FACESEL_HLT', 'VPAINT_HLT', 'TPAINT_HLT', 'WPAINT_HLT', 'SCULPTMODE_HLT', 'POSE_HLT', 'PARTICLEMODE', 'LIGHTPAINT', 'SCENE_DATA', 'RENDERLAYERS', 'WORLD_DATA', 'OBJECT_DATA', 'MESH_DATA', 'CURVE_DATA', 'META_DATA', 'LATTICE_DATA', 'LAMP_DATA', 'MATERIAL_DATA', 'TEXTURE_DATA', 'ANIM_DATA', 'CAMERA_DATA', 'PARTICLE_DATA', 'LIBRARY_DATA_DIRECT', 'GROUP', 'ARMATURE_DATA', 'POSE_DATA', 'BONE_DATA', 'CONSTRAINT', 'SHAPEKEY_DATA', 'CONSTRAINT_BONE', 'CAMERA_STEREO', 'PACKAGE', 'UGLYPACKAGE', 'BRUSH_DATA', 'IMAGE_DATA', 'FILE', 'FCURVE', 'FONT_DATA', 'RENDER_RESULT', 'SURFACE_DATA', 'EMPTY_DATA', 'SETTINGS', 'RENDER_ANIMATION', 'RENDER_STILL', 'LIBRARY_DATA_BROKEN', 'BOIDS', 'STRANDS', 'LIBRARY_DATA_INDIRECT', 'GREASEPENCIL', 'LINE_DATA', 'GROUP_BONE', 'GROUP_VERTEX', 'GROUP_VCOL', 'GROUP_UVS', 'RNA', 'RNA_ADD', 'OUTLINER_OB_EMPTY', 'OUTLINER_OB_MESH', 'OUTLINER_OB_CURVE', 'OUTLINER_OB_LATTICE', 'OUTLINER_OB_META', 'OUTLINER_OB_LAMP', 'OUTLINER_OB_CAMERA', 'OUTLINER_OB_ARMATURE', 'OUTLINER_OB_FONT', 'OUTLINER_OB_SURFACE', 'OUTLINER_OB_SPEAKER', 'RESTRICT_COLOR_OFF', 'RESTRICT_COLOR_ON', 'RESTRICT_VIEW_OFF', 'RESTRICT_VIEW_ON', 'RESTRICT_SELECT_OFF', 'RESTRICT_SELECT_ON', 'RESTRICT_RENDER_OFF', 'RESTRICT_RENDER_ON', 'OUTLINER_DATA_EMPTY', 'OUTLINER_DATA_MESH', 'OUTLINER_DATA_CURVE', 'OUTLINER_DATA_LATTICE', 'OUTLINER_DATA_META', 'OUTLINER_DATA_LAMP', 'OUTLINER_DATA_CAMERA', 'OUTLINER_DATA_ARMATURE', 'OUTLINER_DATA_FONT', 'OUTLINER_DATA_SURFACE', 'OUTLINER_DATA_SPEAKER', 'OUTLINER_DATA_POSE', 'MESH_PLANE', 'MESH_CUBE', 'MESH_CIRCLE', 'MESH_UVSPHERE', 'MESH_ICOSPHERE', 'MESH_GRID', 'MESH_MONKEY', 'MESH_CYLINDER', 'MESH_TORUS', 'MESH_CONE', 'MESH_CAPSULE', 'LAMP_POINT', 'LAMP_SUN', 'LAMP_SPOT', 'LAMP_HEMI', 'LAMP_AREA', 'META_EMPTY', 'META_PLANE', 'META_CUBE', 'META_BALL', 'META_ELLIPSOID', 'META_CAPSULE', 'SURFACE_NCURVE', 'SURFACE_NCIRCLE', 'SURFACE_NSURFACE', 'SURFACE_NCYLINDER', 'SURFACE_NSPHERE', 'SURFACE_NTORUS', 'CURVE_BEZCURVE', 'CURVE_BEZCIRCLE', 'CURVE_NCURVE', 'CURVE_NCIRCLE', 'CURVE_PATH', 'COLOR_RED', 'COLOR_GREEN', 'COLOR_BLUE', 'TRIA_RIGHT_BAR', 'TRIA_DOWN_BAR', 'TRIA_LEFT_BAR', 'TRIA_UP_BAR', 'FORCE_FORCE', 'FORCE_WIND', 'FORCE_VORTEX', 'FORCE_MAGNETIC', 'FORCE_HARMONIC', 'FORCE_CHARGE', 'FORCE_LENNARDJONES', 'FORCE_TEXTURE', 'FORCE_CURVE', 'FORCE_BOID', 'FORCE_TURBULENCE', 'FORCE_DRAG', 'FORCE_SMOKEFLOW', 'NODE_INSERT_ON', 'NODE_INSERT_OFF', 'MODIFIER', 'MOD_WAVE', 'MOD_BUILD', 'MOD_DECIM', 'MOD_MIRROR', 'MOD_SOFT', 'MOD_SUBSURF', 'HOOK', 'MOD_PHYSICS', 'MOD_PARTICLES', 'MOD_BOOLEAN', 'MOD_EDGESPLIT', 'MOD_ARRAY', 'MOD_UVPROJECT', 'MOD_DISPLACE', 'MOD_CURVE', 'MOD_LATTICE', 'CONSTRAINT_DATA', 'MOD_ARMATURE', 'MOD_SHRINKWRAP', 'MOD_CAST', 'MOD_MESHDEFORM', 'MOD_BEVEL', 'MOD_SMOOTH', 'MOD_SIMPLEDEFORM', 'MOD_MASK', 'MOD_CLOTH', 'MOD_EXPLODE', 'MOD_FLUIDSIM', 'MOD_MULTIRES', 'MOD_SMOKE', 'MOD_SOLIDIFY', 'MOD_SCREW', 'MOD_VERTEX_WEIGHT', 'MOD_DYNAMICPAINT', 'MOD_REMESH', 'MOD_OCEAN', 'MOD_WARP', 'MOD_SKIN', 'MOD_TRIANGULATE', 'MOD_WIREFRAME', 'MOD_DATA_TRANSFER', 'MOD_NORMALEDIT', 'REC', 'PLAY', 'FF', 'REW', 'PAUSE', 'PREV_KEYFRAME', 'NEXT_KEYFRAME', 'PLAY_AUDIO', 'PLAY_REVERSE', 'PREVIEW_RANGE', 'ACTION_TWEAK', 'PMARKER_ACT', 'PMARKER_SEL', 'PMARKER', 'MARKER_HLT', 'MARKER', 'SPACE2', 'SPACE3', 'KEYINGSET', 'KEY_DEHLT', 'KEY_HLT', 'MUTE_IPO_OFF', 'MUTE_IPO_ON', 'VISIBLE_IPO_OFF', 'VISIBLE_IPO_ON', 'DRIVER', 'SOLO_OFF', 'SOLO_ON', 'FRAME_PREV', 'FRAME_NEXT', 'NLA_PUSHDOWN', 'IPO_CONSTANT', 'IPO_LINEAR', 'IPO_BEZIER', 'IPO_SINE', 'IPO_QUAD', 'IPO_CUBIC', 'IPO_QUART', 'IPO_QUINT', 'IPO_EXPO', 'IPO_CIRC', 'IPO_BOUNCE', 'IPO_ELASTIC', 'IPO_BACK', 'IPO_EASE_IN', 'IPO_EASE_OUT', 'IPO_EASE_IN_OUT', 'NORMALIZE_FCURVES', 'VERTEXSEL', 'EDGESEL', 'FACESEL', 'LOOPSEL', 'ROTATE', 'CURSOR', 'ROTATECOLLECTION', 'ROTATECENTER', 'ROTACTIVE', 'ALIGN', 'SMOOTHCURVE', 'SPHERECURVE', 'ROOTCURVE', 'SHARPCURVE', 'LINCURVE', 'NOCURVE', 'RNDCURVE', 'PROP_OFF', 'PROP_ON', 'PROP_CON', 'SCULPT_DYNTOPO', 'PARTICLE_POINT', 'PARTICLE_TIP', 'PARTICLE_PATH', 'MAN_TRANS', 'MAN_ROT', 'MAN_SCALE', 'MANIPUL', 'SNAP_OFF', 'SNAP_ON', 'SNAP_NORMAL', 'SNAP_GRID', 'SNAP_VERTEX', 'SNAP_EDGE', 'SNAP_FACE', 'SNAP_VOLUME', 'SNAP_INCREMENT', 'STICKY_UVS_LOC', 'STICKY_UVS_DISABLE', 'STICKY_UVS_VERT', 'CLIPUV_DEHLT', 'CLIPUV_HLT', 'SNAP_PEEL_OBJECT', 'GRID', 'PASTEDOWN', 'COPYDOWN', 'PASTEFLIPUP', 'PASTEFLIPDOWN', 'SNAP_SURFACE', 'AUTOMERGE_ON', 'AUTOMERGE_OFF', 'RETOPO', 'UV_VERTEXSEL', 'UV_EDGESEL', 'UV_FACESEL', 'UV_ISLANDSEL', 'UV_SYNC_SELECT', 'BBOX', 'WIRE', 'SOLID', 'SMOOTH', 'POTATO', 'ORTHO', 'LOCKVIEW_OFF', 'LOCKVIEW_ON', 'AXIS_SIDE', 'AXIS_FRONT', 'AXIS_TOP', 'NDOF_DOM', 'NDOF_TURN', 'NDOF_FLY', 'NDOF_TRANS', 'LAYER_USED', 'LAYER_ACTIVE', 'SORTALPHA', 'SORTBYEXT', 'SORTTIME', 'SORTSIZE', 'LONGDISPLAY', 'SHORTDISPLAY', 'GHOST', 'IMGDISPLAY', 'SAVE_AS', 'SAVE_COPY', 'BOOKMARKS', 'FONTPREVIEW', 'FILTER', 'NEWFOLDER', 'OPEN_RECENT', 'FILE_PARENT', 'FILE_REFRESH', 'FILE_FOLDER', 'FILE_BLANK', 'FILE_BLEND', 'FILE_IMAGE', 'FILE_MOVIE', 'FILE_SCRIPT', 'FILE_SOUND', 'FILE_FONT', 'FILE_TEXT', 'RECOVER_AUTO', 'SAVE_PREFS', 'LINK_BLEND', 'APPEND_BLEND', 'IMPORT', 'EXPORT', 'EXTERNAL_DATA', 'LOAD_FACTORY', 'LOOP_BACK', 'LOOP_FORWARDS', 'BACK', 'FORWARD', 'FILE_HIDDEN', 'FILE_BACKUP', 'DISK_DRIVE', 'MATPLANE', 'MATSPHERE', 'MATCUBE', 'MONKEY', 'HAIR', 'ALIASED', 'ANTIALIASED', 'MAT_SPHERE_SKY', 'WORDWRAP_OFF', 'WORDWRAP_ON', 'SYNTAX_OFF', 'SYNTAX_ON', 'LINENUMBERS_OFF', 'LINENUMBERS_ON', 'SCRIPTPLUGINS', 'SEQ_SEQUENCER', 'SEQ_PREVIEW', 'SEQ_LUMA_WAVEFORM', 'SEQ_CHROMA_SCOPE', 'SEQ_HISTOGRAM', 'SEQ_SPLITVIEW', 'IMAGE_RGB', 'IMAGE_RGB_ALPHA', 'IMAGE_ALPHA', 'IMAGE_ZDEPTH', 'IMAGEFILE', 'BRUSH_ADD', 'BRUSH_BLOB', 'BRUSH_BLUR', 'BRUSH_CLAY', 'BRUSH_CLAY_STRIPS', 'BRUSH_CLONE', 'BRUSH_CREASE', 'BRUSH_DARKEN', 'BRUSH_FILL', 'BRUSH_FLATTEN', 'BRUSH_GRAB', 'BRUSH_INFLATE', 'BRUSH_LAYER', 'BRUSH_LIGHTEN', 'BRUSH_MASK', 'BRUSH_MIX', 'BRUSH_MULTIPLY', 'BRUSH_NUDGE', 'BRUSH_PINCH', 'BRUSH_SCRAPE', 'BRUSH_SCULPT_DRAW', 'BRUSH_SMEAR', 'BRUSH_SMOOTH', 'BRUSH_SNAKE_HOOK', 'BRUSH_SOFTEN', 'BRUSH_SUBTRACT', 'BRUSH_TEXDRAW', 'BRUSH_TEXFILL', 'BRUSH_TEXMASK', 'BRUSH_THUMB', 'BRUSH_ROTATE', 'BRUSH_VERTEXDRAW', 'MATCAP_01', 'MATCAP_02', 'MATCAP_03', 'MATCAP_04', 'MATCAP_05', 'MATCAP_06', 'MATCAP_07', 'MATCAP_08', 'MATCAP_09', 'MATCAP_10', 'MATCAP_11', 'MATCAP_12', 'MATCAP_13', 'MATCAP_14', 'MATCAP_15', 'MATCAP_16', 'MATCAP_17', 'MATCAP_18', 'MATCAP_19', 'MATCAP_20', 'MATCAP_21', 'MATCAP_22', 'MATCAP_23', 'MATCAP_24', 'SMALL_TRI_RIGHT_VEC', 'KEYTYPE_KEYFRAME_VEC', 'KEYTYPE_BREAKDOWN_VEC', 'KEYTYPE_EXTREME_VEC', 'KEYTYPE_JITTER_VEC', 'KEYTYPE_MOVING_HOLD_VEC', 'COLORSET_01_VEC', 'COLORSET_02_VEC', 'COLORSET_03_VEC', 'COLORSET_04_VEC', 'COLORSET_05_VEC', 'COLORSET_06_VEC', 'COLORSET_07_VEC', 'COLORSET_08_VEC', 'COLORSET_09_VEC', 'COLORSET_10_VEC', 'COLORSET_11_VEC', 'COLORSET_12_VEC', 'COLORSET_13_VEC', 'COLORSET_14_VEC', 'COLORSET_15_VEC', 'COLORSET_16_VEC', 'COLORSET_17_VEC', 'COLORSET_18_VEC', 'COLORSET_19_VEC', 'COLORSET_20_VEC'], default 'NONE', (readonly))
    
    :type: str
    """

    identifier = ""
    """Unique name used in the code and scripting
    (type: string, default "", (readonly, never None))
    
    :type: str
    """

    is_animatable = False
    """Property is animatable through RNA
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_argument_optional = False
    """True when the property is optional in a Python function implementing an RNA function
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_enum_flag = False
    """True when multiple enums
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_hidden = False
    """True when the property is hidden
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_library_editable = False
    """Property is editable from linked instances (changes not saved)
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_never_none = False
    """True when this value can't be set to None
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_output = False
    """True when this property is an output value from an RNA function
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_readonly = False
    """Property is editable through RNA
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_registered = False
    """Property is registered as part of type registration
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_registered_optional = False
    """Property is optionally registered as part of type registration
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_required = False
    """False when this property is an optional argument in an RNA function
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_runtime = False
    """Property has been dynamically created at runtime
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_skip_save = False
    """True when the property is not saved in presets
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    name = ""
    """Human readable name
    (type: string, default "", (readonly, never None))
    
    :type: str
    """

    srna = None
    """Struct definition used for properties assigned to this item
    (type: bpy.types.Struct, (readonly))
    
    :type: Struct
    """

    subtype = 'NONE'
    """Semantic interpretation of the property
    (type: enum in ['NONE', 'FILE_PATH', 'DIR_PATH', 'PIXEL', 'UNSIGNED', 'PERCENTAGE', 'FACTOR', 'ANGLE', 'TIME', 'DISTANCE', 'COLOR', 'TRANSLATION', 'DIRECTION', 'MATRIX', 'EULER', 'QUATERNION', 'XYZ', 'COLOR_GAMMA', 'COORDINATES', 'LAYER', 'LAYER_MEMBERSHIP'], default 'NONE', (readonly))
    
    :type: str
    """

    translation_context = ""
    """Translation context of the property's name
    (type: string, default "", (readonly, never None))
    
    :type: str
    """

    type = 'BOOLEAN'
    """Data type of the property
    (type: enum in ['BOOLEAN', 'INT', 'FLOAT', 'STRING', 'ENUM', 'POINTER', 'COLLECTION'], default 'BOOLEAN', (readonly))
    
    :type: str
    """

    unit = 'NONE'
    """Type of units for this property
    (type: enum in ['NONE', 'LENGTH', 'AREA', 'VOLUME', 'ROTATION', 'TIME', 'VELOCITY', 'ACCELERATION', 'CAMERA'], default 'NONE', (readonly))
    
    :type: str
    """


class PropertyGroup(bpy_struct):
    """Group of ID properties"""

    name = ""
    """Unique name used in the code and scripting
    (type: string, default "", (never None))
    
    :type: str
    """


class PropertyGroupItem(bpy_struct):
    """Property that stores arbitrary, user defined properties"""

    collection = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.PropertyGroup, (readonly))
    
    :type: bpy_prop_collection
    """

    double = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    double_array = (0.0)
    """(type: float array of 1 items in [-inf, inf], default (0.0))
    
    :type: collections.Sequence[float]
    """

    float = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    float_array = (0.0)
    """(type: float array of 1 items in [-inf, inf], default (0.0))
    
    :type: collections.Sequence[float]
    """

    group = None
    """(type: bpy.types.PropertyGroup, (readonly))
    
    :type: PropertyGroup
    """

    idp_array = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.PropertyGroup, (readonly))
    
    :type: bpy_prop_collection
    """

    int = 0
    """(type: int in [-inf, inf], default 0)
    
    :type: int
    """

    int_array = (0,)
    """(type: int array of 1 items in [-inf, inf], default (0,))
    
    :type: collections.Sequence[int]
    """

    string = ""
    """(type: string, default "", (never None))
    
    :type: str
    """


class Region(bpy_struct):
    """Region in a subdivided screen area"""

    height = 0
    """Region height
    (type: int in [0, 32767], default 0, (readonly))
    
    :type: int
    """

    id = 0
    """Unique ID for this region
    (type: int in [-32768, 32767], default 0, (readonly))
    
    :type: int
    """

    type = 'WINDOW'
    """Type of this region
    (type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW'], default 'WINDOW', (readonly))
    
    :type: str
    """

    view2d = None
    """2D view of the region
    (type: bpy.types.View2D, (readonly, never None))
    
    :type: View2D
    """

    width = 0
    """Region width
    (type: int in [0, 32767], default 0, (readonly))
    
    :type: int
    """

    x = 0
    """The window relative vertical location of the region
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    y = 0
    """The window relative horizontal location of the region
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    def tag_redraw(self):
        """tag_redraw"""


class RegionView3D(bpy_struct):
    """3D View region data"""

    is_perspective = False
    """(type: boolean, default False)
    
    :type: bool
    """

    lock_rotation = False
    """Lock view rotation in side views
    (type: boolean, default False)
    
    :type: bool
    """

    perspective_matrix = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    """Current perspective matrix (window_matrix * view_matrix)
    (type: float array of 16 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (readonly))
    
    :type: mathutils.Matrix
    """

    show_sync_view = False
    """Sync view position between side views
    (type: boolean, default False)
    
    :type: bool
    """

    use_box_clip = False
    """Clip objects based on what's visible in other side views
    (type: boolean, default False)
    
    :type: bool
    """

    view_camera_offset = (0.0, 0.0)
    """View shift in camera view
    (type: float array of 2 items in [-inf, inf], default (0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    view_camera_zoom = 0.0
    """Zoom factor in camera view
    (type: float in [-30, 600], default 0.0)
    
    :type: float
    """

    view_distance = 0.0
    """Distance to the view location
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    view_location = (0.0, 0.0, 0.0)
    """View pivot location
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    view_matrix = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    """Current view matrix
    (type: float array of 16 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Matrix
    """

    view_perspective = 'ORTHO'
    """View Perspective
    (type: enum in ['PERSP', 'ORTHO', 'CAMERA'], default 'ORTHO')
    
    :type: str
    """

    view_rotation = (0.0, 0.0, 0.0, 0.0)
    """Rotation in quaternions (keep normalized)
    (type: float array of 4 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Quaternion
    """

    window_matrix = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    """Current window matrix
    (type: float array of 16 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (readonly))
    
    :type: mathutils.Matrix
    """

    def update(self):
        """Recalculate the view matrices"""


class RenderEngine(bpy_struct):
    """Render engine"""

    bl_idname = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    bl_label = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    bl_use_exclude_layers = False
    """(type: boolean, default False)
    
    :type: bool
    """

    bl_use_postprocess = False
    """(type: boolean, default False)
    
    :type: bool
    """

    bl_use_preview = False
    """(type: boolean, default False)
    
    :type: bool
    """

    bl_use_save_buffers = False
    """(type: boolean, default False)
    
    :type: bool
    """

    bl_use_shading_nodes = False
    """(type: boolean, default False)
    
    :type: bool
    """

    bl_use_shading_nodes_custom = True
    """(type: boolean, default True)
    
    :type: bool
    """

    bl_use_spherical_stereo = False
    """(type: boolean, default False)
    
    :type: bool
    """

    bl_use_texture_preview = False
    """(type: boolean, default False)
    
    :type: bool
    """

    camera_override = None
    """(type: bpy.types.Object, (readonly))
    
    :type: Object
    """

    is_animation = False
    """(type: boolean, default False)
    
    :type: bool
    """

    is_preview = False
    """(type: boolean, default False)
    
    :type: bool
    """

    layer_override = (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
    """(type: boolean array of 20 items, default (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False))
    
    :type: collections.Sequence[bool]
    """

    render = None
    """(type: bpy.types.RenderSettings, (readonly))
    
    :type: RenderSettings
    """

    resolution_x = 0
    """(type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    resolution_y = 0
    """(type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    tile_x = 0
    """(type: int in [0, inf], default 0)
    
    :type: int
    """

    tile_y = 0
    """(type: int in [0, inf], default 0)
    
    :type: int
    """

    use_highlight_tiles = False
    """(type: boolean, default False)
    
    :type: bool
    """

    def update(self, data=None, scene=None):
        """Export scene data for render"""

    def render(self, scene=None):
        """Render scene into an image"""

    def bake(self, scene, object, pass_type, pass_filter, object_id, pixel_array, num_pixels, depth, result):
        """Bake passes
        
        :param pass_type: Pass, Pass to bake
            (type: enum in ['COMBINED', 'AO', 'SHADOW', 'NORMAL', 'UV', 'EMIT', 'ENVIRONMENT', 'DIFFUSE', 'GLOSSY', 'TRANSMISSION', 'SUBSURFACE'])
        :type pass_type: str
        :param pass_filter: Pass Filter, Filter to combined, diffuse, glossy, transmission and subsurface passes
            (type: int in [0, inf])
        :type pass_filter: int
        :param object_id: Object Id, Id of the current object being baked in relation to the others
            (type: int in [0, inf])
        :type object_id: int
        :param num_pixels: Number of Pixels, Size of the baking batch
            (type: int in [0, inf])
        :type num_pixels: int
        :param depth: Pixels depth, Number of channels
            (type: int in [0, inf])
        :type depth: int
        """

    def view_update(self, context=None):
        """Update on data changes for viewport render"""

    def view_draw(self, context=None):
        """Draw viewport render"""

    def update_script_node(self, node=None):
        """Compile shader script node"""

    def tag_redraw(self):
        """Request redraw for viewport rendering"""

    def tag_update(self):
        """Request update call for viewport rendering"""

    def begin_result(self, x, y, w, h, layer="", view=""):
        """Create render result to write linear floating point render layers and passes
        
        :param x: X
            (type: int in [0, inf])
        :type x: int
        :param y: Y
            (type: int in [0, inf])
        :type y: int
        :param w: Width
            (type: int in [0, inf])
        :type w: int
        :param h: Height
            (type: int in [0, inf])
        :type h: int
        :param layer: Layer, Single layer to get render result for
            (type: str, (optional, never None))
        :type layer: str
        :param view: View, Single view to get render result for
            (type: str, (optional, never None))
        :type view: str
        :return: Result
        :param : (type: bpy.types.RenderResult)
        :rtype: RenderResult
        """

    def update_result(self, result):
        """Signal that pixels have been updated and can be redrawn in the user interface
        
        :param result: Result
            (type: bpy.types.RenderResult)
        :type result: RenderResult
        """

    def end_result(self, result, cancel=False, do_merge_results=False):
        """All pixels in the render result have been set and are final
        
        :param result: Result
            (type: bpy.types.RenderResult)
        :type result: RenderResult
        :param cancel: Cancel, Don't mark tile as done, don't merge results unless forced
            (type: boolean, (optional))
        :type cancel: bool
        :param do_merge_results: Merge Results, Merge results even if cancel=true
            (type: boolean, (optional))
        :type do_merge_results: bool
        """

    def test_break(self):
        """Test if the render operation should been canceled, this is a fast call that should be used regularly for responsiveness
        
        :return: Break
        :rtype: bool
        """

    def active_view_get(self):
        """active_view_get
        
        :return: View, Single view active
        :param : (type: string, (never None))
        :rtype: str
        """

    def active_view_set(self, view):
        """active_view_set
        
        :param view: View, Single view to set as active
            (type: str, (never None))
        :type view: str
        """

    def camera_shift_x(self, camera, use_spherical_stereo=False):
        """camera_shift_x
        
        :param use_spherical_stereo: Spherical Stereo
            (type: boolean, (optional))
        :type use_spherical_stereo: bool
        :return: Shift X
        :param : (type: float in [0, inf])
        :rtype: float
        """

    def camera_model_matrix(self, camera, use_spherical_stereo=False, r_model_matrix=None):
        """camera_model_matrix
        
        :param use_spherical_stereo: Spherical Stereo
            (type: boolean, (optional))
        :type use_spherical_stereo: bool
        :param r_model_matrix: Model Matrix, Normalized camera model matrix
            (type: float array of 16 items in [-inf, inf])
        :type r_model_matrix: mathutils.Matrix
        """

    def use_spherical_stereo(self, camera):
        """use_spherical_stereo
        
        :return: Spherical Stereo
        :rtype: bool
        """

    def update_stats(self, stats, info):
        """Update and signal to redraw render status text
        
        :param stats: Stats
            (type: str, (never None))
        :type stats: str
        :param info: Info
            (type: str, (never None))
        :type info: str
        """

    def frame_set(self, frame, subframe):
        """Evaluate scene at a different frame (for motion blur)
        
        :param frame: Frame
            (type: int in [-inf, inf])
        :type frame: int
        :param subframe: Subframe
            (type: float in [0, 1])
        :type subframe: float
        """

    def update_progress(self, progress):
        """Update progress percentage of render
        
        :param progress: Percentage of render that's done
            (type: float in [0, 1])
        :type progress: float
        """

    def update_memory_stats(self, memory_used=0.0, memory_peak=0.0):
        """Update memory usage statistics
        
        :param memory_used: Current memory usage in megabytes
            (type: float in [0, inf], (optional))
        :type memory_used: float
        :param memory_peak: Peak memory usage in megabytes
            (type: float in [0, inf], (optional))
        :type memory_peak: float
        """

    def report(self, type, message):
        """Report info, warning or error messages
        
        :param type: Type
        :type type: enum set in {'DEBUG', 'INFO', 'OPERATOR', 'PROPERTY', 'WARNING', 'ERROR', 'ERROR_INVALID_INPUT', 'ERROR_INVALID_CONTEXT', 'ERROR_OUT_OF_MEMORY'}
        :param message: Report Message
            (type: str, (never None))
        :type message: str
        """

    def error_set(self, message):
        """Set error message displaying after the render is finished
        
        :param message: Report Message
            (type: str, (never None))
        :type message: str
        """

    def bind_display_space_shader(self, scene):
        """Bind GLSL fragment shader that converts linear colors to display space colors using scene color management settings"""

    def unbind_display_space_shader(self):
        """Unbind GLSL display space shader, must always be called after binding the shader"""

    def support_display_space_shader(self, scene):
        """Test if GLSL display space shader is supported for the combination of graphics card and scene settings
        
        :return: Supported
        :rtype: bool
        """


class RenderLayer(bpy_struct):
    """"""

    exclude_ambient_occlusion = False
    """Exclude AO pass from combined
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    exclude_emit = False
    """Exclude emission pass from combined
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    exclude_environment = False
    """Exclude environment pass from combined
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    exclude_indirect = False
    """Exclude indirect pass from combined
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    exclude_reflection = False
    """Exclude raytraced reflection pass from combined
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    exclude_refraction = False
    """Exclude raytraced refraction pass from combined
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    exclude_shadow = False
    """Exclude shadow pass from combined
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    exclude_specular = False
    """Exclude specular pass from combined
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    invert_zmask = False
    """For Zmask, only render what is behind solid z values instead of in front
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    layers = (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
    """Scene layers included in this render layer
    (type: boolean array of 20 items, default (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False), (readonly))
    
    :type: collections.Sequence[bool]
    """

    layers_exclude = (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
    """Exclude scene layers from having any influence
    (type: boolean array of 20 items, default (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False), (readonly))
    
    :type: collections.Sequence[bool]
    """

    layers_zmask = (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
    """Zmask scene layers for solid faces
    (type: boolean array of 20 items, default (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False), (readonly))
    
    :type: collections.Sequence[bool]
    """

    light_override = None
    """Group to override all other lights in this render layer
    (type: bpy.types.Group, (readonly))
    
    :type: Group
    """

    material_override = None
    """Material to override all other materials in this render layer
    (type: bpy.types.Material, (readonly))
    
    :type: Material
    """

    name = ""
    """Render layer name
    (type: string, default "", (readonly, never None))
    
    :type: str
    """

    passes = None
    """(type: bpy.types.RenderPasses bpy.types.bpy_prop_collection of bpy.types.RenderPass, (readonly))
    
    :type: RenderPasses
    """

    use = False
    """Disable or enable the render layer
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_all_z = False
    """Fill in Z values for solid faces in invisible layers, for masking
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_ao = False
    """Render AO in this Layer
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_edge_enhance = False
    """Render Edge-enhance in this Layer (only works for Solid faces)
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_freestyle = False
    """Render stylized strokes in this Layer
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_halo = False
    """Render Halos in this Layer (on top of Solid)
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_pass_ambient_occlusion = False
    """Deliver AO pass
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_pass_color = False
    """Deliver shade-less color pass
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_pass_combined = False
    """Deliver full combined RGBA buffer
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_pass_diffuse = False
    """Deliver diffuse pass
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_pass_diffuse_color = False
    """Deliver diffuse color pass
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_pass_diffuse_direct = False
    """Deliver diffuse direct pass
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_pass_diffuse_indirect = False
    """Deliver diffuse indirect pass
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_pass_emit = False
    """Deliver emission pass
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_pass_environment = False
    """Deliver environment lighting pass
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_pass_glossy_color = False
    """Deliver glossy color pass
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_pass_glossy_direct = False
    """Deliver glossy direct pass
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_pass_glossy_indirect = False
    """Deliver glossy indirect pass
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_pass_indirect = False
    """Deliver indirect lighting pass
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_pass_material_index = False
    """Deliver material index pass
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_pass_mist = False
    """Deliver mist factor pass (0.0-1.0)
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_pass_normal = False
    """Deliver normal pass
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_pass_object_index = False
    """Deliver object index pass
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_pass_reflection = False
    """Deliver raytraced reflection pass
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_pass_refraction = False
    """Deliver raytraced refraction pass
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_pass_shadow = False
    """Deliver shadow pass
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_pass_specular = False
    """Deliver specular pass
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_pass_subsurface_color = False
    """Deliver subsurface color pass
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_pass_subsurface_direct = False
    """Deliver subsurface direct pass
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_pass_subsurface_indirect = False
    """Deliver subsurface indirect pass
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_pass_transmission_color = False
    """Deliver transmission color pass
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_pass_transmission_direct = False
    """Deliver transmission direct pass
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_pass_transmission_indirect = False
    """Deliver transmission indirect pass
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_pass_uv = False
    """Deliver texture UV pass
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_pass_vector = False
    """Deliver speed vector pass
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_pass_z = False
    """Deliver Z values pass
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_sky = False
    """Render Sky in this Layer
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_solid = False
    """Render Solid faces in this Layer
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_strand = False
    """Render Strands in this Layer
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_zmask = False
    """Only render what's in front of the solid z values
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_ztransp = False
    """Render Z-Transparent faces in this Layer (on top of Solid and Halos)
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    def load_from_file(self, filename, x=0, y=0):
        """Copies the pixels of this renderlayer from an image file
        
        :param filename: Filename, Filename to load into this render tile, must be no smaller than the renderlayer
            (type: str, (never None))
        :type filename: str
        :param x: Offset X, Offset the position to copy from if the image is larger than the render layer
            (type: int in [0, inf], (optional))
        :type x: int
        :param y: Offset Y, Offset the position to copy from if the image is larger than the render layer
            (type: int in [0, inf], (optional))
        :type y: int
        """


class RenderLayers(bpy_struct):
    """Collection of render layers"""

    active = None
    """Active Render Layer
    (type: bpy.types.SceneRenderLayer, (never None))
    
    :type: SceneRenderLayer
    """

    active_index = 0
    """Active index in render layer array
    (type: int in [0, 32767], default 0)
    
    :type: int
    """

    def new(self, name):
        """Add a render layer to scene
        
        :param name: New name for the render layer (not unique)
            (type: str, (never None))
        :type name: str
        :return: Newly created render layer
        :param : (type: bpy.types.SceneRenderLayer)
        :rtype: SceneRenderLayer
        """

    def remove(self, layer):
        """Remove a render layer
        
        :param layer: Render layer to remove
            (type: bpy.types.SceneRenderLayer, (never None))
        :type layer: SceneRenderLayer
        """


class RenderPass(bpy_struct):
    """"""

    channel_id = ""
    """(type: string, default "", (readonly, never None))
    
    :type: str
    """

    channels = 0
    """(type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    debug_type = 'BVH_TRAVERSED_NODES'
    """
    * 'BVH_TRAVERSED_NODES': BVH Traversed Nodes, Number of nodes traversed in BVH for the camera rays.
    * 'BVH_TRAVERSED_INSTANCES': BVH Traversed Instances, Number of BVH instances traversed by camera rays.
    * 'BVH_INTERSECTIONS': BVH Intersections, Number of primitive intersections performed by the camera rays.
    * 'RAY_BOUNCES': Ray Steps, Number of bounces done by the main integration loop.
    (type: enum in ['BVH_TRAVERSED_NODES', 'BVH_TRAVERSED_INSTANCES', 'BVH_INTERSECTIONS', 'RAY_BOUNCES'], default 'BVH_TRAVERSED_NODES', (readonly))
    
    :type: str
    """

    name = ""
    """(type: string, default "", (readonly, never None))
    
    :type: str
    """

    rect = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    type = 'COMBINED'
    """(type: enum in ['COMBINED', 'Z', 'COLOR', 'DIFFUSE', 'SPECULAR', 'SHADOW', 'AO', 'REFLECTION', 'NORMAL', 'VECTOR', 'REFRACTION', 'OBJECT_INDEX', 'UV', 'MIST', 'EMIT', 'ENVIRONMENT', 'MATERIAL_INDEX', 'DIFFUSE_DIRECT', 'DIFFUSE_INDIRECT', 'DIFFUSE_COLOR', 'GLOSSY_DIRECT', 'GLOSSY_INDIRECT', 'GLOSSY_COLOR', 'TRANSMISSION_DIRECT', 'TRANSMISSION_INDIRECT', 'TRANSMISSION_COLOR', 'SUBSURFACE_DIRECT', 'SUBSURFACE_INDIRECT', 'SUBSURFACE_COLOR'], default 'COMBINED', (readonly))
    
    :type: str
    """

    view_id = 0
    """(type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """


class RenderPasses(bpy_struct):
    """Collection of render passes"""

    def find_by_type(self, pass_type, view):
        """Get the render pass for a given type and view
        
        :param pass_type: Pass
            (type: enum in ['COMBINED', 'Z', 'COLOR', 'DIFFUSE', 'SPECULAR', 'SHADOW', 'AO', 'REFLECTION', 'NORMAL', 'VECTOR', 'REFRACTION', 'OBJECT_INDEX', 'UV', 'MIST', 'EMIT', 'ENVIRONMENT', 'MATERIAL_INDEX', 'DIFFUSE_DIRECT', 'DIFFUSE_INDIRECT', 'DIFFUSE_COLOR', 'GLOSSY_DIRECT', 'GLOSSY_INDIRECT', 'GLOSSY_COLOR', 'TRANSMISSION_DIRECT', 'TRANSMISSION_INDIRECT', 'TRANSMISSION_COLOR', 'SUBSURFACE_DIRECT', 'SUBSURFACE_INDIRECT', 'SUBSURFACE_COLOR'])
        :type pass_type: str
        :param view: View, Render view to get pass from
            (type: str, (never None))
        :type view: str
        :return: The matching render pass
        :param : (type: bpy.types.RenderPass)
        :rtype: RenderPass
        """


class RenderResult(bpy_struct):
    """Result of rendering, including all layers and passes"""

    layers = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.RenderLayer, (readonly))
    
    :type: bpy_prop_collection
    """

    resolution_x = 0
    """(type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    resolution_y = 0
    """(type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    views = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.RenderView, (readonly))
    
    :type: bpy_prop_collection
    """

    def load_from_file(self, filename):
        """Copies the pixels of this render result from an image file
        
        :param filename: File Name, Filename to load into this render tile, must be no smaller than the render result
            (type: str, (never None))
        :type filename: str
        """


class RenderSettings(bpy_struct):
    """Rendering settings for a Scene data-block"""

    alpha_mode = 'SKY'
    """Representation of alpha information in the RGBA pixels
    * 'SKY': Sky, Transparent pixels are filled with sky color.
    * 'TRANSPARENT': Transparent, World background is transparent with premultiplied alpha.
    (type: enum in ['SKY', 'TRANSPARENT'], default 'SKY')
    
    :type: str
    """

    antialiasing_samples = '5'
    """Amount of anti-aliasing samples per pixel
    (type: enum in ['5', '8', '11', '16'], default '5')
    
    :type: str
    """

    bake = None
    """(type: bpy.types.BakeSettings, (readonly, never None))
    
    :type: BakeSettings
    """

    bake_aa_mode = '5'
    """(type: enum in ['5', '8', '11', '16'], default '5')
    
    :type: str
    """

    bake_bias = 0.0
    """Bias towards faces further away from the object (in blender units)
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """

    bake_distance = 0.0
    """Maximum distance from active object to other object (in blender units)
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """

    bake_margin = 0
    """Extends the baked result as a post process filter
    (type: int in [0, 64], default 0)
    
    :type: int
    """

    bake_normal_space = 'CAMERA'
    """Choose normal space for baking
    * 'CAMERA': Camera, Bake the normals in camera space.
    * 'WORLD': World, Bake the normals in world space.
    * 'OBJECT': Object, Bake the normals in object space.
    * 'TANGENT': Tangent, Bake the normals in tangent space.
    (type: enum in ['CAMERA', 'WORLD', 'OBJECT', 'TANGENT'], default 'CAMERA')
    
    :type: str
    """

    bake_quad_split = 'AUTO'
    """Choose the method used to split a quad into 2 triangles for baking
    * 'AUTO': Automatic, Split quads to give the least distortion while baking.
    * 'FIXED': Fixed, Split quads predictably (0,1,2) (0,2,3).
    * 'FIXED_ALT': Fixed Alternate, Split quads predictably (1,2,3) (1,3,0).
    (type: enum in ['AUTO', 'FIXED', 'FIXED_ALT'], default 'AUTO')
    
    :type: str
    """

    bake_samples = 256
    """Number of samples used for ambient occlusion baking from multires
    (type: int in [64, 1024], default 256)
    
    :type: int
    """

    bake_type = 'FULL'
    """Choose shading information to bake into the image
    * 'FULL': Full Render, Bake everything.
    * 'AO': Ambient Occlusion, Bake ambient occlusion.
    * 'SHADOW': Shadow, Bake shadows.
    * 'NORMALS': Normals, Bake normals.
    * 'TEXTURE': Textures, Bake textures.
    * 'DISPLACEMENT': Displacement, Bake displacement.
    * 'DERIVATIVE': Derivative, Bake derivative map.
    * 'VERTEX_COLORS': Vertex Colors, Bake vertex colors.
    * 'EMIT': Emission, Bake Emit values (glow).
    * 'ALPHA': Alpha, Bake Alpha values (transparency).
    * 'MIRROR_INTENSITY': Mirror Intensity, Bake Mirror values.
    * 'MIRROR_COLOR': Mirror Colors, Bake Mirror colors.
    * 'SPEC_INTENSITY': Specular Intensity, Bake Specular values.
    * 'SPEC_COLOR': Specular Colors, Bake Specular colors.
    (type: enum in ['FULL', 'AO', 'SHADOW', 'NORMALS', 'TEXTURE', 'DISPLACEMENT', 'DERIVATIVE', 'VERTEX_COLORS', 'EMIT', 'ALPHA', 'MIRROR_INTENSITY', 'MIRROR_COLOR', 'SPEC_INTENSITY', 'SPEC_COLOR'], default 'FULL')
    
    :type: str
    """

    bake_user_scale = 0.0
    """Instead of automatically normalizing to 0..1, apply a user scale to the derivative map
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """

    border_max_x = 0.0
    """Maximum X value for the render border
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    border_max_y = 0.0
    """Maximum Y value for the render border
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    border_min_x = 0.0
    """Minimum X value for the render border
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    border_min_y = 0.0
    """Minimum Y value for the render border
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    display_mode = 'SCREEN'
    """Select where rendered images will be displayed
    * 'SCREEN': Full Screen, Images are rendered in full Screen.
    * 'AREA': Image Editor, Images are rendered in Image Editor.
    * 'WINDOW': New Window, Images are rendered in new Window.
    * 'NONE': Keep UI, Images are rendered without forcing UI changes.
    (type: enum in ['SCREEN', 'AREA', 'WINDOW', 'NONE'], default 'SCREEN')
    
    :type: str
    """

    dither_intensity = 0.0
    """Amount of dithering noise added to the rendered image to break up banding
    (type: float in [0, 2], default 0.0)
    
    :type: float
    """

    edge_color = (0.0, 0.0, 0.0)
    """Edge color
    (type: float array of 3 items in [0, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    edge_threshold = 0
    """Threshold for drawing outlines on geometry edges
    (type: int in [0, 255], default 0)
    
    :type: int
    """

    engine = 'BLENDER_RENDER'
    """Engine to use for rendering
    * 'BLENDER_RENDER': Blender Render, Use the Blender internal rendering engine for rendering.
    (type: enum in ['BLENDER_RENDER'], default 'BLENDER_RENDER')
    
    :type: str
    """

    ffmpeg = None
    """FFmpeg related settings for the scene
    (type: bpy.types.FFmpegSettings, (readonly))
    
    :type: FFmpegSettings
    """

    field_order = 'EVEN_FIRST'
    """Order of video fields (select which lines get rendered first, to create smooth motion for TV output)
    * 'EVEN_FIRST': Upper First, Upper field first.
    * 'ODD_FIRST': Lower First, Lower field first.
    (type: enum in ['EVEN_FIRST', 'ODD_FIRST'], default 'EVEN_FIRST')
    
    :type: str
    """

    file_extension = ""
    """The file extension used for saving renders
    (type: string, default "", (readonly, never None))
    
    :type: str
    """

    filepath = ""
    """Directory/name to save animations, # characters defines the position and length of frame numbers
    (type: string, default "", (never None))
    
    :type: str
    """

    filter_size = 0.0
    """Width over which the reconstruction filter combines samples
    (type: float in [0.5, 1.5], default 0.0)
    
    :type: float
    """

    fps = 0
    """Framerate, expressed in frames per second
    (type: int in [1, 120], default 0)
    
    :type: int
    """

    fps_base = 0.0
    """Framerate base
    (type: float in [0.1, 120], default 0.0)
    
    :type: float
    """

    frame_map_new = 0
    """How many frames the Map Old will last
    (type: int in [1, 900], default 0)
    
    :type: int
    """

    frame_map_old = 0
    """Old mapping value in frames
    (type: int in [1, 900], default 0)
    
    :type: int
    """

    has_multiple_engines = False
    """More than one rendering engine is available
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    image_settings = None
    """(type: bpy.types.ImageFormatSettings, (readonly, never None))
    
    :type: ImageFormatSettings
    """

    is_movie_format = False
    """When true the format is a movie
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    layers = None
    """(type: bpy.types.RenderLayers bpy.types.bpy_prop_collection of bpy.types.SceneRenderLayer, (readonly))
    
    :type: RenderLayers
    """

    line_thickness = 0.0
    """Line thickness in pixels
    (type: float in [0, 10000], default 0.0)
    
    :type: float
    """

    line_thickness_mode = 'ABSOLUTE'
    """Line thickness mode for Freestyle line drawing
    * 'ABSOLUTE': Absolute, Specify unit line thickness in pixels.
    * 'RELATIVE': Relative, Unit line thickness is scaled by the proportion of the present vertical image resolution to 480 pixels.
    (type: enum in ['ABSOLUTE', 'RELATIVE'], default 'ABSOLUTE')
    
    :type: str
    """

    motion_blur_samples = 0
    """Number of scene samples to take with motion blur
    (type: int in [1, 32], default 0)
    
    :type: int
    """

    motion_blur_shutter = 0.0
    """Time taken in frames between shutter open and close
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    motion_blur_shutter_curve = None
    """Curve defining the shutter's openness over time
    (type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    octree_resolution = '64'
    """Resolution of raytrace accelerator, use higher resolutions for larger scenes
    (type: enum in ['64', '128', '256', '512'], default '64')
    
    :type: str
    """

    pixel_aspect_x = 0.0
    """Horizontal aspect ratio - for anamorphic or non-square pixel output
    (type: float in [1, 200], default 0.0)
    
    :type: float
    """

    pixel_aspect_y = 0.0
    """Vertical aspect ratio - for anamorphic or non-square pixel output
    (type: float in [1, 200], default 0.0)
    
    :type: float
    """

    pixel_filter_type = 'BOX'
    """Reconstruction filter used for combining anti-aliasing samples
    * 'BOX': Box, Use a box filter for anti-aliasing.
    * 'TENT': Tent, Use a tent filter for anti-aliasing.
    * 'QUADRATIC': Quadratic, Use a quadratic filter for anti-aliasing.
    * 'CUBIC': Cubic, Use a cubic filter for anti-aliasing.
    * 'CATMULLROM': Catmull-Rom, Use a Catmull-Rom filter for anti-aliasing.
    * 'GAUSSIAN': Gaussian, Use a Gaussian filter for anti-aliasing.
    * 'MITCHELL': Mitchell-Netravali, Use a Mitchell-Netravali filter for anti-aliasing.
    (type: enum in ['BOX', 'TENT', 'QUADRATIC', 'CUBIC', 'CATMULLROM', 'GAUSSIAN', 'MITCHELL'], default 'BOX')
    
    :type: str
    """

    preview_start_resolution = 64
    """Resolution to start rendering preview at, progressively increasing it to the full viewport size
    (type: int in [8, 16384], default 64)
    
    :type: int
    """

    raytrace_method = 'AUTO'
    """Type of raytrace accelerator structure
    * 'AUTO': Auto, Automatically select acceleration structure.
    * 'OCTREE': Octree, Use old Octree structure.
    * 'VBVH': vBVH, Use vBVH.
    * 'SIMD_SVBVH': SIMD SVBVH, Use SIMD SVBVH.
    * 'SIMD_QBVH': SIMD QBVH, Use SIMD QBVH.
    (type: enum in ['AUTO', 'OCTREE', 'VBVH', 'SIMD_SVBVH', 'SIMD_QBVH'], default 'AUTO')
    
    :type: str
    """

    resolution_percentage = 0
    """Percentage scale for render resolution
    (type: int in [1, 32767], default 0)
    
    :type: int
    """

    resolution_x = 0
    """Number of horizontal pixels in the rendered image
    (type: int in [4, 65536], default 0)
    
    :type: int
    """

    resolution_y = 0
    """Number of vertical pixels in the rendered image
    (type: int in [4, 65536], default 0)
    
    :type: int
    """

    sequencer_gl_preview = 'BOUNDBOX'
    """Method to draw in the sequencer view
    * 'BOUNDBOX': Bounding Box, Display the object's local bounding boxes only.
    * 'WIREFRAME': Wireframe, Display the object as wire edges.
    * 'SOLID': Solid, Display the object solid, lit with default OpenGL lights.
    * 'TEXTURED': Texture, Display the object solid, with a texture.
    * 'MATERIAL': Material, Display objects solid, with GLSL material.
    * 'RENDERED': Rendered, Display render preview.
    (type: enum in ['BOUNDBOX', 'WIREFRAME', 'SOLID', 'TEXTURED', 'MATERIAL', 'RENDERED'], default 'BOUNDBOX')
    
    :type: str
    """

    sequencer_gl_render = 'BOUNDBOX'
    """Method to draw in the sequencer view
    * 'BOUNDBOX': Bounding Box, Display the object's local bounding boxes only.
    * 'WIREFRAME': Wireframe, Display the object as wire edges.
    * 'SOLID': Solid, Display the object solid, lit with default OpenGL lights.
    * 'TEXTURED': Texture, Display the object solid, with a texture.
    * 'MATERIAL': Material, Display objects solid, with GLSL material.
    * 'RENDERED': Rendered, Display render preview.
    (type: enum in ['BOUNDBOX', 'WIREFRAME', 'SOLID', 'TEXTURED', 'MATERIAL', 'RENDERED'], default 'BOUNDBOX')
    
    :type: str
    """

    simplify_ao_sss = 0.0
    """Global approximate AO and SSS quality factor
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    simplify_child_particles = 0.0
    """Global child particles percentage
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    simplify_child_particles_render = 0.0
    """Global child particles percentage during rendering
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    simplify_shadow_samples = 0
    """Global maximum shadow samples
    (type: int in [0, 32767], default 0)
    
    :type: int
    """

    simplify_subdivision = 0
    """Global maximum subdivision level
    (type: int in [0, 32767], default 0)
    
    :type: int
    """

    simplify_subdivision_render = 0
    """Global maximum subdivision level during rendering
    (type: int in [0, 32767], default 0)
    
    :type: int
    """

    stamp_background = (0.0, 0.0, 0.0, 0.0)
    """Color to use behind stamp text
    (type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    stamp_font_size = 0
    """Size of the font used when rendering stamp text
    (type: int in [8, 64], default 0)
    
    :type: int
    """

    stamp_foreground = (0.0, 0.0, 0.0, 0.0)
    """Color to use for stamp text
    (type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    stamp_note_text = ""
    """Custom text to appear in the stamp note
    (type: string, default "", (never None))
    
    :type: str
    """

    stereo_views = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.SceneRenderView, (readonly))
    
    :type: bpy_prop_collection
    """

    threads = 0
    """Number of CPU threads to use simultaneously while rendering (for multi-core/CPU systems)
    (type: int in [1, 1024], default 0)
    
    :type: int
    """

    threads_mode = 'AUTO'
    """Determine the amount of render threads used
    * 'AUTO': Auto-detect, Automatically determine the number of threads, based on CPUs.
    * 'FIXED': Fixed, Manually determine the number of threads.
    (type: enum in ['AUTO', 'FIXED'], default 'AUTO')
    
    :type: str
    """

    tile_x = 0
    """Horizontal tile size to use while rendering
    (type: int in [8, 65536], default 0)
    
    :type: int
    """

    tile_y = 0
    """Vertical tile size to use while rendering
    (type: int in [8, 65536], default 0)
    
    :type: int
    """

    use_antialiasing = False
    """Render and combine multiple samples per pixel to prevent jagged edges
    (type: boolean, default False)
    
    :type: bool
    """

    use_bake_antialiasing = False
    """Enables Anti-aliasing
    (type: boolean, default False)
    
    :type: bool
    """

    use_bake_clear = False
    """Clear Images before baking
    (type: boolean, default False)
    
    :type: bool
    """

    use_bake_lores_mesh = False
    """Calculate heights against unsubdivided low resolution mesh
    (type: boolean, default False)
    
    :type: bool
    """

    use_bake_multires = False
    """Bake directly from multires object
    (type: boolean, default False)
    
    :type: bool
    """

    use_bake_normalize = False
    """With displacement normalize to the distance, with ambient occlusion normalize without using material settings
    (type: boolean, default False)
    
    :type: bool
    """

    use_bake_selected_to_active = False
    """Bake shading on the surface of selected objects to the active object
    (type: boolean, default False)
    
    :type: bool
    """

    use_bake_to_vertex_color = False
    """Bake to vertex colors instead of to a UV-mapped image
    (type: boolean, default False)
    
    :type: bool
    """

    use_bake_user_scale = False
    """Use a user scale for the derivative map
    (type: boolean, default False)
    
    :type: bool
    """

    use_border = False
    """Render a user-defined border region, within the frame size (note that this disables save_buffers and full_sample)
    (type: boolean, default False)
    
    :type: bool
    """

    use_compositing = False
    """Process the render result through the compositing pipeline, if compositing nodes are enabled
    (type: boolean, default False)
    
    :type: bool
    """

    use_crop_to_border = False
    """Crop the rendered frame to the defined border size
    (type: boolean, default False)
    
    :type: bool
    """

    use_edge_enhance = False
    """Create a toon outline around the edges of geometry
    (type: boolean, default False)
    
    :type: bool
    """

    use_envmaps = False
    """Calculate environment maps while rendering
    (type: boolean, default False)
    
    :type: bool
    """

    use_fields = False
    """Render image to two fields per frame, for interlaced TV output
    (type: boolean, default False)
    
    :type: bool
    """

    use_fields_still = False
    """Disable the time difference between fields
    (type: boolean, default False)
    
    :type: bool
    """

    use_file_extension = False
    """Add the file format extensions to the rendered file name (eg: filename + .jpg)
    (type: boolean, default False)
    
    :type: bool
    """

    use_free_image_textures = False
    """Free all image textures from memory after render, to save memory before compositing
    (type: boolean, default False)
    
    :type: bool
    """

    use_freestyle = False
    """Draw stylized strokes using Freestyle
    (type: boolean, default False)
    
    :type: bool
    """

    use_full_sample = False
    """Save for every anti-aliasing sample the entire RenderLayer results (this solves anti-aliasing issues with compositing)
    (type: boolean, default False)
    
    :type: bool
    """

    use_game_engine = False
    """Current rendering engine is a game engine
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_instances = False
    """Instance support leads to effective memory reduction when using duplicates
    (type: boolean, default False)
    
    :type: bool
    """

    use_local_coords = False
    """Vertex coordinates are stored locally on each primitive (increases memory usage, but may have impact on speed)
    (type: boolean, default False)
    
    :type: bool
    """

    use_lock_interface = False
    """Lock interface during rendering in favor of giving more memory to the renderer
    (type: boolean, default False)
    
    :type: bool
    """

    use_motion_blur = False
    """Use multi-sampled 3D scene motion blur
    (type: boolean, default False)
    
    :type: bool
    """

    use_multiview = False
    """Use multiple views in the scene
    (type: boolean, default False)
    
    :type: bool
    """

    use_overwrite = False
    """Overwrite existing files while rendering
    (type: boolean, default False)
    
    :type: bool
    """

    use_persistent_data = False
    """Keep render data around for faster re-renders
    (type: boolean, default False)
    
    :type: bool
    """

    use_placeholder = False
    """Create empty placeholder files while rendering frames (similar to Unix 'touch')
    (type: boolean, default False)
    
    :type: bool
    """

    use_raytrace = False
    """Pre-calculate the raytrace accelerator and render raytracing effects
    (type: boolean, default False)
    
    :type: bool
    """

    use_render_cache = False
    """Save render cache to EXR files (useful for heavy compositing, Note: affects indirectly rendered scenes)
    (type: boolean, default False)
    
    :type: bool
    """

    use_save_buffers = False
    """Save tiles for all RenderLayers and SceneNodes to files in the temp directory (saves memory, required for Full Sample)
    (type: boolean, default False)
    
    :type: bool
    """

    use_sequencer = False
    """Process the render (and composited) result through the video sequence editor pipeline, if sequencer strips exist
    (type: boolean, default False)
    
    :type: bool
    """

    use_sequencer_gl_preview = False
    """(type: boolean, default False)
    
    :type: bool
    """

    use_sequencer_gl_textured_solid = False
    """Draw face-assigned textures in solid draw method
    (type: boolean, default False)
    
    :type: bool
    """

    use_shading_nodes = False
    """Active render engine uses new shading nodes system
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_shadows = False
    """Calculate shadows while rendering
    (type: boolean, default False)
    
    :type: bool
    """

    use_simplify = False
    """Enable simplification of scene for quicker preview renders
    (type: boolean, default False)
    
    :type: bool
    """

    use_simplify_triangulate = False
    """Disable non-planar quads being triangulated
    (type: boolean, default False)
    
    :type: bool
    """

    use_single_layer = False
    """Only render the active layer
    (type: boolean, default False)
    
    :type: bool
    """

    use_spherical_stereo = False
    """Active render engine supports spherical stereo rendering
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_sss = False
    """Calculate sub-surface scattering in materials rendering
    (type: boolean, default False)
    
    :type: bool
    """

    use_stamp = False
    """Render the stamp info text in the rendered image
    (type: boolean, default False)
    
    :type: bool
    """

    use_stamp_camera = False
    """Include the name of the active camera in image metadata
    (type: boolean, default False)
    
    :type: bool
    """

    use_stamp_date = False
    """Include the current date in image metadata
    (type: boolean, default False)
    
    :type: bool
    """

    use_stamp_filename = False
    """Include the .blend filename in image metadata
    (type: boolean, default False)
    
    :type: bool
    """

    use_stamp_frame = False
    """Include the frame number in image metadata
    (type: boolean, default False)
    
    :type: bool
    """

    use_stamp_labels = False
    """Draw stamp labels ("Camera" in front of camera name, etc.)
    (type: boolean, default False)
    
    :type: bool
    """

    use_stamp_lens = False
    """Include the active camera's lens in image metadata
    (type: boolean, default False)
    
    :type: bool
    """

    use_stamp_marker = False
    """Include the name of the last marker in image metadata
    (type: boolean, default False)
    
    :type: bool
    """

    use_stamp_memory = False
    """Include the peak memory usage in image metadata
    (type: boolean, default False)
    
    :type: bool
    """

    use_stamp_note = False
    """Include a custom note in image metadata
    (type: boolean, default False)
    
    :type: bool
    """

    use_stamp_render_time = False
    """Include the render time in image metadata
    (type: boolean, default False)
    
    :type: bool
    """

    use_stamp_scene = False
    """Include the name of the active scene in image metadata
    (type: boolean, default False)
    
    :type: bool
    """

    use_stamp_sequencer_strip = False
    """Include the name of the foreground sequence strip in image metadata
    (type: boolean, default False)
    
    :type: bool
    """

    use_stamp_strip_meta = False
    """Use metadata from the strips in the sequencer
    (type: boolean, default False)
    
    :type: bool
    """

    use_stamp_time = False
    """Include the rendered frame timecode as HH:MM:SS.FF in image metadata
    (type: boolean, default False)
    
    :type: bool
    """

    use_textures = False
    """Use textures to affect material properties
    (type: boolean, default False)
    
    :type: bool
    """

    use_world_space_shading = False
    """Use world space interpretation of lighting data for node materials
    (type: boolean, default False)
    
    :type: bool
    """

    views = None
    """(type: bpy.types.RenderViews bpy.types.bpy_prop_collection of bpy.types.SceneRenderView, (readonly))
    
    :type: RenderViews
    """

    views_format = 'STEREO_3D'
    """
    * 'STEREO_3D': Stereo 3D, Single stereo camera system, adjust the stereo settings in the camera panel.
    * 'MULTIVIEW': Multi-View, Multi camera system, adjust the cameras individually.
    (type: enum in ['STEREO_3D', 'MULTIVIEW'], default 'STEREO_3D')
    
    :type: str
    """

    def frame_path(self, frame=-2147483648, preview=False, view=""):
        """Return the absolute path to the filename to be written for a given frame
        
        :param frame: Frame number to use, if unset the current frame will be used
            (type: int in [-inf, inf], (optional))
        :type frame: int
        :param preview: Preview, Use preview range
            (type: boolean, (optional))
        :type preview: bool
        :param view: View, The name of the view to use to replace the "%" chars
            (type: str, (optional, never None))
        :type view: str
        :return: File Path, The resulting filepath from the scenes render settings
        :param : (type: string, (never None))
        :rtype: str
        """


class RenderSlot(bpy_struct):
    """Parameters defining the render slot"""

    name = ""
    """Render slot name
    (type: string, default "", (never None))
    
    :type: str
    """


class RenderSlots(bpy_struct):
    """Collection of the render slots"""

    active = None
    """Active render slot of the image
    (type: bpy.types.RenderSlot)
    
    :type: RenderSlot
    """

    active_index = 0
    """Index of an active render slot of the image
    (type: int in [0, 8], default 0)
    
    :type: int
    """


class RenderView(bpy_struct):
    """"""

    name = ""
    """(type: string, default "", (readonly, never None))
    
    :type: str
    """


class RenderViews(bpy_struct):
    """Collection of render views"""

    active = None
    """Active Render View
    (type: bpy.types.SceneRenderView, (never None))
    
    :type: SceneRenderView
    """

    active_index = 0
    """Active index in render view array
    (type: int in [0, 32767], default 0)
    
    :type: int
    """

    def new(self, name):
        """Add a render view to scene
        
        :param name: New name for the marker (not unique)
            (type: str, (never None))
        :type name: str
        :return: Newly created render view
        :param : (type: bpy.types.SceneRenderView)
        :rtype: SceneRenderView
        """

    def remove(self, view):
        """Remove a render view
        
        :param view: Render view to remove
            (type: bpy.types.SceneRenderView, (never None))
        :type view: SceneRenderView
        """


class RigidBodyConstraint(bpy_struct):
    """Constraint influencing Objects inside Rigid Body Simulation"""

    breaking_threshold = 10.0
    """Impulse threshold that must be reached for the constraint to break
    (type: float in [0, inf], default 10.0)
    
    :type: float
    """

    disable_collisions = False
    """Disable collisions between constrained rigid bodies
    (type: boolean, default False)
    
    :type: bool
    """

    enabled = False
    """Enable this constraint
    (type: boolean, default False)
    
    :type: bool
    """

    limit_ang_x_lower = -0.785398
    """Lower limit of X axis rotation
    (type: float in [-6.28319, 6.28319], default -0.785398)
    
    :type: float
    """

    limit_ang_x_upper = 0.785398
    """Upper limit of X axis rotation
    (type: float in [-6.28319, 6.28319], default 0.785398)
    
    :type: float
    """

    limit_ang_y_lower = -0.785398
    """Lower limit of Y axis rotation
    (type: float in [-6.28319, 6.28319], default -0.785398)
    
    :type: float
    """

    limit_ang_y_upper = 0.785398
    """Upper limit of Y axis rotation
    (type: float in [-6.28319, 6.28319], default 0.785398)
    
    :type: float
    """

    limit_ang_z_lower = -0.785398
    """Lower limit of Z axis rotation
    (type: float in [-6.28319, 6.28319], default -0.785398)
    
    :type: float
    """

    limit_ang_z_upper = 0.785398
    """Upper limit of Z axis rotation
    (type: float in [-6.28319, 6.28319], default 0.785398)
    
    :type: float
    """

    limit_lin_x_lower = -1
    """Lower limit of X axis translation
    (type: float in [-inf, inf], default -1)
    
    :type: float
    """

    limit_lin_x_upper = 1.0
    """Upper limit of X axis translation
    (type: float in [-inf, inf], default 1.0)
    
    :type: float
    """

    limit_lin_y_lower = -1
    """Lower limit of Y axis translation
    (type: float in [-inf, inf], default -1)
    
    :type: float
    """

    limit_lin_y_upper = 1.0
    """Upper limit of Y axis translation
    (type: float in [-inf, inf], default 1.0)
    
    :type: float
    """

    limit_lin_z_lower = -1
    """Lower limit of Z axis translation
    (type: float in [-inf, inf], default -1)
    
    :type: float
    """

    limit_lin_z_upper = 1.0
    """Upper limit of Z axis translation
    (type: float in [-inf, inf], default 1.0)
    
    :type: float
    """

    motor_ang_max_impulse = 1.0
    """Maximum angular motor impulse
    (type: float in [0, inf], default 1.0)
    
    :type: float
    """

    motor_ang_target_velocity = 1.0
    """Target angular motor velocity
    (type: float in [-inf, inf], default 1.0)
    
    :type: float
    """

    motor_lin_max_impulse = 1.0
    """Maximum linear motor impulse
    (type: float in [0, inf], default 1.0)
    
    :type: float
    """

    motor_lin_target_velocity = 1.0
    """Target linear motor velocity
    (type: float in [-inf, inf], default 1.0)
    
    :type: float
    """

    object1 = None
    """First Rigid Body Object to be constrained
    (type: bpy.types.Object)
    
    :type: Object
    """

    object2 = None
    """Second Rigid Body Object to be constrained
    (type: bpy.types.Object)
    
    :type: Object
    """

    solver_iterations = 10
    """Number of constraint solver iterations made per simulation step (higher values are more accurate but slower)
    (type: int in [1, 1000], default 10)
    
    :type: int
    """

    spring_damping_ang_x = 0.5
    """Damping on the X rotational axis
    (type: float in [0, 1], default 0.5)
    
    :type: float
    """

    spring_damping_ang_y = 0.5
    """Damping on the Y rotational axis
    (type: float in [0, 1], default 0.5)
    
    :type: float
    """

    spring_damping_ang_z = 0.5
    """Damping on the Z rotational axis
    (type: float in [0, 1], default 0.5)
    
    :type: float
    """

    spring_damping_x = 0.5
    """Damping on the X axis
    (type: float in [0, 1], default 0.5)
    
    :type: float
    """

    spring_damping_y = 0.5
    """Damping on the Y axis
    (type: float in [0, 1], default 0.5)
    
    :type: float
    """

    spring_damping_z = 0.5
    """Damping on the Z axis
    (type: float in [0, 1], default 0.5)
    
    :type: float
    """

    spring_stiffness_ang_x = 10.0
    """Stiffness on the X rotational axis
    (type: float in [0, inf], default 10.0)
    
    :type: float
    """

    spring_stiffness_ang_y = 10.0
    """Stiffness on the Y rotational axis
    (type: float in [0, inf], default 10.0)
    
    :type: float
    """

    spring_stiffness_ang_z = 10.0
    """Stiffness on the Z rotational axis
    (type: float in [0, inf], default 10.0)
    
    :type: float
    """

    spring_stiffness_x = 10.0
    """Stiffness on the X axis
    (type: float in [0, inf], default 10.0)
    
    :type: float
    """

    spring_stiffness_y = 10.0
    """Stiffness on the Y axis
    (type: float in [0, inf], default 10.0)
    
    :type: float
    """

    spring_stiffness_z = 10.0
    """Stiffness on the Z axis
    (type: float in [0, inf], default 10.0)
    
    :type: float
    """

    type = 'POINT'
    """Type of Rigid Body Constraint
    * 'FIXED': Fixed, Glue rigid bodies together.
    * 'POINT': Point, Constrain rigid bodies to move around common pivot point.
    * 'HINGE': Hinge, Restrict rigid body rotation to one axis.
    * 'SLIDER': Slider, Restrict rigid body translation to one axis.
    * 'PISTON': Piston, Restrict rigid body translation and rotation to one axis.
    * 'GENERIC': Generic, Restrict translation and rotation to specified axes.
    * 'GENERIC_SPRING': Generic Spring, Restrict translation and rotation to specified axes with springs.
    * 'MOTOR': Motor, Drive rigid body around or along an axis.
    (type: enum in ['FIXED', 'POINT', 'HINGE', 'SLIDER', 'PISTON', 'GENERIC', 'GENERIC_SPRING', 'MOTOR'], default 'POINT')
    
    :type: str
    """

    use_breaking = False
    """Constraint can be broken if it receives an impulse above the threshold
    (type: boolean, default False)
    
    :type: bool
    """

    use_limit_ang_x = False
    """Limit rotation around X axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_limit_ang_y = False
    """Limit rotation around Y axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_limit_ang_z = False
    """Limit rotation around Z axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_limit_lin_x = False
    """Limit translation on X axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_limit_lin_y = False
    """Limit translation on Y axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_limit_lin_z = False
    """Limit translation on Z axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_motor_ang = False
    """Enable angular motor
    (type: boolean, default False)
    
    :type: bool
    """

    use_motor_lin = False
    """Enable linear motor
    (type: boolean, default False)
    
    :type: bool
    """

    use_override_solver_iterations = False
    """Override the number of solver iterations for this constraint
    (type: boolean, default False)
    
    :type: bool
    """

    use_spring_ang_x = False
    """Enable spring on X rotational axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_spring_ang_y = False
    """Enable spring on Y rotational axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_spring_ang_z = False
    """Enable spring on Z rotational axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_spring_x = False
    """Enable spring on X axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_spring_y = False
    """Enable spring on Y axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_spring_z = False
    """Enable spring on Z axis
    (type: boolean, default False)
    
    :type: bool
    """


class RigidBodyObject(bpy_struct):
    """Settings for object participating in Rigid Body Simulation"""

    angular_damping = 0.1
    """Amount of angular velocity that is lost over time
    (type: float in [0, 1], default 0.1)
    
    :type: float
    """

    collision_groups = (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
    """Collision Groups Rigid Body belongs to
    (type: boolean array of 20 items, default (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False))
    
    :type: collections.Sequence[bool]
    """

    collision_margin = 0.04
    """Threshold of distance near surface where collisions are still considered (best results when non-zero)
    (type: float in [0, 1], default 0.04)
    
    :type: float
    """

    collision_shape = 'BOX'
    """Collision Shape of object in Rigid Body Simulations
    * 'BOX': Box, Box-like shapes (i.e. cubes), including planes (i.e. ground planes).
    * 'SPHERE': Sphere.
    * 'CAPSULE': Capsule.
    * 'CYLINDER': Cylinder.
    * 'CONE': Cone.
    * 'CONVEX_HULL': Convex Hull, A mesh-like surface encompassing (i.e. shrinkwrap over) all vertices (best results with fewer vertices).
    * 'MESH': Mesh, Mesh consisting of triangles only, allowing for more detailed interactions than convex hulls.
    (type: enum in ['BOX', 'SPHERE', 'CAPSULE', 'CYLINDER', 'CONE', 'CONVEX_HULL', 'MESH'], default 'BOX')
    
    :type: str
    """

    deactivate_angular_velocity = 0.5
    """Angular Velocity below which simulation stops simulating object
    (type: float in [0, inf], default 0.5)
    
    :type: float
    """

    deactivate_linear_velocity = 0.4
    """Linear Velocity below which simulation stops simulating object
    (type: float in [0, inf], default 0.4)
    
    :type: float
    """

    enabled = False
    """Rigid Body actively participates to the simulation
    (type: boolean, default False)
    
    :type: bool
    """

    friction = 0.5
    """Resistance of object to movement
    (type: float in [0, inf], default 0.5)
    
    :type: float
    """

    kinematic = False
    """Allow rigid body to be controlled by the animation system
    (type: boolean, default False)
    
    :type: bool
    """

    linear_damping = 0.04
    """Amount of linear velocity that is lost over time
    (type: float in [0, 1], default 0.04)
    
    :type: float
    """

    mass = 1.0
    """How much the object 'weighs' irrespective of gravity
    (type: float in [0.001, inf], default 1.0)
    
    :type: float
    """

    mesh_source = 'BASE'
    """Source of the mesh used to create collision shape
    * 'BASE': Base, Base mesh.
    * 'DEFORM': Deform, Deformations (shape keys, deform modifiers).
    * 'FINAL': Final, All modifiers.
    (type: enum in ['BASE', 'DEFORM', 'FINAL'], default 'BASE')
    
    :type: str
    """

    restitution = 0.0
    """Tendency of object to bounce after colliding with another (0 = stays still, 1 = perfectly elastic)
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    type = 'ACTIVE'
    """Role of object in Rigid Body Simulations
    * 'ACTIVE': Active, Object is directly controlled by simulation results.
    * 'PASSIVE': Passive, Object is directly controlled by animation system.
    (type: enum in ['ACTIVE', 'PASSIVE'], default 'ACTIVE')
    
    :type: str
    """

    use_deactivation = True
    """Enable deactivation of resting rigid bodies (increases performance and stability but can cause glitches)
    (type: boolean, default True)
    
    :type: bool
    """

    use_deform = False
    """Rigid body deforms during simulation
    (type: boolean, default False)
    
    :type: bool
    """

    use_margin = False
    """Use custom collision margin (some shapes will have a visible gap around them)
    (type: boolean, default False)
    
    :type: bool
    """

    use_start_deactivated = False
    """Deactivate rigid body at the start of the simulation
    (type: boolean, default False)
    
    :type: bool
    """


class RigidBodyWorld(bpy_struct):
    """Self-contained rigid body simulation environment and settings"""

    constraints = None
    """Group containing rigid body constraint objects
    (type: bpy.types.Group)
    
    :type: Group
    """

    effector_weights = None
    """(type: bpy.types.EffectorWeights, (readonly))
    
    :type: EffectorWeights
    """

    enabled = False
    """Simulation will be evaluated
    (type: boolean, default False)
    
    :type: bool
    """

    group = None
    """Group containing objects participating in this simulation
    (type: bpy.types.Group)
    
    :type: Group
    """

    point_cache = None
    """(type: bpy.types.PointCache, (readonly, never None))
    
    :type: PointCache
    """

    solver_iterations = 10
    """Number of constraint solver iterations made per simulation step (higher values are more accurate but slower)
    (type: int in [1, 1000], default 10)
    
    :type: int
    """

    steps_per_second = 60
    """Number of simulation steps taken per second (higher values are more accurate but slower)
    (type: int in [1, 32767], default 60)
    
    :type: int
    """

    time_scale = 1.0
    """Change the speed of the simulation
    (type: float in [0, 100], default 1.0)
    
    :type: float
    """

    use_split_impulse = False
    """Reduce extra velocity that can build up when objects collide (lowers simulation stability a little so use only when necessary)
    (type: boolean, default False)
    
    :type: bool
    """

    def convex_sweep_test(self, object, start, end):
        """Sweep test convex rigidbody against the current rigidbody world
        
        :param object: Rigidbody object with a convex collision shape
            (type: bpy.types.Object, (never None))
        :type object: Object
        :return: (object_location, hitpoint, normal, has_hit)
            object_location, The hit location of this sweep test, float array of 3 items in [-inf, inf]
            hitpoint, The hit location of this sweep test, float array of 3 items in [-inf, inf]
            normal, The face normal at the sweep test hit location, float array of 3 items in [-inf, inf]
            has_hit, If the function has found collision point, value is 1, otherwise 0, int in [-inf, inf]
        :rtype: tuple
        """


class SPHFluidSettings(bpy_struct):
    """Settings for particle fluids physics"""

    buoyancy = 0.0
    """Artificial buoyancy force in negative gravity direction based on pressure differences inside the fluid
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    factor_radius = False
    """Interaction radius is a factor of 4 * particle size
    (type: boolean, default False)
    
    :type: bool
    """

    factor_repulsion = False
    """Repulsion is a factor of stiffness
    (type: boolean, default False)
    
    :type: bool
    """

    factor_rest_length = False
    """Spring rest length is a factor of 2 * particle size
    (type: boolean, default False)
    
    :type: bool
    """

    factor_stiff_viscosity = False
    """Stiff viscosity is a factor of normal viscosity
    (type: boolean, default False)
    
    :type: bool
    """

    fluid_radius = 0.0
    """Fluid interaction radius
    (type: float in [0, 20], default 0.0)
    
    :type: float
    """

    linear_viscosity = 0.0
    """Linear viscosity
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    plasticity = 0.0
    """How much the spring rest length can change after the elastic limit is crossed
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    repulsion = 0.0
    """How strongly the fluid tries to keep from clustering (factor of stiffness)
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    rest_density = 0.0
    """Fluid rest density
    (type: float in [0, 10000], default 0.0)
    
    :type: float
    """

    rest_length = 0.0
    """Spring rest length (factor of particle radius)
    (type: float in [0, 2], default 0.0)
    
    :type: float
    """

    solver = 'DDR'
    """The code used to calculate internal forces on particles
    * 'DDR': Double-Density, An artistic solver with strong surface tension effects (original).
    * 'CLASSICAL': Classical, A more physically-accurate solver.
    (type: enum in ['DDR', 'CLASSICAL'], default 'DDR')
    
    :type: str
    """

    spring_force = 0.0
    """Spring force
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    spring_frames = 0
    """Create springs for this number of frames since particles birth (0 is always)
    (type: int in [0, 100], default 0)
    
    :type: int
    """

    stiff_viscosity = 0.0
    """Creates viscosity for expanding fluid
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    stiffness = 0.0
    """How incompressible the fluid is (speed of sound)
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """

    use_factor_density = False
    """Density is calculated as a factor of default density (depends on particle size)
    (type: boolean, default False)
    
    :type: bool
    """

    use_initial_rest_length = False
    """Use the initial length as spring rest length instead of 2 * particle size
    (type: boolean, default False)
    
    :type: bool
    """

    use_viscoelastic_springs = False
    """Use viscoelastic springs instead of Hooke's springs
    (type: boolean, default False)
    
    :type: bool
    """

    yield_ratio = 0.0
    """How much the spring has to be stretched/compressed in order to change it's rest length
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """


class SceneBases(bpy_struct):
    """Collection of scene bases"""

    active = None
    """Active object base in the scene
    (type: bpy.types.ObjectBase)
    
    :type: ObjectBase
    """


class SceneGameData(bpy_struct):
    """Game data for a Scene data-block"""

    activity_culling_box_radius = 0.0
    """Radius of the activity bubble, in Manhattan length (objects outside the box are activity-culled)
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """

    deactivation_angular_threshold = 1.0
    """Angular velocity that an object must be below before the deactivation timer can start
    (type: float in [0.001, 10000], default 1.0)
    
    :type: float
    """

    deactivation_linear_threshold = 0.8
    """Linear velocity that an object must be below before the deactivation timer can start
    (type: float in [0.001, 10000], default 0.8)
    
    :type: float
    """

    deactivation_time = 0.0
    """Amount of time (in seconds) after which objects with a velocity less than the given threshold will deactivate (0.0 means no deactivation)
    (type: float in [0, 60], default 0.0)
    
    :type: float
    """

    depth = 32
    """Display bit depth of full screen display
    (type: int in [8, 32], default 32)
    
    :type: int
    """

    dome_angle = 180
    """Field of View of the Dome - it only works in mode Fisheye and Truncated
    (type: int in [-32768, 32767], default 180)
    
    :type: int
    """

    dome_buffer_resolution = 1.0
    """Buffer Resolution - decrease it to increase speed
    (type: float in [-inf, inf], default 1.0)
    
    :type: float
    """

    dome_mode = 'FISHEYE'
    """Dome physical configurations
    (type: enum in ['FISHEYE', 'TRUNCATED_FRONT', 'TRUNCATED_REAR', 'ENVMAP', 'PANORAM_SPH'], default 'FISHEYE')
    
    :type: str
    """

    dome_tessellation = 4
    """Tessellation level - check the generated mesh in wireframe mode
    (type: int in [-32768, 32767], default 4)
    
    :type: int
    """

    dome_text = None
    """Custom Warp Mesh data file
    (type: bpy.types.Text)
    
    :type: Text
    """

    dome_tilt = 0
    """Camera rotation in horizontal axis
    (type: int in [-32768, 32767], default 0)
    
    :type: int
    """

    exit_key = 'ESC'
    """The key that exits the Game Engine
    * 'NONE': .
    * 'LEFTMOUSE': Left Mouse, LMB.
    * 'MIDDLEMOUSE': Middle Mouse, MMB.
    * 'RIGHTMOUSE': Right Mouse, RMB.
    * 'BUTTON4MOUSE': Button4 Mouse, MB4.
    * 'BUTTON5MOUSE': Button5 Mouse, MB5.
    * 'BUTTON6MOUSE': Button6 Mouse, MB6.
    * 'BUTTON7MOUSE': Button7 Mouse, MB7.
    * 'BUTTON8MOUSE': Button8 Mouse, MB8.
    * 'BUTTON9MOUSE': Button9 Mouse, MB9.
    * 'BUTTON10MOUSE': Button10 Mouse, MB10.
    * 'BUTTON11MOUSE': Button11 Mouse, MB11.
    * 'BUTTON12MOUSE': Button12 Mouse, MB12.
    * 'BUTTON13MOUSE': Button13 Mouse, MB13.
    * 'BUTTON14MOUSE': Button14 Mouse, MB14.
    * 'BUTTON15MOUSE': Button15 Mouse, MB15.
    * 'BUTTON16MOUSE': Button16 Mouse, MB16.
    * 'BUTTON17MOUSE': Button17 Mouse, MB17.
    * 'ACTIONMOUSE': Action Mouse, MBA.
    * 'SELECTMOUSE': Select Mouse, MBS.
    * 'PEN': Pen.
    * 'ERASER': Eraser.
    * 'MOUSEMOVE': Mouse Move, MsMov.
    * 'INBETWEEN_MOUSEMOVE': In-between Move, MsSubMov.
    * 'TRACKPADPAN': Mouse/Trackpad Pan, MsPan.
    * 'TRACKPADZOOM': Mouse/Trackpad Zoom, MsZoom.
    * 'MOUSEROTATE': Mouse/Trackpad Rotate, MsRot.
    * 'WHEELUPMOUSE': Wheel Up, WhUp.
    * 'WHEELDOWNMOUSE': Wheel Down, WhDown.
    * 'WHEELINMOUSE': Wheel In, WhIn.
    * 'WHEELOUTMOUSE': Wheel Out, WhOut.
    * 'EVT_TWEAK_L': Tweak Left, TwkL.
    * 'EVT_TWEAK_M': Tweak Middle, TwkM.
    * 'EVT_TWEAK_R': Tweak Right, TwkR.
    * 'EVT_TWEAK_A': Tweak Action, TwkA.
    * 'EVT_TWEAK_S': Tweak Select, TwkS.
    * 'A': A.
    * 'B': B.
    * 'C': C.
    * 'D': D.
    * 'E': E.
    * 'F': F.
    * 'G': G.
    * 'H': H.
    * 'I': I.
    * 'J': J.
    * 'K': K.
    * 'L': L.
    * 'M': M.
    * 'N': N.
    * 'O': O.
    * 'P': P.
    * 'Q': Q.
    * 'R': R.
    * 'S': S.
    * 'T': T.
    * 'U': U.
    * 'V': V.
    * 'W': W.
    * 'X': X.
    * 'Y': Y.
    * 'Z': Z.
    * 'ZERO': 0.
    * 'ONE': 1.
    * 'TWO': 2.
    * 'THREE': 3.
    * 'FOUR': 4.
    * 'FIVE': 5.
    * 'SIX': 6.
    * 'SEVEN': 7.
    * 'EIGHT': 8.
    * 'NINE': 9.
    * 'LEFT_CTRL': Left Ctrl, CtrlL.
    * 'LEFT_ALT': Left Alt, AltL.
    * 'LEFT_SHIFT': Left Shift, ShiftL.
    * 'RIGHT_ALT': Right Alt, AltR.
    * 'RIGHT_CTRL': Right Ctrl, CtrlR.
    * 'RIGHT_SHIFT': Right Shift, ShiftR.
    * 'OSKEY': OS Key, Cmd.
    * 'GRLESS': Grless.
    * 'ESC': Esc.
    * 'TAB': Tab.
    * 'RET': Return, Enter.
    * 'SPACE': Spacebar, Space.
    * 'LINE_FEED': Line Feed.
    * 'BACK_SPACE': Back Space, BkSpace.
    * 'DEL': Delete, Del.
    * 'COLON': :.
    * 'SEMI_COLON': ;.
    * 'PERIOD': ..
    * 'COMMA': ,.
    * 'QUOTE': ".
    * 'ACCENT_GRAVE': `.
    * 'MINUS': -.
    * 'PLUS': +.
    * 'SLASH': /.
    * 'BACK_SLASH': \.
    * 'EQUAL': =.
    * 'LEFT_BRACKET': [.
    * 'RIGHT_BRACKET': ].
    * 'ATKEY': @.
    * 'ASCIICIRCUM': ^.
    * 'LEFT_ARROW': Left Arrow, ←.
    * 'DOWN_ARROW': Down Arrow, ↓.
    * 'RIGHT_ARROW': Right Arrow, →.
    * 'UP_ARROW': Up Arrow, ↑.
    * 'NUMPAD_2': Numpad 2, Pad2.
    * 'NUMPAD_4': Numpad 4, Pad4.
    * 'NUMPAD_6': Numpad 6, Pad6.
    * 'NUMPAD_8': Numpad 8, Pad8.
    * 'NUMPAD_1': Numpad 1, Pad1.
    * 'NUMPAD_3': Numpad 3, Pad3.
    * 'NUMPAD_5': Numpad 5, Pad5.
    * 'NUMPAD_7': Numpad 7, Pad7.
    * 'NUMPAD_9': Numpad 9, Pad9.
    * 'NUMPAD_PERIOD': Numpad ., Pad..
    * 'NUMPAD_SLASH': Numpad /, Pad/.
    * 'NUMPAD_ASTERIX': Numpad *, Pad*.
    * 'NUMPAD_0': Numpad 0, Pad0.
    * 'NUMPAD_MINUS': Numpad -, Pad-.
    * 'NUMPAD_ENTER': Numpad Enter, PadEnter.
    * 'NUMPAD_PLUS': Numpad +, Pad+.
    * 'F1': F1.
    * 'F2': F2.
    * 'F3': F3.
    * 'F4': F4.
    * 'F5': F5.
    * 'F6': F6.
    * 'F7': F7.
    * 'F8': F8.
    * 'F9': F9.
    * 'F10': F10.
    * 'F11': F11.
    * 'F12': F12.
    * 'F13': F13.
    * 'F14': F14.
    * 'F15': F15.
    * 'F16': F16.
    * 'F17': F17.
    * 'F18': F18.
    * 'F19': F19.
    * 'PAUSE': Pause.
    * 'INSERT': Insert, Ins.
    * 'HOME': Home.
    * 'PAGE_UP': Page Up, PgUp.
    * 'PAGE_DOWN': Page Down, PgDown.
    * 'END': End.
    * 'HENKAN': Henkan.
    * 'MUHENKAN': Muhenkan.
    * 'KANA': Kana.
    * 'MENU': Menu.
    * 'MEDIA_PLAY': Media Play/Pause, >/||.
    * 'MEDIA_STOP': Media Stop, Stop.
    * 'MEDIA_FIRST': Media First, |<<.
    * 'MEDIA_LAST': Media Last, >>|.
    * 'TEXTINPUT': Text Input, TxtIn.
    * 'WINDOW_DEACTIVATE': Window Deactivate.
    * 'TIMER': Timer, Tmr.
    * 'TIMER0': Timer 0, Tmr0.
    * 'TIMER1': Timer 1, Tmr1.
    * 'TIMER2': Timer 2, Tmr2.
    * 'TIMER_JOBS': Timer Jobs, TmrJob.
    * 'TIMER_AUTOSAVE': Timer Autosave, TmrSave.
    * 'TIMER_REPORT': Timer Report, TmrReport.
    * 'TIMERREGION': Timer Region, TmrReg.
    * 'NDOF_MOTION': NDOF Motion, NdofMov.
    * 'NDOF_BUTTON_MENU': NDOF Menu, NdofMenu.
    * 'NDOF_BUTTON_FIT': NDOF Fit, NdofFit.
    * 'NDOF_BUTTON_TOP': NDOF Top, Ndof↑.
    * 'NDOF_BUTTON_BOTTOM': NDOF Bottom, Ndof↓.
    * 'NDOF_BUTTON_LEFT': NDOF Left, Ndof←.
    * 'NDOF_BUTTON_RIGHT': NDOF Right, Ndof→.
    * 'NDOF_BUTTON_FRONT': NDOF Front, NdofFront.
    * 'NDOF_BUTTON_BACK': NDOF Back, NdofBack.
    * 'NDOF_BUTTON_ISO1': NDOF Isometric 1, NdofIso1.
    * 'NDOF_BUTTON_ISO2': NDOF Isometric 2, NdofIso2.
    * 'NDOF_BUTTON_ROLL_CW': NDOF Roll CW, NdofRCW.
    * 'NDOF_BUTTON_ROLL_CCW': NDOF Roll CCW, NdofRCCW.
    * 'NDOF_BUTTON_SPIN_CW': NDOF Spin CW, NdofSCW.
    * 'NDOF_BUTTON_SPIN_CCW': NDOF Spin CCW, NdofSCCW.
    * 'NDOF_BUTTON_TILT_CW': NDOF Tilt CW, NdofTCW.
    * 'NDOF_BUTTON_TILT_CCW': NDOF Tilt CCW, NdofTCCW.
    * 'NDOF_BUTTON_ROTATE': NDOF Rotate, NdofRot.
    * 'NDOF_BUTTON_PANZOOM': NDOF Pan/Zoom, NdofPanZoom.
    * 'NDOF_BUTTON_DOMINANT': NDOF Dominant, NdofDom.
    * 'NDOF_BUTTON_PLUS': NDOF Plus, Ndof+.
    * 'NDOF_BUTTON_MINUS': NDOF Minus, Ndof-.
    * 'NDOF_BUTTON_ESC': NDOF Esc, NdofEsc.
    * 'NDOF_BUTTON_ALT': NDOF Alt, NdofAlt.
    * 'NDOF_BUTTON_SHIFT': NDOF Shift, NdofShift.
    * 'NDOF_BUTTON_CTRL': NDOF Ctrl, NdofCtrl.
    * 'NDOF_BUTTON_1': NDOF Button 1, NdofB1.
    * 'NDOF_BUTTON_2': NDOF Button 2, NdofB2.
    * 'NDOF_BUTTON_3': NDOF Button 3, NdofB3.
    * 'NDOF_BUTTON_4': NDOF Button 4, NdofB4.
    * 'NDOF_BUTTON_5': NDOF Button 5, NdofB5.
    * 'NDOF_BUTTON_6': NDOF Button 6, NdofB6.
    * 'NDOF_BUTTON_7': NDOF Button 7, NdofB7.
    * 'NDOF_BUTTON_8': NDOF Button 8, NdofB8.
    * 'NDOF_BUTTON_9': NDOF Button 9, NdofB9.
    * 'NDOF_BUTTON_10': NDOF Button 10, NdofB10.
    * 'NDOF_BUTTON_A': NDOF Button A, NdofBA.
    * 'NDOF_BUTTON_B': NDOF Button B, NdofBB.
    * 'NDOF_BUTTON_C': NDOF Button C, NdofBC.
    (type: enum in ['NONE', 'LEFTMOUSE', 'MIDDLEMOUSE', 'RIGHTMOUSE', 'BUTTON4MOUSE', 'BUTTON5MOUSE', 'BUTTON6MOUSE', 'BUTTON7MOUSE', 'BUTTON8MOUSE', 'BUTTON9MOUSE', 'BUTTON10MOUSE', 'BUTTON11MOUSE', 'BUTTON12MOUSE', 'BUTTON13MOUSE', 'BUTTON14MOUSE', 'BUTTON15MOUSE', 'BUTTON16MOUSE', 'BUTTON17MOUSE', 'ACTIONMOUSE', 'SELECTMOUSE', 'PEN', 'ERASER', 'MOUSEMOVE', 'INBETWEEN_MOUSEMOVE', 'TRACKPADPAN', 'TRACKPADZOOM', 'MOUSEROTATE', 'WHEELUPMOUSE', 'WHEELDOWNMOUSE', 'WHEELINMOUSE', 'WHEELOUTMOUSE', 'EVT_TWEAK_L', 'EVT_TWEAK_M', 'EVT_TWEAK_R', 'EVT_TWEAK_A', 'EVT_TWEAK_S', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'ZERO', 'ONE', 'TWO', 'THREE', 'FOUR', 'FIVE', 'SIX', 'SEVEN', 'EIGHT', 'NINE', 'LEFT_CTRL', 'LEFT_ALT', 'LEFT_SHIFT', 'RIGHT_ALT', 'RIGHT_CTRL', 'RIGHT_SHIFT', 'OSKEY', 'GRLESS', 'ESC', 'TAB', 'RET', 'SPACE', 'LINE_FEED', 'BACK_SPACE', 'DEL', 'COLON', 'SEMI_COLON', 'PERIOD', 'COMMA', 'QUOTE', 'ACCENT_GRAVE', 'MINUS', 'PLUS', 'SLASH', 'BACK_SLASH', 'EQUAL', 'LEFT_BRACKET', 'RIGHT_BRACKET', 'ATKEY', 'ASCIICIRCUM', 'LEFT_ARROW', 'DOWN_ARROW', 'RIGHT_ARROW', 'UP_ARROW', 'NUMPAD_2', 'NUMPAD_4', 'NUMPAD_6', 'NUMPAD_8', 'NUMPAD_1', 'NUMPAD_3', 'NUMPAD_5', 'NUMPAD_7', 'NUMPAD_9', 'NUMPAD_PERIOD', 'NUMPAD_SLASH', 'NUMPAD_ASTERIX', 'NUMPAD_0', 'NUMPAD_MINUS', 'NUMPAD_ENTER', 'NUMPAD_PLUS', 'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12', 'F13', 'F14', 'F15', 'F16', 'F17', 'F18', 'F19', 'PAUSE', 'INSERT', 'HOME', 'PAGE_UP', 'PAGE_DOWN', 'END', 'HENKAN', 'MUHENKAN', 'KANA', 'MENU', 'MEDIA_PLAY', 'MEDIA_STOP', 'MEDIA_FIRST', 'MEDIA_LAST', 'TEXTINPUT', 'WINDOW_DEACTIVATE', 'TIMER', 'TIMER0', 'TIMER1', 'TIMER2', 'TIMER_JOBS', 'TIMER_AUTOSAVE', 'TIMER_REPORT', 'TIMERREGION', 'NDOF_MOTION', 'NDOF_BUTTON_MENU', 'NDOF_BUTTON_FIT', 'NDOF_BUTTON_TOP', 'NDOF_BUTTON_BOTTOM', 'NDOF_BUTTON_LEFT', 'NDOF_BUTTON_RIGHT', 'NDOF_BUTTON_FRONT', 'NDOF_BUTTON_BACK', 'NDOF_BUTTON_ISO1', 'NDOF_BUTTON_ISO2', 'NDOF_BUTTON_ROLL_CW', 'NDOF_BUTTON_ROLL_CCW', 'NDOF_BUTTON_SPIN_CW', 'NDOF_BUTTON_SPIN_CCW', 'NDOF_BUTTON_TILT_CW', 'NDOF_BUTTON_TILT_CCW', 'NDOF_BUTTON_ROTATE', 'NDOF_BUTTON_PANZOOM', 'NDOF_BUTTON_DOMINANT', 'NDOF_BUTTON_PLUS', 'NDOF_BUTTON_MINUS', 'NDOF_BUTTON_ESC', 'NDOF_BUTTON_ALT', 'NDOF_BUTTON_SHIFT', 'NDOF_BUTTON_CTRL', 'NDOF_BUTTON_1', 'NDOF_BUTTON_2', 'NDOF_BUTTON_3', 'NDOF_BUTTON_4', 'NDOF_BUTTON_5', 'NDOF_BUTTON_6', 'NDOF_BUTTON_7', 'NDOF_BUTTON_8', 'NDOF_BUTTON_9', 'NDOF_BUTTON_10', 'NDOF_BUTTON_A', 'NDOF_BUTTON_B', 'NDOF_BUTTON_C'], default 'ESC')
    
    :type: str
    """

    fps = 60
    """Nominal number of game frames per second (physics fixed timestep = 1/fps, independently of actual frame rate)
    (type: int in [1, 10000], default 60)
    
    :type: int
    """

    frame_color = (0.0, 0.0, 0.0)
    """Set color of the bars
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    frame_type = 'LETTERBOX'
    """Select the type of Framing you want
    * 'LETTERBOX': Letterbox, Show the entire viewport in the display window, using bar horizontally or vertically.
    * 'EXTEND': Extend, Show the entire viewport in the display window, viewing more horizontally or vertically.
    * 'SCALE': Scale, Stretch or squeeze the viewport to fill the display window.
    (type: enum in ['LETTERBOX', 'EXTEND', 'SCALE'], default 'LETTERBOX')
    
    :type: str
    """

    frequency = 60
    """Display clock frequency of fullscreen display
    (type: int in [4, 2000], default 60)
    
    :type: int
    """

    level_height = 2.0
    """Max difference in heights of obstacles to enable their interaction
    (type: float in [0, 200], default 2.0)
    
    :type: float
    """

    logic_step_max = 5
    """Maximum number of logic frame per game frame if graphics slows down the game, higher value allows better synchronization with physics
    (type: int in [1, 10000], default 5)
    
    :type: int
    """

    material_mode = 'MULTITEXTURE'
    """Material mode to use for rendering
    * 'MULTITEXTURE': Multitexture, Multitexture materials.
    * 'GLSL': GLSL, OpenGL shading language shaders.
    (type: enum in ['MULTITEXTURE', 'GLSL'], default 'MULTITEXTURE')
    
    :type: str
    """

    obstacle_simulation = 'NONE'
    """Simulation used for obstacle avoidance in the game engine
    (type: enum in ['NONE', 'RVO_RAYS', 'RVO_CELLS'], default 'NONE')
    
    :type: str
    """

    occlusion_culling_resolution = 128
    """Size of the occlusion buffer, use higher value for better precision (slower)
    (type: int in [128, 1024], default 128)
    
    :type: int
    """

    physics_engine = 'BULLET'
    """Physics engine used for physics simulation in the game engine
    * 'NONE': None, Don't use a physics engine.
    * 'BULLET': Bullet, Use the Bullet physics engine.
    (type: enum in ['NONE', 'BULLET'], default 'BULLET')
    
    :type: str
    """

    physics_gravity = 9.8
    """Gravitational constant used for physics simulation in the game engine
    (type: float in [0, 10000], default 9.8)
    
    :type: float
    """

    physics_step_max = 5
    """Maximum number of physics step per game frame if graphics slows down the game, higher value allows physics to keep up with realtime
    (type: int in [1, 10000], default 5)
    
    :type: int
    """

    physics_step_sub = 1
    """Number of simulation substep per physic timestep, higher value give better physics precision
    (type: int in [1, 50], default 1)
    
    :type: int
    """

    raster_storage = 'AUTO'
    """Set the storage mode used by the rasterizer
    * 'AUTO': Auto Select, Choose the best supported mode.
    * 'VERTEX_ARRAY': Vertex Arrays, Usually the best choice (good performance with display lists).
    * 'VERTEX_BUFFER_OBJECT': Vertex Buffer Objects, Typically slower than vertex arrays with display lists, requires at least OpenGL 1.4.
    (type: enum in ['AUTO', 'VERTEX_ARRAY', 'VERTEX_BUFFER_OBJECT'], default 'AUTO')
    
    :type: str
    """

    recast_data = None
    """(type: bpy.types.SceneGameRecastData, (readonly, never None))
    
    :type: SceneGameRecastData
    """

    resolution_x = 640
    """Number of horizontal pixels in the screen
    (type: int in [4, 10000], default 640)
    
    :type: int
    """

    resolution_y = 480
    """Number of vertical pixels in the screen
    (type: int in [4, 10000], default 480)
    
    :type: int
    """

    samples = 'SAMPLES_0'
    """The number of AA Samples to use for MSAA
    (type: enum in ['SAMPLES_0', 'SAMPLES_2', 'SAMPLES_4', 'SAMPLES_8', 'SAMPLES_16'], default 'SAMPLES_0')
    
    :type: str
    """

    scene_hysteresis_percentage = 10
    """Minimum distance change required to transition to the previous level of detail
    (type: int in [0, 100], default 10)
    
    :type: int
    """

    show_debug_properties = False
    """Show properties marked for debugging while the game runs
    (type: boolean, default False)
    
    :type: bool
    """

    show_framerate_profile = False
    """Show framerate and profiling information while the game runs
    (type: boolean, default False)
    
    :type: bool
    """

    show_fullscreen = False
    """Start player in a new fullscreen display
    (type: boolean, default False)
    
    :type: bool
    """

    show_mouse = False
    """Start player with a visible mouse cursor
    (type: boolean, default False)
    
    :type: bool
    """

    show_obstacle_simulation = False
    """Enable debug visualization for obstacle simulation
    (type: boolean, default False)
    
    :type: bool
    """

    show_physics_visualization = False
    """Show a visualization of physics bounds and interactions
    (type: boolean, default False)
    
    :type: bool
    """

    stereo = 'NONE'
    """
    * 'NONE': None, Disable Stereo and Dome environments.
    * 'STEREO': Stereo, Enable Stereo environment.
    * 'DOME': Dome, Enable Dome environment.
    (type: enum in ['NONE', 'STEREO', 'DOME'], default 'NONE')
    
    :type: str
    """

    stereo_eye_separation = 0.1
    """Set the distance between the eyes - the camera focal distance/30 should be fine
    (type: float in [0.01, 5], default 0.1)
    
    :type: float
    """

    stereo_mode = 'ANAGLYPH'
    """Stereographic techniques
    (type: enum in ['QUADBUFFERED', 'ABOVEBELOW', 'INTERLACED', 'ANAGLYPH', 'SIDEBYSIDE', 'VINTERLACE', '3DTVTOPBOTTOM'], default 'ANAGLYPH')
    
    :type: str
    """

    use_activity_culling = False
    """Activity culling is enabled
    (type: boolean, default False)
    
    :type: bool
    """

    use_animation_record = False
    """Record animation to F-Curves
    (type: boolean, default False)
    
    :type: bool
    """

    use_auto_start = False
    """Automatically start game at load time
    (type: boolean, default False)
    
    :type: bool
    """

    use_deprecation_warnings = False
    """Print warnings when using deprecated features in the python API
    (type: boolean, default False)
    
    :type: bool
    """

    use_desktop = False
    """Use the current desktop resolution in fullscreen mode
    (type: boolean, default False)
    
    :type: bool
    """

    use_display_lists = False
    """Use display lists to speed up rendering by keeping geometry on the GPU
    (type: boolean, default False)
    
    :type: bool
    """

    use_frame_rate = False
    """Respect the frame rate from the Physics panel in the world properties rather than rendering as many frames as possible
    (type: boolean, default False)
    
    :type: bool
    """

    use_glsl_color_management = False
    """Use color management for GLSL rendering
    (type: boolean, default False)
    
    :type: bool
    """

    use_glsl_environment_lighting = False
    """Use environment lighting for GLSL rendering
    (type: boolean, default False)
    
    :type: bool
    """

    use_glsl_extra_textures = False
    """Use extra textures like normal or specular maps for GLSL rendering
    (type: boolean, default False)
    
    :type: bool
    """

    use_glsl_lights = False
    """Use lights for GLSL rendering
    (type: boolean, default False)
    
    :type: bool
    """

    use_glsl_nodes = False
    """Use nodes for GLSL rendering
    (type: boolean, default False)
    
    :type: bool
    """

    use_glsl_ramps = False
    """Use ramps for GLSL rendering
    (type: boolean, default False)
    
    :type: bool
    """

    use_glsl_shaders = False
    """Use shaders for GLSL rendering
    (type: boolean, default False)
    
    :type: bool
    """

    use_glsl_shadows = False
    """Use shadows for GLSL rendering
    (type: boolean, default False)
    
    :type: bool
    """

    use_material_caching = False
    """Cache materials in the converter (this is faster, but can cause problems with older Singletexture and Multitexture games)
    (type: boolean, default False)
    
    :type: bool
    """

    use_occlusion_culling = False
    """Use optimized Bullet DBVT tree for view frustum and occlusion culling (more efficient, but it can waste unnecessary CPU if the scene doesn't have occluder objects)
    (type: boolean, default False)
    
    :type: bool
    """

    use_restrict_animation_updates = False
    """Restrict the number of animation updates to the animation FPS (this is better for performance, but can cause issues with smooth playback)
    (type: boolean, default False)
    
    :type: bool
    """

    use_scene_hysteresis = False
    """Use LoD Hysteresis setting for the scene
    (type: boolean, default False)
    
    :type: bool
    """

    vsync = 'ON'
    """Change vsync settings
    * 'OFF': Off, Disable vsync.
    * 'ON': On, Enable vsync.
    * 'ADAPTIVE': Adaptive, Enable adaptive vsync (if supported).
    (type: enum in ['OFF', 'ON', 'ADAPTIVE'], default 'ON')
    
    :type: str
    """


class SceneGameRecastData(bpy_struct):
    """Recast data for a Game data-block"""

    agent_height = 2.0
    """Minimum height where the agent can still walk
    (type: float in [-inf, inf], default 2.0)
    
    :type: float
    """

    agent_radius = 0.6
    """Radius of the agent
    (type: float in [-inf, inf], default 0.6)
    
    :type: float
    """

    cell_height = 0.2
    """Rasterized cell height
    (type: float in [-inf, inf], default 0.2)
    
    :type: float
    """

    cell_size = 0.3
    """Rasterized cell size
    (type: float in [-inf, inf], default 0.3)
    
    :type: float
    """

    climb_max = 0.9
    """Maximum height between grid cells the agent can climb
    (type: float in [-inf, inf], default 0.9)
    
    :type: float
    """

    edge_max_error = 1.3
    """Maximum distance error from contour to cells
    (type: float in [-inf, inf], default 1.3)
    
    :type: float
    """

    edge_max_len = 12.0
    """Maximum contour edge length
    (type: float in [-inf, inf], default 12.0)
    
    :type: float
    """

    partitioning = 'WATERSHED'
    """Choose partitioning method
    * 'WATERSHED': Watershed, Classic Recast partitioning method generating the nicest tessellation.
    * 'MONOTONE': Monotone, Fastest navmesh generation method, may create long thin polygons.
    * 'LAYERS': Layers, Reasonably fast method that produces better triangles than monotone partitioning.
    (type: enum in ['WATERSHED', 'MONOTONE', 'LAYERS'], default 'WATERSHED')
    
    :type: str
    """

    region_merge_size = 20.0
    """Minimum regions size (smaller regions will be merged)
    (type: float in [-inf, inf], default 20.0)
    
    :type: float
    """

    region_min_size = 8.0
    """Minimum regions size (smaller regions will be deleted)
    (type: float in [-inf, inf], default 8.0)
    
    :type: float
    """

    sample_dist = 6.0
    """Detail mesh sample spacing
    (type: float in [-inf, inf], default 6.0)
    
    :type: float
    """

    sample_max_error = 1.0
    """Detail mesh simplification max sample error
    (type: float in [-inf, inf], default 1.0)
    
    :type: float
    """

    slope_max = 0.785398
    """Maximum walkable slope angle
    (type: float in [0, 1.5708], default 0.785398)
    
    :type: float
    """

    verts_per_poly = 6
    """Max number of vertices per polygon
    (type: int in [-inf, inf], default 6)
    
    :type: int
    """


class SceneObjects(bpy_struct):
    """Collection of scene objects"""

    active = None
    """Active object for this scene
    (type: bpy.types.Object)
    
    :type: Object
    """

    def link(self, object):
        """Link object to scene, run scene.update() after
        
        :param object: Object to add to scene
            (type: bpy.types.Object, (never None))
        :type object: Object
        :return: The newly created base
        :param : (type: bpy.types.ObjectBase)
        :rtype: ObjectBase
        """

    def unlink(self, object):
        """Unlink object from scene
        
        :param object: Object to remove from scene
            (type: bpy.types.Object, (never None))
        :type object: Object
        """


class SceneRenderLayer(bpy_struct):
    """Render layer"""

    exclude_ambient_occlusion = False
    """Exclude AO pass from combined
    (type: boolean, default False)
    
    :type: bool
    """

    exclude_emit = False
    """Exclude emission pass from combined
    (type: boolean, default False)
    
    :type: bool
    """

    exclude_environment = False
    """Exclude environment pass from combined
    (type: boolean, default False)
    
    :type: bool
    """

    exclude_indirect = False
    """Exclude indirect pass from combined
    (type: boolean, default False)
    
    :type: bool
    """

    exclude_reflection = False
    """Exclude raytraced reflection pass from combined
    (type: boolean, default False)
    
    :type: bool
    """

    exclude_refraction = False
    """Exclude raytraced refraction pass from combined
    (type: boolean, default False)
    
    :type: bool
    """

    exclude_shadow = False
    """Exclude shadow pass from combined
    (type: boolean, default False)
    
    :type: bool
    """

    exclude_specular = False
    """Exclude specular pass from combined
    (type: boolean, default False)
    
    :type: bool
    """

    freestyle_settings = None
    """(type: bpy.types.FreestyleSettings, (readonly, never None))
    
    :type: FreestyleSettings
    """

    invert_zmask = False
    """For Zmask, only render what is behind solid z values instead of in front
    (type: boolean, default False)
    
    :type: bool
    """

    layers = (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
    """Scene layers included in this render layer
    (type: boolean array of 20 items, default (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False))
    
    :type: collections.Sequence[bool]
    """

    layers_exclude = (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
    """Exclude scene layers from having any influence
    (type: boolean array of 20 items, default (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False))
    
    :type: collections.Sequence[bool]
    """

    layers_zmask = (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
    """Zmask scene layers for solid faces
    (type: boolean array of 20 items, default (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False))
    
    :type: collections.Sequence[bool]
    """

    light_override = None
    """Group to override all other lights in this render layer
    (type: bpy.types.Group)
    
    :type: Group
    """

    material_override = None
    """Material to override all other materials in this render layer
    (type: bpy.types.Material)
    
    :type: Material
    """

    name = ""
    """Render layer name
    (type: string, default "", (never None))
    
    :type: str
    """

    pass_alpha_threshold = 0.0
    """Z, Index, normal, UV and vector passes are only affected by surfaces with alpha transparency equal to or higher than this threshold
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    samples = 0
    """Override number of render samples for this render layer, 0 will use the scene setting
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    use = False
    """Disable or enable the render layer
    (type: boolean, default False)
    
    :type: bool
    """

    use_all_z = False
    """Fill in Z values for solid faces in invisible layers, for masking
    (type: boolean, default False)
    
    :type: bool
    """

    use_ao = False
    """Render AO in this Layer
    (type: boolean, default False)
    
    :type: bool
    """

    use_edge_enhance = False
    """Render Edge-enhance in this Layer (only works for Solid faces)
    (type: boolean, default False)
    
    :type: bool
    """

    use_freestyle = False
    """Render stylized strokes in this Layer
    (type: boolean, default False)
    
    :type: bool
    """

    use_halo = False
    """Render Halos in this Layer (on top of Solid)
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_ambient_occlusion = False
    """Deliver AO pass
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_color = False
    """Deliver shade-less color pass
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_combined = False
    """Deliver full combined RGBA buffer
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_diffuse = False
    """Deliver diffuse pass
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_diffuse_color = False
    """Deliver diffuse color pass
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_diffuse_direct = False
    """Deliver diffuse direct pass
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_diffuse_indirect = False
    """Deliver diffuse indirect pass
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_emit = False
    """Deliver emission pass
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_environment = False
    """Deliver environment lighting pass
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_glossy_color = False
    """Deliver glossy color pass
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_glossy_direct = False
    """Deliver glossy direct pass
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_glossy_indirect = False
    """Deliver glossy indirect pass
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_indirect = False
    """Deliver indirect lighting pass
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_material_index = False
    """Deliver material index pass
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_mist = False
    """Deliver mist factor pass (0.0-1.0)
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_normal = False
    """Deliver normal pass
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_object_index = False
    """Deliver object index pass
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_reflection = False
    """Deliver raytraced reflection pass
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_refraction = False
    """Deliver raytraced refraction pass
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_shadow = False
    """Deliver shadow pass
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_specular = False
    """Deliver specular pass
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_subsurface_color = False
    """Deliver subsurface color pass
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_subsurface_direct = False
    """Deliver subsurface direct pass
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_subsurface_indirect = False
    """Deliver subsurface indirect pass
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_transmission_color = False
    """Deliver transmission color pass
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_transmission_direct = False
    """Deliver transmission direct pass
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_transmission_indirect = False
    """Deliver transmission indirect pass
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_uv = False
    """Deliver texture UV pass
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_vector = False
    """Deliver speed vector pass
    (type: boolean, default False)
    
    :type: bool
    """

    use_pass_z = False
    """Deliver Z values pass
    (type: boolean, default False)
    
    :type: bool
    """

    use_sky = False
    """Render Sky in this Layer
    (type: boolean, default False)
    
    :type: bool
    """

    use_solid = False
    """Render Solid faces in this Layer
    (type: boolean, default False)
    
    :type: bool
    """

    use_strand = False
    """Render Strands in this Layer
    (type: boolean, default False)
    
    :type: bool
    """

    use_zmask = False
    """Only render what's in front of the solid z values
    (type: boolean, default False)
    
    :type: bool
    """

    use_ztransp = False
    """Render Z-Transparent faces in this Layer (on top of Solid and Halos)
    (type: boolean, default False)
    
    :type: bool
    """


class SceneRenderView(bpy_struct):
    """Render viewpoint for 3D stereo and multiview rendering"""

    camera_suffix = ""
    """Suffix to identify the cameras to use, and added to the render images for this view
    (type: string, default "", (never None))
    
    :type: str
    """

    file_suffix = ""
    """Suffix added to the render images for this view
    (type: string, default "", (never None))
    
    :type: str
    """

    name = ""
    """Render view name
    (type: string, default "", (never None))
    
    :type: str
    """

    use = False
    """Disable or enable the render view
    (type: boolean, default False)
    
    :type: bool
    """


class Scopes(bpy_struct):
    """Scopes for statistical view of an image"""

    accuracy = 0.0
    """Proportion of original image source pixel lines to sample
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    histogram = None
    """Histogram for viewing image statistics
    (type: bpy.types.Histogram, (readonly))
    
    :type: Histogram
    """

    use_full_resolution = False
    """Sample every pixel of the image
    (type: boolean, default False)
    
    :type: bool
    """

    vectorscope_alpha = 0.0
    """Opacity of the points
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    waveform_alpha = 0.0
    """Opacity of the points
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    waveform_mode = 'LUMA'
    """(type: enum in ['LUMA', 'PARADE', 'YCBCR601', 'YCBCR709', 'YCBCRJPG', 'RGB'], default 'LUMA')
    
    :type: str
    """


class SculptToolCapabilities(bpy_struct):
    """Read-only indications of which brush operations are supported by the current sculpt tool"""

    has_accumulate = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    has_auto_smooth = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    has_gravity = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    has_height = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    has_jitter = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    has_normal_weight = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    has_persistence = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    has_pinch_factor = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    has_plane_offset = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    has_rake_factor = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    has_random_texture_angle = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    has_sculpt_plane = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    has_secondary_color = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    has_smooth_stroke = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    has_space_attenuation = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    has_strength_pressure = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """


class Sensor(bpy_struct):
    """Game engine logic brick to detect events"""

    active = False
    """Set active state of the sensor
    (type: boolean, default False)
    
    :type: bool
    """

    controllers = None
    """The list containing the controllers connected to the sensor
    (type: bpy.types.bpy_prop_collection of bpy.types.Controller, (readonly))
    
    :type: bpy_prop_collection
    """

    invert = False
    """Invert the level(output) of this sensor
    (type: boolean, default False)
    
    :type: bool
    """

    name = ""
    """Sensor name
    (type: string, default "", (never None))
    
    :type: str
    """

    pin = False
    """Display when not linked to a visible states controller
    (type: boolean, default False)
    
    :type: bool
    """

    show_expanded = False
    """Set sensor expanded in the user interface
    (type: boolean, default False)
    
    :type: bool
    """

    tick_skip = 0
    """Number of logic ticks skipped between 2 active pulses (0 = pulse every logic tick, 1 = skip 1 logic tick between pulses, etc.)
    (type: int in [0, 10000], default 0)
    
    :type: int
    """

    type = 'ALWAYS'
    """(type: enum in ['ACTUATOR', 'ALWAYS', 'ARMATURE', 'COLLISION', 'DELAY', 'JOYSTICK', 'KEYBOARD', 'MESSAGE', 'MOUSE', 'NEAR', 'PROPERTY', 'RADAR', 'RANDOM', 'RAY'], default 'ALWAYS')
    
    :type: str
    """

    use_level = False
    """Level detector, trigger controllers of new states (only applicable upon logic state transition)
    (type: boolean, default False)
    
    :type: bool
    """

    use_pulse_false_level = False
    """Activate FALSE level triggering (pulse mode)
    (type: boolean, default False)
    
    :type: bool
    """

    use_pulse_true_level = False
    """Activate TRUE level triggering (pulse mode)
    (type: boolean, default False)
    
    :type: bool
    """

    use_tap = False
    """Trigger controllers only for an instant, even while the sensor remains true
    (type: boolean, default False)
    
    :type: bool
    """

    def link(self, controller):
        """Link the sensor to a controller
        
        :param controller: Controller to link to
            (type: bpy.types.Controller)
        :type controller: Controller
        """

    def unlink(self, controller):
        """Unlink the sensor from a controller
        
        :param controller: Controller to unlink from
            (type: bpy.types.Controller)
        :type controller: Controller
        """


class Sequence(bpy_struct):
    """Sequence strip in the sequence editor"""

    blend_alpha = 0.0
    """(type: float in [0, 1], default 0.0)
    
    :type: float
    """

    blend_type = 'REPLACE'
    """(type: enum in ['REPLACE', 'CROSS', 'ADD', 'SUBTRACT', 'ALPHA_OVER', 'ALPHA_UNDER', 'GAMMA_CROSS', 'MULTIPLY', 'OVER_DROP'], default 'REPLACE')
    
    :type: str
    """

    channel = 0
    """Y position of the sequence strip
    (type: int in [1, 32], default 0)
    
    :type: int
    """

    effect_fader = 0.0
    """(type: float in [0, 1], default 0.0)
    
    :type: float
    """

    frame_duration = 0
    """The length of the contents of this strip before the handles are applied
    (type: int in [1, 500000], default 0, (readonly))
    
    :type: int
    """

    frame_final_duration = 0
    """The length of the contents of this strip after the handles are applied
    (type: int in [1, 500000], default 0)
    
    :type: int
    """

    frame_final_end = 0
    """End frame displayed in the sequence editor after offsets are applied
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    frame_final_start = 0
    """Start frame displayed in the sequence editor after offsets are applied, setting this is equivalent to moving the handle, not the actual start frame
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    frame_offset_end = 0
    """(type: int in [-inf, inf], default 0)
    
    :type: int
    """

    frame_offset_start = 0
    """(type: int in [-inf, inf], default 0)
    
    :type: int
    """

    frame_start = 0
    """(type: int in [-inf, inf], default 0)
    
    :type: int
    """

    frame_still_end = 0
    """(type: int in [0, 500000], default 0)
    
    :type: int
    """

    frame_still_start = 0
    """(type: int in [0, 500000], default 0)
    
    :type: int
    """

    lock = False
    """Lock strip so that it can't be transformed
    (type: boolean, default False)
    
    :type: bool
    """

    modifiers = None
    """Modifiers affecting this strip
    (type: bpy.types.SequenceModifiers bpy.types.bpy_prop_collection of bpy.types.SequenceModifier, (readonly))
    
    :type: SequenceModifiers
    """

    mute = False
    """(type: boolean, default False)
    
    :type: bool
    """

    name = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    select = False
    """(type: boolean, default False)
    
    :type: bool
    """

    select_left_handle = False
    """(type: boolean, default False)
    
    :type: bool
    """

    select_right_handle = False
    """(type: boolean, default False)
    
    :type: bool
    """

    speed_factor = 0.0
    """Multiply the current speed of the sequence with this number or remap current frame to this frame
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    type = 'IMAGE'
    """(type: enum in ['IMAGE', 'META', 'SCENE', 'MOVIE', 'MOVIECLIP', 'MASK', 'SOUND', 'CROSS', 'ADD', 'SUBTRACT', 'ALPHA_OVER', 'ALPHA_UNDER', 'GAMMA_CROSS', 'MULTIPLY', 'OVER_DROP', 'WIPE', 'GLOW', 'TRANSFORM', 'COLOR', 'SPEED', 'MULTICAM', 'ADJUSTMENT', 'GAUSSIAN_BLUR', 'TEXT'], default 'IMAGE', (readonly))
    
    :type: str
    """

    use_default_fade = False
    """Fade effect using the built-in default (usually make transition as long as effect strip)
    (type: boolean, default False)
    
    :type: bool
    """

    use_linear_modifiers = False
    """Calculate modifiers in linear space instead of sequencer's space
    (type: boolean, default False)
    
    :type: bool
    """

    def update(self, data=False):
        """Update the strip dimensions
        
        :param data: Data, Update strip data
            (type: boolean, (optional))
        :type data: bool
        """

    def strip_elem_from_frame(self, frame):
        """Return the strip element from a given frame or None
        
        :param frame: Frame, The frame to get the strip element from
            (type: int in [-500000, 500000])
        :type frame: int
        :return: strip element of the current frame
        :param : (type: bpy.types.SequenceElement)
        :rtype: SequenceElement
        """

    def swap(self, other):
        """swap
        
        :param other: Other
            (type: bpy.types.Sequence, (never None))
        :type other: Sequence
        """


class SequenceColorBalanceData(bpy_struct):
    """Color balance parameters for a sequence strip and it's modifiers"""

    gain = (1.0, 1.0, 1.0)
    """Color balance gain (highlights)
    (type: float array of 3 items in [0, inf], default (1.0, 1.0, 1.0))
    
    :type: mathutils.Color
    """

    gamma = (1.0, 1.0, 1.0)
    """Color balance gamma (midtones)
    (type: float array of 3 items in [0, inf], default (1.0, 1.0, 1.0))
    
    :type: mathutils.Color
    """

    invert_gain = False
    """(type: boolean, default False)
    
    :type: bool
    """

    invert_gamma = False
    """(type: boolean, default False)
    
    :type: bool
    """

    invert_lift = False
    """(type: boolean, default False)
    
    :type: bool
    """

    lift = (1.0, 1.0, 1.0)
    """Color balance lift (shadows)
    (type: float array of 3 items in [0, inf], default (1.0, 1.0, 1.0))
    
    :type: mathutils.Color
    """


class SequenceCrop(bpy_struct):
    """Cropping parameters for a sequence strip"""

    max_x = 0
    """(type: int in [0, inf], default 0)
    
    :type: int
    """

    max_y = 0
    """(type: int in [0, inf], default 0)
    
    :type: int
    """

    min_x = 0
    """(type: int in [0, inf], default 0)
    
    :type: int
    """

    min_y = 0
    """(type: int in [0, inf], default 0)
    
    :type: int
    """


class SequenceEditor(bpy_struct):
    """Sequence editing data for a Scene data-block"""

    active_strip = None
    """Sequencer's active strip
    (type: bpy.types.Sequence)
    
    :type: Sequence
    """

    meta_stack = None
    """Meta strip stack, last is currently edited meta strip
    (type: bpy.types.bpy_prop_collection of bpy.types.Sequence, (readonly))
    
    :type: bpy_prop_collection
    """

    overlay_frame = 0
    """(type: int in [-inf, inf], default 0)
    
    :type: int
    """

    proxy_dir = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    proxy_storage = 'PER_STRIP'
    """How to store proxies for this project
    * 'PER_STRIP': Per Strip, Store proxies using per strip settings.
    * 'PROJECT': Project, Store proxies using project directory.
    (type: enum in ['PER_STRIP', 'PROJECT'], default 'PER_STRIP')
    
    :type: str
    """

    sequences = None
    """Top-level strips only
    (type: bpy.types.Sequences bpy.types.bpy_prop_collection of bpy.types.Sequence, (readonly))
    
    :type: Sequences
    """

    sequences_all = None
    """All strips, recursively including those inside metastrips
    (type: bpy.types.bpy_prop_collection of bpy.types.Sequence, (readonly))
    
    :type: bpy_prop_collection
    """

    show_overlay = False
    """Partial overlay on top of the sequencer
    (type: boolean, default False)
    
    :type: bool
    """

    use_overlay_lock = False
    """(type: boolean, default False)
    
    :type: bool
    """


class SequenceElement(bpy_struct):
    """Sequence strip data for a single frame"""

    filename = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    orig_height = 0
    """Original image height
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    orig_width = 0
    """Original image width
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """


class SequenceElements(bpy_struct):
    """Collection of SequenceElement"""

    def append(self, filename):
        """Push an image from ImageSequence.directory
        
        :param filename: Filepath to image
            (type: str, (never None))
        :type filename: str
        :return: New SequenceElement
        :param : (type: bpy.types.SequenceElement)
        :rtype: SequenceElement
        """

    def pop(self, index):
        """Pop an image off the collection
        
        :param index: Index of image to remove
            (type: int in [-inf, inf])
        :type index: int
        """


class SequenceModifier(bpy_struct):
    """Modifier for sequence strip"""

    input_mask_id = None
    """Mask ID used as mask input for the modifier
    (type: bpy.types.Mask)
    
    :type: Mask
    """

    input_mask_strip = None
    """Strip used as mask input for the modifier
    (type: bpy.types.Sequence)
    
    :type: Sequence
    """

    input_mask_type = 'STRIP'
    """Type of input data used for mask
    * 'STRIP': Strip, Use sequencer strip as mask input.
    * 'ID': Mask, Use mask ID as mask input.
    (type: enum in ['STRIP', 'ID'], default 'STRIP')
    
    :type: str
    """

    mask_time = 'RELATIVE'
    """Time to use for the Mask animation
    * 'RELATIVE': Relative, Mask animation is offset to start of strip.
    * 'ABSOLUTE': Absolute, Mask animation is in sync with scene frame.
    (type: enum in ['RELATIVE', 'ABSOLUTE'], default 'RELATIVE')
    
    :type: str
    """

    mute = False
    """Mute this modifier
    (type: boolean, default False)
    
    :type: bool
    """

    name = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    show_expanded = False
    """Mute expanded settings for the modifier
    (type: boolean, default False)
    
    :type: bool
    """

    type = 'COLOR_BALANCE'
    """(type: enum in ['COLOR_BALANCE', 'CURVES', 'HUE_CORRECT', 'BRIGHT_CONTRAST', 'MASK', 'WHITE_BALANCE', 'TONEMAP'], default 'COLOR_BALANCE', (readonly))
    
    :type: str
    """


class SequenceModifiers(bpy_struct):
    """Collection of strip modifiers"""

    def new(self, name, type):
        """Add a new modifier
        
        :param name: New name for the modifier
            (type: str, (never None))
        :type name: str
        :param type: Modifier type to add
            (type: enum in ['COLOR_BALANCE', 'CURVES', 'HUE_CORRECT', 'BRIGHT_CONTRAST', 'MASK', 'WHITE_BALANCE', 'TONEMAP'])
        :type type: str
        :return: Newly created modifier
        :param : (type: bpy.types.SequenceModifier)
        :rtype: SequenceModifier
        """

    def remove(self, modifier):
        """Remove an existing modifier from the sequence
        
        :param modifier: Modifier to remove
            (type: bpy.types.SequenceModifier, (never None))
        :type modifier: SequenceModifier
        """

    def clear(self):
        """Remove all modifiers from the sequence"""


class SequenceProxy(bpy_struct):
    """Proxy parameters for a sequence strip"""

    build_100 = False
    """Build 100% proxy resolution
    (type: boolean, default False)
    
    :type: bool
    """

    build_25 = False
    """Build 25% proxy resolution
    (type: boolean, default False)
    
    :type: bool
    """

    build_50 = False
    """Build 50% proxy resolution
    (type: boolean, default False)
    
    :type: bool
    """

    build_75 = False
    """Build 75% proxy resolution
    (type: boolean, default False)
    
    :type: bool
    """

    build_free_run = False
    """Build free run time code index
    (type: boolean, default False)
    
    :type: bool
    """

    build_free_run_rec_date = False
    """Build free run time code index using Record Date/Time
    (type: boolean, default False)
    
    :type: bool
    """

    build_record_run = False
    """Build record run time code index
    (type: boolean, default False)
    
    :type: bool
    """

    directory = ""
    """Location to store the proxy files
    (type: string, default "", (never None))
    
    :type: str
    """

    filepath = ""
    """Location of custom proxy file
    (type: string, default "", (never None))
    
    :type: str
    """

    quality = 0
    """JPEG Quality of proxies to build
    (type: int in [0, 32767], default 0)
    
    :type: int
    """

    timecode = 'NONE'
    """
    * 'NONE': No TC in use.
    * 'RECORD_RUN': Record Run, Use images in the order as they are recorded.
    * 'FREE_RUN': Free Run, Use global timestamp written by recording device.
    * 'FREE_RUN_REC_DATE': Free Run (rec date), Interpolate a global timestamp using the record date and time written by recording device.
    * 'RECORD_RUN_NO_GAPS': Record Run No Gaps, Like record run, but ignore timecode, changes in framerate or dropouts.
    (type: enum in ['NONE', 'RECORD_RUN', 'FREE_RUN', 'FREE_RUN_REC_DATE', 'RECORD_RUN_NO_GAPS'], default 'NONE')
    
    :type: str
    """

    use_overwrite = False
    """Overwrite existing proxy files when building
    (type: boolean, default False)
    
    :type: bool
    """

    use_proxy_custom_directory = False
    """Use a custom directory to store data
    (type: boolean, default False)
    
    :type: bool
    """

    use_proxy_custom_file = False
    """Use a custom file to read proxy data from
    (type: boolean, default False)
    
    :type: bool
    """


class SequenceTransform(bpy_struct):
    """Transform parameters for a sequence strip"""

    offset_x = 0
    """(type: int in [-inf, inf], default 0)
    
    :type: int
    """

    offset_y = 0
    """(type: int in [-inf, inf], default 0)
    
    :type: int
    """


class Sequences(bpy_struct):
    """Collection of Sequences"""

    def new_clip(self, name, clip, channel, frame_start):
        """Add a new movie clip sequence
        
        :param name: Name for the new sequence
            (type: str, (never None))
        :type name: str
        :param clip: Movie clip to add
            (type: bpy.types.MovieClip, (never None))
        :type clip: MovieClip
        :param channel: Channel, The channel for the new sequence
            (type: int in [1, 32])
        :type channel: int
        :param frame_start: The start frame for the new sequence
            (type: int in [-500000, 500000])
        :type frame_start: int
        :return: New Sequence
        :param : (type: bpy.types.Sequence)
        :rtype: Sequence
        """

    def new_mask(self, name, mask, channel, frame_start):
        """Add a new mask sequence
        
        :param name: Name for the new sequence
            (type: str, (never None))
        :type name: str
        :param mask: Mask to add
            (type: bpy.types.Mask, (never None))
        :type mask: Mask
        :param channel: Channel, The channel for the new sequence
            (type: int in [1, 32])
        :type channel: int
        :param frame_start: The start frame for the new sequence
            (type: int in [-500000, 500000])
        :type frame_start: int
        :return: New Sequence
        :param : (type: bpy.types.Sequence)
        :rtype: Sequence
        """

    def new_scene(self, name, scene, channel, frame_start):
        """Add a new scene sequence
        
        :param name: Name for the new sequence
            (type: str, (never None))
        :type name: str
        :param scene: Scene to add
            (type: bpy.types.Scene, (never None))
        :type scene: Scene
        :param channel: Channel, The channel for the new sequence
            (type: int in [1, 32])
        :type channel: int
        :param frame_start: The start frame for the new sequence
            (type: int in [-500000, 500000])
        :type frame_start: int
        :return: New Sequence
        :param : (type: bpy.types.Sequence)
        :rtype: Sequence
        """

    def new_image(self, name, filepath, channel, frame_start):
        """Add a new image sequence
        
        :param name: Name for the new sequence
            (type: str, (never None))
        :type name: str
        :param filepath: Filepath to image
            (type: str, (never None))
        :type filepath: str
        :param channel: Channel, The channel for the new sequence
            (type: int in [1, 32])
        :type channel: int
        :param frame_start: The start frame for the new sequence
            (type: int in [-500000, 500000])
        :type frame_start: int
        :return: New Sequence
        :param : (type: bpy.types.Sequence)
        :rtype: Sequence
        """

    def new_movie(self, name, filepath, channel, frame_start):
        """Add a new movie sequence
        
        :param name: Name for the new sequence
            (type: str, (never None))
        :type name: str
        :param filepath: Filepath to movie
            (type: str, (never None))
        :type filepath: str
        :param channel: Channel, The channel for the new sequence
            (type: int in [1, 32])
        :type channel: int
        :param frame_start: The start frame for the new sequence
            (type: int in [-500000, 500000])
        :type frame_start: int
        :return: New Sequence
        :param : (type: bpy.types.Sequence)
        :rtype: Sequence
        """

    def new_sound(self, name, filepath, channel, frame_start):
        """Add a new sound sequence
        
        :param name: Name for the new sequence
            (type: str, (never None))
        :type name: str
        :param filepath: Filepath to movie
            (type: str, (never None))
        :type filepath: str
        :param channel: Channel, The channel for the new sequence
            (type: int in [1, 32])
        :type channel: int
        :param frame_start: The start frame for the new sequence
            (type: int in [-500000, 500000])
        :type frame_start: int
        :return: New Sequence
        :param : (type: bpy.types.Sequence)
        :rtype: Sequence
        """

    def new_effect(self, name, type, channel, frame_start, frame_end=0, seq1=None, seq2=None, seq3=None):
        """Add a new effect sequence
        
        :param name: Name for the new sequence
            (type: str, (never None))
        :type name: str
        :param type: Type, type for the new sequence
            (type: enum in ['CROSS', 'ADD', 'SUBTRACT', 'ALPHA_OVER', 'ALPHA_UNDER', 'GAMMA_CROSS', 'MULTIPLY', 'OVER_DROP', 'WIPE', 'GLOW', 'TRANSFORM', 'COLOR', 'SPEED', 'MULTICAM', 'ADJUSTMENT', 'GAUSSIAN_BLUR', 'TEXT'])
        :type type: str
        :param channel: Channel, The channel for the new sequence
            (type: int in [1, 32])
        :type channel: int
        :param frame_start: The start frame for the new sequence
            (type: int in [-inf, inf])
        :type frame_start: int
        :param frame_end: The end frame for the new sequence
            (type: int in [-inf, inf], (optional))
        :type frame_end: int
        :param seq1: Sequence 1 for effect
            (type: bpy.types.Sequence, (optional))
        :type seq1: Sequence
        :param seq2: Sequence 2 for effect
            (type: bpy.types.Sequence, (optional))
        :type seq2: Sequence
        :param seq3: Sequence 3 for effect
            (type: bpy.types.Sequence, (optional))
        :type seq3: Sequence
        :return: New Sequence
        :param : (type: bpy.types.Sequence)
        :rtype: Sequence
        """

    def remove(self, sequence):
        """Remove a Sequence
        
        :param sequence: Sequence to remove
            (type: bpy.types.Sequence, (never None))
        :type sequence: Sequence
        """


class ShapeKey(bpy_struct):
    """Shape key in a shape keys data-block"""

    data = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.UnknownType, (readonly))
    
    :type: bpy_prop_collection
    """

    frame = 0.0
    """Frame for absolute keys
    (type: float in [-inf, inf], default 0.0, (readonly))
    
    :type: float
    """

    interpolation = 'KEY_LINEAR'
    """Interpolation type for absolute shape keys
    (type: enum in ['KEY_LINEAR', 'KEY_CARDINAL', 'KEY_CATMULL_ROM', 'KEY_BSPLINE'], default 'KEY_LINEAR')
    
    :type: str
    """

    mute = False
    """Mute this shape key
    (type: boolean, default False)
    
    :type: bool
    """

    name = ""
    """Name of Shape Key
    (type: string, default "", (never None))
    
    :type: str
    """

    relative_key = None
    """Shape used as a relative key
    (type: bpy.types.ShapeKey, (never None))
    
    :type: ShapeKey
    """

    slider_max = 1.0
    """Maximum for slider
    (type: float in [-10, 10], default 1.0)
    
    :type: float
    """

    slider_min = 0.0
    """Minimum for slider
    (type: float in [-10, 10], default 0.0)
    
    :type: float
    """

    value = 0.0
    """Value of shape key at the current frame
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    vertex_group = ""
    """Vertex weight group, to blend with basis shape
    (type: string, default "", (never None))
    
    :type: str
    """

    def normals_vertex_get(self):
        """Compute local space vertices' normals for this shape key
        
        :return: normals
        :param : (type: float in [-1, 1])
        :rtype: float
        """

    def normals_polygon_get(self):
        """Compute local space faces' normals for this shape key
        
        :return: normals
        :param : (type: float in [-1, 1])
        :rtype: float
        """

    def normals_split_get(self):
        """Compute local space face corners' normals for this shape key
        
        :return: normals
        :param : (type: float in [-1, 1])
        :rtype: float
        """


class ShapeKeyBezierPoint(bpy_struct):
    """Point in a shape key for Bezier curves"""

    co = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    handle_left = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    handle_right = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """


class ShapeKeyCurvePoint(bpy_struct):
    """Point in a shape key for curves"""

    co = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    tilt = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """


class ShapeKeyPoint(bpy_struct):
    """Point in a shape key"""

    co = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """


class SmokeCollSettings(bpy_struct):
    """Smoke collision settings"""

    collision_type = 'COLLSTATIC'
    """Collision type
    * 'COLLSTATIC': Static, Non moving obstacle.
    * 'COLLRIGID': Rigid, Rigid obstacle.
    * 'COLLANIMATED': Animated, Animated obstacle.
    (type: enum in ['COLLSTATIC', 'COLLRIGID', 'COLLANIMATED'], default 'COLLSTATIC')
    
    :type: str
    """


class SmokeDomainSettings(bpy_struct):
    """Smoke domain settings"""

    adapt_margin = 0
    """Margin added around fluid to minimize boundary interference
    (type: int in [2, 24], default 0)
    
    :type: int
    """

    adapt_threshold = 0.0
    """Maximum amount of fluid cell can contain before it is considered empty
    (type: float in [0.01, 0.5], default 0.0)
    
    :type: float
    """

    additional_res = 0
    """Maximum number of additional cells
    (type: int in [0, 512], default 0)
    
    :type: int
    """

    alpha = 0.0
    """How much density affects smoke motion (higher value results in faster rising smoke)
    (type: float in [-5, 5], default 0.0)
    
    :type: float
    """

    amplify = 0
    """Enhance the resolution of smoke by this factor using noise
    (type: int in [1, 10], default 0)
    
    :type: int
    """

    axis_slice_method = 'FULL'
    """
    * 'FULL': Full, Slice the whole domain object.
    * 'SINGLE': Single, Perform a single slice of the domain object.
    (type: enum in ['FULL', 'SINGLE'], default 'FULL')
    
    :type: str
    """

    beta = 0.0
    """How much heat affects smoke motion (higher value results in faster rising smoke)
    (type: float in [-5, 5], default 0.0)
    
    :type: float
    """

    burning_rate = 0.0
    """Speed of the burning reaction (use larger values for smaller flame)
    (type: float in [0.01, 4], default 0.0)
    
    :type: float
    """

    cache_file_format = 'POINTCACHE'
    """Select the file format to be used for caching
    * 'POINTCACHE': Point Cache, Blender specific point cache file format.
    * 'OPENVDB': OpenVDB, OpenVDB file format.
    (type: enum in ['POINTCACHE', 'OPENVDB'], default 'POINTCACHE')
    
    :type: str
    """

    cell_size = (0.0, 0.0, 0.0)
    """Cell Size
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0), (readonly))
    
    :type: mathutils.Vector
    """

    coba_field = 'DENSITY'
    """Simulation field to color map
    * 'COLOR_R': Red, Red component of the color field.
    * 'COLOR_G': Green, Green component of the color field.
    * 'COLOR_B': Blue, Blue component of the color field.
    * 'DENSITY': Density, Quantity of soot in the fluid.
    * 'FLAME': Flame, Flame field.
    * 'FUEL': Fuel, Fuel field.
    * 'HEAT': Heat, Temperature of the fluid.
    * 'VELOCITY_X': X Velocity, X component of the velocity field.
    * 'VELOCITY_Y': Y Velocity, Y component of the velocity field.
    * 'VELOCITY_Z': Z Velocity, Z component of the velocity field.
    (type: enum in ['COLOR_R', 'COLOR_G', 'COLOR_B', 'DENSITY', 'FLAME', 'FUEL', 'HEAT', 'VELOCITY_X', 'VELOCITY_Y', 'VELOCITY_Z'], default 'DENSITY')
    
    :type: str
    """

    collision_extents = 'BORDEROPEN'
    """Select which domain border will be treated as collision object
    * 'BORDEROPEN': Open, Smoke doesn't collide with any border.
    * 'BORDERVERTICAL': Vertically Open, Smoke doesn't collide with top and bottom sides.
    * 'BORDERCLOSED': Collide All, Smoke collides with every side.
    (type: enum in ['BORDEROPEN', 'BORDERVERTICAL', 'BORDERCLOSED'], default 'BORDEROPEN')
    
    :type: str
    """

    collision_group = None
    """Limit collisions to this group
    (type: bpy.types.Group)
    
    :type: Group
    """

    color_grid = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    """Smoke color grid
    (type: float array of 32 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (readonly))
    
    :type: collections.Sequence[float]
    """

    color_ramp = None
    """(type: bpy.types.ColorRamp, (readonly))
    
    :type: ColorRamp
    """

    data_depth = '32'
    """Bit depth for writing all scalar (including vector) lower values reduce file size
    * '16': Float (Half), Half float (16 bit data).
    * '32': Float (Full), Full float (32 bit data).
    (type: enum in ['16', '32'], default '32')
    
    :type: str
    """

    density_grid = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    """Smoke density grid
    (type: float array of 32 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (readonly))
    
    :type: collections.Sequence[float]
    """

    display_thickness = 0.0
    """Thickness of smoke drawing in the viewport
    (type: float in [0.001, 1000], default 0.0)
    
    :type: float
    """

    dissolve_speed = 0
    """Dissolve Speed
    (type: int in [1, 10000], default 0)
    
    :type: int
    """

    domain_resolution = (0, 0, 0)
    """Smoke Grid Resolution
    (type: int array of 3 items in [-inf, inf], default (0, 0, 0), (readonly))
    
    :type: collections.Sequence[int]
    """

    draw_velocity = False
    """Toggle visualization of the velocity field as needles
    (type: boolean, default False)
    
    :type: bool
    """

    effector_group = None
    """Limit effectors to this group
    (type: bpy.types.Group)
    
    :type: Group
    """

    effector_weights = None
    """(type: bpy.types.EffectorWeights, (readonly))
    
    :type: EffectorWeights
    """

    flame_grid = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    """Smoke flame grid
    (type: float array of 32 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (readonly))
    
    :type: collections.Sequence[float]
    """

    flame_ignition = 0.0
    """Minimum temperature of flames
    (type: float in [0.5, 5], default 0.0)
    
    :type: float
    """

    flame_max_temp = 0.0
    """Maximum temperature of flames
    (type: float in [1, 10], default 0.0)
    
    :type: float
    """

    flame_smoke = 0.0
    """Amount of smoke created by burning fuel
    (type: float in [0, 8], default 0.0)
    
    :type: float
    """

    flame_smoke_color = (0.0, 0.0, 0.0)
    """Color of smoke emitted from burning fuel
    (type: float array of 3 items in [0, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    flame_vorticity = 0.0
    """Additional vorticity for the flames
    (type: float in [0, 2], default 0.0)
    
    :type: float
    """

    fluid_group = None
    """Limit fluid objects to this group
    (type: bpy.types.Group)
    
    :type: Group
    """

    heat_grid = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    """Smoke heat grid
    (type: float array of 32 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (readonly))
    
    :type: collections.Sequence[float]
    """

    highres_sampling = 'NEAREST'
    """Method for sampling the high resolution flow
    (type: enum in ['FULLSAMPLE', 'LINEAR', 'NEAREST'], default 'NEAREST')
    
    :type: str
    """

    noise_type = 'NOISEWAVE'
    """Noise method which is used for creating the high resolution
    (type: enum in ['NOISEWAVE', 'NOISEFFT'], default 'NOISEWAVE')
    
    :type: str
    """

    openvdb_cache_compress_type = 'ZIP'
    """Compression method to be used
    * 'ZIP': Zip, Effective but slow compression.
    * 'NONE': None, Do not use any compression.
    (type: enum in ['ZIP', 'NONE'], default 'ZIP')
    
    :type: str
    """

    point_cache = None
    """(type: bpy.types.PointCache, (readonly, never None))
    
    :type: PointCache
    """

    point_cache_compress_type = 'CACHELIGHT'
    """Compression method to be used
    * 'CACHELIGHT': Light, Fast but not so effective compression.
    * 'CACHEHEAVY': Heavy, Effective but slow compression.
    (type: enum in ['CACHELIGHT', 'CACHEHEAVY'], default 'CACHELIGHT')
    
    :type: str
    """

    resolution_max = 0
    """Maximal resolution used in the fluid domain
    (type: int in [6, 512], default 0)
    
    :type: int
    """

    show_high_resolution = False
    """Show high resolution (using amplification)
    (type: boolean, default False)
    
    :type: bool
    """

    slice_axis = 'AUTO'
    """
    * 'AUTO': Auto, Adjust slice direction according to the view direction.
    * 'X': X, Slice along the X axis.
    * 'Y': Y, Slice along the Y axis.
    * 'Z': Z, Slice along the Z axis.
    (type: enum in ['AUTO', 'X', 'Y', 'Z'], default 'AUTO')
    
    :type: str
    """

    slice_depth = 0.0
    """Position of the slice
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    slice_method = 'VIEW_ALIGNED'
    """How to slice the volume for viewport rendering
    * 'VIEW_ALIGNED': View, Slice volume parallel to the view plane.
    * 'AXIS_ALIGNED': Axis, Slice volume parallel to the major axis.
    (type: enum in ['VIEW_ALIGNED', 'AXIS_ALIGNED'], default 'VIEW_ALIGNED')
    
    :type: str
    """

    slice_per_voxel = 0.0
    """How many slices per voxel should be generated
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    start_point = (0.0, 0.0, 0.0)
    """Start point
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0), (readonly))
    
    :type: mathutils.Vector
    """

    strength = 0.0
    """Strength of noise
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    time_scale = 0.0
    """Adjust simulation speed
    (type: float in [0.2, 1.5], default 0.0)
    
    :type: float
    """

    use_adaptive_domain = False
    """Adapt simulation resolution and size to fluid
    (type: boolean, default False)
    
    :type: bool
    """

    use_color_ramp = False
    """Render a simulation field while mapping its voxels values to the colors of a ramp
    (type: boolean, default False)
    
    :type: bool
    """

    use_dissolve_smoke = False
    """Enable smoke to disappear over time
    (type: boolean, default False)
    
    :type: bool
    """

    use_dissolve_smoke_log = False
    """Using 1/x
    (type: boolean, default False)
    
    :type: bool
    """

    use_high_resolution = False
    """Enable high resolution (using amplification)
    (type: boolean, default False)
    
    :type: bool
    """

    vector_draw_type = 'NEEDLE'
    """
    * 'NEEDLE': Needle, Draw vectors as needles.
    * 'STREAMLINE': Streamlines, Draw vectors as streamlines.
    (type: enum in ['NEEDLE', 'STREAMLINE'], default 'NEEDLE')
    
    :type: str
    """

    vector_scale = 0.0
    """Multiplier for scaling the vectors
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """

    velocity_grid = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    """Smoke velocity grid
    (type: float array of 32 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (readonly))
    
    :type: collections.Sequence[float]
    """

    vorticity = 0.0
    """Amount of turbulence/rotation in fluid
    (type: float in [0.01, 4], default 0.0)
    
    :type: float
    """


class SmokeFlowSettings(bpy_struct):
    """Smoke flow settings"""

    density = 0.0
    """(type: float in [0, 1], default 0.0)
    
    :type: float
    """

    density_vertex_group = ""
    """Name of vertex group which determines surface emission rate
    (type: string, default "", (never None))
    
    :type: str
    """

    fuel_amount = 0.0
    """(type: float in [0, 10], default 0.0)
    
    :type: float
    """

    noise_texture = None
    """Texture that controls emission strength
    (type: bpy.types.Texture)
    
    :type: Texture
    """

    particle_size = 0.0
    """Particle size in simulation cells
    (type: float in [0.1, 20], default 0.0)
    
    :type: float
    """

    particle_system = None
    """Particle systems emitted from the object
    (type: bpy.types.ParticleSystem)
    
    :type: ParticleSystem
    """

    smoke_color = (0.0, 0.0, 0.0)
    """Color of smoke
    (type: float array of 3 items in [0, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    smoke_flow_source = 'PARTICLES'
    """Change how smoke is emitted
    * 'PARTICLES': Particle System, Emit smoke from particles.
    * 'MESH': Mesh, Emit smoke from mesh surface or volume.
    (type: enum in ['PARTICLES', 'MESH'], default 'PARTICLES')
    
    :type: str
    """

    smoke_flow_type = 'SMOKE'
    """Change how flow affects the simulation
    * 'OUTFLOW': Outflow, Delete smoke from simulation.
    * 'SMOKE': Smoke, Add smoke.
    * 'BOTH': Fire + Smoke, Add fire and smoke.
    * 'FIRE': Fire, Add fire.
    (type: enum in ['OUTFLOW', 'SMOKE', 'BOTH', 'FIRE'], default 'SMOKE')
    
    :type: str
    """

    subframes = 0
    """Number of additional samples to take between frames to improve quality of fast moving flows
    (type: int in [0, 50], default 0)
    
    :type: int
    """

    surface_distance = 0.0
    """Maximum distance from mesh surface to emit smoke
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    temperature = 0.0
    """Temperature difference to ambient temperature
    (type: float in [-10, 10], default 0.0)
    
    :type: float
    """

    texture_map_type = 'AUTO'
    """Texture mapping type
    * 'AUTO': Generated, Generated coordinates centered to flow object.
    * 'UV': UV, Use UV layer for texture coordinates.
    (type: enum in ['AUTO', 'UV'], default 'AUTO')
    
    :type: str
    """

    texture_offset = 0.0
    """Z-offset of texture mapping
    (type: float in [0, 200], default 0.0)
    
    :type: float
    """

    texture_size = 0.0
    """Size of texture mapping
    (type: float in [0.01, 10], default 0.0)
    
    :type: float
    """

    use_absolute = False
    """Only allow given density value in emitter area
    (type: boolean, default False)
    
    :type: bool
    """

    use_initial_velocity = False
    """Smoke has some initial velocity when it is emitted
    (type: boolean, default False)
    
    :type: bool
    """

    use_particle_size = False
    """Set particle size in simulation cells or use nearest cell
    (type: boolean, default False)
    
    :type: bool
    """

    use_texture = False
    """Use a texture to control emission strength
    (type: boolean, default False)
    
    :type: bool
    """

    uv_layer = ""
    """UV map name
    (type: string, default "", (never None))
    
    :type: str
    """

    velocity_factor = 0.0
    """Multiplier of source velocity passed to smoke
    (type: float in [-100, 100], default 0.0)
    
    :type: float
    """

    velocity_normal = 0.0
    """Amount of normal directional velocity
    (type: float in [-100, 100], default 0.0)
    
    :type: float
    """

    velocity_random = 0.0
    """Amount of random velocity
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    volume_density = 0.0
    """Factor for smoke emitted from inside the mesh volume
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """


class SoftBodySettings(bpy_struct):
    """Soft body simulation settings for an object"""

    aero = 0
    """Make edges 'sail'
    (type: int in [0, 30000], default 0)
    
    :type: int
    """

    aerodynamics_type = 'SIMPLE'
    """Method of calculating aerodynamic interaction
    * 'SIMPLE': Simple, Edges receive a drag force from surrounding media.
    * 'LIFT_FORCE': Lift Force, Edges receive a lift force when passing through surrounding media.
    (type: enum in ['SIMPLE', 'LIFT_FORCE'], default 'SIMPLE')
    
    :type: str
    """

    ball_damp = 0.0
    """Blending to inelastic collision
    (type: float in [0.001, 1], default 0.0)
    
    :type: float
    """

    ball_size = 0.0
    """Absolute ball size or factor if not manually adjusted
    (type: float in [-10, 10], default 0.0)
    
    :type: float
    """

    ball_stiff = 0.0
    """Ball inflating pressure
    (type: float in [0.001, 100], default 0.0)
    
    :type: float
    """

    bend = 0.0
    """Bending Stiffness
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    choke = 0
    """'Viscosity' inside collision target
    (type: int in [0, 100], default 0)
    
    :type: int
    """

    collision_group = None
    """Limit colliders to this Group
    (type: bpy.types.Group)
    
    :type: Group
    """

    collision_type = 'MANUAL'
    """Choose Collision Type
    * 'MANUAL': Manual, Manual adjust.
    * 'AVERAGE': Average, Average Spring length * Ball Size.
    * 'MINIMAL': Minimal, Minimal Spring length * Ball Size.
    * 'MAXIMAL': Maximal, Maximal Spring length * Ball Size.
    * 'MINMAX': AvMinMax, (Min+Max)/2 * Ball Size.
    (type: enum in ['MANUAL', 'AVERAGE', 'MINIMAL', 'MAXIMAL', 'MINMAX'], default 'MANUAL')
    
    :type: str
    """

    damping = 0.0
    """Edge spring friction
    (type: float in [0, 50], default 0.0)
    
    :type: float
    """

    effector_weights = None
    """(type: bpy.types.EffectorWeights, (readonly))
    
    :type: EffectorWeights
    """

    error_threshold = 0.0
    """The Runge-Kutta ODE solver error limit, low value gives more precision, high values speed
    (type: float in [0.001, 10], default 0.0)
    
    :type: float
    """

    friction = 0.0
    """General media friction for point movements
    (type: float in [0, 50], default 0.0)
    
    :type: float
    """

    fuzzy = 0
    """Fuzziness while on collision, high values make collision handling faster but less stable
    (type: int in [1, 100], default 0)
    
    :type: int
    """

    goal_default = 0.0
    """Default Goal (vertex target position) value
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    goal_friction = 0.0
    """Goal (vertex target position) friction
    (type: float in [0, 50], default 0.0)
    
    :type: float
    """

    goal_max = 0.0
    """Goal maximum, vertex weights are scaled to match this range
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    goal_min = 0.0
    """Goal minimum, vertex weights are scaled to match this range
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    goal_spring = 0.0
    """Goal (vertex target position) spring stiffness
    (type: float in [0, 0.999], default 0.0)
    
    :type: float
    """

    gravity = 0.0
    """Apply gravitation to point movement
    (type: float in [-10, 10], default 0.0)
    
    :type: float
    """

    location_mass_center = (0.0, 0.0, 0.0)
    """Location of Center of mass
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    mass = 0.0
    """General Mass value
    (type: float in [0, 50000], default 0.0)
    
    :type: float
    """

    plastic = 0
    """Permanent deform
    (type: int in [0, 100], default 0)
    
    :type: int
    """

    pull = 0.0
    """Edge spring stiffness when longer than rest length
    (type: float in [0, 0.999], default 0.0)
    
    :type: float
    """

    push = 0.0
    """Edge spring stiffness when shorter than rest length
    (type: float in [0, 0.999], default 0.0)
    
    :type: float
    """

    rotation_estimate = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    """Estimated rotation matrix
    (type: float array of 9 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Matrix
    """

    scale_estimate = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    """Estimated scale matrix
    (type: float array of 9 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Matrix
    """

    shear = 0.0
    """Shear Stiffness
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    speed = 0.0
    """Tweak timing for physics to control frequency and speed
    (type: float in [0.01, 100], default 0.0)
    
    :type: float
    """

    spring_length = 0
    """Alter spring length to shrink/blow up (unit %) 0 to disable
    (type: int in [0, 200], default 0)
    
    :type: int
    """

    step_max = 0
    """Maximal # solver steps/frame
    (type: int in [0, 30000], default 0)
    
    :type: int
    """

    step_min = 0
    """Minimal # solver steps/frame
    (type: int in [0, 30000], default 0)
    
    :type: int
    """

    use_auto_step = False
    """Use velocities for automagic step sizes
    (type: boolean, default False)
    
    :type: bool
    """

    use_diagnose = False
    """Turn on SB diagnose console prints
    (type: boolean, default False)
    
    :type: bool
    """

    use_edge_collision = False
    """Edges collide too
    (type: boolean, default False)
    
    :type: bool
    """

    use_edges = False
    """Use Edges as springs
    (type: boolean, default False)
    
    :type: bool
    """

    use_estimate_matrix = False
    """Estimate matrix... split to COM, ROT, SCALE
    (type: boolean, default False)
    
    :type: bool
    """

    use_face_collision = False
    """Faces collide too, can be very slow
    (type: boolean, default False)
    
    :type: bool
    """

    use_goal = False
    """Define forces for vertices to stick to animated position
    (type: boolean, default False)
    
    :type: bool
    """

    use_self_collision = False
    """Enable naive vertex ball self collision
    (type: boolean, default False)
    
    :type: bool
    """

    use_stiff_quads = False
    """Add diagonal springs on 4-gons
    (type: boolean, default False)
    
    :type: bool
    """

    vertex_group_goal = ""
    """Control point weight values
    (type: string, default "", (never None))
    
    :type: str
    """

    vertex_group_mass = ""
    """Control point mass values
    (type: string, default "", (never None))
    
    :type: str
    """

    vertex_group_spring = ""
    """Control point spring strength values
    (type: string, default "", (never None))
    
    :type: str
    """


class Space(bpy_struct):
    """Space data for a screen area"""

    show_locked_time = False
    """(type: boolean, default False)
    
    :type: bool
    """

    type = 'EMPTY'
    """Space data type
    * 'EMPTY': Empty.
    * 'VIEW_3D': 3D View, 3D viewport.
    * 'TIMELINE': Timeline, Timeline and playback controls.
    * 'GRAPH_EDITOR': Graph Editor, Edit drivers and keyframe interpolation.
    * 'DOPESHEET_EDITOR': Dope Sheet, Adjust timing of keyframes.
    * 'NLA_EDITOR': NLA Editor, Combine and layer Actions.
    * 'IMAGE_EDITOR': UV/Image Editor, View and edit images and UV Maps.
    * 'SEQUENCE_EDITOR': Video Sequence Editor, Video editing tools.
    * 'CLIP_EDITOR': Movie Clip Editor, Motion tracking tools.
    * 'TEXT_EDITOR': Text Editor, Edit scripts and in-file documentation.
    * 'NODE_EDITOR': Node Editor, Editor for node-based shading and compositing tools.
    * 'LOGIC_EDITOR': Logic Editor, Game logic editing.
    * 'PROPERTIES': Properties, Edit properties of active object and related data-blocks.
    * 'OUTLINER': Outliner, Overview of scene graph and all available data-blocks.
    * 'USER_PREFERENCES': User Preferences, Edit persistent configuration settings.
    * 'INFO': Info, Main menu bar and list of error messages (drag down to expand and display).
    * 'FILE_BROWSER': File Browser, Browse for files and assets.
    * 'CONSOLE': Python Console, Interactive programmatic console for advanced editing and script development.
    (type: enum in ['EMPTY', 'VIEW_3D', 'TIMELINE', 'GRAPH_EDITOR', 'DOPESHEET_EDITOR', 'NLA_EDITOR', 'IMAGE_EDITOR', 'SEQUENCE_EDITOR', 'CLIP_EDITOR', 'TEXT_EDITOR', 'NODE_EDITOR', 'LOGIC_EDITOR', 'PROPERTIES', 'OUTLINER', 'USER_PREFERENCES', 'INFO', 'FILE_BROWSER', 'CONSOLE'], default 'EMPTY', (readonly))
    
    :type: str
    """

    @classmethod
    def draw_handler_add(cls, func, args, region_type, draw_mode):
        """Undocumented
        
        :param func: Draw function
        :type func: collections.Callable
        :param args: function arguments
        :type args: hupre
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        :param draw_mode: enum in ['POST_PIXEL', 'POST_VIEW', 'PRE_VIEW']
        :type draw_mode: str
        :return: handle object
        :rtype: PyCapsule
        """

    @classmethod
    def draw_handler_remove(cls, handle, region_type):
        """Undocumented
        
        :param handle: handle object
        :type handle: PyCapsule
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        """


class SpaceNodeEditorPath(bpy_struct):
    """Get the node tree path as a string"""

    to_string = ""
    """(type: string, default "", (readonly, never None))
    
    :type: str
    """

    def clear(self):
        """Reset the node tree path"""

    def start(self, node_tree):
        """Set the root node tree
        
        :param node_tree: Node Tree
            (type: bpy.types.NodeTree)
        :type node_tree: NodeTree
        """

    def append(self, node_tree, node=None):
        """Append a node group tree to the path
        
        :param node_tree: Node Tree, Node tree to append to the node editor path
            (type: bpy.types.NodeTree)
        :type node_tree: NodeTree
        :param node: Node, Group node linking to this node tree
            (type: bpy.types.Node, (optional))
        :type node: Node
        """

    def pop(self):
        """Remove the last node tree from the path"""


class SpaceUVEditor(bpy_struct):
    """UV editor data for the image editor space"""

    draw_stretch_type = 'ANGLE'
    """Type of stretch to draw
    * 'ANGLE': Angle, Angular distortion between UV and 3D angles.
    * 'AREA': Area, Area distortion between UV and 3D faces.
    (type: enum in ['ANGLE', 'AREA'], default 'ANGLE')
    
    :type: str
    """

    edge_draw_type = 'OUTLINE'
    """Draw type for drawing UV edges
    * 'OUTLINE': Outline, Draw white edges with black outline.
    * 'DASH': Dash, Draw dashed black-white edges.
    * 'BLACK': Black, Draw black edges.
    * 'WHITE': White, Draw white edges.
    (type: enum in ['OUTLINE', 'DASH', 'BLACK', 'WHITE'], default 'OUTLINE')
    
    :type: str
    """

    lock_bounds = False
    """Constraint to stay within the image bounds while editing
    (type: boolean, default False)
    
    :type: bool
    """

    other_uv_filter = 'SAME_IMAGE'
    """Filter applied on the other object's UV to limit displayed
    * 'ALL': All, No filter, show all islands from other objects.
    * 'SAME_IMAGE': Same Image, Only show others' UV islands whose active image matches image of the active face.
    (type: enum in ['ALL', 'SAME_IMAGE'], default 'SAME_IMAGE')
    
    :type: str
    """

    show_faces = False
    """Draw faces over the image
    (type: boolean, default False)
    
    :type: bool
    """

    show_metadata = False
    """Draw metadata properties of the image
    (type: boolean, default False)
    
    :type: bool
    """

    show_modified_edges = False
    """Draw edges after modifiers are applied
    (type: boolean, default False)
    
    :type: bool
    """

    show_normalized_coords = False
    """Display UV coordinates from 0.0 to 1.0 rather than in pixels
    (type: boolean, default False)
    
    :type: bool
    """

    show_other_objects = False
    """Draw other selected objects that share the same image
    (type: boolean, default False)
    
    :type: bool
    """

    show_smooth_edges = False
    """Draw UV edges anti-aliased
    (type: boolean, default False)
    
    :type: bool
    """

    show_stretch = False
    """Draw faces colored according to the difference in shape between UVs and their 3D coordinates (blue for low distortion, red for high distortion)
    (type: boolean, default False)
    
    :type: bool
    """

    show_texpaint = False
    """Draw overlay of texture paint uv layer
    (type: boolean, default False)
    
    :type: bool
    """

    sticky_select_mode = 'SHARED_LOCATION'
    """Automatically select also UVs sharing the same vertex as the ones being selected
    * 'DISABLED': Disabled, Sticky vertex selection disabled.
    * 'SHARED_LOCATION': Shared Location, Select UVs that are at the same location and share a mesh vertex.
    * 'SHARED_VERTEX': Shared Vertex, Select UVs that share mesh vertex, irrespective if they are in the same location.
    (type: enum in ['DISABLED', 'SHARED_LOCATION', 'SHARED_VERTEX'], default 'SHARED_LOCATION')
    
    :type: str
    """

    use_live_unwrap = False
    """Continuously unwrap the selected UV island while transforming pinned vertices
    (type: boolean, default False)
    
    :type: bool
    """

    use_snap_to_pixels = False
    """Snap UVs to pixel locations while editing
    (type: boolean, default False)
    
    :type: bool
    """


class Spline(bpy_struct):
    """Element of a curve, either NURBS, Bezier or Polyline or a character with text objects"""

    bezier_points = None
    """Collection of points for Bezier curves only
    (type: bpy.types.SplineBezierPoints bpy.types.bpy_prop_collection of bpy.types.BezierSplinePoint, (readonly))
    
    :type: SplineBezierPoints
    """

    character_index = 0
    """Location of this character in the text data (only for text curves)
    (type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """

    hide = False
    """Hide this curve in Edit mode
    (type: boolean, default False)
    
    :type: bool
    """

    material_index = 0
    """(type: int in [0, 32767], default 0)
    
    :type: int
    """

    order_u = 0
    """NURBS order in the U direction (for splines and surfaces, higher values let points influence a greater area)
    (type: int in [2, 6], default 0)
    
    :type: int
    """

    order_v = 0
    """NURBS order in the V direction (for surfaces only, higher values let points influence a greater area)
    (type: int in [2, 6], default 0)
    
    :type: int
    """

    point_count_u = 0
    """Total number points for the curve or surface in the U direction
    (type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """

    point_count_v = 0
    """Total number points for the surface on the V direction
    (type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """

    points = None
    """Collection of points that make up this poly or nurbs spline
    (type: bpy.types.SplinePoints bpy.types.bpy_prop_collection of bpy.types.SplinePoint, (readonly))
    
    :type: SplinePoints
    """

    radius_interpolation = 'LINEAR'
    """The type of radius interpolation for Bezier curves
    (type: enum in ['LINEAR', 'CARDINAL', 'BSPLINE', 'EASE'], default 'LINEAR')
    
    :type: str
    """

    resolution_u = 0
    """Curve or Surface subdivisions per segment
    (type: int in [1, 1024], default 0)
    
    :type: int
    """

    resolution_v = 0
    """Surface subdivisions per segment
    (type: int in [1, 1024], default 0)
    
    :type: int
    """

    tilt_interpolation = 'LINEAR'
    """The type of tilt interpolation for 3D, Bezier curves
    (type: enum in ['LINEAR', 'CARDINAL', 'BSPLINE', 'EASE'], default 'LINEAR')
    
    :type: str
    """

    type = 'POLY'
    """The interpolation type for this curve element
    (type: enum in ['POLY', 'BEZIER', 'BSPLINE', 'CARDINAL', 'NURBS'], default 'POLY')
    
    :type: str
    """

    use_bezier_u = False
    """Make this nurbs curve or surface act like a Bezier spline in the U direction (Order U must be 3 or 4, Cyclic U must be disabled)
    (type: boolean, default False)
    
    :type: bool
    """

    use_bezier_v = False
    """Make this nurbs surface act like a Bezier spline in the V direction (Order V must be 3 or 4, Cyclic V must be disabled)
    (type: boolean, default False)
    
    :type: bool
    """

    use_cyclic_u = False
    """Make this curve or surface a closed loop in the U direction
    (type: boolean, default False)
    
    :type: bool
    """

    use_cyclic_v = False
    """Make this surface a closed loop in the V direction
    (type: boolean, default False)
    
    :type: bool
    """

    use_endpoint_u = False
    """Make this nurbs curve or surface meet the endpoints in the U direction (Cyclic U must be disabled)
    (type: boolean, default False)
    
    :type: bool
    """

    use_endpoint_v = False
    """Make this nurbs surface meet the endpoints in the V direction (Cyclic V must be disabled)
    (type: boolean, default False)
    
    :type: bool
    """

    use_smooth = False
    """Smooth the normals of the surface or beveled curve
    (type: boolean, default False)
    
    :type: bool
    """

    use_symmetric_end_u = False
    """Bezier curve, end point, auto handle
    (type: boolean, default False)
    
    :type: bool
    """


class SplineBezierPoints(bpy_struct):
    """Collection of spline Bezier points"""

    def add(self, count=1):
        """Add a number of points to this spline
        
        :param count: Number, Number of points to add to the spline
            (type: int in [0, inf], (optional))
        :type count: int
        """


class SplinePoint(bpy_struct):
    """Spline point without handles"""

    co = (0.0, 0.0, 0.0, 0.0)
    """Point coordinates
    (type: float array of 4 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    hide = False
    """Visibility status
    (type: boolean, default False)
    
    :type: bool
    """

    radius = 0.0
    """Radius for beveling
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    select = False
    """Selection status
    (type: boolean, default False)
    
    :type: bool
    """

    tilt = 0.0
    """Tilt in 3D View
    (type: float in [-376.991, 376.991], default 0.0)
    
    :type: float
    """

    weight = 0.0
    """NURBS weight
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    weight_softbody = 0.0
    """Softbody goal weight
    (type: float in [0.01, 100], default 0.0)
    
    :type: float
    """


class SplinePoints(bpy_struct):
    """Collection of spline points"""

    def add(self, count=1):
        """Add a number of points to this spline
        
        :param count: Number, Number of points to add to the spline
            (type: int in [0, inf], (optional))
        :type count: int
        """


class Stereo3dDisplay(bpy_struct):
    """Settings for stereo 3D display"""

    anaglyph_type = 'RED_CYAN'
    """(type: enum in ['RED_CYAN', 'GREEN_MAGENTA', 'YELLOW_BLUE'], default 'RED_CYAN')
    
    :type: str
    """

    display_mode = 'ANAGLYPH'
    """
    * 'ANAGLYPH': Anaglyph, Render views for left and right eyes as two differently filtered colors in a single image (anaglyph glasses are required).
    * 'INTERLACE': Interlace, Render views for left and right eyes interlaced in a single image (3D-ready monitor is required).
    * 'TIMESEQUENTIAL': Time Sequential, Render alternate eyes (also known as page flip, quad buffer support in the graphic card is required).
    * 'SIDEBYSIDE': Side-by-Side, Render views for left and right eyes side-by-side.
    * 'TOPBOTTOM': Top-Bottom, Render views for left and right eyes one above another.
    (type: enum in ['ANAGLYPH', 'INTERLACE', 'TIMESEQUENTIAL', 'SIDEBYSIDE', 'TOPBOTTOM'], default 'ANAGLYPH')
    
    :type: str
    """

    interlace_type = 'ROW_INTERLEAVED'
    """(type: enum in ['ROW_INTERLEAVED', 'COLUMN_INTERLEAVED', 'CHECKERBOARD_INTERLEAVED'], default 'ROW_INTERLEAVED')
    
    :type: str
    """

    use_interlace_swap = False
    """Swap left and right stereo channels
    (type: boolean, default False)
    
    :type: bool
    """

    use_sidebyside_crosseyed = False
    """Right eye should see left image and vice-versa
    (type: boolean, default False)
    
    :type: bool
    """


class Stereo3dFormat(bpy_struct):
    """Settings for stereo output"""

    anaglyph_type = 'RED_CYAN'
    """(type: enum in ['RED_CYAN', 'GREEN_MAGENTA', 'YELLOW_BLUE'], default 'RED_CYAN')
    
    :type: str
    """

    display_mode = 'ANAGLYPH'
    """
    * 'ANAGLYPH': Anaglyph, Render views for left and right eyes as two differently filtered colors in a single image (anaglyph glasses are required).
    * 'INTERLACE': Interlace, Render views for left and right eyes interlaced in a single image (3D-ready monitor is required).
    * 'SIDEBYSIDE': Side-by-Side, Render views for left and right eyes side-by-side.
    * 'TOPBOTTOM': Top-Bottom, Render views for left and right eyes one above another.
    (type: enum in ['ANAGLYPH', 'INTERLACE', 'SIDEBYSIDE', 'TOPBOTTOM'], default 'ANAGLYPH')
    
    :type: str
    """

    interlace_type = 'ROW_INTERLEAVED'
    """(type: enum in ['ROW_INTERLEAVED', 'COLUMN_INTERLEAVED', 'CHECKERBOARD_INTERLEAVED'], default 'ROW_INTERLEAVED')
    
    :type: str
    """

    use_interlace_swap = False
    """Swap left and right stereo channels
    (type: boolean, default False)
    
    :type: bool
    """

    use_sidebyside_crosseyed = False
    """Right eye should see left image and vice-versa
    (type: boolean, default False)
    
    :type: bool
    """

    use_squeezed_frame = False
    """Combine both views in a squeezed image
    (type: boolean, default False)
    
    :type: bool
    """


class Struct(bpy_struct):
    """RNA structure definition"""

    base = None
    """Struct definition this is derived from
    (type: bpy.types.Struct, (readonly))
    
    :type: Struct
    """

    description = ""
    """Description of the Struct's purpose
    (type: string, default "", (readonly, never None))
    
    :type: str
    """

    functions = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.Function, (readonly))
    
    :type: bpy_prop_collection
    """

    identifier = ""
    """Unique name used in the code and scripting
    (type: string, default "", (readonly, never None))
    
    :type: str
    """

    name = ""
    """Human readable name
    (type: string, default "", (readonly, never None))
    
    :type: str
    """

    name_property = None
    """Property that gives the name of the struct
    (type: bpy.types.StringProperty, (readonly))
    
    :type: StringProperty
    """

    nested = None
    """Struct in which this struct is always nested, and to which it logically belongs
    (type: bpy.types.Struct, (readonly))
    
    :type: Struct
    """

    properties = None
    """Properties in the struct
    (type: bpy.types.bpy_prop_collection of bpy.types.Property, (readonly))
    
    :type: bpy_prop_collection
    """

    translation_context = ""
    """Translation context of the struct's name
    (type: string, default "", (readonly, never None))
    
    :type: str
    """


class TessfaceUVTextures(bpy_struct):
    """Collection of UV maps for tessellated faces"""

    active = None
    """Active UV Map
    (type: bpy.types.MeshTextureFaceLayer, (readonly))
    
    :type: MeshTextureFaceLayer
    """

    active_index = 0
    """Active UV Map index
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    def new(self, name="UVMap"):
        """Add a UV tessface-texture layer to Mesh (only for meshes with no polygons)
        
        :param name: UV map name
            (type: str, (optional, never None))
        :type name: str
        :return: The newly created layer
        :param : (type: bpy.types.MeshTextureFaceLayer)
        :rtype: MeshTextureFaceLayer
        """


class TexMapping(bpy_struct):
    """Texture coordinate mapping settings"""

    mapping = 'FLAT'
    """
    * 'FLAT': Flat, Map X and Y coordinates directly.
    * 'CUBE': Cube, Map using the normal vector.
    * 'TUBE': Tube, Map with Z as central axis.
    * 'SPHERE': Sphere, Map with Z as central axis.
    (type: enum in ['FLAT', 'CUBE', 'TUBE', 'SPHERE'], default 'FLAT')
    
    :type: str
    """

    mapping_x = 'NONE'
    """(type: enum in ['NONE', 'X', 'Y', 'Z'], default 'NONE')
    
    :type: str
    """

    mapping_y = 'NONE'
    """(type: enum in ['NONE', 'X', 'Y', 'Z'], default 'NONE')
    
    :type: str
    """

    mapping_z = 'NONE'
    """(type: enum in ['NONE', 'X', 'Y', 'Z'], default 'NONE')
    
    :type: str
    """

    max = (0.0, 0.0, 0.0)
    """Maximum value for clipping
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    min = (0.0, 0.0, 0.0)
    """Minimum value for clipping
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    rotation = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Euler
    """

    scale = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    translation = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    use_max = False
    """Whether to use maximum clipping value
    (type: boolean, default False)
    
    :type: bool
    """

    use_min = False
    """Whether to use minimum clipping value
    (type: boolean, default False)
    
    :type: bool
    """

    vector_type = 'POINT'
    """Type of vector that the mapping transforms
    * 'TEXTURE': Texture, Transform a texture by inverse mapping the texture coordinate.
    * 'POINT': Point, Transform a point.
    * 'VECTOR': Vector, Transform a direction vector.
    * 'NORMAL': Normal, Transform a normal vector with unit length.
    (type: enum in ['TEXTURE', 'POINT', 'VECTOR', 'NORMAL'], default 'POINT')
    
    :type: str
    """


class TexPaintSlot(bpy_struct):
    """Slot that contains information about texture painting"""

    index = 0
    """Index of MTex slot in the material
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    uv_layer = ""
    """Name of UV map
    (type: string, default "", (never None))
    
    :type: str
    """


class TextBox(bpy_struct):
    """Text bounding box for layout"""

    height = 0.0
    """(type: float in [0, inf], default 0.0)
    
    :type: float
    """

    width = 0.0
    """(type: float in [0, inf], default 0.0)
    
    :type: float
    """

    x = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    y = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """


class TextCharacterFormat(bpy_struct):
    """Text character formatting settings"""

    material_index = 0
    """(type: int in [0, inf], default 0)
    
    :type: int
    """

    use_bold = False
    """(type: boolean, default False)
    
    :type: bool
    """

    use_italic = False
    """(type: boolean, default False)
    
    :type: bool
    """

    use_small_caps = False
    """(type: boolean, default False)
    
    :type: bool
    """

    use_underline = False
    """(type: boolean, default False)
    
    :type: bool
    """


class TextLine(bpy_struct):
    """Line of text in a Text data-block"""

    body = ""
    """Text in the line
    (type: string, default "", (never None))
    
    :type: str
    """


class TextureSlot(bpy_struct):
    """Texture slot defining the mapping and influence of a texture"""

    blend_type = 'MIX'
    """Mode used to apply the texture
    (type: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'SCREEN', 'OVERLAY', 'DIFFERENCE', 'DIVIDE', 'DARKEN', 'LIGHTEN', 'HUE', 'SATURATION', 'VALUE', 'COLOR', 'SOFT_LIGHT', 'LINEAR_LIGHT'], default 'MIX')
    
    :type: str
    """

    color = (0.0, 0.0, 0.0)
    """Default color for textures that don't return RGB or when RGB to intensity is enabled
    (type: float array of 3 items in [0, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    default_value = 0.0
    """Value to use for Ref, Spec, Amb, Emit, Alpha, RayMir, TransLu and Hard
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    invert = False
    """Invert the values of the texture to reverse its effect
    (type: boolean, default False)
    
    :type: bool
    """

    name = ""
    """Texture slot name
    (type: string, default "", (readonly, never None))
    
    :type: str
    """

    offset = (0.0, 0.0, 0.0)
    """Fine tune of the texture mapping X, Y and Z locations
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    output_node = 'DUMMY'
    """Which output node to use, for node-based textures
    (type: enum in ['DUMMY'], default 'DUMMY')
    
    :type: str
    """

    scale = (0.0, 0.0, 0.0)
    """Set scaling for the texture's X, Y and Z sizes
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    texture = None
    """Texture data-block used by this texture slot
    (type: bpy.types.Texture)
    
    :type: Texture
    """

    use_rgb_to_intensity = False
    """Convert texture RGB values to intensity (gray) values
    (type: boolean, default False)
    
    :type: bool
    """

    use_stencil = False
    """Use this texture as a blending value on the next texture
    (type: boolean, default False)
    
    :type: bool
    """


class Theme(bpy_struct):
    """Theme settings defining draw style and colors in the user interface"""

    bone_color_sets = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.ThemeBoneColorSet, (readonly, never None))
    
    :type: bpy_prop_collection
    """

    clip_editor = None
    """(type: bpy.types.ThemeClipEditor, (readonly, never None))
    
    :type: ThemeClipEditor
    """

    console = None
    """(type: bpy.types.ThemeConsole, (readonly, never None))
    
    :type: ThemeConsole
    """

    dopesheet_editor = None
    """(type: bpy.types.ThemeDopeSheet, (readonly, never None))
    
    :type: ThemeDopeSheet
    """

    file_browser = None
    """(type: bpy.types.ThemeFileBrowser, (readonly, never None))
    
    :type: ThemeFileBrowser
    """

    graph_editor = None
    """(type: bpy.types.ThemeGraphEditor, (readonly, never None))
    
    :type: ThemeGraphEditor
    """

    image_editor = None
    """(type: bpy.types.ThemeImageEditor, (readonly, never None))
    
    :type: ThemeImageEditor
    """

    info = None
    """(type: bpy.types.ThemeInfo, (readonly, never None))
    
    :type: ThemeInfo
    """

    logic_editor = None
    """(type: bpy.types.ThemeLogicEditor, (readonly, never None))
    
    :type: ThemeLogicEditor
    """

    name = ""
    """Name of the theme
    (type: string, default "", (never None))
    
    :type: str
    """

    nla_editor = None
    """(type: bpy.types.ThemeNLAEditor, (readonly, never None))
    
    :type: ThemeNLAEditor
    """

    node_editor = None
    """(type: bpy.types.ThemeNodeEditor, (readonly, never None))
    
    :type: ThemeNodeEditor
    """

    outliner = None
    """(type: bpy.types.ThemeOutliner, (readonly, never None))
    
    :type: ThemeOutliner
    """

    properties = None
    """(type: bpy.types.ThemeProperties, (readonly, never None))
    
    :type: ThemeProperties
    """

    sequence_editor = None
    """(type: bpy.types.ThemeSequenceEditor, (readonly, never None))
    
    :type: ThemeSequenceEditor
    """

    text_editor = None
    """(type: bpy.types.ThemeTextEditor, (readonly, never None))
    
    :type: ThemeTextEditor
    """

    theme_area = 'USER_INTERFACE'
    """(type: enum in ['USER_INTERFACE', 'STYLE', 'BONE_COLOR_SETS', 'VIEW_3D', 'TIMELINE', 'GRAPH_EDITOR', 'DOPESHEET_EDITOR', 'NLA_EDITOR', 'IMAGE_EDITOR', 'SEQUENCE_EDITOR', 'TEXT_EDITOR', 'NODE_EDITOR', 'LOGIC_EDITOR', 'PROPERTIES', 'OUTLINER', 'USER_PREFERENCES', 'INFO', 'FILE_BROWSER', 'CONSOLE', 'CLIP_EDITOR'], default 'USER_INTERFACE')
    
    :type: str
    """

    timeline = None
    """(type: bpy.types.ThemeTimeline, (readonly, never None))
    
    :type: ThemeTimeline
    """

    user_interface = None
    """(type: bpy.types.ThemeUserInterface, (readonly, never None))
    
    :type: ThemeUserInterface
    """

    user_preferences = None
    """(type: bpy.types.ThemeUserPreferences, (readonly, never None))
    
    :type: ThemeUserPreferences
    """

    view_3d = None
    """(type: bpy.types.ThemeView3D, (readonly, never None))
    
    :type: ThemeView3D
    """


class ThemeBoneColorSet(bpy_struct):
    """Theme settings for bone color sets"""

    active = (0.0, 0.0, 0.0)
    """Color used for active bones
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    normal = (0.0, 0.0, 0.0)
    """Color used for the surface of bones
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    select = (0.0, 0.0, 0.0)
    """Color used for selected bones
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    show_colored_constraints = False
    """Allow the use of colors indicating constraints/keyed status
    (type: boolean, default False)
    
    :type: bool
    """


class ThemeClipEditor(bpy_struct):
    """Theme settings for the Movie Clip Editor"""

    active_marker = (0.0, 0.0, 0.0)
    """Color of active marker
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    disabled_marker = (0.0, 0.0, 0.0)
    """Color of disabled marker
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    frame_current = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    gp_vertex = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    gp_vertex_select = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    gp_vertex_size = 0
    """(type: int in [1, 10], default 0)
    
    :type: int
    """

    handle_align = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_auto = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_auto_clamped = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_free = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_sel_align = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_sel_auto = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_sel_auto_clamped = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_sel_free = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_vertex = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_vertex_select = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_vertex_size = 0
    """(type: int in [0, 255], default 0)
    
    :type: int
    """

    locked_marker = (0.0, 0.0, 0.0)
    """Color of locked marker
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    marker = (0.0, 0.0, 0.0)
    """Color of marker
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    marker_outline = (0.0, 0.0, 0.0)
    """Color of marker's outline
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    nurb_vertex_size = 0
    """(type: int in [1, 10], default 0)
    
    :type: int
    """

    path_after = (0.0, 0.0, 0.0)
    """Color of path after current frame
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    path_before = (0.0, 0.0, 0.0)
    """Color of path before current frame
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    selected_marker = (0.0, 0.0, 0.0)
    """Color of selected marker
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    space = None
    """Settings for space
    (type: bpy.types.ThemeSpaceGeneric, (readonly, never None))
    
    :type: ThemeSpaceGeneric
    """

    space_list = None
    """Settings for space list
    (type: bpy.types.ThemeSpaceListGeneric, (readonly, never None))
    
    :type: ThemeSpaceListGeneric
    """

    strips = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    strips_selected = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """


class ThemeConsole(bpy_struct):
    """Theme settings for the Console"""

    cursor = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    line_error = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    line_info = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    line_input = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    line_output = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    select = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    space = None
    """Settings for space
    (type: bpy.types.ThemeSpaceGeneric, (readonly, never None))
    
    :type: ThemeSpaceGeneric
    """


class ThemeDopeSheet(bpy_struct):
    """Theme settings for the Dope Sheet"""

    active_channels_group = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    channel_group = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    channels = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    channels_selected = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    dopesheet_channel = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    dopesheet_subchannel = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    frame_current = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    grid = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    keyframe = (0.0, 0.0, 0.0)
    """Color of Keyframe
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    keyframe_border = (0.0, 0.0, 0.0, 0.0)
    """Color of keyframe border
    (type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    keyframe_border_selected = (0.0, 0.0, 0.0, 0.0)
    """Color of selected keyframe border
    (type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    keyframe_breakdown = (0.0, 0.0, 0.0)
    """Color of breakdown keyframe
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    keyframe_breakdown_selected = (0.0, 0.0, 0.0)
    """Color of selected breakdown keyframe
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    keyframe_extreme = (0.0, 0.0, 0.0)
    """Color of extreme keyframe
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    keyframe_extreme_selected = (0.0, 0.0, 0.0)
    """Color of selected extreme keyframe
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    keyframe_jitter = (0.0, 0.0, 0.0)
    """Color of jitter keyframe
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    keyframe_jitter_selected = (0.0, 0.0, 0.0)
    """Color of selected jitter keyframe
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    keyframe_scale_factor = 1.0
    """Scale factor for adjusting the height of keyframes
    (type: float in [0.8, 5], default 1.0)
    
    :type: float
    """

    keyframe_selected = (0.0, 0.0, 0.0)
    """Color of selected keyframe
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    long_key = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    long_key_selected = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    space = None
    """Settings for space
    (type: bpy.types.ThemeSpaceGeneric, (readonly, never None))
    
    :type: ThemeSpaceGeneric
    """

    space_list = None
    """Settings for space list
    (type: bpy.types.ThemeSpaceListGeneric, (readonly, never None))
    
    :type: ThemeSpaceListGeneric
    """

    summary = (0.0, 0.0, 0.0, 0.0)
    """Color of summary channel
    (type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    value_sliders = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    view_sliders = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """


class ThemeFileBrowser(bpy_struct):
    """Theme settings for the File Browser"""

    selected_file = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    space = None
    """Settings for space
    (type: bpy.types.ThemeSpaceGeneric, (readonly, never None))
    
    :type: ThemeSpaceGeneric
    """


class ThemeFontStyle(bpy_struct):
    """Theme settings for Font"""

    font_kerning_style = 'UNFITTED'
    """Which style to use for font kerning
    * 'UNFITTED': Unfitted, Use scaled but un-grid-fitted kerning distances.
    * 'FITTED': Fitted, Use scaled and grid-fitted kerning distances.
    (type: enum in ['UNFITTED', 'FITTED'], default 'UNFITTED')
    
    :type: str
    """

    points = 0
    """(type: int in [6, 48], default 0)
    
    :type: int
    """

    shadow = 0
    """Shadow size (0, 3 and 5 supported)
    (type: int in [0, 5], default 0)
    
    :type: int
    """

    shadow_alpha = 0.0
    """(type: float in [0, 1], default 0.0)
    
    :type: float
    """

    shadow_offset_x = 0
    """Shadow offset in pixels
    (type: int in [-10, 10], default 0)
    
    :type: int
    """

    shadow_offset_y = 0
    """Shadow offset in pixels
    (type: int in [-10, 10], default 0)
    
    :type: int
    """

    shadow_value = 0.0
    """Shadow color in gray value
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """


class ThemeGradientColors(bpy_struct):
    """Theme settings for background colors and gradient"""

    gradient = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    high_gradient = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    show_grad = False
    """Do a gradient for the background of the viewport working area
    (type: boolean, default False)
    
    :type: bool
    """


class ThemeGraphEditor(bpy_struct):
    """Theme settings for the graph editor"""

    active_channels_group = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    channel_group = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    channels_region = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    dopesheet_channel = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    dopesheet_subchannel = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    frame_current = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    grid = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_align = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_auto = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_auto_clamped = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_free = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_sel_align = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_sel_auto = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_sel_auto_clamped = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_sel_free = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_sel_vect = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_vect = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_vertex = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_vertex_select = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_vertex_size = 0
    """(type: int in [0, 255], default 0)
    
    :type: int
    """

    lastsel_point = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    nurb_vertex_size = 0
    """(type: int in [1, 10], default 0)
    
    :type: int
    """

    space = None
    """Settings for space
    (type: bpy.types.ThemeSpaceGeneric, (readonly, never None))
    
    :type: ThemeSpaceGeneric
    """

    space_list = None
    """Settings for space list
    (type: bpy.types.ThemeSpaceListGeneric, (readonly, never None))
    
    :type: ThemeSpaceListGeneric
    """

    vertex = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    vertex_bevel = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    vertex_select = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    vertex_size = 0
    """(type: int in [1, 10], default 0)
    
    :type: int
    """

    vertex_unreferenced = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    window_sliders = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """


class ThemeImageEditor(bpy_struct):
    """Theme settings for the Image Editor"""

    edge_select = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    editmesh_active = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    face = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    face_dot = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    face_select = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    facedot_size = 0
    """(type: int in [1, 10], default 0)
    
    :type: int
    """

    frame_current = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    freestyle_face_mark = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    gp_vertex = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    gp_vertex_select = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    gp_vertex_size = 0
    """(type: int in [1, 10], default 0)
    
    :type: int
    """

    handle_align = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_auto = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_auto_clamped = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_free = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_sel_align = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_sel_auto = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_sel_auto_clamped = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_sel_free = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_vertex = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_vertex_select = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_vertex_size = 0
    """(type: int in [0, 255], default 0)
    
    :type: int
    """

    metadatabg = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    metadatatext = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    nurb_vertex_size = 0
    """(type: int in [1, 10], default 0)
    
    :type: int
    """

    paint_curve_handle = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    paint_curve_pivot = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    preview_stitch_active = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    preview_stitch_edge = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    preview_stitch_face = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    preview_stitch_stitchable = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    preview_stitch_unstitchable = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    preview_stitch_vert = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    scope_back = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    space = None
    """Settings for space
    (type: bpy.types.ThemeSpaceGeneric, (readonly, never None))
    
    :type: ThemeSpaceGeneric
    """

    uv_others = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    uv_shadow = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    vertex = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    vertex_bevel = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    vertex_select = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    vertex_size = 0
    """(type: int in [1, 10], default 0)
    
    :type: int
    """

    vertex_unreferenced = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    wire_edit = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    wire_nonedit = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """


class ThemeInfo(bpy_struct):
    """Theme settings for Info"""

    info_debug = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    info_debug_text = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    info_error = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    info_error_text = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    info_info = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    info_info_text = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    info_selected = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    info_selected_text = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    info_warning = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    info_warning_text = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    space = None
    """Settings for space
    (type: bpy.types.ThemeSpaceGeneric, (readonly, never None))
    
    :type: ThemeSpaceGeneric
    """


class ThemeLogicEditor(bpy_struct):
    """Theme settings for the Logic Editor"""

    space = None
    """Settings for space
    (type: bpy.types.ThemeSpaceGeneric, (readonly, never None))
    
    :type: ThemeSpaceGeneric
    """


class ThemeNLAEditor(bpy_struct):
    """Theme settings for the NLA Editor"""

    active_action = (0.0, 0.0, 0.0, 0.0)
    """Animation data-block has active action
    (type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    active_action_unset = (0.0, 0.0, 0.0, 0.0)
    """Animation data-block doesn't have active action
    (type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    frame_current = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    grid = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    keyframe_border = (0.0, 0.0, 0.0, 0.0)
    """Color of keyframe border
    (type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    keyframe_border_selected = (0.0, 0.0, 0.0, 0.0)
    """Color of selected keyframe border
    (type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    meta_strips = (0.0, 0.0, 0.0)
    """Meta Strip - Unselected (for grouping related strips)
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    meta_strips_selected = (0.0, 0.0, 0.0)
    """Meta Strip - Selected (for grouping related strips)
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    sound_strips = (0.0, 0.0, 0.0)
    """Sound Strip - Unselected (for timing speaker sounds)
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    sound_strips_selected = (0.0, 0.0, 0.0)
    """Sound Strip - Selected (for timing speaker sounds)
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    space = None
    """Settings for space
    (type: bpy.types.ThemeSpaceGeneric, (readonly, never None))
    
    :type: ThemeSpaceGeneric
    """

    space_list = None
    """Settings for space list
    (type: bpy.types.ThemeSpaceListGeneric, (readonly, never None))
    
    :type: ThemeSpaceListGeneric
    """

    strips = (0.0, 0.0, 0.0)
    """Action-Clip Strip - Unselected
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    strips_selected = (0.0, 0.0, 0.0)
    """Action-Clip Strip - Selected
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    transition_strips = (0.0, 0.0, 0.0)
    """Transition Strip - Unselected
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    transition_strips_selected = (0.0, 0.0, 0.0)
    """Transition Strip - Selected
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    tweak = (0.0, 0.0, 0.0)
    """Color for strip/action being 'tweaked' or edited
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    tweak_duplicate = (0.0, 0.0, 0.0)
    """Warning/error indicator color for strips referencing the strip being tweaked
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    view_sliders = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """


class ThemeNodeEditor(bpy_struct):
    """Theme settings for the Node Editor"""

    color_node = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    converter_node = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    distor_node = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    filter_node = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    frame_node = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    gp_vertex = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    gp_vertex_select = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    gp_vertex_size = 0
    """(type: int in [1, 10], default 0)
    
    :type: int
    """

    group_node = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    group_socket_node = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    input_node = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    layout_node = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    matte_node = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    node_active = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    node_backdrop = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    node_selected = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    noodle_curving = 5
    """Curving of the noodle
    (type: int in [0, 10], default 5)
    
    :type: int
    """

    output_node = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    pattern_node = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    script_node = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    selected_text = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    shader_node = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    space = None
    """Settings for space
    (type: bpy.types.ThemeSpaceGeneric, (readonly, never None))
    
    :type: ThemeSpaceGeneric
    """

    space_list = None
    """Settings for space list
    (type: bpy.types.ThemeSpaceListGeneric, (readonly, never None))
    
    :type: ThemeSpaceListGeneric
    """

    texture_node = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    vector_node = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    wire = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    wire_inner = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    wire_select = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """


class ThemeOutliner(bpy_struct):
    """Theme settings for the Outliner"""

    match = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    selected_highlight = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    space = None
    """Settings for space
    (type: bpy.types.ThemeSpaceGeneric, (readonly, never None))
    
    :type: ThemeSpaceGeneric
    """


class ThemePanelColors(bpy_struct):
    """Theme settings for panel colors"""

    back = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    header = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    show_back = False
    """(type: boolean, default False)
    
    :type: bool
    """

    show_header = False
    """(type: boolean, default False)
    
    :type: bool
    """


class ThemeProperties(bpy_struct):
    """Theme settings for the Properties"""

    space = None
    """Settings for space
    (type: bpy.types.ThemeSpaceGeneric, (readonly, never None))
    
    :type: ThemeSpaceGeneric
    """


class ThemeSequenceEditor(bpy_struct):
    """Theme settings for the Sequence Editor"""

    audio_strip = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    draw_action = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    effect_strip = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    frame_current = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    gp_vertex = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    gp_vertex_select = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    gp_vertex_size = 0
    """(type: int in [1, 10], default 0)
    
    :type: int
    """

    grid = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    image_strip = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    keyframe = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    meta_strip = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    metadatabg = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    metadatatext = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    movie_strip = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    movieclip_strip = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    preview_back = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    scene_strip = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    space = None
    """Settings for space
    (type: bpy.types.ThemeSpaceGeneric, (readonly, never None))
    
    :type: ThemeSpaceGeneric
    """

    text_strip = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    transition_strip = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    window_sliders = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """


class ThemeSpaceGeneric(bpy_struct):
    """"""

    back = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    button = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    button_text = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    button_text_hi = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    button_title = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    header = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    header_text = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    header_text_hi = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    panelcolors = None
    """(type: bpy.types.ThemePanelColors, (readonly, never None))
    
    :type: ThemePanelColors
    """

    tab_active = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    tab_back = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    tab_inactive = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    tab_outline = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    text = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    text_hi = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    title = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """


class ThemeSpaceGradient(bpy_struct):
    """"""

    button = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    button_text = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    button_text_hi = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    button_title = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    gradients = None
    """(type: bpy.types.ThemeGradientColors, (readonly, never None))
    
    :type: ThemeGradientColors
    """

    header = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    header_text = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    header_text_hi = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    panelcolors = None
    """(type: bpy.types.ThemePanelColors, (readonly, never None))
    
    :type: ThemePanelColors
    """

    tab_active = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    tab_back = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    tab_inactive = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    tab_outline = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    text = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    text_hi = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    title = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """


class ThemeSpaceListGeneric(bpy_struct):
    """"""

    list = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    list_text = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    list_text_hi = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    list_title = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """


class ThemeStyle(bpy_struct):
    """Theme settings for style sets"""

    panel_title = None
    """(type: bpy.types.ThemeFontStyle, (readonly, never None))
    
    :type: ThemeFontStyle
    """

    widget = None
    """(type: bpy.types.ThemeFontStyle, (readonly, never None))
    
    :type: ThemeFontStyle
    """

    widget_label = None
    """(type: bpy.types.ThemeFontStyle, (readonly, never None))
    
    :type: ThemeFontStyle
    """


class ThemeTextEditor(bpy_struct):
    """Theme settings for the Text Editor"""

    cursor = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    line_numbers_background = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    selected_text = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    space = None
    """Settings for space
    (type: bpy.types.ThemeSpaceGeneric, (readonly, never None))
    
    :type: ThemeSpaceGeneric
    """

    syntax_builtin = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    syntax_comment = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    syntax_numbers = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    syntax_preprocessor = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    syntax_reserved = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    syntax_special = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    syntax_string = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    syntax_symbols = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """


class ThemeTimeline(bpy_struct):
    """Theme settings for the Timeline"""

    frame_current = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    grid = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    space = None
    """Settings for space
    (type: bpy.types.ThemeSpaceGeneric, (readonly, never None))
    
    :type: ThemeSpaceGeneric
    """

    time_grease_pencil = (0.0, 0.0, 0.0)
    """Color of Grease Pencil keyframes
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    time_keyframe = (0.0, 0.0, 0.0)
    """Base color for keyframe indicator lines
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """


class ThemeUserInterface(bpy_struct):
    """Theme settings for user interface elements"""

    axis_x = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    axis_y = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    axis_z = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    icon_alpha = 0.0
    """Transparency of icons in the interface, to reduce contrast
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    icon_file = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    menu_shadow_fac = 0.0
    """Blending factor for menu shadows
    (type: float in [0.01, 1], default 0.0)
    
    :type: float
    """

    menu_shadow_width = 0
    """Width of menu shadows, set to zero to disable
    (type: int in [0, 24], default 0)
    
    :type: int
    """

    wcol_box = None
    """(type: bpy.types.ThemeWidgetColors, (readonly, never None))
    
    :type: ThemeWidgetColors
    """

    wcol_list_item = None
    """(type: bpy.types.ThemeWidgetColors, (readonly, never None))
    
    :type: ThemeWidgetColors
    """

    wcol_menu = None
    """(type: bpy.types.ThemeWidgetColors, (readonly, never None))
    
    :type: ThemeWidgetColors
    """

    wcol_menu_back = None
    """(type: bpy.types.ThemeWidgetColors, (readonly, never None))
    
    :type: ThemeWidgetColors
    """

    wcol_menu_item = None
    """(type: bpy.types.ThemeWidgetColors, (readonly, never None))
    
    :type: ThemeWidgetColors
    """

    wcol_num = None
    """(type: bpy.types.ThemeWidgetColors, (readonly, never None))
    
    :type: ThemeWidgetColors
    """

    wcol_numslider = None
    """(type: bpy.types.ThemeWidgetColors, (readonly, never None))
    
    :type: ThemeWidgetColors
    """

    wcol_option = None
    """(type: bpy.types.ThemeWidgetColors, (readonly, never None))
    
    :type: ThemeWidgetColors
    """

    wcol_pie_menu = None
    """(type: bpy.types.ThemeWidgetColors, (readonly, never None))
    
    :type: ThemeWidgetColors
    """

    wcol_progress = None
    """(type: bpy.types.ThemeWidgetColors, (readonly, never None))
    
    :type: ThemeWidgetColors
    """

    wcol_pulldown = None
    """(type: bpy.types.ThemeWidgetColors, (readonly, never None))
    
    :type: ThemeWidgetColors
    """

    wcol_radio = None
    """(type: bpy.types.ThemeWidgetColors, (readonly, never None))
    
    :type: ThemeWidgetColors
    """

    wcol_regular = None
    """(type: bpy.types.ThemeWidgetColors, (readonly, never None))
    
    :type: ThemeWidgetColors
    """

    wcol_scroll = None
    """(type: bpy.types.ThemeWidgetColors, (readonly, never None))
    
    :type: ThemeWidgetColors
    """

    wcol_state = None
    """(type: bpy.types.ThemeWidgetStateColors, (readonly, never None))
    
    :type: ThemeWidgetStateColors
    """

    wcol_text = None
    """(type: bpy.types.ThemeWidgetColors, (readonly, never None))
    
    :type: ThemeWidgetColors
    """

    wcol_toggle = None
    """(type: bpy.types.ThemeWidgetColors, (readonly, never None))
    
    :type: ThemeWidgetColors
    """

    wcol_tool = None
    """(type: bpy.types.ThemeWidgetColors, (readonly, never None))
    
    :type: ThemeWidgetColors
    """

    wcol_tooltip = None
    """(type: bpy.types.ThemeWidgetColors, (readonly, never None))
    
    :type: ThemeWidgetColors
    """

    widget_emboss = (0.0, 0.0, 0.0, 0.0)
    """Color of the 1px shadow line underlying widgets
    (type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """


class ThemeUserPreferences(bpy_struct):
    """Theme settings for the User Preferences"""

    space = None
    """Settings for space
    (type: bpy.types.ThemeSpaceGeneric, (readonly, never None))
    
    :type: ThemeSpaceGeneric
    """


class ThemeView3D(bpy_struct):
    """Theme settings for the 3D View"""

    act_spline = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    bone_pose = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    bone_pose_active = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    bone_solid = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    bundle_solid = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    camera = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    camera_path = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    clipping_border_3d = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    edge_bevel = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    edge_crease = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    edge_facesel = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    edge_seam = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    edge_select = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    edge_sharp = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    editmesh_active = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    empty = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    extra_edge_angle = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    extra_edge_len = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    extra_face_angle = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    extra_face_area = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    face = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    face_dot = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    face_select = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    facedot_size = 0
    """(type: int in [1, 10], default 0)
    
    :type: int
    """

    frame_current = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    freestyle_edge_mark = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    freestyle_face_mark = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    gp_vertex = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    gp_vertex_select = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    gp_vertex_size = 0
    """(type: int in [1, 10], default 0)
    
    :type: int
    """

    grid = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_align = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_auto = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_free = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_sel_align = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_sel_auto = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_sel_free = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_sel_vect = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    handle_vect = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    lamp = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    lastsel_point = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    normal = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    nurb_sel_uline = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    nurb_sel_vline = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    nurb_uline = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    nurb_vertex_size = 0
    """(type: int in [1, 10], default 0)
    
    :type: int
    """

    nurb_vline = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    object_active = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    object_duplicated = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    object_grouped = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    object_grouped_active = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    object_selected = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    outline_width = 0
    """(type: int in [1, 5], default 0)
    
    :type: int
    """

    paint_curve_handle = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    paint_curve_pivot = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    skin_root = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    space = None
    """Settings for space
    (type: bpy.types.ThemeSpaceGradient, (readonly, never None))
    
    :type: ThemeSpaceGradient
    """

    speaker = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    split_normal = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    text_grease_pencil = (0.0, 0.0, 0.0)
    """Color for indicating Grease Pencil keyframes
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    text_keyframe = (0.0, 0.0, 0.0)
    """Color for indicating Object keyframes
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    transform = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    vertex = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    vertex_bevel = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    vertex_normal = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    vertex_select = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    vertex_size = 0
    """(type: int in [1, 10], default 0)
    
    :type: int
    """

    vertex_unreferenced = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    view_overlay = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    wire = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    wire_edit = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    wire_nonedit = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """


class ThemeWidgetColors(bpy_struct):
    """Theme settings for widget color sets"""

    inner = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    inner_sel = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    item = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, 1], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    outline = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    shadedown = 0
    """(type: int in [-100, 100], default 0)
    
    :type: int
    """

    shadetop = 0
    """(type: int in [-100, 100], default 0)
    
    :type: int
    """

    show_shaded = False
    """(type: boolean, default False)
    
    :type: bool
    """

    text = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    text_sel = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """


class ThemeWidgetStateColors(bpy_struct):
    """Theme settings for widget state colors"""

    blend = 0.0
    """(type: float in [0, 1], default 0.0)
    
    :type: float
    """

    inner_anim = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    inner_anim_sel = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    inner_driven = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    inner_driven_sel = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    inner_key = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    inner_key_sel = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """


class TimelineMarker(bpy_struct):
    """Marker for noting points in the timeline"""

    camera = None
    """Camera this timeline sets to active
    (type: bpy.types.Object)
    
    :type: Object
    """

    frame = 0
    """The frame on which the timeline marker appears
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    name = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    select = False
    """Marker selection state
    (type: boolean, default False)
    
    :type: bool
    """


class TimelineMarkers(bpy_struct):
    """Collection of timeline markers"""

    def new(self, name, frame=1):
        """Add a keyframe to the curve
        
        :param name: New name for the marker (not unique)
            (type: str, (never None))
        :type name: str
        :param frame: The frame for the new marker
            (type: int in [-500000, 500000], (optional))
        :type frame: int
        :return: Newly created timeline marker
        :param : (type: bpy.types.TimelineMarker)
        :rtype: TimelineMarker
        """

    def remove(self, marker):
        """Remove a timeline marker
        
        :param marker: Timeline marker to remove
            (type: bpy.types.TimelineMarker, (never None))
        :type marker: TimelineMarker
        """

    def clear(self):
        """Remove all timeline markers"""


class Timer(bpy_struct):
    """Window event timer"""

    time_delta = 0.0
    """Time since last step in seconds
    (type: float in [-inf, inf], default 0.0, (readonly))
    
    :type: float
    """

    time_duration = 0.0
    """Time since last step in seconds
    (type: float in [-inf, inf], default 0.0, (readonly))
    
    :type: float
    """

    time_step = 0.0
    """(type: float in [-inf, inf], default 0.0, (readonly))
    
    :type: float
    """


class ToolSettings(bpy_struct):
    """"""

    auto_keying_mode = 'ADD_REPLACE_KEYS'
    """Mode of automatic keyframe insertion for Objects and Bones
    (type: enum in ['ADD_REPLACE_KEYS', 'REPLACE_KEYS'], default 'ADD_REPLACE_KEYS')
    
    :type: str
    """

    curve_paint_settings = None
    """(type: bpy.types.CurvePaintSettings, (readonly, never None))
    
    :type: CurvePaintSettings
    """

    double_threshold = 0.0
    """Limit for removing duplicates and 'Auto Merge'
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    edge_path_live_unwrap = False
    """Changing edges seam re-calculates UV unwrap
    (type: boolean, default False)
    
    :type: bool
    """

    edge_path_mode = 'SELECT'
    """The edge flag to tag when selecting the shortest path
    (type: enum in ['SELECT', 'SEAM', 'SHARP', 'CREASE', 'BEVEL', 'FREESTYLE'], default 'SELECT')
    
    :type: str
    """

    etch_adaptive_limit = 0.0
    """Correlation threshold for number of bones in the subdivided stroke
    (type: float in [1e-05, 1], default 0.0)
    
    :type: float
    """

    etch_convert_mode = 'FIXED'
    """Method used to convert stroke to bones
    * 'FIXED': Fixed, Subdivide stroke in fixed number of bones.
    * 'LENGTH': Length, Subdivide stroke in bones of specific length.
    * 'ADAPTIVE': Adaptive, Subdivide stroke adaptively, with more subdivision in curvier parts.
    * 'RETARGET': Retarget, Retarget template bone chain to stroke.
    (type: enum in ['FIXED', 'LENGTH', 'ADAPTIVE', 'RETARGET'], default 'FIXED')
    
    :type: str
    """

    etch_length_limit = 0.0
    """Maximum length of the subdivided bones
    (type: float in [1e-05, 100000], default 0.0)
    
    :type: float
    """

    etch_number = ""
    """Text to replace &N with (e.g. 'Finger.&N' -> 'Finger.1' or 'Finger.One')
    (type: string, default "", (never None))
    
    :type: str
    """

    etch_roll_mode = 'NONE'
    """Method used to adjust the roll of bones when retargeting
    * 'NONE': None, Don't adjust roll.
    * 'VIEW': View, Roll bones to face the view.
    * 'JOINT': Joint, Roll bone to original joint plane offset.
    (type: enum in ['NONE', 'VIEW', 'JOINT'], default 'NONE')
    
    :type: str
    """

    etch_side = ""
    """Text to replace &S with (e.g. 'Arm.&S' -> 'Arm.R' or 'Arm.Right')
    (type: string, default "", (never None))
    
    :type: str
    """

    etch_subdivision_number = 0
    """Number of bones in the subdivided stroke
    (type: int in [1, 255], default 0)
    
    :type: int
    """

    etch_template = None
    """Template armature that will be retargeted to the stroke
    (type: bpy.types.Object)
    
    :type: Object
    """

    gpencil_brushes = None
    """Grease Pencil drawing brushes
    (type: bpy.types.GreasePencilBrushes bpy.types.bpy_prop_collection of bpy.types.GPencilBrush, (readonly))
    
    :type: GreasePencilBrushes
    """

    gpencil_interpolate = None
    """Settings for Grease Pencil Interpolation tools
    (type: bpy.types.GPencilInterpolateSettings, (readonly))
    
    :type: GPencilInterpolateSettings
    """

    gpencil_sculpt = None
    """Settings for stroke sculpting tools and brushes
    (type: bpy.types.GPencilSculptSettings, (readonly))
    
    :type: GPencilSculptSettings
    """

    gpencil_stroke_placement_image_editor = 'VIEW'
    """
    * 'CURSOR': Cursor, Draw stroke at the 3D cursor.
    * 'VIEW': View, Stick stroke to the view .
    * 'SURFACE': Surface, Stick stroke to surfaces.
    * 'STROKE': Stroke, Stick stroke to other strokes.
    (type: enum in ['CURSOR', 'VIEW', 'SURFACE', 'STROKE'], default 'VIEW')
    
    :type: str
    """

    gpencil_stroke_placement_sequencer_preview = 'VIEW'
    """
    * 'CURSOR': Cursor, Draw stroke at the 3D cursor.
    * 'VIEW': View, Stick stroke to the view .
    * 'SURFACE': Surface, Stick stroke to surfaces.
    * 'STROKE': Stroke, Stick stroke to other strokes.
    (type: enum in ['CURSOR', 'VIEW', 'SURFACE', 'STROKE'], default 'VIEW')
    
    :type: str
    """

    gpencil_stroke_placement_view2d = 'VIEW'
    """
    * 'CURSOR': Cursor, Draw stroke at the 3D cursor.
    * 'VIEW': View, Stick stroke to the view .
    * 'SURFACE': Surface, Stick stroke to surfaces.
    * 'STROKE': Stroke, Stick stroke to other strokes.
    (type: enum in ['CURSOR', 'VIEW', 'SURFACE', 'STROKE'], default 'VIEW')
    
    :type: str
    """

    gpencil_stroke_placement_view3d = 'VIEW'
    """
    * 'CURSOR': Cursor, Draw stroke at the 3D cursor.
    * 'VIEW': View, Stick stroke to the view .
    * 'SURFACE': Surface, Stick stroke to surfaces.
    * 'STROKE': Stroke, Stick stroke to other strokes.
    (type: enum in ['CURSOR', 'VIEW', 'SURFACE', 'STROKE'], default 'VIEW')
    
    :type: str
    """

    grease_pencil_source = 'SCENE'
    """Data-block where active Grease Pencil data is found from
    * 'SCENE': Scene, Grease Pencil data attached to the current scene is used, unless the active object already has Grease Pencil data (i.e. for old files).
    * 'OBJECT': Object, Grease Pencil data-blocks attached to the active object are used (required when using pre 2.73 add-ons, e.g. BSurfaces).
    (type: enum in ['SCENE', 'OBJECT'], default 'SCENE')
    
    :type: str
    """

    image_paint = None
    """(type: bpy.types.ImagePaint, (readonly))
    
    :type: ImagePaint
    """

    keyframe_type = 'KEYFRAME'
    """Type of keyframes to create when inserting keyframes
    * 'KEYFRAME': Keyframe, Normal keyframe - e.g. for key poses.
    * 'BREAKDOWN': Breakdown, A breakdown pose - e.g. for transitions between key poses.
    * 'MOVING_HOLD': Moving Hold, A keyframe that is part of a moving hold.
    * 'EXTREME': Extreme, An 'extreme' pose, or some other purpose as needed.
    * 'JITTER': Jitter, A filler or baked keyframe for keying on ones, or some other purpose as needed.
    (type: enum in ['KEYFRAME', 'BREAKDOWN', 'MOVING_HOLD', 'EXTREME', 'JITTER'], default 'KEYFRAME')
    
    :type: str
    """

    lock_markers = False
    """Prevent marker editing
    (type: boolean, default False)
    
    :type: bool
    """

    mesh_select_mode = (False, False, False)
    """Which mesh elements selection works on
    (type: boolean array of 3 items, default (False, False, False))
    
    :type: collections.Sequence[bool]
    """

    normal_size = 0.0
    """Display size for normals in the 3D view
    (type: float in [1e-05, 1000], default 0.0)
    
    :type: float
    """

    particle_edit = None
    """(type: bpy.types.ParticleEdit, (readonly))
    
    :type: ParticleEdit
    """

    proportional_edit = 'DISABLED'
    """Proportional Editing mode, allows transforms with distance fall-off
    * 'DISABLED': Disable, Proportional Editing disabled.
    * 'ENABLED': Enable, Proportional Editing enabled.
    * 'PROJECTED': Projected (2D), Proportional Editing using screen space locations.
    * 'CONNECTED': Connected, Proportional Editing using connected geometry only.
    (type: enum in ['DISABLED', 'ENABLED', 'PROJECTED', 'CONNECTED'], default 'DISABLED')
    
    :type: str
    """

    proportional_edit_falloff = 'SMOOTH'
    """Falloff type for proportional editing mode
    * 'SMOOTH': Smooth, Smooth falloff.
    * 'SPHERE': Sphere, Spherical falloff.
    * 'ROOT': Root, Root falloff.
    * 'INVERSE_SQUARE': Inverse Square, Inverse Square falloff.
    * 'SHARP': Sharp, Sharp falloff.
    * 'LINEAR': Linear, Linear falloff.
    * 'CONSTANT': Constant, Constant falloff.
    * 'RANDOM': Random, Random falloff.
    (type: enum in ['SMOOTH', 'SPHERE', 'ROOT', 'INVERSE_SQUARE', 'SHARP', 'LINEAR', 'CONSTANT', 'RANDOM'], default 'SMOOTH')
    
    :type: str
    """

    proportional_size = 0.0
    """Display size for proportional editing circle
    (type: float in [1e-05, 5000], default 0.0)
    
    :type: float
    """

    sculpt = None
    """(type: bpy.types.Sculpt, (readonly))
    
    :type: Sculpt
    """

    show_uv_local_view = False
    """Draw only faces with the currently displayed image assigned
    (type: boolean, default False)
    
    :type: bool
    """

    snap_element = 'INCREMENT'
    """Type of element to snap to
    * 'INCREMENT': Increment, Snap to increments of grid.
    * 'VERTEX': Vertex, Snap to vertices.
    * 'EDGE': Edge, Snap to edges.
    * 'FACE': Face, Snap to faces.
    * 'VOLUME': Volume, Snap to volume.
    (type: enum in ['INCREMENT', 'VERTEX', 'EDGE', 'FACE', 'VOLUME'], default 'INCREMENT')
    
    :type: str
    """

    snap_node_element = 'GRID'
    """Type of element to snap to
    * 'GRID': Grid, Snap to grid.
    * 'NODE_X': Node X, Snap to left/right node border.
    * 'NODE_Y': Node Y, Snap to top/bottom node border.
    * 'NODE_XY': Node X / Y, Snap to any node border.
    (type: enum in ['GRID', 'NODE_X', 'NODE_Y', 'NODE_XY'], default 'GRID')
    
    :type: str
    """

    snap_target = 'CLOSEST'
    """Which part to snap onto the target
    * 'CLOSEST': Closest, Snap closest point onto target.
    * 'CENTER': Center, Snap center onto target.
    * 'MEDIAN': Median, Snap median onto target.
    * 'ACTIVE': Active, Snap active onto target.
    (type: enum in ['CLOSEST', 'CENTER', 'MEDIAN', 'ACTIVE'], default 'CLOSEST')
    
    :type: str
    """

    snap_uv_element = 'INCREMENT'
    """Type of element to snap to
    * 'INCREMENT': Increment, Snap to increments of grid.
    * 'VERTEX': Vertex, Snap to vertices.
    (type: enum in ['INCREMENT', 'VERTEX'], default 'INCREMENT')
    
    :type: str
    """

    statvis = None
    """(type: bpy.types.MeshStatVis, (readonly, never None))
    
    :type: MeshStatVis
    """

    unified_paint_settings = None
    """(type: bpy.types.UnifiedPaintSettings, (readonly, never None))
    
    :type: UnifiedPaintSettings
    """

    use_auto_normalize = False
    """Ensure all bone-deforming vertex groups add up to 1.0 while weight painting
    (type: boolean, default False)
    
    :type: bool
    """

    use_bone_sketching = False
    """Use sketching to create and edit bones
    (type: boolean, default False)
    
    :type: bool
    """

    use_etch_autoname = False
    """Automatically generate values to replace &N and &S suffix placeholders in template names
    (type: boolean, default False)
    
    :type: bool
    """

    use_etch_overdraw = False
    """Adjust strokes by drawing near them
    (type: boolean, default False)
    
    :type: bool
    """

    use_etch_quick = False
    """Automatically convert and delete on stroke end
    (type: boolean, default False)
    
    :type: bool
    """

    use_gpencil_additive_drawing = False
    """When creating new frames, the strokes from the previous/active frame are included as the basis for the new one
    (type: boolean, default False)
    
    :type: bool
    """

    use_gpencil_continuous_drawing = False
    """Allow drawing multiple strokes at a time with Grease Pencil
    (type: boolean, default False)
    
    :type: bool
    """

    use_gpencil_draw_onback = False
    """When draw new strokes, the new stroke is drawn below of all strokes in the layer
    (type: boolean, default False)
    
    :type: bool
    """

    use_gpencil_stroke_endpoints = False
    """Only use the first and last parts of the stroke for snapping
    (type: boolean, default False)
    
    :type: bool
    """

    use_keyframe_insert_auto = False
    """Automatic keyframe insertion for Objects and Bones
    (type: boolean, default False)
    
    :type: bool
    """

    use_keyframe_insert_keyingset = False
    """Automatic keyframe insertion using active Keying Set only
    (type: boolean, default False)
    
    :type: bool
    """

    use_mesh_automerge = False
    """Automatically merge vertices moved to the same location
    (type: boolean, default False)
    
    :type: bool
    """

    use_multipaint = False
    """Paint across the weights of all selected bones, maintaining their relative influence
    (type: boolean, default False)
    
    :type: bool
    """

    use_proportional_action = False
    """Proportional editing in action editor
    (type: boolean, default False)
    
    :type: bool
    """

    use_proportional_edit_mask = False
    """Proportional editing mask mode
    (type: boolean, default False)
    
    :type: bool
    """

    use_proportional_edit_objects = False
    """Proportional editing object mode
    (type: boolean, default False)
    
    :type: bool
    """

    use_proportional_fcurve = False
    """Proportional editing in FCurve editor
    (type: boolean, default False)
    
    :type: bool
    """

    use_record_with_nla = False
    """Add a new NLA Track + Strip for every loop/pass made over the animation to allow non-destructive tweaking
    (type: boolean, default False)
    
    :type: bool
    """

    use_snap = False
    """Snap during transform
    (type: boolean, default False)
    
    :type: bool
    """

    use_snap_align_rotation = False
    """Align rotation with the snapping target
    (type: boolean, default False)
    
    :type: bool
    """

    use_snap_grid_absolute = False
    """Absolute grid alignment while translating (based on the pivot center)
    (type: boolean, default False)
    
    :type: bool
    """

    use_snap_peel_object = False
    """Consider objects as whole when finding volume center
    (type: boolean, default False)
    
    :type: bool
    """

    use_snap_project = False
    """Project individual elements on the surface of other objects
    (type: boolean, default False)
    
    :type: bool
    """

    use_snap_self = False
    """Snap onto itself (editmode)
    (type: boolean, default False)
    
    :type: bool
    """

    use_uv_sculpt = False
    """Enable brush for UV sculpting
    (type: boolean, default False)
    
    :type: bool
    """

    use_uv_select_sync = False
    """Keep UV and edit mode mesh selection in sync
    (type: boolean, default False)
    
    :type: bool
    """

    uv_relax_method = 'LAPLACIAN'
    """Algorithm used for UV relaxation
    * 'LAPLACIAN': Laplacian, Use Laplacian method for relaxation.
    * 'HC': HC, Use HC method for relaxation.
    (type: enum in ['LAPLACIAN', 'HC'], default 'LAPLACIAN')
    
    :type: str
    """

    uv_sculpt = None
    """(type: bpy.types.UvSculpt, (readonly))
    
    :type: UvSculpt
    """

    uv_sculpt_all_islands = False
    """Brush operates on all islands
    (type: boolean, default False)
    
    :type: bool
    """

    uv_sculpt_lock_borders = False
    """Disable editing of boundary edges
    (type: boolean, default False)
    
    :type: bool
    """

    uv_sculpt_tool = 'PINCH'
    """Select Tools for the UV sculpt brushes
    * 'PINCH': Pinch, Pinch UVs.
    * 'RELAX': Relax, Relax UVs.
    * 'GRAB': Grab, Grab UVs.
    (type: enum in ['PINCH', 'RELAX', 'GRAB'], default 'PINCH')
    
    :type: str
    """

    uv_select_mode = 'VERTEX'
    """UV selection and display mode
    * 'VERTEX': Vertex, Vertex selection mode.
    * 'EDGE': Edge, Edge selection mode.
    * 'FACE': Face, Face selection mode.
    * 'ISLAND': Island, Island selection mode.
    (type: enum in ['VERTEX', 'EDGE', 'FACE', 'ISLAND'], default 'VERTEX')
    
    :type: str
    """

    vertex_group_subset = 'ALL'
    """Filter Vertex groups for Display
    * 'ALL': All, All Vertex Groups.
    * 'BONE_DEFORM': Deform, Vertex Groups assigned to Deform Bones.
    * 'OTHER_DEFORM': Other, Vertex Groups assigned to non Deform Bones.
    (type: enum in ['ALL', 'BONE_DEFORM', 'OTHER_DEFORM'], default 'ALL')
    
    :type: str
    """

    vertex_group_user = 'NONE'
    """Display unweighted vertices
    * 'NONE': None.
    * 'ACTIVE': Active, Show vertices with no weights in the active group.
    * 'ALL': All, Show vertices with no weights in any group.
    (type: enum in ['NONE', 'ACTIVE', 'ALL'], default 'NONE')
    
    :type: str
    """

    vertex_group_weight = 0.0
    """Weight to assign in vertex groups
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    vertex_paint = None
    """(type: bpy.types.VertexPaint, (readonly))
    
    :type: VertexPaint
    """

    weight_paint = None
    """(type: bpy.types.VertexPaint, (readonly))
    
    :type: VertexPaint
    """


class TransformOrientation(bpy_struct):
    """"""

    matrix = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    """(type: float array of 9 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Matrix
    """

    name = ""
    """Name of the custom transform orientation
    (type: string, default "", (never None))
    
    :type: str
    """


class UILayout(bpy_struct):
    """User interface layout in a panel or header"""

    active = False
    """(type: boolean, default False)
    
    :type: bool
    """

    alert = False
    """(type: boolean, default False)
    
    :type: bool
    """

    alignment = 'EXPAND'
    """(type: enum in ['EXPAND', 'LEFT', 'CENTER', 'RIGHT'], default 'EXPAND')
    
    :type: str
    """

    enabled = False
    """When false, this (sub)layout is grayed out
    (type: boolean, default False)
    
    :type: bool
    """

    operator_context = 'INVOKE_DEFAULT'
    """(type: enum in ['INVOKE_DEFAULT', 'INVOKE_REGION_WIN', 'INVOKE_REGION_CHANNELS', 'INVOKE_REGION_PREVIEW', 'INVOKE_AREA', 'INVOKE_SCREEN', 'EXEC_DEFAULT', 'EXEC_REGION_WIN', 'EXEC_REGION_CHANNELS', 'EXEC_REGION_PREVIEW', 'EXEC_AREA', 'EXEC_SCREEN'], default 'INVOKE_DEFAULT')
    
    :type: str
    """

    scale_x = 0.0
    """Scale factor along the X for items in this (sub)layout
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    scale_y = 0.0
    """Scale factor along the Y for items in this (sub)layout
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    def row(self, align=False):
        """Sub-layout. Items placed in this sublayout are placed next to each other in a row
        
        :param align: Align buttons to each other
            (type: boolean, (optional))
        :type align: bool
        :return: Sub-layout to put items in
        :param : (type: bpy.types.UILayout)
        :rtype: UILayout
        """

    def column(self, align=False):
        """Sub-layout. Items placed in this sublayout are placed under each other in a column
        
        :param align: Align buttons to each other
            (type: boolean, (optional))
        :type align: bool
        :return: Sub-layout to put items in
        :param : (type: bpy.types.UILayout)
        :rtype: UILayout
        """

    def column_flow(self, columns=0, align=False):
        """column_flow
        
        :param columns: Number of columns, 0 is automatic
            (type: int in [0, inf], (optional))
        :type columns: int
        :param align: Align buttons to each other
            (type: boolean, (optional))
        :type align: bool
        :return: Sub-layout to put items in
        :param : (type: bpy.types.UILayout)
        :rtype: UILayout
        """

    def box(self):
        """Sublayout (items placed in this sublayout are placed under each other in a column and are surrounded by a box)
        
        :return: Sub-layout to put items in
        :param : (type: bpy.types.UILayout)
        :rtype: UILayout
        """

    def split(self, percentage=0.0, align=False):
        """split
        
        :param percentage: Percentage, Percentage of width to split at
            (type: float in [0, 1], (optional))
        :type percentage: float
        :param align: Align buttons to each other
            (type: boolean, (optional))
        :type align: bool
        :return: Sub-layout to put items in
        :param : (type: bpy.types.UILayout)
        :rtype: UILayout
        """

    def menu_pie(self):
        """Sublayout. Items placed in this sublayout are placed in a radial fashion around the menu center)
        
        :return: Sub-layout to put items in
        :param : (type: bpy.types.UILayout)
        :rtype: UILayout
        """

    def icon(self, data):
        """Return the custom icon for this data, use it e.g. to get materials or texture icons
        
        :param data: Data from which to take the icon
            (type: bpy.types.AnyType, (never None))
        :type data: AnyType
        :return: Icon identifier
        :param : (type: int in [0, inf])
        :rtype: int
        """

    def enum_item_name(self, data, property, identifier):
        """Return the UI name for this enum item
        
        :param data: Data from which to take property
            (type: bpy.types.AnyType, (never None))
        :type data: AnyType
        :param property: Identifier of property in data
            (type: str, (never None))
        :type property: str
        :param identifier: Identifier of the enum item
            (type: str, (never None))
        :type identifier: str
        :return: UI name of the enum item
        :param : (type: string, (never None))
        :rtype: str
        """

    def enum_item_description(self, data, property, identifier):
        """Return the UI description for this enum item
        
        :param data: Data from which to take property
            (type: bpy.types.AnyType, (never None))
        :type data: AnyType
        :param property: Identifier of property in data
            (type: str, (never None))
        :type property: str
        :param identifier: Identifier of the enum item
            (type: str, (never None))
        :type identifier: str
        :return: UI description of the enum item
        :param : (type: string, (never None))
        :rtype: str
        """

    def enum_item_icon(self, data, property, identifier):
        """Return the icon for this enum item
        
        :param data: Data from which to take property
            (type: bpy.types.AnyType, (never None))
        :type data: AnyType
        :param property: Identifier of property in data
            (type: str, (never None))
        :type property: str
        :param identifier: Identifier of the enum item
            (type: str, (never None))
        :type identifier: str
        :return: Icon identifier
        :param : (type: int in [0, inf])
        :rtype: int
        """

    def prop(self, data, property, text="", text_ctxt="", translate=True, icon='NONE', expand=False, slider=False, toggle=False, icon_only=False, event=False, full_event=False, emboss=True, index=-1, icon_value=0):
        """Item. Exposes an RNA item and places it into the layout
        
        :param data: Data from which to take property
            (type: bpy.types.AnyType, (never None))
        :type data: AnyType
        :param property: Identifier of property in data
            (type: str, (never None))
        :type property: str
        :param text: Override automatic text of the item
            (type: str, (optional, never None))
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
            (type: str, (optional, never None))
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
            (type: boolean, (optional))
        :type translate: bool
        :param icon: Icon, Override automatic icon of the item
            (type: enum in ['NONE', 'QUESTION', 'ERROR', 'CANCEL', 'TRIA_RIGHT', 'TRIA_DOWN', 'TRIA_LEFT', 'TRIA_UP', 'ARROW_LEFTRIGHT', 'PLUS', 'DISCLOSURE_TRI_DOWN', 'DISCLOSURE_TRI_RIGHT', 'RADIOBUT_OFF', 'RADIOBUT_ON', 'MENU_PANEL', 'BLENDER', 'GRIP', 'DOT', 'COLLAPSEMENU', 'X', 'GO_LEFT', 'PLUG', 'UI', 'NODE', 'NODE_SEL', 'FULLSCREEN', 'SPLITSCREEN', 'RIGHTARROW_THIN', 'BORDERMOVE', 'VIEWZOOM', 'ZOOMIN', 'ZOOMOUT', 'PANEL_CLOSE', 'COPY_ID', 'EYEDROPPER', 'LINK_AREA', 'AUTO', 'CHECKBOX_DEHLT', 'CHECKBOX_HLT', 'UNLOCKED', 'LOCKED', 'UNPINNED', 'PINNED', 'SCREEN_BACK', 'RIGHTARROW', 'DOWNARROW_HLT', 'DOTSUP', 'DOTSDOWN', 'LINK', 'INLINK', 'PLUGIN', 'HELP', 'GHOST_ENABLED', 'COLOR', 'LINKED', 'UNLINKED', 'HAND', 'ZOOM_ALL', 'ZOOM_SELECTED', 'ZOOM_PREVIOUS', 'ZOOM_IN', 'ZOOM_OUT', 'RENDER_REGION', 'BORDER_RECT', 'BORDER_LASSO', 'FREEZE', 'STYLUS_PRESSURE', 'GHOST_DISABLED', 'NEW', 'FILE_TICK', 'QUIT', 'URL', 'RECOVER_LAST', 'FULLSCREEN_ENTER', 'FULLSCREEN_EXIT', 'BLANK1', 'LAMP', 'MATERIAL', 'TEXTURE', 'ANIM', 'WORLD', 'SCENE', 'EDIT', 'GAME', 'RADIO', 'SCRIPT', 'PARTICLES', 'PHYSICS', 'SPEAKER', 'TEXTURE_SHADED', 'VIEW3D', 'IPO', 'OOPS', 'BUTS', 'FILESEL', 'IMAGE_COL', 'INFO', 'SEQUENCE', 'TEXT', 'IMASEL', 'SOUND', 'ACTION', 'NLA', 'SCRIPTWIN', 'TIME', 'NODETREE', 'LOGIC', 'CONSOLE', 'PREFERENCES', 'CLIP', 'ASSET_MANAGER', 'OBJECT_DATAMODE', 'EDITMODE_HLT', 'FACESEL_HLT', 'VPAINT_HLT', 'TPAINT_HLT', 'WPAINT_HLT', 'SCULPTMODE_HLT', 'POSE_HLT', 'PARTICLEMODE', 'LIGHTPAINT', 'SCENE_DATA', 'RENDERLAYERS', 'WORLD_DATA', 'OBJECT_DATA', 'MESH_DATA', 'CURVE_DATA', 'META_DATA', 'LATTICE_DATA', 'LAMP_DATA', 'MATERIAL_DATA', 'TEXTURE_DATA', 'ANIM_DATA', 'CAMERA_DATA', 'PARTICLE_DATA', 'LIBRARY_DATA_DIRECT', 'GROUP', 'ARMATURE_DATA', 'POSE_DATA', 'BONE_DATA', 'CONSTRAINT', 'SHAPEKEY_DATA', 'CONSTRAINT_BONE', 'CAMERA_STEREO', 'PACKAGE', 'UGLYPACKAGE', 'BRUSH_DATA', 'IMAGE_DATA', 'FILE', 'FCURVE', 'FONT_DATA', 'RENDER_RESULT', 'SURFACE_DATA', 'EMPTY_DATA', 'SETTINGS', 'RENDER_ANIMATION', 'RENDER_STILL', 'LIBRARY_DATA_BROKEN', 'BOIDS', 'STRANDS', 'LIBRARY_DATA_INDIRECT', 'GREASEPENCIL', 'LINE_DATA', 'GROUP_BONE', 'GROUP_VERTEX', 'GROUP_VCOL', 'GROUP_UVS', 'RNA', 'RNA_ADD', 'OUTLINER_OB_EMPTY', 'OUTLINER_OB_MESH', 'OUTLINER_OB_CURVE', 'OUTLINER_OB_LATTICE', 'OUTLINER_OB_META', 'OUTLINER_OB_LAMP', 'OUTLINER_OB_CAMERA', 'OUTLINER_OB_ARMATURE', 'OUTLINER_OB_FONT', 'OUTLINER_OB_SURFACE', 'OUTLINER_OB_SPEAKER', 'RESTRICT_COLOR_OFF', 'RESTRICT_COLOR_ON', 'RESTRICT_VIEW_OFF', 'RESTRICT_VIEW_ON', 'RESTRICT_SELECT_OFF', 'RESTRICT_SELECT_ON', 'RESTRICT_RENDER_OFF', 'RESTRICT_RENDER_ON', 'OUTLINER_DATA_EMPTY', 'OUTLINER_DATA_MESH', 'OUTLINER_DATA_CURVE', 'OUTLINER_DATA_LATTICE', 'OUTLINER_DATA_META', 'OUTLINER_DATA_LAMP', 'OUTLINER_DATA_CAMERA', 'OUTLINER_DATA_ARMATURE', 'OUTLINER_DATA_FONT', 'OUTLINER_DATA_SURFACE', 'OUTLINER_DATA_SPEAKER', 'OUTLINER_DATA_POSE', 'MESH_PLANE', 'MESH_CUBE', 'MESH_CIRCLE', 'MESH_UVSPHERE', 'MESH_ICOSPHERE', 'MESH_GRID', 'MESH_MONKEY', 'MESH_CYLINDER', 'MESH_TORUS', 'MESH_CONE', 'MESH_CAPSULE', 'LAMP_POINT', 'LAMP_SUN', 'LAMP_SPOT', 'LAMP_HEMI', 'LAMP_AREA', 'META_EMPTY', 'META_PLANE', 'META_CUBE', 'META_BALL', 'META_ELLIPSOID', 'META_CAPSULE', 'SURFACE_NCURVE', 'SURFACE_NCIRCLE', 'SURFACE_NSURFACE', 'SURFACE_NCYLINDER', 'SURFACE_NSPHERE', 'SURFACE_NTORUS', 'CURVE_BEZCURVE', 'CURVE_BEZCIRCLE', 'CURVE_NCURVE', 'CURVE_NCIRCLE', 'CURVE_PATH', 'COLOR_RED', 'COLOR_GREEN', 'COLOR_BLUE', 'TRIA_RIGHT_BAR', 'TRIA_DOWN_BAR', 'TRIA_LEFT_BAR', 'TRIA_UP_BAR', 'FORCE_FORCE', 'FORCE_WIND', 'FORCE_VORTEX', 'FORCE_MAGNETIC', 'FORCE_HARMONIC', 'FORCE_CHARGE', 'FORCE_LENNARDJONES', 'FORCE_TEXTURE', 'FORCE_CURVE', 'FORCE_BOID', 'FORCE_TURBULENCE', 'FORCE_DRAG', 'FORCE_SMOKEFLOW', 'NODE_INSERT_ON', 'NODE_INSERT_OFF', 'MODIFIER', 'MOD_WAVE', 'MOD_BUILD', 'MOD_DECIM', 'MOD_MIRROR', 'MOD_SOFT', 'MOD_SUBSURF', 'HOOK', 'MOD_PHYSICS', 'MOD_PARTICLES', 'MOD_BOOLEAN', 'MOD_EDGESPLIT', 'MOD_ARRAY', 'MOD_UVPROJECT', 'MOD_DISPLACE', 'MOD_CURVE', 'MOD_LATTICE', 'CONSTRAINT_DATA', 'MOD_ARMATURE', 'MOD_SHRINKWRAP', 'MOD_CAST', 'MOD_MESHDEFORM', 'MOD_BEVEL', 'MOD_SMOOTH', 'MOD_SIMPLEDEFORM', 'MOD_MASK', 'MOD_CLOTH', 'MOD_EXPLODE', 'MOD_FLUIDSIM', 'MOD_MULTIRES', 'MOD_SMOKE', 'MOD_SOLIDIFY', 'MOD_SCREW', 'MOD_VERTEX_WEIGHT', 'MOD_DYNAMICPAINT', 'MOD_REMESH', 'MOD_OCEAN', 'MOD_WARP', 'MOD_SKIN', 'MOD_TRIANGULATE', 'MOD_WIREFRAME', 'MOD_DATA_TRANSFER', 'MOD_NORMALEDIT', 'REC', 'PLAY', 'FF', 'REW', 'PAUSE', 'PREV_KEYFRAME', 'NEXT_KEYFRAME', 'PLAY_AUDIO', 'PLAY_REVERSE', 'PREVIEW_RANGE', 'ACTION_TWEAK', 'PMARKER_ACT', 'PMARKER_SEL', 'PMARKER', 'MARKER_HLT', 'MARKER', 'SPACE2', 'SPACE3', 'KEYINGSET', 'KEY_DEHLT', 'KEY_HLT', 'MUTE_IPO_OFF', 'MUTE_IPO_ON', 'VISIBLE_IPO_OFF', 'VISIBLE_IPO_ON', 'DRIVER', 'SOLO_OFF', 'SOLO_ON', 'FRAME_PREV', 'FRAME_NEXT', 'NLA_PUSHDOWN', 'IPO_CONSTANT', 'IPO_LINEAR', 'IPO_BEZIER', 'IPO_SINE', 'IPO_QUAD', 'IPO_CUBIC', 'IPO_QUART', 'IPO_QUINT', 'IPO_EXPO', 'IPO_CIRC', 'IPO_BOUNCE', 'IPO_ELASTIC', 'IPO_BACK', 'IPO_EASE_IN', 'IPO_EASE_OUT', 'IPO_EASE_IN_OUT', 'NORMALIZE_FCURVES', 'VERTEXSEL', 'EDGESEL', 'FACESEL', 'LOOPSEL', 'ROTATE', 'CURSOR', 'ROTATECOLLECTION', 'ROTATECENTER', 'ROTACTIVE', 'ALIGN', 'SMOOTHCURVE', 'SPHERECURVE', 'ROOTCURVE', 'SHARPCURVE', 'LINCURVE', 'NOCURVE', 'RNDCURVE', 'PROP_OFF', 'PROP_ON', 'PROP_CON', 'SCULPT_DYNTOPO', 'PARTICLE_POINT', 'PARTICLE_TIP', 'PARTICLE_PATH', 'MAN_TRANS', 'MAN_ROT', 'MAN_SCALE', 'MANIPUL', 'SNAP_OFF', 'SNAP_ON', 'SNAP_NORMAL', 'SNAP_GRID', 'SNAP_VERTEX', 'SNAP_EDGE', 'SNAP_FACE', 'SNAP_VOLUME', 'SNAP_INCREMENT', 'STICKY_UVS_LOC', 'STICKY_UVS_DISABLE', 'STICKY_UVS_VERT', 'CLIPUV_DEHLT', 'CLIPUV_HLT', 'SNAP_PEEL_OBJECT', 'GRID', 'PASTEDOWN', 'COPYDOWN', 'PASTEFLIPUP', 'PASTEFLIPDOWN', 'SNAP_SURFACE', 'AUTOMERGE_ON', 'AUTOMERGE_OFF', 'RETOPO', 'UV_VERTEXSEL', 'UV_EDGESEL', 'UV_FACESEL', 'UV_ISLANDSEL', 'UV_SYNC_SELECT', 'BBOX', 'WIRE', 'SOLID', 'SMOOTH', 'POTATO', 'ORTHO', 'LOCKVIEW_OFF', 'LOCKVIEW_ON', 'AXIS_SIDE', 'AXIS_FRONT', 'AXIS_TOP', 'NDOF_DOM', 'NDOF_TURN', 'NDOF_FLY', 'NDOF_TRANS', 'LAYER_USED', 'LAYER_ACTIVE', 'SORTALPHA', 'SORTBYEXT', 'SORTTIME', 'SORTSIZE', 'LONGDISPLAY', 'SHORTDISPLAY', 'GHOST', 'IMGDISPLAY', 'SAVE_AS', 'SAVE_COPY', 'BOOKMARKS', 'FONTPREVIEW', 'FILTER', 'NEWFOLDER', 'OPEN_RECENT', 'FILE_PARENT', 'FILE_REFRESH', 'FILE_FOLDER', 'FILE_BLANK', 'FILE_BLEND', 'FILE_IMAGE', 'FILE_MOVIE', 'FILE_SCRIPT', 'FILE_SOUND', 'FILE_FONT', 'FILE_TEXT', 'RECOVER_AUTO', 'SAVE_PREFS', 'LINK_BLEND', 'APPEND_BLEND', 'IMPORT', 'EXPORT', 'EXTERNAL_DATA', 'LOAD_FACTORY', 'LOOP_BACK', 'LOOP_FORWARDS', 'BACK', 'FORWARD', 'FILE_HIDDEN', 'FILE_BACKUP', 'DISK_DRIVE', 'MATPLANE', 'MATSPHERE', 'MATCUBE', 'MONKEY', 'HAIR', 'ALIASED', 'ANTIALIASED', 'MAT_SPHERE_SKY', 'WORDWRAP_OFF', 'WORDWRAP_ON', 'SYNTAX_OFF', 'SYNTAX_ON', 'LINENUMBERS_OFF', 'LINENUMBERS_ON', 'SCRIPTPLUGINS', 'SEQ_SEQUENCER', 'SEQ_PREVIEW', 'SEQ_LUMA_WAVEFORM', 'SEQ_CHROMA_SCOPE', 'SEQ_HISTOGRAM', 'SEQ_SPLITVIEW', 'IMAGE_RGB', 'IMAGE_RGB_ALPHA', 'IMAGE_ALPHA', 'IMAGE_ZDEPTH', 'IMAGEFILE', 'BRUSH_ADD', 'BRUSH_BLOB', 'BRUSH_BLUR', 'BRUSH_CLAY', 'BRUSH_CLAY_STRIPS', 'BRUSH_CLONE', 'BRUSH_CREASE', 'BRUSH_DARKEN', 'BRUSH_FILL', 'BRUSH_FLATTEN', 'BRUSH_GRAB', 'BRUSH_INFLATE', 'BRUSH_LAYER', 'BRUSH_LIGHTEN', 'BRUSH_MASK', 'BRUSH_MIX', 'BRUSH_MULTIPLY', 'BRUSH_NUDGE', 'BRUSH_PINCH', 'BRUSH_SCRAPE', 'BRUSH_SCULPT_DRAW', 'BRUSH_SMEAR', 'BRUSH_SMOOTH', 'BRUSH_SNAKE_HOOK', 'BRUSH_SOFTEN', 'BRUSH_SUBTRACT', 'BRUSH_TEXDRAW', 'BRUSH_TEXFILL', 'BRUSH_TEXMASK', 'BRUSH_THUMB', 'BRUSH_ROTATE', 'BRUSH_VERTEXDRAW', 'MATCAP_01', 'MATCAP_02', 'MATCAP_03', 'MATCAP_04', 'MATCAP_05', 'MATCAP_06', 'MATCAP_07', 'MATCAP_08', 'MATCAP_09', 'MATCAP_10', 'MATCAP_11', 'MATCAP_12', 'MATCAP_13', 'MATCAP_14', 'MATCAP_15', 'MATCAP_16', 'MATCAP_17', 'MATCAP_18', 'MATCAP_19', 'MATCAP_20', 'MATCAP_21', 'MATCAP_22', 'MATCAP_23', 'MATCAP_24', 'SMALL_TRI_RIGHT_VEC', 'KEYTYPE_KEYFRAME_VEC', 'KEYTYPE_BREAKDOWN_VEC', 'KEYTYPE_EXTREME_VEC', 'KEYTYPE_JITTER_VEC', 'KEYTYPE_MOVING_HOLD_VEC', 'COLORSET_01_VEC', 'COLORSET_02_VEC', 'COLORSET_03_VEC', 'COLORSET_04_VEC', 'COLORSET_05_VEC', 'COLORSET_06_VEC', 'COLORSET_07_VEC', 'COLORSET_08_VEC', 'COLORSET_09_VEC', 'COLORSET_10_VEC', 'COLORSET_11_VEC', 'COLORSET_12_VEC', 'COLORSET_13_VEC', 'COLORSET_14_VEC', 'COLORSET_15_VEC', 'COLORSET_16_VEC', 'COLORSET_17_VEC', 'COLORSET_18_VEC', 'COLORSET_19_VEC', 'COLORSET_20_VEC'], (optional))
        :type icon: str
        :param expand: Expand button to show more detail
            (type: boolean, (optional))
        :type expand: bool
        :param slider: Use slider widget for numeric values
            (type: boolean, (optional))
        :type slider: bool
        :param toggle: Use toggle widget for boolean values
            (type: boolean, (optional))
        :type toggle: bool
        :param icon_only: Draw only icons in buttons, no text
            (type: boolean, (optional))
        :type icon_only: bool
        :param event: Use button to input key events
            (type: boolean, (optional))
        :type event: bool
        :param full_event: Use button to input full events including modifiers
            (type: boolean, (optional))
        :type full_event: bool
        :param emboss: Draw the button itself, just the icon/text
            (type: boolean, (optional))
        :type emboss: bool
        :param index: The index of this button, when set a single member of an array can be accessed, when set to -1 all array members are used
            (type: int in [-2, inf], (optional))
        :type index: int
        :param icon_value: Icon Value, Override automatic icon of the item
            (type: int in [0, inf], (optional))
        :type icon_value: int
        """

    def props_enum(self, data, property):
        """props_enum
        
        :param data: Data from which to take property
            (type: bpy.types.AnyType, (never None))
        :type data: AnyType
        :param property: Identifier of property in data
            (type: str, (never None))
        :type property: str
        """

    def prop_menu_enum(self, data, property, text="", text_ctxt="", translate=True, icon='NONE'):
        """prop_menu_enum
        
        :param data: Data from which to take property
            (type: bpy.types.AnyType, (never None))
        :type data: AnyType
        :param property: Identifier of property in data
            (type: str, (never None))
        :type property: str
        :param text: Override automatic text of the item
            (type: str, (optional, never None))
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
            (type: str, (optional, never None))
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
            (type: boolean, (optional))
        :type translate: bool
        :param icon: Icon, Override automatic icon of the item
            (type: enum in ['NONE', 'QUESTION', 'ERROR', 'CANCEL', 'TRIA_RIGHT', 'TRIA_DOWN', 'TRIA_LEFT', 'TRIA_UP', 'ARROW_LEFTRIGHT', 'PLUS', 'DISCLOSURE_TRI_DOWN', 'DISCLOSURE_TRI_RIGHT', 'RADIOBUT_OFF', 'RADIOBUT_ON', 'MENU_PANEL', 'BLENDER', 'GRIP', 'DOT', 'COLLAPSEMENU', 'X', 'GO_LEFT', 'PLUG', 'UI', 'NODE', 'NODE_SEL', 'FULLSCREEN', 'SPLITSCREEN', 'RIGHTARROW_THIN', 'BORDERMOVE', 'VIEWZOOM', 'ZOOMIN', 'ZOOMOUT', 'PANEL_CLOSE', 'COPY_ID', 'EYEDROPPER', 'LINK_AREA', 'AUTO', 'CHECKBOX_DEHLT', 'CHECKBOX_HLT', 'UNLOCKED', 'LOCKED', 'UNPINNED', 'PINNED', 'SCREEN_BACK', 'RIGHTARROW', 'DOWNARROW_HLT', 'DOTSUP', 'DOTSDOWN', 'LINK', 'INLINK', 'PLUGIN', 'HELP', 'GHOST_ENABLED', 'COLOR', 'LINKED', 'UNLINKED', 'HAND', 'ZOOM_ALL', 'ZOOM_SELECTED', 'ZOOM_PREVIOUS', 'ZOOM_IN', 'ZOOM_OUT', 'RENDER_REGION', 'BORDER_RECT', 'BORDER_LASSO', 'FREEZE', 'STYLUS_PRESSURE', 'GHOST_DISABLED', 'NEW', 'FILE_TICK', 'QUIT', 'URL', 'RECOVER_LAST', 'FULLSCREEN_ENTER', 'FULLSCREEN_EXIT', 'BLANK1', 'LAMP', 'MATERIAL', 'TEXTURE', 'ANIM', 'WORLD', 'SCENE', 'EDIT', 'GAME', 'RADIO', 'SCRIPT', 'PARTICLES', 'PHYSICS', 'SPEAKER', 'TEXTURE_SHADED', 'VIEW3D', 'IPO', 'OOPS', 'BUTS', 'FILESEL', 'IMAGE_COL', 'INFO', 'SEQUENCE', 'TEXT', 'IMASEL', 'SOUND', 'ACTION', 'NLA', 'SCRIPTWIN', 'TIME', 'NODETREE', 'LOGIC', 'CONSOLE', 'PREFERENCES', 'CLIP', 'ASSET_MANAGER', 'OBJECT_DATAMODE', 'EDITMODE_HLT', 'FACESEL_HLT', 'VPAINT_HLT', 'TPAINT_HLT', 'WPAINT_HLT', 'SCULPTMODE_HLT', 'POSE_HLT', 'PARTICLEMODE', 'LIGHTPAINT', 'SCENE_DATA', 'RENDERLAYERS', 'WORLD_DATA', 'OBJECT_DATA', 'MESH_DATA', 'CURVE_DATA', 'META_DATA', 'LATTICE_DATA', 'LAMP_DATA', 'MATERIAL_DATA', 'TEXTURE_DATA', 'ANIM_DATA', 'CAMERA_DATA', 'PARTICLE_DATA', 'LIBRARY_DATA_DIRECT', 'GROUP', 'ARMATURE_DATA', 'POSE_DATA', 'BONE_DATA', 'CONSTRAINT', 'SHAPEKEY_DATA', 'CONSTRAINT_BONE', 'CAMERA_STEREO', 'PACKAGE', 'UGLYPACKAGE', 'BRUSH_DATA', 'IMAGE_DATA', 'FILE', 'FCURVE', 'FONT_DATA', 'RENDER_RESULT', 'SURFACE_DATA', 'EMPTY_DATA', 'SETTINGS', 'RENDER_ANIMATION', 'RENDER_STILL', 'LIBRARY_DATA_BROKEN', 'BOIDS', 'STRANDS', 'LIBRARY_DATA_INDIRECT', 'GREASEPENCIL', 'LINE_DATA', 'GROUP_BONE', 'GROUP_VERTEX', 'GROUP_VCOL', 'GROUP_UVS', 'RNA', 'RNA_ADD', 'OUTLINER_OB_EMPTY', 'OUTLINER_OB_MESH', 'OUTLINER_OB_CURVE', 'OUTLINER_OB_LATTICE', 'OUTLINER_OB_META', 'OUTLINER_OB_LAMP', 'OUTLINER_OB_CAMERA', 'OUTLINER_OB_ARMATURE', 'OUTLINER_OB_FONT', 'OUTLINER_OB_SURFACE', 'OUTLINER_OB_SPEAKER', 'RESTRICT_COLOR_OFF', 'RESTRICT_COLOR_ON', 'RESTRICT_VIEW_OFF', 'RESTRICT_VIEW_ON', 'RESTRICT_SELECT_OFF', 'RESTRICT_SELECT_ON', 'RESTRICT_RENDER_OFF', 'RESTRICT_RENDER_ON', 'OUTLINER_DATA_EMPTY', 'OUTLINER_DATA_MESH', 'OUTLINER_DATA_CURVE', 'OUTLINER_DATA_LATTICE', 'OUTLINER_DATA_META', 'OUTLINER_DATA_LAMP', 'OUTLINER_DATA_CAMERA', 'OUTLINER_DATA_ARMATURE', 'OUTLINER_DATA_FONT', 'OUTLINER_DATA_SURFACE', 'OUTLINER_DATA_SPEAKER', 'OUTLINER_DATA_POSE', 'MESH_PLANE', 'MESH_CUBE', 'MESH_CIRCLE', 'MESH_UVSPHERE', 'MESH_ICOSPHERE', 'MESH_GRID', 'MESH_MONKEY', 'MESH_CYLINDER', 'MESH_TORUS', 'MESH_CONE', 'MESH_CAPSULE', 'LAMP_POINT', 'LAMP_SUN', 'LAMP_SPOT', 'LAMP_HEMI', 'LAMP_AREA', 'META_EMPTY', 'META_PLANE', 'META_CUBE', 'META_BALL', 'META_ELLIPSOID', 'META_CAPSULE', 'SURFACE_NCURVE', 'SURFACE_NCIRCLE', 'SURFACE_NSURFACE', 'SURFACE_NCYLINDER', 'SURFACE_NSPHERE', 'SURFACE_NTORUS', 'CURVE_BEZCURVE', 'CURVE_BEZCIRCLE', 'CURVE_NCURVE', 'CURVE_NCIRCLE', 'CURVE_PATH', 'COLOR_RED', 'COLOR_GREEN', 'COLOR_BLUE', 'TRIA_RIGHT_BAR', 'TRIA_DOWN_BAR', 'TRIA_LEFT_BAR', 'TRIA_UP_BAR', 'FORCE_FORCE', 'FORCE_WIND', 'FORCE_VORTEX', 'FORCE_MAGNETIC', 'FORCE_HARMONIC', 'FORCE_CHARGE', 'FORCE_LENNARDJONES', 'FORCE_TEXTURE', 'FORCE_CURVE', 'FORCE_BOID', 'FORCE_TURBULENCE', 'FORCE_DRAG', 'FORCE_SMOKEFLOW', 'NODE_INSERT_ON', 'NODE_INSERT_OFF', 'MODIFIER', 'MOD_WAVE', 'MOD_BUILD', 'MOD_DECIM', 'MOD_MIRROR', 'MOD_SOFT', 'MOD_SUBSURF', 'HOOK', 'MOD_PHYSICS', 'MOD_PARTICLES', 'MOD_BOOLEAN', 'MOD_EDGESPLIT', 'MOD_ARRAY', 'MOD_UVPROJECT', 'MOD_DISPLACE', 'MOD_CURVE', 'MOD_LATTICE', 'CONSTRAINT_DATA', 'MOD_ARMATURE', 'MOD_SHRINKWRAP', 'MOD_CAST', 'MOD_MESHDEFORM', 'MOD_BEVEL', 'MOD_SMOOTH', 'MOD_SIMPLEDEFORM', 'MOD_MASK', 'MOD_CLOTH', 'MOD_EXPLODE', 'MOD_FLUIDSIM', 'MOD_MULTIRES', 'MOD_SMOKE', 'MOD_SOLIDIFY', 'MOD_SCREW', 'MOD_VERTEX_WEIGHT', 'MOD_DYNAMICPAINT', 'MOD_REMESH', 'MOD_OCEAN', 'MOD_WARP', 'MOD_SKIN', 'MOD_TRIANGULATE', 'MOD_WIREFRAME', 'MOD_DATA_TRANSFER', 'MOD_NORMALEDIT', 'REC', 'PLAY', 'FF', 'REW', 'PAUSE', 'PREV_KEYFRAME', 'NEXT_KEYFRAME', 'PLAY_AUDIO', 'PLAY_REVERSE', 'PREVIEW_RANGE', 'ACTION_TWEAK', 'PMARKER_ACT', 'PMARKER_SEL', 'PMARKER', 'MARKER_HLT', 'MARKER', 'SPACE2', 'SPACE3', 'KEYINGSET', 'KEY_DEHLT', 'KEY_HLT', 'MUTE_IPO_OFF', 'MUTE_IPO_ON', 'VISIBLE_IPO_OFF', 'VISIBLE_IPO_ON', 'DRIVER', 'SOLO_OFF', 'SOLO_ON', 'FRAME_PREV', 'FRAME_NEXT', 'NLA_PUSHDOWN', 'IPO_CONSTANT', 'IPO_LINEAR', 'IPO_BEZIER', 'IPO_SINE', 'IPO_QUAD', 'IPO_CUBIC', 'IPO_QUART', 'IPO_QUINT', 'IPO_EXPO', 'IPO_CIRC', 'IPO_BOUNCE', 'IPO_ELASTIC', 'IPO_BACK', 'IPO_EASE_IN', 'IPO_EASE_OUT', 'IPO_EASE_IN_OUT', 'NORMALIZE_FCURVES', 'VERTEXSEL', 'EDGESEL', 'FACESEL', 'LOOPSEL', 'ROTATE', 'CURSOR', 'ROTATECOLLECTION', 'ROTATECENTER', 'ROTACTIVE', 'ALIGN', 'SMOOTHCURVE', 'SPHERECURVE', 'ROOTCURVE', 'SHARPCURVE', 'LINCURVE', 'NOCURVE', 'RNDCURVE', 'PROP_OFF', 'PROP_ON', 'PROP_CON', 'SCULPT_DYNTOPO', 'PARTICLE_POINT', 'PARTICLE_TIP', 'PARTICLE_PATH', 'MAN_TRANS', 'MAN_ROT', 'MAN_SCALE', 'MANIPUL', 'SNAP_OFF', 'SNAP_ON', 'SNAP_NORMAL', 'SNAP_GRID', 'SNAP_VERTEX', 'SNAP_EDGE', 'SNAP_FACE', 'SNAP_VOLUME', 'SNAP_INCREMENT', 'STICKY_UVS_LOC', 'STICKY_UVS_DISABLE', 'STICKY_UVS_VERT', 'CLIPUV_DEHLT', 'CLIPUV_HLT', 'SNAP_PEEL_OBJECT', 'GRID', 'PASTEDOWN', 'COPYDOWN', 'PASTEFLIPUP', 'PASTEFLIPDOWN', 'SNAP_SURFACE', 'AUTOMERGE_ON', 'AUTOMERGE_OFF', 'RETOPO', 'UV_VERTEXSEL', 'UV_EDGESEL', 'UV_FACESEL', 'UV_ISLANDSEL', 'UV_SYNC_SELECT', 'BBOX', 'WIRE', 'SOLID', 'SMOOTH', 'POTATO', 'ORTHO', 'LOCKVIEW_OFF', 'LOCKVIEW_ON', 'AXIS_SIDE', 'AXIS_FRONT', 'AXIS_TOP', 'NDOF_DOM', 'NDOF_TURN', 'NDOF_FLY', 'NDOF_TRANS', 'LAYER_USED', 'LAYER_ACTIVE', 'SORTALPHA', 'SORTBYEXT', 'SORTTIME', 'SORTSIZE', 'LONGDISPLAY', 'SHORTDISPLAY', 'GHOST', 'IMGDISPLAY', 'SAVE_AS', 'SAVE_COPY', 'BOOKMARKS', 'FONTPREVIEW', 'FILTER', 'NEWFOLDER', 'OPEN_RECENT', 'FILE_PARENT', 'FILE_REFRESH', 'FILE_FOLDER', 'FILE_BLANK', 'FILE_BLEND', 'FILE_IMAGE', 'FILE_MOVIE', 'FILE_SCRIPT', 'FILE_SOUND', 'FILE_FONT', 'FILE_TEXT', 'RECOVER_AUTO', 'SAVE_PREFS', 'LINK_BLEND', 'APPEND_BLEND', 'IMPORT', 'EXPORT', 'EXTERNAL_DATA', 'LOAD_FACTORY', 'LOOP_BACK', 'LOOP_FORWARDS', 'BACK', 'FORWARD', 'FILE_HIDDEN', 'FILE_BACKUP', 'DISK_DRIVE', 'MATPLANE', 'MATSPHERE', 'MATCUBE', 'MONKEY', 'HAIR', 'ALIASED', 'ANTIALIASED', 'MAT_SPHERE_SKY', 'WORDWRAP_OFF', 'WORDWRAP_ON', 'SYNTAX_OFF', 'SYNTAX_ON', 'LINENUMBERS_OFF', 'LINENUMBERS_ON', 'SCRIPTPLUGINS', 'SEQ_SEQUENCER', 'SEQ_PREVIEW', 'SEQ_LUMA_WAVEFORM', 'SEQ_CHROMA_SCOPE', 'SEQ_HISTOGRAM', 'SEQ_SPLITVIEW', 'IMAGE_RGB', 'IMAGE_RGB_ALPHA', 'IMAGE_ALPHA', 'IMAGE_ZDEPTH', 'IMAGEFILE', 'BRUSH_ADD', 'BRUSH_BLOB', 'BRUSH_BLUR', 'BRUSH_CLAY', 'BRUSH_CLAY_STRIPS', 'BRUSH_CLONE', 'BRUSH_CREASE', 'BRUSH_DARKEN', 'BRUSH_FILL', 'BRUSH_FLATTEN', 'BRUSH_GRAB', 'BRUSH_INFLATE', 'BRUSH_LAYER', 'BRUSH_LIGHTEN', 'BRUSH_MASK', 'BRUSH_MIX', 'BRUSH_MULTIPLY', 'BRUSH_NUDGE', 'BRUSH_PINCH', 'BRUSH_SCRAPE', 'BRUSH_SCULPT_DRAW', 'BRUSH_SMEAR', 'BRUSH_SMOOTH', 'BRUSH_SNAKE_HOOK', 'BRUSH_SOFTEN', 'BRUSH_SUBTRACT', 'BRUSH_TEXDRAW', 'BRUSH_TEXFILL', 'BRUSH_TEXMASK', 'BRUSH_THUMB', 'BRUSH_ROTATE', 'BRUSH_VERTEXDRAW', 'MATCAP_01', 'MATCAP_02', 'MATCAP_03', 'MATCAP_04', 'MATCAP_05', 'MATCAP_06', 'MATCAP_07', 'MATCAP_08', 'MATCAP_09', 'MATCAP_10', 'MATCAP_11', 'MATCAP_12', 'MATCAP_13', 'MATCAP_14', 'MATCAP_15', 'MATCAP_16', 'MATCAP_17', 'MATCAP_18', 'MATCAP_19', 'MATCAP_20', 'MATCAP_21', 'MATCAP_22', 'MATCAP_23', 'MATCAP_24', 'SMALL_TRI_RIGHT_VEC', 'KEYTYPE_KEYFRAME_VEC', 'KEYTYPE_BREAKDOWN_VEC', 'KEYTYPE_EXTREME_VEC', 'KEYTYPE_JITTER_VEC', 'KEYTYPE_MOVING_HOLD_VEC', 'COLORSET_01_VEC', 'COLORSET_02_VEC', 'COLORSET_03_VEC', 'COLORSET_04_VEC', 'COLORSET_05_VEC', 'COLORSET_06_VEC', 'COLORSET_07_VEC', 'COLORSET_08_VEC', 'COLORSET_09_VEC', 'COLORSET_10_VEC', 'COLORSET_11_VEC', 'COLORSET_12_VEC', 'COLORSET_13_VEC', 'COLORSET_14_VEC', 'COLORSET_15_VEC', 'COLORSET_16_VEC', 'COLORSET_17_VEC', 'COLORSET_18_VEC', 'COLORSET_19_VEC', 'COLORSET_20_VEC'], (optional))
        :type icon: str
        """

    def prop_enum(self, data, property, value, text="", text_ctxt="", translate=True, icon='NONE'):
        """prop_enum
        
        :param data: Data from which to take property
            (type: bpy.types.AnyType, (never None))
        :type data: AnyType
        :param property: Identifier of property in data
            (type: str, (never None))
        :type property: str
        :param value: Enum property value
            (type: str, (never None))
        :type value: str
        :param text: Override automatic text of the item
            (type: str, (optional, never None))
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
            (type: str, (optional, never None))
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
            (type: boolean, (optional))
        :type translate: bool
        :param icon: Icon, Override automatic icon of the item
            (type: enum in ['NONE', 'QUESTION', 'ERROR', 'CANCEL', 'TRIA_RIGHT', 'TRIA_DOWN', 'TRIA_LEFT', 'TRIA_UP', 'ARROW_LEFTRIGHT', 'PLUS', 'DISCLOSURE_TRI_DOWN', 'DISCLOSURE_TRI_RIGHT', 'RADIOBUT_OFF', 'RADIOBUT_ON', 'MENU_PANEL', 'BLENDER', 'GRIP', 'DOT', 'COLLAPSEMENU', 'X', 'GO_LEFT', 'PLUG', 'UI', 'NODE', 'NODE_SEL', 'FULLSCREEN', 'SPLITSCREEN', 'RIGHTARROW_THIN', 'BORDERMOVE', 'VIEWZOOM', 'ZOOMIN', 'ZOOMOUT', 'PANEL_CLOSE', 'COPY_ID', 'EYEDROPPER', 'LINK_AREA', 'AUTO', 'CHECKBOX_DEHLT', 'CHECKBOX_HLT', 'UNLOCKED', 'LOCKED', 'UNPINNED', 'PINNED', 'SCREEN_BACK', 'RIGHTARROW', 'DOWNARROW_HLT', 'DOTSUP', 'DOTSDOWN', 'LINK', 'INLINK', 'PLUGIN', 'HELP', 'GHOST_ENABLED', 'COLOR', 'LINKED', 'UNLINKED', 'HAND', 'ZOOM_ALL', 'ZOOM_SELECTED', 'ZOOM_PREVIOUS', 'ZOOM_IN', 'ZOOM_OUT', 'RENDER_REGION', 'BORDER_RECT', 'BORDER_LASSO', 'FREEZE', 'STYLUS_PRESSURE', 'GHOST_DISABLED', 'NEW', 'FILE_TICK', 'QUIT', 'URL', 'RECOVER_LAST', 'FULLSCREEN_ENTER', 'FULLSCREEN_EXIT', 'BLANK1', 'LAMP', 'MATERIAL', 'TEXTURE', 'ANIM', 'WORLD', 'SCENE', 'EDIT', 'GAME', 'RADIO', 'SCRIPT', 'PARTICLES', 'PHYSICS', 'SPEAKER', 'TEXTURE_SHADED', 'VIEW3D', 'IPO', 'OOPS', 'BUTS', 'FILESEL', 'IMAGE_COL', 'INFO', 'SEQUENCE', 'TEXT', 'IMASEL', 'SOUND', 'ACTION', 'NLA', 'SCRIPTWIN', 'TIME', 'NODETREE', 'LOGIC', 'CONSOLE', 'PREFERENCES', 'CLIP', 'ASSET_MANAGER', 'OBJECT_DATAMODE', 'EDITMODE_HLT', 'FACESEL_HLT', 'VPAINT_HLT', 'TPAINT_HLT', 'WPAINT_HLT', 'SCULPTMODE_HLT', 'POSE_HLT', 'PARTICLEMODE', 'LIGHTPAINT', 'SCENE_DATA', 'RENDERLAYERS', 'WORLD_DATA', 'OBJECT_DATA', 'MESH_DATA', 'CURVE_DATA', 'META_DATA', 'LATTICE_DATA', 'LAMP_DATA', 'MATERIAL_DATA', 'TEXTURE_DATA', 'ANIM_DATA', 'CAMERA_DATA', 'PARTICLE_DATA', 'LIBRARY_DATA_DIRECT', 'GROUP', 'ARMATURE_DATA', 'POSE_DATA', 'BONE_DATA', 'CONSTRAINT', 'SHAPEKEY_DATA', 'CONSTRAINT_BONE', 'CAMERA_STEREO', 'PACKAGE', 'UGLYPACKAGE', 'BRUSH_DATA', 'IMAGE_DATA', 'FILE', 'FCURVE', 'FONT_DATA', 'RENDER_RESULT', 'SURFACE_DATA', 'EMPTY_DATA', 'SETTINGS', 'RENDER_ANIMATION', 'RENDER_STILL', 'LIBRARY_DATA_BROKEN', 'BOIDS', 'STRANDS', 'LIBRARY_DATA_INDIRECT', 'GREASEPENCIL', 'LINE_DATA', 'GROUP_BONE', 'GROUP_VERTEX', 'GROUP_VCOL', 'GROUP_UVS', 'RNA', 'RNA_ADD', 'OUTLINER_OB_EMPTY', 'OUTLINER_OB_MESH', 'OUTLINER_OB_CURVE', 'OUTLINER_OB_LATTICE', 'OUTLINER_OB_META', 'OUTLINER_OB_LAMP', 'OUTLINER_OB_CAMERA', 'OUTLINER_OB_ARMATURE', 'OUTLINER_OB_FONT', 'OUTLINER_OB_SURFACE', 'OUTLINER_OB_SPEAKER', 'RESTRICT_COLOR_OFF', 'RESTRICT_COLOR_ON', 'RESTRICT_VIEW_OFF', 'RESTRICT_VIEW_ON', 'RESTRICT_SELECT_OFF', 'RESTRICT_SELECT_ON', 'RESTRICT_RENDER_OFF', 'RESTRICT_RENDER_ON', 'OUTLINER_DATA_EMPTY', 'OUTLINER_DATA_MESH', 'OUTLINER_DATA_CURVE', 'OUTLINER_DATA_LATTICE', 'OUTLINER_DATA_META', 'OUTLINER_DATA_LAMP', 'OUTLINER_DATA_CAMERA', 'OUTLINER_DATA_ARMATURE', 'OUTLINER_DATA_FONT', 'OUTLINER_DATA_SURFACE', 'OUTLINER_DATA_SPEAKER', 'OUTLINER_DATA_POSE', 'MESH_PLANE', 'MESH_CUBE', 'MESH_CIRCLE', 'MESH_UVSPHERE', 'MESH_ICOSPHERE', 'MESH_GRID', 'MESH_MONKEY', 'MESH_CYLINDER', 'MESH_TORUS', 'MESH_CONE', 'MESH_CAPSULE', 'LAMP_POINT', 'LAMP_SUN', 'LAMP_SPOT', 'LAMP_HEMI', 'LAMP_AREA', 'META_EMPTY', 'META_PLANE', 'META_CUBE', 'META_BALL', 'META_ELLIPSOID', 'META_CAPSULE', 'SURFACE_NCURVE', 'SURFACE_NCIRCLE', 'SURFACE_NSURFACE', 'SURFACE_NCYLINDER', 'SURFACE_NSPHERE', 'SURFACE_NTORUS', 'CURVE_BEZCURVE', 'CURVE_BEZCIRCLE', 'CURVE_NCURVE', 'CURVE_NCIRCLE', 'CURVE_PATH', 'COLOR_RED', 'COLOR_GREEN', 'COLOR_BLUE', 'TRIA_RIGHT_BAR', 'TRIA_DOWN_BAR', 'TRIA_LEFT_BAR', 'TRIA_UP_BAR', 'FORCE_FORCE', 'FORCE_WIND', 'FORCE_VORTEX', 'FORCE_MAGNETIC', 'FORCE_HARMONIC', 'FORCE_CHARGE', 'FORCE_LENNARDJONES', 'FORCE_TEXTURE', 'FORCE_CURVE', 'FORCE_BOID', 'FORCE_TURBULENCE', 'FORCE_DRAG', 'FORCE_SMOKEFLOW', 'NODE_INSERT_ON', 'NODE_INSERT_OFF', 'MODIFIER', 'MOD_WAVE', 'MOD_BUILD', 'MOD_DECIM', 'MOD_MIRROR', 'MOD_SOFT', 'MOD_SUBSURF', 'HOOK', 'MOD_PHYSICS', 'MOD_PARTICLES', 'MOD_BOOLEAN', 'MOD_EDGESPLIT', 'MOD_ARRAY', 'MOD_UVPROJECT', 'MOD_DISPLACE', 'MOD_CURVE', 'MOD_LATTICE', 'CONSTRAINT_DATA', 'MOD_ARMATURE', 'MOD_SHRINKWRAP', 'MOD_CAST', 'MOD_MESHDEFORM', 'MOD_BEVEL', 'MOD_SMOOTH', 'MOD_SIMPLEDEFORM', 'MOD_MASK', 'MOD_CLOTH', 'MOD_EXPLODE', 'MOD_FLUIDSIM', 'MOD_MULTIRES', 'MOD_SMOKE', 'MOD_SOLIDIFY', 'MOD_SCREW', 'MOD_VERTEX_WEIGHT', 'MOD_DYNAMICPAINT', 'MOD_REMESH', 'MOD_OCEAN', 'MOD_WARP', 'MOD_SKIN', 'MOD_TRIANGULATE', 'MOD_WIREFRAME', 'MOD_DATA_TRANSFER', 'MOD_NORMALEDIT', 'REC', 'PLAY', 'FF', 'REW', 'PAUSE', 'PREV_KEYFRAME', 'NEXT_KEYFRAME', 'PLAY_AUDIO', 'PLAY_REVERSE', 'PREVIEW_RANGE', 'ACTION_TWEAK', 'PMARKER_ACT', 'PMARKER_SEL', 'PMARKER', 'MARKER_HLT', 'MARKER', 'SPACE2', 'SPACE3', 'KEYINGSET', 'KEY_DEHLT', 'KEY_HLT', 'MUTE_IPO_OFF', 'MUTE_IPO_ON', 'VISIBLE_IPO_OFF', 'VISIBLE_IPO_ON', 'DRIVER', 'SOLO_OFF', 'SOLO_ON', 'FRAME_PREV', 'FRAME_NEXT', 'NLA_PUSHDOWN', 'IPO_CONSTANT', 'IPO_LINEAR', 'IPO_BEZIER', 'IPO_SINE', 'IPO_QUAD', 'IPO_CUBIC', 'IPO_QUART', 'IPO_QUINT', 'IPO_EXPO', 'IPO_CIRC', 'IPO_BOUNCE', 'IPO_ELASTIC', 'IPO_BACK', 'IPO_EASE_IN', 'IPO_EASE_OUT', 'IPO_EASE_IN_OUT', 'NORMALIZE_FCURVES', 'VERTEXSEL', 'EDGESEL', 'FACESEL', 'LOOPSEL', 'ROTATE', 'CURSOR', 'ROTATECOLLECTION', 'ROTATECENTER', 'ROTACTIVE', 'ALIGN', 'SMOOTHCURVE', 'SPHERECURVE', 'ROOTCURVE', 'SHARPCURVE', 'LINCURVE', 'NOCURVE', 'RNDCURVE', 'PROP_OFF', 'PROP_ON', 'PROP_CON', 'SCULPT_DYNTOPO', 'PARTICLE_POINT', 'PARTICLE_TIP', 'PARTICLE_PATH', 'MAN_TRANS', 'MAN_ROT', 'MAN_SCALE', 'MANIPUL', 'SNAP_OFF', 'SNAP_ON', 'SNAP_NORMAL', 'SNAP_GRID', 'SNAP_VERTEX', 'SNAP_EDGE', 'SNAP_FACE', 'SNAP_VOLUME', 'SNAP_INCREMENT', 'STICKY_UVS_LOC', 'STICKY_UVS_DISABLE', 'STICKY_UVS_VERT', 'CLIPUV_DEHLT', 'CLIPUV_HLT', 'SNAP_PEEL_OBJECT', 'GRID', 'PASTEDOWN', 'COPYDOWN', 'PASTEFLIPUP', 'PASTEFLIPDOWN', 'SNAP_SURFACE', 'AUTOMERGE_ON', 'AUTOMERGE_OFF', 'RETOPO', 'UV_VERTEXSEL', 'UV_EDGESEL', 'UV_FACESEL', 'UV_ISLANDSEL', 'UV_SYNC_SELECT', 'BBOX', 'WIRE', 'SOLID', 'SMOOTH', 'POTATO', 'ORTHO', 'LOCKVIEW_OFF', 'LOCKVIEW_ON', 'AXIS_SIDE', 'AXIS_FRONT', 'AXIS_TOP', 'NDOF_DOM', 'NDOF_TURN', 'NDOF_FLY', 'NDOF_TRANS', 'LAYER_USED', 'LAYER_ACTIVE', 'SORTALPHA', 'SORTBYEXT', 'SORTTIME', 'SORTSIZE', 'LONGDISPLAY', 'SHORTDISPLAY', 'GHOST', 'IMGDISPLAY', 'SAVE_AS', 'SAVE_COPY', 'BOOKMARKS', 'FONTPREVIEW', 'FILTER', 'NEWFOLDER', 'OPEN_RECENT', 'FILE_PARENT', 'FILE_REFRESH', 'FILE_FOLDER', 'FILE_BLANK', 'FILE_BLEND', 'FILE_IMAGE', 'FILE_MOVIE', 'FILE_SCRIPT', 'FILE_SOUND', 'FILE_FONT', 'FILE_TEXT', 'RECOVER_AUTO', 'SAVE_PREFS', 'LINK_BLEND', 'APPEND_BLEND', 'IMPORT', 'EXPORT', 'EXTERNAL_DATA', 'LOAD_FACTORY', 'LOOP_BACK', 'LOOP_FORWARDS', 'BACK', 'FORWARD', 'FILE_HIDDEN', 'FILE_BACKUP', 'DISK_DRIVE', 'MATPLANE', 'MATSPHERE', 'MATCUBE', 'MONKEY', 'HAIR', 'ALIASED', 'ANTIALIASED', 'MAT_SPHERE_SKY', 'WORDWRAP_OFF', 'WORDWRAP_ON', 'SYNTAX_OFF', 'SYNTAX_ON', 'LINENUMBERS_OFF', 'LINENUMBERS_ON', 'SCRIPTPLUGINS', 'SEQ_SEQUENCER', 'SEQ_PREVIEW', 'SEQ_LUMA_WAVEFORM', 'SEQ_CHROMA_SCOPE', 'SEQ_HISTOGRAM', 'SEQ_SPLITVIEW', 'IMAGE_RGB', 'IMAGE_RGB_ALPHA', 'IMAGE_ALPHA', 'IMAGE_ZDEPTH', 'IMAGEFILE', 'BRUSH_ADD', 'BRUSH_BLOB', 'BRUSH_BLUR', 'BRUSH_CLAY', 'BRUSH_CLAY_STRIPS', 'BRUSH_CLONE', 'BRUSH_CREASE', 'BRUSH_DARKEN', 'BRUSH_FILL', 'BRUSH_FLATTEN', 'BRUSH_GRAB', 'BRUSH_INFLATE', 'BRUSH_LAYER', 'BRUSH_LIGHTEN', 'BRUSH_MASK', 'BRUSH_MIX', 'BRUSH_MULTIPLY', 'BRUSH_NUDGE', 'BRUSH_PINCH', 'BRUSH_SCRAPE', 'BRUSH_SCULPT_DRAW', 'BRUSH_SMEAR', 'BRUSH_SMOOTH', 'BRUSH_SNAKE_HOOK', 'BRUSH_SOFTEN', 'BRUSH_SUBTRACT', 'BRUSH_TEXDRAW', 'BRUSH_TEXFILL', 'BRUSH_TEXMASK', 'BRUSH_THUMB', 'BRUSH_ROTATE', 'BRUSH_VERTEXDRAW', 'MATCAP_01', 'MATCAP_02', 'MATCAP_03', 'MATCAP_04', 'MATCAP_05', 'MATCAP_06', 'MATCAP_07', 'MATCAP_08', 'MATCAP_09', 'MATCAP_10', 'MATCAP_11', 'MATCAP_12', 'MATCAP_13', 'MATCAP_14', 'MATCAP_15', 'MATCAP_16', 'MATCAP_17', 'MATCAP_18', 'MATCAP_19', 'MATCAP_20', 'MATCAP_21', 'MATCAP_22', 'MATCAP_23', 'MATCAP_24', 'SMALL_TRI_RIGHT_VEC', 'KEYTYPE_KEYFRAME_VEC', 'KEYTYPE_BREAKDOWN_VEC', 'KEYTYPE_EXTREME_VEC', 'KEYTYPE_JITTER_VEC', 'KEYTYPE_MOVING_HOLD_VEC', 'COLORSET_01_VEC', 'COLORSET_02_VEC', 'COLORSET_03_VEC', 'COLORSET_04_VEC', 'COLORSET_05_VEC', 'COLORSET_06_VEC', 'COLORSET_07_VEC', 'COLORSET_08_VEC', 'COLORSET_09_VEC', 'COLORSET_10_VEC', 'COLORSET_11_VEC', 'COLORSET_12_VEC', 'COLORSET_13_VEC', 'COLORSET_14_VEC', 'COLORSET_15_VEC', 'COLORSET_16_VEC', 'COLORSET_17_VEC', 'COLORSET_18_VEC', 'COLORSET_19_VEC', 'COLORSET_20_VEC'], (optional))
        :type icon: str
        """

    def prop_search(self, data, property, search_data, search_property, text="", text_ctxt="", translate=True, icon='NONE'):
        """prop_search
        
        :param data: Data from which to take property
            (type: bpy.types.AnyType, (never None))
        :type data: AnyType
        :param property: Identifier of property in data
            (type: str, (never None))
        :type property: str
        :param search_data: Data from which to take collection to search in
            (type: bpy.types.AnyType, (never None))
        :type search_data: AnyType
        :param search_property: Identifier of search collection property
            (type: str, (never None))
        :type search_property: str
        :param text: Override automatic text of the item
            (type: str, (optional, never None))
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
            (type: str, (optional, never None))
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
            (type: boolean, (optional))
        :type translate: bool
        :param icon: Icon, Override automatic icon of the item
            (type: enum in ['NONE', 'QUESTION', 'ERROR', 'CANCEL', 'TRIA_RIGHT', 'TRIA_DOWN', 'TRIA_LEFT', 'TRIA_UP', 'ARROW_LEFTRIGHT', 'PLUS', 'DISCLOSURE_TRI_DOWN', 'DISCLOSURE_TRI_RIGHT', 'RADIOBUT_OFF', 'RADIOBUT_ON', 'MENU_PANEL', 'BLENDER', 'GRIP', 'DOT', 'COLLAPSEMENU', 'X', 'GO_LEFT', 'PLUG', 'UI', 'NODE', 'NODE_SEL', 'FULLSCREEN', 'SPLITSCREEN', 'RIGHTARROW_THIN', 'BORDERMOVE', 'VIEWZOOM', 'ZOOMIN', 'ZOOMOUT', 'PANEL_CLOSE', 'COPY_ID', 'EYEDROPPER', 'LINK_AREA', 'AUTO', 'CHECKBOX_DEHLT', 'CHECKBOX_HLT', 'UNLOCKED', 'LOCKED', 'UNPINNED', 'PINNED', 'SCREEN_BACK', 'RIGHTARROW', 'DOWNARROW_HLT', 'DOTSUP', 'DOTSDOWN', 'LINK', 'INLINK', 'PLUGIN', 'HELP', 'GHOST_ENABLED', 'COLOR', 'LINKED', 'UNLINKED', 'HAND', 'ZOOM_ALL', 'ZOOM_SELECTED', 'ZOOM_PREVIOUS', 'ZOOM_IN', 'ZOOM_OUT', 'RENDER_REGION', 'BORDER_RECT', 'BORDER_LASSO', 'FREEZE', 'STYLUS_PRESSURE', 'GHOST_DISABLED', 'NEW', 'FILE_TICK', 'QUIT', 'URL', 'RECOVER_LAST', 'FULLSCREEN_ENTER', 'FULLSCREEN_EXIT', 'BLANK1', 'LAMP', 'MATERIAL', 'TEXTURE', 'ANIM', 'WORLD', 'SCENE', 'EDIT', 'GAME', 'RADIO', 'SCRIPT', 'PARTICLES', 'PHYSICS', 'SPEAKER', 'TEXTURE_SHADED', 'VIEW3D', 'IPO', 'OOPS', 'BUTS', 'FILESEL', 'IMAGE_COL', 'INFO', 'SEQUENCE', 'TEXT', 'IMASEL', 'SOUND', 'ACTION', 'NLA', 'SCRIPTWIN', 'TIME', 'NODETREE', 'LOGIC', 'CONSOLE', 'PREFERENCES', 'CLIP', 'ASSET_MANAGER', 'OBJECT_DATAMODE', 'EDITMODE_HLT', 'FACESEL_HLT', 'VPAINT_HLT', 'TPAINT_HLT', 'WPAINT_HLT', 'SCULPTMODE_HLT', 'POSE_HLT', 'PARTICLEMODE', 'LIGHTPAINT', 'SCENE_DATA', 'RENDERLAYERS', 'WORLD_DATA', 'OBJECT_DATA', 'MESH_DATA', 'CURVE_DATA', 'META_DATA', 'LATTICE_DATA', 'LAMP_DATA', 'MATERIAL_DATA', 'TEXTURE_DATA', 'ANIM_DATA', 'CAMERA_DATA', 'PARTICLE_DATA', 'LIBRARY_DATA_DIRECT', 'GROUP', 'ARMATURE_DATA', 'POSE_DATA', 'BONE_DATA', 'CONSTRAINT', 'SHAPEKEY_DATA', 'CONSTRAINT_BONE', 'CAMERA_STEREO', 'PACKAGE', 'UGLYPACKAGE', 'BRUSH_DATA', 'IMAGE_DATA', 'FILE', 'FCURVE', 'FONT_DATA', 'RENDER_RESULT', 'SURFACE_DATA', 'EMPTY_DATA', 'SETTINGS', 'RENDER_ANIMATION', 'RENDER_STILL', 'LIBRARY_DATA_BROKEN', 'BOIDS', 'STRANDS', 'LIBRARY_DATA_INDIRECT', 'GREASEPENCIL', 'LINE_DATA', 'GROUP_BONE', 'GROUP_VERTEX', 'GROUP_VCOL', 'GROUP_UVS', 'RNA', 'RNA_ADD', 'OUTLINER_OB_EMPTY', 'OUTLINER_OB_MESH', 'OUTLINER_OB_CURVE', 'OUTLINER_OB_LATTICE', 'OUTLINER_OB_META', 'OUTLINER_OB_LAMP', 'OUTLINER_OB_CAMERA', 'OUTLINER_OB_ARMATURE', 'OUTLINER_OB_FONT', 'OUTLINER_OB_SURFACE', 'OUTLINER_OB_SPEAKER', 'RESTRICT_COLOR_OFF', 'RESTRICT_COLOR_ON', 'RESTRICT_VIEW_OFF', 'RESTRICT_VIEW_ON', 'RESTRICT_SELECT_OFF', 'RESTRICT_SELECT_ON', 'RESTRICT_RENDER_OFF', 'RESTRICT_RENDER_ON', 'OUTLINER_DATA_EMPTY', 'OUTLINER_DATA_MESH', 'OUTLINER_DATA_CURVE', 'OUTLINER_DATA_LATTICE', 'OUTLINER_DATA_META', 'OUTLINER_DATA_LAMP', 'OUTLINER_DATA_CAMERA', 'OUTLINER_DATA_ARMATURE', 'OUTLINER_DATA_FONT', 'OUTLINER_DATA_SURFACE', 'OUTLINER_DATA_SPEAKER', 'OUTLINER_DATA_POSE', 'MESH_PLANE', 'MESH_CUBE', 'MESH_CIRCLE', 'MESH_UVSPHERE', 'MESH_ICOSPHERE', 'MESH_GRID', 'MESH_MONKEY', 'MESH_CYLINDER', 'MESH_TORUS', 'MESH_CONE', 'MESH_CAPSULE', 'LAMP_POINT', 'LAMP_SUN', 'LAMP_SPOT', 'LAMP_HEMI', 'LAMP_AREA', 'META_EMPTY', 'META_PLANE', 'META_CUBE', 'META_BALL', 'META_ELLIPSOID', 'META_CAPSULE', 'SURFACE_NCURVE', 'SURFACE_NCIRCLE', 'SURFACE_NSURFACE', 'SURFACE_NCYLINDER', 'SURFACE_NSPHERE', 'SURFACE_NTORUS', 'CURVE_BEZCURVE', 'CURVE_BEZCIRCLE', 'CURVE_NCURVE', 'CURVE_NCIRCLE', 'CURVE_PATH', 'COLOR_RED', 'COLOR_GREEN', 'COLOR_BLUE', 'TRIA_RIGHT_BAR', 'TRIA_DOWN_BAR', 'TRIA_LEFT_BAR', 'TRIA_UP_BAR', 'FORCE_FORCE', 'FORCE_WIND', 'FORCE_VORTEX', 'FORCE_MAGNETIC', 'FORCE_HARMONIC', 'FORCE_CHARGE', 'FORCE_LENNARDJONES', 'FORCE_TEXTURE', 'FORCE_CURVE', 'FORCE_BOID', 'FORCE_TURBULENCE', 'FORCE_DRAG', 'FORCE_SMOKEFLOW', 'NODE_INSERT_ON', 'NODE_INSERT_OFF', 'MODIFIER', 'MOD_WAVE', 'MOD_BUILD', 'MOD_DECIM', 'MOD_MIRROR', 'MOD_SOFT', 'MOD_SUBSURF', 'HOOK', 'MOD_PHYSICS', 'MOD_PARTICLES', 'MOD_BOOLEAN', 'MOD_EDGESPLIT', 'MOD_ARRAY', 'MOD_UVPROJECT', 'MOD_DISPLACE', 'MOD_CURVE', 'MOD_LATTICE', 'CONSTRAINT_DATA', 'MOD_ARMATURE', 'MOD_SHRINKWRAP', 'MOD_CAST', 'MOD_MESHDEFORM', 'MOD_BEVEL', 'MOD_SMOOTH', 'MOD_SIMPLEDEFORM', 'MOD_MASK', 'MOD_CLOTH', 'MOD_EXPLODE', 'MOD_FLUIDSIM', 'MOD_MULTIRES', 'MOD_SMOKE', 'MOD_SOLIDIFY', 'MOD_SCREW', 'MOD_VERTEX_WEIGHT', 'MOD_DYNAMICPAINT', 'MOD_REMESH', 'MOD_OCEAN', 'MOD_WARP', 'MOD_SKIN', 'MOD_TRIANGULATE', 'MOD_WIREFRAME', 'MOD_DATA_TRANSFER', 'MOD_NORMALEDIT', 'REC', 'PLAY', 'FF', 'REW', 'PAUSE', 'PREV_KEYFRAME', 'NEXT_KEYFRAME', 'PLAY_AUDIO', 'PLAY_REVERSE', 'PREVIEW_RANGE', 'ACTION_TWEAK', 'PMARKER_ACT', 'PMARKER_SEL', 'PMARKER', 'MARKER_HLT', 'MARKER', 'SPACE2', 'SPACE3', 'KEYINGSET', 'KEY_DEHLT', 'KEY_HLT', 'MUTE_IPO_OFF', 'MUTE_IPO_ON', 'VISIBLE_IPO_OFF', 'VISIBLE_IPO_ON', 'DRIVER', 'SOLO_OFF', 'SOLO_ON', 'FRAME_PREV', 'FRAME_NEXT', 'NLA_PUSHDOWN', 'IPO_CONSTANT', 'IPO_LINEAR', 'IPO_BEZIER', 'IPO_SINE', 'IPO_QUAD', 'IPO_CUBIC', 'IPO_QUART', 'IPO_QUINT', 'IPO_EXPO', 'IPO_CIRC', 'IPO_BOUNCE', 'IPO_ELASTIC', 'IPO_BACK', 'IPO_EASE_IN', 'IPO_EASE_OUT', 'IPO_EASE_IN_OUT', 'NORMALIZE_FCURVES', 'VERTEXSEL', 'EDGESEL', 'FACESEL', 'LOOPSEL', 'ROTATE', 'CURSOR', 'ROTATECOLLECTION', 'ROTATECENTER', 'ROTACTIVE', 'ALIGN', 'SMOOTHCURVE', 'SPHERECURVE', 'ROOTCURVE', 'SHARPCURVE', 'LINCURVE', 'NOCURVE', 'RNDCURVE', 'PROP_OFF', 'PROP_ON', 'PROP_CON', 'SCULPT_DYNTOPO', 'PARTICLE_POINT', 'PARTICLE_TIP', 'PARTICLE_PATH', 'MAN_TRANS', 'MAN_ROT', 'MAN_SCALE', 'MANIPUL', 'SNAP_OFF', 'SNAP_ON', 'SNAP_NORMAL', 'SNAP_GRID', 'SNAP_VERTEX', 'SNAP_EDGE', 'SNAP_FACE', 'SNAP_VOLUME', 'SNAP_INCREMENT', 'STICKY_UVS_LOC', 'STICKY_UVS_DISABLE', 'STICKY_UVS_VERT', 'CLIPUV_DEHLT', 'CLIPUV_HLT', 'SNAP_PEEL_OBJECT', 'GRID', 'PASTEDOWN', 'COPYDOWN', 'PASTEFLIPUP', 'PASTEFLIPDOWN', 'SNAP_SURFACE', 'AUTOMERGE_ON', 'AUTOMERGE_OFF', 'RETOPO', 'UV_VERTEXSEL', 'UV_EDGESEL', 'UV_FACESEL', 'UV_ISLANDSEL', 'UV_SYNC_SELECT', 'BBOX', 'WIRE', 'SOLID', 'SMOOTH', 'POTATO', 'ORTHO', 'LOCKVIEW_OFF', 'LOCKVIEW_ON', 'AXIS_SIDE', 'AXIS_FRONT', 'AXIS_TOP', 'NDOF_DOM', 'NDOF_TURN', 'NDOF_FLY', 'NDOF_TRANS', 'LAYER_USED', 'LAYER_ACTIVE', 'SORTALPHA', 'SORTBYEXT', 'SORTTIME', 'SORTSIZE', 'LONGDISPLAY', 'SHORTDISPLAY', 'GHOST', 'IMGDISPLAY', 'SAVE_AS', 'SAVE_COPY', 'BOOKMARKS', 'FONTPREVIEW', 'FILTER', 'NEWFOLDER', 'OPEN_RECENT', 'FILE_PARENT', 'FILE_REFRESH', 'FILE_FOLDER', 'FILE_BLANK', 'FILE_BLEND', 'FILE_IMAGE', 'FILE_MOVIE', 'FILE_SCRIPT', 'FILE_SOUND', 'FILE_FONT', 'FILE_TEXT', 'RECOVER_AUTO', 'SAVE_PREFS', 'LINK_BLEND', 'APPEND_BLEND', 'IMPORT', 'EXPORT', 'EXTERNAL_DATA', 'LOAD_FACTORY', 'LOOP_BACK', 'LOOP_FORWARDS', 'BACK', 'FORWARD', 'FILE_HIDDEN', 'FILE_BACKUP', 'DISK_DRIVE', 'MATPLANE', 'MATSPHERE', 'MATCUBE', 'MONKEY', 'HAIR', 'ALIASED', 'ANTIALIASED', 'MAT_SPHERE_SKY', 'WORDWRAP_OFF', 'WORDWRAP_ON', 'SYNTAX_OFF', 'SYNTAX_ON', 'LINENUMBERS_OFF', 'LINENUMBERS_ON', 'SCRIPTPLUGINS', 'SEQ_SEQUENCER', 'SEQ_PREVIEW', 'SEQ_LUMA_WAVEFORM', 'SEQ_CHROMA_SCOPE', 'SEQ_HISTOGRAM', 'SEQ_SPLITVIEW', 'IMAGE_RGB', 'IMAGE_RGB_ALPHA', 'IMAGE_ALPHA', 'IMAGE_ZDEPTH', 'IMAGEFILE', 'BRUSH_ADD', 'BRUSH_BLOB', 'BRUSH_BLUR', 'BRUSH_CLAY', 'BRUSH_CLAY_STRIPS', 'BRUSH_CLONE', 'BRUSH_CREASE', 'BRUSH_DARKEN', 'BRUSH_FILL', 'BRUSH_FLATTEN', 'BRUSH_GRAB', 'BRUSH_INFLATE', 'BRUSH_LAYER', 'BRUSH_LIGHTEN', 'BRUSH_MASK', 'BRUSH_MIX', 'BRUSH_MULTIPLY', 'BRUSH_NUDGE', 'BRUSH_PINCH', 'BRUSH_SCRAPE', 'BRUSH_SCULPT_DRAW', 'BRUSH_SMEAR', 'BRUSH_SMOOTH', 'BRUSH_SNAKE_HOOK', 'BRUSH_SOFTEN', 'BRUSH_SUBTRACT', 'BRUSH_TEXDRAW', 'BRUSH_TEXFILL', 'BRUSH_TEXMASK', 'BRUSH_THUMB', 'BRUSH_ROTATE', 'BRUSH_VERTEXDRAW', 'MATCAP_01', 'MATCAP_02', 'MATCAP_03', 'MATCAP_04', 'MATCAP_05', 'MATCAP_06', 'MATCAP_07', 'MATCAP_08', 'MATCAP_09', 'MATCAP_10', 'MATCAP_11', 'MATCAP_12', 'MATCAP_13', 'MATCAP_14', 'MATCAP_15', 'MATCAP_16', 'MATCAP_17', 'MATCAP_18', 'MATCAP_19', 'MATCAP_20', 'MATCAP_21', 'MATCAP_22', 'MATCAP_23', 'MATCAP_24', 'SMALL_TRI_RIGHT_VEC', 'KEYTYPE_KEYFRAME_VEC', 'KEYTYPE_BREAKDOWN_VEC', 'KEYTYPE_EXTREME_VEC', 'KEYTYPE_JITTER_VEC', 'KEYTYPE_MOVING_HOLD_VEC', 'COLORSET_01_VEC', 'COLORSET_02_VEC', 'COLORSET_03_VEC', 'COLORSET_04_VEC', 'COLORSET_05_VEC', 'COLORSET_06_VEC', 'COLORSET_07_VEC', 'COLORSET_08_VEC', 'COLORSET_09_VEC', 'COLORSET_10_VEC', 'COLORSET_11_VEC', 'COLORSET_12_VEC', 'COLORSET_13_VEC', 'COLORSET_14_VEC', 'COLORSET_15_VEC', 'COLORSET_16_VEC', 'COLORSET_17_VEC', 'COLORSET_18_VEC', 'COLORSET_19_VEC', 'COLORSET_20_VEC'], (optional))
        :type icon: str
        """

    def operator(self, operator, text="", text_ctxt="", translate=True, icon='NONE', emboss=True, icon_value=0):
        """Item. Places a button into the layout to call an Operator
        
        :param operator: Identifier of the operator
            (type: str, (never None))
        :type operator: str
        :param text: Override automatic text of the item
            (type: str, (optional, never None))
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
            (type: str, (optional, never None))
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
            (type: boolean, (optional))
        :type translate: bool
        :param icon: Icon, Override automatic icon of the item
            (type: enum in ['NONE', 'QUESTION', 'ERROR', 'CANCEL', 'TRIA_RIGHT', 'TRIA_DOWN', 'TRIA_LEFT', 'TRIA_UP', 'ARROW_LEFTRIGHT', 'PLUS', 'DISCLOSURE_TRI_DOWN', 'DISCLOSURE_TRI_RIGHT', 'RADIOBUT_OFF', 'RADIOBUT_ON', 'MENU_PANEL', 'BLENDER', 'GRIP', 'DOT', 'COLLAPSEMENU', 'X', 'GO_LEFT', 'PLUG', 'UI', 'NODE', 'NODE_SEL', 'FULLSCREEN', 'SPLITSCREEN', 'RIGHTARROW_THIN', 'BORDERMOVE', 'VIEWZOOM', 'ZOOMIN', 'ZOOMOUT', 'PANEL_CLOSE', 'COPY_ID', 'EYEDROPPER', 'LINK_AREA', 'AUTO', 'CHECKBOX_DEHLT', 'CHECKBOX_HLT', 'UNLOCKED', 'LOCKED', 'UNPINNED', 'PINNED', 'SCREEN_BACK', 'RIGHTARROW', 'DOWNARROW_HLT', 'DOTSUP', 'DOTSDOWN', 'LINK', 'INLINK', 'PLUGIN', 'HELP', 'GHOST_ENABLED', 'COLOR', 'LINKED', 'UNLINKED', 'HAND', 'ZOOM_ALL', 'ZOOM_SELECTED', 'ZOOM_PREVIOUS', 'ZOOM_IN', 'ZOOM_OUT', 'RENDER_REGION', 'BORDER_RECT', 'BORDER_LASSO', 'FREEZE', 'STYLUS_PRESSURE', 'GHOST_DISABLED', 'NEW', 'FILE_TICK', 'QUIT', 'URL', 'RECOVER_LAST', 'FULLSCREEN_ENTER', 'FULLSCREEN_EXIT', 'BLANK1', 'LAMP', 'MATERIAL', 'TEXTURE', 'ANIM', 'WORLD', 'SCENE', 'EDIT', 'GAME', 'RADIO', 'SCRIPT', 'PARTICLES', 'PHYSICS', 'SPEAKER', 'TEXTURE_SHADED', 'VIEW3D', 'IPO', 'OOPS', 'BUTS', 'FILESEL', 'IMAGE_COL', 'INFO', 'SEQUENCE', 'TEXT', 'IMASEL', 'SOUND', 'ACTION', 'NLA', 'SCRIPTWIN', 'TIME', 'NODETREE', 'LOGIC', 'CONSOLE', 'PREFERENCES', 'CLIP', 'ASSET_MANAGER', 'OBJECT_DATAMODE', 'EDITMODE_HLT', 'FACESEL_HLT', 'VPAINT_HLT', 'TPAINT_HLT', 'WPAINT_HLT', 'SCULPTMODE_HLT', 'POSE_HLT', 'PARTICLEMODE', 'LIGHTPAINT', 'SCENE_DATA', 'RENDERLAYERS', 'WORLD_DATA', 'OBJECT_DATA', 'MESH_DATA', 'CURVE_DATA', 'META_DATA', 'LATTICE_DATA', 'LAMP_DATA', 'MATERIAL_DATA', 'TEXTURE_DATA', 'ANIM_DATA', 'CAMERA_DATA', 'PARTICLE_DATA', 'LIBRARY_DATA_DIRECT', 'GROUP', 'ARMATURE_DATA', 'POSE_DATA', 'BONE_DATA', 'CONSTRAINT', 'SHAPEKEY_DATA', 'CONSTRAINT_BONE', 'CAMERA_STEREO', 'PACKAGE', 'UGLYPACKAGE', 'BRUSH_DATA', 'IMAGE_DATA', 'FILE', 'FCURVE', 'FONT_DATA', 'RENDER_RESULT', 'SURFACE_DATA', 'EMPTY_DATA', 'SETTINGS', 'RENDER_ANIMATION', 'RENDER_STILL', 'LIBRARY_DATA_BROKEN', 'BOIDS', 'STRANDS', 'LIBRARY_DATA_INDIRECT', 'GREASEPENCIL', 'LINE_DATA', 'GROUP_BONE', 'GROUP_VERTEX', 'GROUP_VCOL', 'GROUP_UVS', 'RNA', 'RNA_ADD', 'OUTLINER_OB_EMPTY', 'OUTLINER_OB_MESH', 'OUTLINER_OB_CURVE', 'OUTLINER_OB_LATTICE', 'OUTLINER_OB_META', 'OUTLINER_OB_LAMP', 'OUTLINER_OB_CAMERA', 'OUTLINER_OB_ARMATURE', 'OUTLINER_OB_FONT', 'OUTLINER_OB_SURFACE', 'OUTLINER_OB_SPEAKER', 'RESTRICT_COLOR_OFF', 'RESTRICT_COLOR_ON', 'RESTRICT_VIEW_OFF', 'RESTRICT_VIEW_ON', 'RESTRICT_SELECT_OFF', 'RESTRICT_SELECT_ON', 'RESTRICT_RENDER_OFF', 'RESTRICT_RENDER_ON', 'OUTLINER_DATA_EMPTY', 'OUTLINER_DATA_MESH', 'OUTLINER_DATA_CURVE', 'OUTLINER_DATA_LATTICE', 'OUTLINER_DATA_META', 'OUTLINER_DATA_LAMP', 'OUTLINER_DATA_CAMERA', 'OUTLINER_DATA_ARMATURE', 'OUTLINER_DATA_FONT', 'OUTLINER_DATA_SURFACE', 'OUTLINER_DATA_SPEAKER', 'OUTLINER_DATA_POSE', 'MESH_PLANE', 'MESH_CUBE', 'MESH_CIRCLE', 'MESH_UVSPHERE', 'MESH_ICOSPHERE', 'MESH_GRID', 'MESH_MONKEY', 'MESH_CYLINDER', 'MESH_TORUS', 'MESH_CONE', 'MESH_CAPSULE', 'LAMP_POINT', 'LAMP_SUN', 'LAMP_SPOT', 'LAMP_HEMI', 'LAMP_AREA', 'META_EMPTY', 'META_PLANE', 'META_CUBE', 'META_BALL', 'META_ELLIPSOID', 'META_CAPSULE', 'SURFACE_NCURVE', 'SURFACE_NCIRCLE', 'SURFACE_NSURFACE', 'SURFACE_NCYLINDER', 'SURFACE_NSPHERE', 'SURFACE_NTORUS', 'CURVE_BEZCURVE', 'CURVE_BEZCIRCLE', 'CURVE_NCURVE', 'CURVE_NCIRCLE', 'CURVE_PATH', 'COLOR_RED', 'COLOR_GREEN', 'COLOR_BLUE', 'TRIA_RIGHT_BAR', 'TRIA_DOWN_BAR', 'TRIA_LEFT_BAR', 'TRIA_UP_BAR', 'FORCE_FORCE', 'FORCE_WIND', 'FORCE_VORTEX', 'FORCE_MAGNETIC', 'FORCE_HARMONIC', 'FORCE_CHARGE', 'FORCE_LENNARDJONES', 'FORCE_TEXTURE', 'FORCE_CURVE', 'FORCE_BOID', 'FORCE_TURBULENCE', 'FORCE_DRAG', 'FORCE_SMOKEFLOW', 'NODE_INSERT_ON', 'NODE_INSERT_OFF', 'MODIFIER', 'MOD_WAVE', 'MOD_BUILD', 'MOD_DECIM', 'MOD_MIRROR', 'MOD_SOFT', 'MOD_SUBSURF', 'HOOK', 'MOD_PHYSICS', 'MOD_PARTICLES', 'MOD_BOOLEAN', 'MOD_EDGESPLIT', 'MOD_ARRAY', 'MOD_UVPROJECT', 'MOD_DISPLACE', 'MOD_CURVE', 'MOD_LATTICE', 'CONSTRAINT_DATA', 'MOD_ARMATURE', 'MOD_SHRINKWRAP', 'MOD_CAST', 'MOD_MESHDEFORM', 'MOD_BEVEL', 'MOD_SMOOTH', 'MOD_SIMPLEDEFORM', 'MOD_MASK', 'MOD_CLOTH', 'MOD_EXPLODE', 'MOD_FLUIDSIM', 'MOD_MULTIRES', 'MOD_SMOKE', 'MOD_SOLIDIFY', 'MOD_SCREW', 'MOD_VERTEX_WEIGHT', 'MOD_DYNAMICPAINT', 'MOD_REMESH', 'MOD_OCEAN', 'MOD_WARP', 'MOD_SKIN', 'MOD_TRIANGULATE', 'MOD_WIREFRAME', 'MOD_DATA_TRANSFER', 'MOD_NORMALEDIT', 'REC', 'PLAY', 'FF', 'REW', 'PAUSE', 'PREV_KEYFRAME', 'NEXT_KEYFRAME', 'PLAY_AUDIO', 'PLAY_REVERSE', 'PREVIEW_RANGE', 'ACTION_TWEAK', 'PMARKER_ACT', 'PMARKER_SEL', 'PMARKER', 'MARKER_HLT', 'MARKER', 'SPACE2', 'SPACE3', 'KEYINGSET', 'KEY_DEHLT', 'KEY_HLT', 'MUTE_IPO_OFF', 'MUTE_IPO_ON', 'VISIBLE_IPO_OFF', 'VISIBLE_IPO_ON', 'DRIVER', 'SOLO_OFF', 'SOLO_ON', 'FRAME_PREV', 'FRAME_NEXT', 'NLA_PUSHDOWN', 'IPO_CONSTANT', 'IPO_LINEAR', 'IPO_BEZIER', 'IPO_SINE', 'IPO_QUAD', 'IPO_CUBIC', 'IPO_QUART', 'IPO_QUINT', 'IPO_EXPO', 'IPO_CIRC', 'IPO_BOUNCE', 'IPO_ELASTIC', 'IPO_BACK', 'IPO_EASE_IN', 'IPO_EASE_OUT', 'IPO_EASE_IN_OUT', 'NORMALIZE_FCURVES', 'VERTEXSEL', 'EDGESEL', 'FACESEL', 'LOOPSEL', 'ROTATE', 'CURSOR', 'ROTATECOLLECTION', 'ROTATECENTER', 'ROTACTIVE', 'ALIGN', 'SMOOTHCURVE', 'SPHERECURVE', 'ROOTCURVE', 'SHARPCURVE', 'LINCURVE', 'NOCURVE', 'RNDCURVE', 'PROP_OFF', 'PROP_ON', 'PROP_CON', 'SCULPT_DYNTOPO', 'PARTICLE_POINT', 'PARTICLE_TIP', 'PARTICLE_PATH', 'MAN_TRANS', 'MAN_ROT', 'MAN_SCALE', 'MANIPUL', 'SNAP_OFF', 'SNAP_ON', 'SNAP_NORMAL', 'SNAP_GRID', 'SNAP_VERTEX', 'SNAP_EDGE', 'SNAP_FACE', 'SNAP_VOLUME', 'SNAP_INCREMENT', 'STICKY_UVS_LOC', 'STICKY_UVS_DISABLE', 'STICKY_UVS_VERT', 'CLIPUV_DEHLT', 'CLIPUV_HLT', 'SNAP_PEEL_OBJECT', 'GRID', 'PASTEDOWN', 'COPYDOWN', 'PASTEFLIPUP', 'PASTEFLIPDOWN', 'SNAP_SURFACE', 'AUTOMERGE_ON', 'AUTOMERGE_OFF', 'RETOPO', 'UV_VERTEXSEL', 'UV_EDGESEL', 'UV_FACESEL', 'UV_ISLANDSEL', 'UV_SYNC_SELECT', 'BBOX', 'WIRE', 'SOLID', 'SMOOTH', 'POTATO', 'ORTHO', 'LOCKVIEW_OFF', 'LOCKVIEW_ON', 'AXIS_SIDE', 'AXIS_FRONT', 'AXIS_TOP', 'NDOF_DOM', 'NDOF_TURN', 'NDOF_FLY', 'NDOF_TRANS', 'LAYER_USED', 'LAYER_ACTIVE', 'SORTALPHA', 'SORTBYEXT', 'SORTTIME', 'SORTSIZE', 'LONGDISPLAY', 'SHORTDISPLAY', 'GHOST', 'IMGDISPLAY', 'SAVE_AS', 'SAVE_COPY', 'BOOKMARKS', 'FONTPREVIEW', 'FILTER', 'NEWFOLDER', 'OPEN_RECENT', 'FILE_PARENT', 'FILE_REFRESH', 'FILE_FOLDER', 'FILE_BLANK', 'FILE_BLEND', 'FILE_IMAGE', 'FILE_MOVIE', 'FILE_SCRIPT', 'FILE_SOUND', 'FILE_FONT', 'FILE_TEXT', 'RECOVER_AUTO', 'SAVE_PREFS', 'LINK_BLEND', 'APPEND_BLEND', 'IMPORT', 'EXPORT', 'EXTERNAL_DATA', 'LOAD_FACTORY', 'LOOP_BACK', 'LOOP_FORWARDS', 'BACK', 'FORWARD', 'FILE_HIDDEN', 'FILE_BACKUP', 'DISK_DRIVE', 'MATPLANE', 'MATSPHERE', 'MATCUBE', 'MONKEY', 'HAIR', 'ALIASED', 'ANTIALIASED', 'MAT_SPHERE_SKY', 'WORDWRAP_OFF', 'WORDWRAP_ON', 'SYNTAX_OFF', 'SYNTAX_ON', 'LINENUMBERS_OFF', 'LINENUMBERS_ON', 'SCRIPTPLUGINS', 'SEQ_SEQUENCER', 'SEQ_PREVIEW', 'SEQ_LUMA_WAVEFORM', 'SEQ_CHROMA_SCOPE', 'SEQ_HISTOGRAM', 'SEQ_SPLITVIEW', 'IMAGE_RGB', 'IMAGE_RGB_ALPHA', 'IMAGE_ALPHA', 'IMAGE_ZDEPTH', 'IMAGEFILE', 'BRUSH_ADD', 'BRUSH_BLOB', 'BRUSH_BLUR', 'BRUSH_CLAY', 'BRUSH_CLAY_STRIPS', 'BRUSH_CLONE', 'BRUSH_CREASE', 'BRUSH_DARKEN', 'BRUSH_FILL', 'BRUSH_FLATTEN', 'BRUSH_GRAB', 'BRUSH_INFLATE', 'BRUSH_LAYER', 'BRUSH_LIGHTEN', 'BRUSH_MASK', 'BRUSH_MIX', 'BRUSH_MULTIPLY', 'BRUSH_NUDGE', 'BRUSH_PINCH', 'BRUSH_SCRAPE', 'BRUSH_SCULPT_DRAW', 'BRUSH_SMEAR', 'BRUSH_SMOOTH', 'BRUSH_SNAKE_HOOK', 'BRUSH_SOFTEN', 'BRUSH_SUBTRACT', 'BRUSH_TEXDRAW', 'BRUSH_TEXFILL', 'BRUSH_TEXMASK', 'BRUSH_THUMB', 'BRUSH_ROTATE', 'BRUSH_VERTEXDRAW', 'MATCAP_01', 'MATCAP_02', 'MATCAP_03', 'MATCAP_04', 'MATCAP_05', 'MATCAP_06', 'MATCAP_07', 'MATCAP_08', 'MATCAP_09', 'MATCAP_10', 'MATCAP_11', 'MATCAP_12', 'MATCAP_13', 'MATCAP_14', 'MATCAP_15', 'MATCAP_16', 'MATCAP_17', 'MATCAP_18', 'MATCAP_19', 'MATCAP_20', 'MATCAP_21', 'MATCAP_22', 'MATCAP_23', 'MATCAP_24', 'SMALL_TRI_RIGHT_VEC', 'KEYTYPE_KEYFRAME_VEC', 'KEYTYPE_BREAKDOWN_VEC', 'KEYTYPE_EXTREME_VEC', 'KEYTYPE_JITTER_VEC', 'KEYTYPE_MOVING_HOLD_VEC', 'COLORSET_01_VEC', 'COLORSET_02_VEC', 'COLORSET_03_VEC', 'COLORSET_04_VEC', 'COLORSET_05_VEC', 'COLORSET_06_VEC', 'COLORSET_07_VEC', 'COLORSET_08_VEC', 'COLORSET_09_VEC', 'COLORSET_10_VEC', 'COLORSET_11_VEC', 'COLORSET_12_VEC', 'COLORSET_13_VEC', 'COLORSET_14_VEC', 'COLORSET_15_VEC', 'COLORSET_16_VEC', 'COLORSET_17_VEC', 'COLORSET_18_VEC', 'COLORSET_19_VEC', 'COLORSET_20_VEC'], (optional))
        :type icon: str
        :param emboss: Draw the button itself, just the icon/text
            (type: boolean, (optional))
        :type emboss: bool
        :param icon_value: Icon Value, Override automatic icon of the item
            (type: int in [0, inf], (optional))
        :type icon_value: int
        :return: Operator properties to fill in, return when 'properties' is set to true
        :param : (type: bpy.types.OperatorProperties)
        :rtype: OperatorProperties
        """

    def operator_enum(self, operator, property):
        """operator_enum
        
        :param operator: Identifier of the operator
            (type: str, (never None))
        :type operator: str
        :param property: Identifier of property in operator
            (type: str, (never None))
        :type property: str
        """

    def operator_menu_enum(self, operator, property, text="", text_ctxt="", translate=True, icon='NONE'):
        """operator_menu_enum
        
        :param operator: Identifier of the operator
            (type: str, (never None))
        :type operator: str
        :param property: Identifier of property in operator
            (type: str, (never None))
        :type property: str
        :param text: Override automatic text of the item
            (type: str, (optional, never None))
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
            (type: str, (optional, never None))
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
            (type: boolean, (optional))
        :type translate: bool
        :param icon: Icon, Override automatic icon of the item
            (type: enum in ['NONE', 'QUESTION', 'ERROR', 'CANCEL', 'TRIA_RIGHT', 'TRIA_DOWN', 'TRIA_LEFT', 'TRIA_UP', 'ARROW_LEFTRIGHT', 'PLUS', 'DISCLOSURE_TRI_DOWN', 'DISCLOSURE_TRI_RIGHT', 'RADIOBUT_OFF', 'RADIOBUT_ON', 'MENU_PANEL', 'BLENDER', 'GRIP', 'DOT', 'COLLAPSEMENU', 'X', 'GO_LEFT', 'PLUG', 'UI', 'NODE', 'NODE_SEL', 'FULLSCREEN', 'SPLITSCREEN', 'RIGHTARROW_THIN', 'BORDERMOVE', 'VIEWZOOM', 'ZOOMIN', 'ZOOMOUT', 'PANEL_CLOSE', 'COPY_ID', 'EYEDROPPER', 'LINK_AREA', 'AUTO', 'CHECKBOX_DEHLT', 'CHECKBOX_HLT', 'UNLOCKED', 'LOCKED', 'UNPINNED', 'PINNED', 'SCREEN_BACK', 'RIGHTARROW', 'DOWNARROW_HLT', 'DOTSUP', 'DOTSDOWN', 'LINK', 'INLINK', 'PLUGIN', 'HELP', 'GHOST_ENABLED', 'COLOR', 'LINKED', 'UNLINKED', 'HAND', 'ZOOM_ALL', 'ZOOM_SELECTED', 'ZOOM_PREVIOUS', 'ZOOM_IN', 'ZOOM_OUT', 'RENDER_REGION', 'BORDER_RECT', 'BORDER_LASSO', 'FREEZE', 'STYLUS_PRESSURE', 'GHOST_DISABLED', 'NEW', 'FILE_TICK', 'QUIT', 'URL', 'RECOVER_LAST', 'FULLSCREEN_ENTER', 'FULLSCREEN_EXIT', 'BLANK1', 'LAMP', 'MATERIAL', 'TEXTURE', 'ANIM', 'WORLD', 'SCENE', 'EDIT', 'GAME', 'RADIO', 'SCRIPT', 'PARTICLES', 'PHYSICS', 'SPEAKER', 'TEXTURE_SHADED', 'VIEW3D', 'IPO', 'OOPS', 'BUTS', 'FILESEL', 'IMAGE_COL', 'INFO', 'SEQUENCE', 'TEXT', 'IMASEL', 'SOUND', 'ACTION', 'NLA', 'SCRIPTWIN', 'TIME', 'NODETREE', 'LOGIC', 'CONSOLE', 'PREFERENCES', 'CLIP', 'ASSET_MANAGER', 'OBJECT_DATAMODE', 'EDITMODE_HLT', 'FACESEL_HLT', 'VPAINT_HLT', 'TPAINT_HLT', 'WPAINT_HLT', 'SCULPTMODE_HLT', 'POSE_HLT', 'PARTICLEMODE', 'LIGHTPAINT', 'SCENE_DATA', 'RENDERLAYERS', 'WORLD_DATA', 'OBJECT_DATA', 'MESH_DATA', 'CURVE_DATA', 'META_DATA', 'LATTICE_DATA', 'LAMP_DATA', 'MATERIAL_DATA', 'TEXTURE_DATA', 'ANIM_DATA', 'CAMERA_DATA', 'PARTICLE_DATA', 'LIBRARY_DATA_DIRECT', 'GROUP', 'ARMATURE_DATA', 'POSE_DATA', 'BONE_DATA', 'CONSTRAINT', 'SHAPEKEY_DATA', 'CONSTRAINT_BONE', 'CAMERA_STEREO', 'PACKAGE', 'UGLYPACKAGE', 'BRUSH_DATA', 'IMAGE_DATA', 'FILE', 'FCURVE', 'FONT_DATA', 'RENDER_RESULT', 'SURFACE_DATA', 'EMPTY_DATA', 'SETTINGS', 'RENDER_ANIMATION', 'RENDER_STILL', 'LIBRARY_DATA_BROKEN', 'BOIDS', 'STRANDS', 'LIBRARY_DATA_INDIRECT', 'GREASEPENCIL', 'LINE_DATA', 'GROUP_BONE', 'GROUP_VERTEX', 'GROUP_VCOL', 'GROUP_UVS', 'RNA', 'RNA_ADD', 'OUTLINER_OB_EMPTY', 'OUTLINER_OB_MESH', 'OUTLINER_OB_CURVE', 'OUTLINER_OB_LATTICE', 'OUTLINER_OB_META', 'OUTLINER_OB_LAMP', 'OUTLINER_OB_CAMERA', 'OUTLINER_OB_ARMATURE', 'OUTLINER_OB_FONT', 'OUTLINER_OB_SURFACE', 'OUTLINER_OB_SPEAKER', 'RESTRICT_COLOR_OFF', 'RESTRICT_COLOR_ON', 'RESTRICT_VIEW_OFF', 'RESTRICT_VIEW_ON', 'RESTRICT_SELECT_OFF', 'RESTRICT_SELECT_ON', 'RESTRICT_RENDER_OFF', 'RESTRICT_RENDER_ON', 'OUTLINER_DATA_EMPTY', 'OUTLINER_DATA_MESH', 'OUTLINER_DATA_CURVE', 'OUTLINER_DATA_LATTICE', 'OUTLINER_DATA_META', 'OUTLINER_DATA_LAMP', 'OUTLINER_DATA_CAMERA', 'OUTLINER_DATA_ARMATURE', 'OUTLINER_DATA_FONT', 'OUTLINER_DATA_SURFACE', 'OUTLINER_DATA_SPEAKER', 'OUTLINER_DATA_POSE', 'MESH_PLANE', 'MESH_CUBE', 'MESH_CIRCLE', 'MESH_UVSPHERE', 'MESH_ICOSPHERE', 'MESH_GRID', 'MESH_MONKEY', 'MESH_CYLINDER', 'MESH_TORUS', 'MESH_CONE', 'MESH_CAPSULE', 'LAMP_POINT', 'LAMP_SUN', 'LAMP_SPOT', 'LAMP_HEMI', 'LAMP_AREA', 'META_EMPTY', 'META_PLANE', 'META_CUBE', 'META_BALL', 'META_ELLIPSOID', 'META_CAPSULE', 'SURFACE_NCURVE', 'SURFACE_NCIRCLE', 'SURFACE_NSURFACE', 'SURFACE_NCYLINDER', 'SURFACE_NSPHERE', 'SURFACE_NTORUS', 'CURVE_BEZCURVE', 'CURVE_BEZCIRCLE', 'CURVE_NCURVE', 'CURVE_NCIRCLE', 'CURVE_PATH', 'COLOR_RED', 'COLOR_GREEN', 'COLOR_BLUE', 'TRIA_RIGHT_BAR', 'TRIA_DOWN_BAR', 'TRIA_LEFT_BAR', 'TRIA_UP_BAR', 'FORCE_FORCE', 'FORCE_WIND', 'FORCE_VORTEX', 'FORCE_MAGNETIC', 'FORCE_HARMONIC', 'FORCE_CHARGE', 'FORCE_LENNARDJONES', 'FORCE_TEXTURE', 'FORCE_CURVE', 'FORCE_BOID', 'FORCE_TURBULENCE', 'FORCE_DRAG', 'FORCE_SMOKEFLOW', 'NODE_INSERT_ON', 'NODE_INSERT_OFF', 'MODIFIER', 'MOD_WAVE', 'MOD_BUILD', 'MOD_DECIM', 'MOD_MIRROR', 'MOD_SOFT', 'MOD_SUBSURF', 'HOOK', 'MOD_PHYSICS', 'MOD_PARTICLES', 'MOD_BOOLEAN', 'MOD_EDGESPLIT', 'MOD_ARRAY', 'MOD_UVPROJECT', 'MOD_DISPLACE', 'MOD_CURVE', 'MOD_LATTICE', 'CONSTRAINT_DATA', 'MOD_ARMATURE', 'MOD_SHRINKWRAP', 'MOD_CAST', 'MOD_MESHDEFORM', 'MOD_BEVEL', 'MOD_SMOOTH', 'MOD_SIMPLEDEFORM', 'MOD_MASK', 'MOD_CLOTH', 'MOD_EXPLODE', 'MOD_FLUIDSIM', 'MOD_MULTIRES', 'MOD_SMOKE', 'MOD_SOLIDIFY', 'MOD_SCREW', 'MOD_VERTEX_WEIGHT', 'MOD_DYNAMICPAINT', 'MOD_REMESH', 'MOD_OCEAN', 'MOD_WARP', 'MOD_SKIN', 'MOD_TRIANGULATE', 'MOD_WIREFRAME', 'MOD_DATA_TRANSFER', 'MOD_NORMALEDIT', 'REC', 'PLAY', 'FF', 'REW', 'PAUSE', 'PREV_KEYFRAME', 'NEXT_KEYFRAME', 'PLAY_AUDIO', 'PLAY_REVERSE', 'PREVIEW_RANGE', 'ACTION_TWEAK', 'PMARKER_ACT', 'PMARKER_SEL', 'PMARKER', 'MARKER_HLT', 'MARKER', 'SPACE2', 'SPACE3', 'KEYINGSET', 'KEY_DEHLT', 'KEY_HLT', 'MUTE_IPO_OFF', 'MUTE_IPO_ON', 'VISIBLE_IPO_OFF', 'VISIBLE_IPO_ON', 'DRIVER', 'SOLO_OFF', 'SOLO_ON', 'FRAME_PREV', 'FRAME_NEXT', 'NLA_PUSHDOWN', 'IPO_CONSTANT', 'IPO_LINEAR', 'IPO_BEZIER', 'IPO_SINE', 'IPO_QUAD', 'IPO_CUBIC', 'IPO_QUART', 'IPO_QUINT', 'IPO_EXPO', 'IPO_CIRC', 'IPO_BOUNCE', 'IPO_ELASTIC', 'IPO_BACK', 'IPO_EASE_IN', 'IPO_EASE_OUT', 'IPO_EASE_IN_OUT', 'NORMALIZE_FCURVES', 'VERTEXSEL', 'EDGESEL', 'FACESEL', 'LOOPSEL', 'ROTATE', 'CURSOR', 'ROTATECOLLECTION', 'ROTATECENTER', 'ROTACTIVE', 'ALIGN', 'SMOOTHCURVE', 'SPHERECURVE', 'ROOTCURVE', 'SHARPCURVE', 'LINCURVE', 'NOCURVE', 'RNDCURVE', 'PROP_OFF', 'PROP_ON', 'PROP_CON', 'SCULPT_DYNTOPO', 'PARTICLE_POINT', 'PARTICLE_TIP', 'PARTICLE_PATH', 'MAN_TRANS', 'MAN_ROT', 'MAN_SCALE', 'MANIPUL', 'SNAP_OFF', 'SNAP_ON', 'SNAP_NORMAL', 'SNAP_GRID', 'SNAP_VERTEX', 'SNAP_EDGE', 'SNAP_FACE', 'SNAP_VOLUME', 'SNAP_INCREMENT', 'STICKY_UVS_LOC', 'STICKY_UVS_DISABLE', 'STICKY_UVS_VERT', 'CLIPUV_DEHLT', 'CLIPUV_HLT', 'SNAP_PEEL_OBJECT', 'GRID', 'PASTEDOWN', 'COPYDOWN', 'PASTEFLIPUP', 'PASTEFLIPDOWN', 'SNAP_SURFACE', 'AUTOMERGE_ON', 'AUTOMERGE_OFF', 'RETOPO', 'UV_VERTEXSEL', 'UV_EDGESEL', 'UV_FACESEL', 'UV_ISLANDSEL', 'UV_SYNC_SELECT', 'BBOX', 'WIRE', 'SOLID', 'SMOOTH', 'POTATO', 'ORTHO', 'LOCKVIEW_OFF', 'LOCKVIEW_ON', 'AXIS_SIDE', 'AXIS_FRONT', 'AXIS_TOP', 'NDOF_DOM', 'NDOF_TURN', 'NDOF_FLY', 'NDOF_TRANS', 'LAYER_USED', 'LAYER_ACTIVE', 'SORTALPHA', 'SORTBYEXT', 'SORTTIME', 'SORTSIZE', 'LONGDISPLAY', 'SHORTDISPLAY', 'GHOST', 'IMGDISPLAY', 'SAVE_AS', 'SAVE_COPY', 'BOOKMARKS', 'FONTPREVIEW', 'FILTER', 'NEWFOLDER', 'OPEN_RECENT', 'FILE_PARENT', 'FILE_REFRESH', 'FILE_FOLDER', 'FILE_BLANK', 'FILE_BLEND', 'FILE_IMAGE', 'FILE_MOVIE', 'FILE_SCRIPT', 'FILE_SOUND', 'FILE_FONT', 'FILE_TEXT', 'RECOVER_AUTO', 'SAVE_PREFS', 'LINK_BLEND', 'APPEND_BLEND', 'IMPORT', 'EXPORT', 'EXTERNAL_DATA', 'LOAD_FACTORY', 'LOOP_BACK', 'LOOP_FORWARDS', 'BACK', 'FORWARD', 'FILE_HIDDEN', 'FILE_BACKUP', 'DISK_DRIVE', 'MATPLANE', 'MATSPHERE', 'MATCUBE', 'MONKEY', 'HAIR', 'ALIASED', 'ANTIALIASED', 'MAT_SPHERE_SKY', 'WORDWRAP_OFF', 'WORDWRAP_ON', 'SYNTAX_OFF', 'SYNTAX_ON', 'LINENUMBERS_OFF', 'LINENUMBERS_ON', 'SCRIPTPLUGINS', 'SEQ_SEQUENCER', 'SEQ_PREVIEW', 'SEQ_LUMA_WAVEFORM', 'SEQ_CHROMA_SCOPE', 'SEQ_HISTOGRAM', 'SEQ_SPLITVIEW', 'IMAGE_RGB', 'IMAGE_RGB_ALPHA', 'IMAGE_ALPHA', 'IMAGE_ZDEPTH', 'IMAGEFILE', 'BRUSH_ADD', 'BRUSH_BLOB', 'BRUSH_BLUR', 'BRUSH_CLAY', 'BRUSH_CLAY_STRIPS', 'BRUSH_CLONE', 'BRUSH_CREASE', 'BRUSH_DARKEN', 'BRUSH_FILL', 'BRUSH_FLATTEN', 'BRUSH_GRAB', 'BRUSH_INFLATE', 'BRUSH_LAYER', 'BRUSH_LIGHTEN', 'BRUSH_MASK', 'BRUSH_MIX', 'BRUSH_MULTIPLY', 'BRUSH_NUDGE', 'BRUSH_PINCH', 'BRUSH_SCRAPE', 'BRUSH_SCULPT_DRAW', 'BRUSH_SMEAR', 'BRUSH_SMOOTH', 'BRUSH_SNAKE_HOOK', 'BRUSH_SOFTEN', 'BRUSH_SUBTRACT', 'BRUSH_TEXDRAW', 'BRUSH_TEXFILL', 'BRUSH_TEXMASK', 'BRUSH_THUMB', 'BRUSH_ROTATE', 'BRUSH_VERTEXDRAW', 'MATCAP_01', 'MATCAP_02', 'MATCAP_03', 'MATCAP_04', 'MATCAP_05', 'MATCAP_06', 'MATCAP_07', 'MATCAP_08', 'MATCAP_09', 'MATCAP_10', 'MATCAP_11', 'MATCAP_12', 'MATCAP_13', 'MATCAP_14', 'MATCAP_15', 'MATCAP_16', 'MATCAP_17', 'MATCAP_18', 'MATCAP_19', 'MATCAP_20', 'MATCAP_21', 'MATCAP_22', 'MATCAP_23', 'MATCAP_24', 'SMALL_TRI_RIGHT_VEC', 'KEYTYPE_KEYFRAME_VEC', 'KEYTYPE_BREAKDOWN_VEC', 'KEYTYPE_EXTREME_VEC', 'KEYTYPE_JITTER_VEC', 'KEYTYPE_MOVING_HOLD_VEC', 'COLORSET_01_VEC', 'COLORSET_02_VEC', 'COLORSET_03_VEC', 'COLORSET_04_VEC', 'COLORSET_05_VEC', 'COLORSET_06_VEC', 'COLORSET_07_VEC', 'COLORSET_08_VEC', 'COLORSET_09_VEC', 'COLORSET_10_VEC', 'COLORSET_11_VEC', 'COLORSET_12_VEC', 'COLORSET_13_VEC', 'COLORSET_14_VEC', 'COLORSET_15_VEC', 'COLORSET_16_VEC', 'COLORSET_17_VEC', 'COLORSET_18_VEC', 'COLORSET_19_VEC', 'COLORSET_20_VEC'], (optional))
        :type icon: str
        """

    def label(self, text="", text_ctxt="", translate=True, icon='NONE', icon_value=0):
        """Item. Displays text and/or icon in the layout
        
        :param text: Override automatic text of the item
            (type: str, (optional, never None))
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
            (type: str, (optional, never None))
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
            (type: boolean, (optional))
        :type translate: bool
        :param icon: Icon, Override automatic icon of the item
            (type: enum in ['NONE', 'QUESTION', 'ERROR', 'CANCEL', 'TRIA_RIGHT', 'TRIA_DOWN', 'TRIA_LEFT', 'TRIA_UP', 'ARROW_LEFTRIGHT', 'PLUS', 'DISCLOSURE_TRI_DOWN', 'DISCLOSURE_TRI_RIGHT', 'RADIOBUT_OFF', 'RADIOBUT_ON', 'MENU_PANEL', 'BLENDER', 'GRIP', 'DOT', 'COLLAPSEMENU', 'X', 'GO_LEFT', 'PLUG', 'UI', 'NODE', 'NODE_SEL', 'FULLSCREEN', 'SPLITSCREEN', 'RIGHTARROW_THIN', 'BORDERMOVE', 'VIEWZOOM', 'ZOOMIN', 'ZOOMOUT', 'PANEL_CLOSE', 'COPY_ID', 'EYEDROPPER', 'LINK_AREA', 'AUTO', 'CHECKBOX_DEHLT', 'CHECKBOX_HLT', 'UNLOCKED', 'LOCKED', 'UNPINNED', 'PINNED', 'SCREEN_BACK', 'RIGHTARROW', 'DOWNARROW_HLT', 'DOTSUP', 'DOTSDOWN', 'LINK', 'INLINK', 'PLUGIN', 'HELP', 'GHOST_ENABLED', 'COLOR', 'LINKED', 'UNLINKED', 'HAND', 'ZOOM_ALL', 'ZOOM_SELECTED', 'ZOOM_PREVIOUS', 'ZOOM_IN', 'ZOOM_OUT', 'RENDER_REGION', 'BORDER_RECT', 'BORDER_LASSO', 'FREEZE', 'STYLUS_PRESSURE', 'GHOST_DISABLED', 'NEW', 'FILE_TICK', 'QUIT', 'URL', 'RECOVER_LAST', 'FULLSCREEN_ENTER', 'FULLSCREEN_EXIT', 'BLANK1', 'LAMP', 'MATERIAL', 'TEXTURE', 'ANIM', 'WORLD', 'SCENE', 'EDIT', 'GAME', 'RADIO', 'SCRIPT', 'PARTICLES', 'PHYSICS', 'SPEAKER', 'TEXTURE_SHADED', 'VIEW3D', 'IPO', 'OOPS', 'BUTS', 'FILESEL', 'IMAGE_COL', 'INFO', 'SEQUENCE', 'TEXT', 'IMASEL', 'SOUND', 'ACTION', 'NLA', 'SCRIPTWIN', 'TIME', 'NODETREE', 'LOGIC', 'CONSOLE', 'PREFERENCES', 'CLIP', 'ASSET_MANAGER', 'OBJECT_DATAMODE', 'EDITMODE_HLT', 'FACESEL_HLT', 'VPAINT_HLT', 'TPAINT_HLT', 'WPAINT_HLT', 'SCULPTMODE_HLT', 'POSE_HLT', 'PARTICLEMODE', 'LIGHTPAINT', 'SCENE_DATA', 'RENDERLAYERS', 'WORLD_DATA', 'OBJECT_DATA', 'MESH_DATA', 'CURVE_DATA', 'META_DATA', 'LATTICE_DATA', 'LAMP_DATA', 'MATERIAL_DATA', 'TEXTURE_DATA', 'ANIM_DATA', 'CAMERA_DATA', 'PARTICLE_DATA', 'LIBRARY_DATA_DIRECT', 'GROUP', 'ARMATURE_DATA', 'POSE_DATA', 'BONE_DATA', 'CONSTRAINT', 'SHAPEKEY_DATA', 'CONSTRAINT_BONE', 'CAMERA_STEREO', 'PACKAGE', 'UGLYPACKAGE', 'BRUSH_DATA', 'IMAGE_DATA', 'FILE', 'FCURVE', 'FONT_DATA', 'RENDER_RESULT', 'SURFACE_DATA', 'EMPTY_DATA', 'SETTINGS', 'RENDER_ANIMATION', 'RENDER_STILL', 'LIBRARY_DATA_BROKEN', 'BOIDS', 'STRANDS', 'LIBRARY_DATA_INDIRECT', 'GREASEPENCIL', 'LINE_DATA', 'GROUP_BONE', 'GROUP_VERTEX', 'GROUP_VCOL', 'GROUP_UVS', 'RNA', 'RNA_ADD', 'OUTLINER_OB_EMPTY', 'OUTLINER_OB_MESH', 'OUTLINER_OB_CURVE', 'OUTLINER_OB_LATTICE', 'OUTLINER_OB_META', 'OUTLINER_OB_LAMP', 'OUTLINER_OB_CAMERA', 'OUTLINER_OB_ARMATURE', 'OUTLINER_OB_FONT', 'OUTLINER_OB_SURFACE', 'OUTLINER_OB_SPEAKER', 'RESTRICT_COLOR_OFF', 'RESTRICT_COLOR_ON', 'RESTRICT_VIEW_OFF', 'RESTRICT_VIEW_ON', 'RESTRICT_SELECT_OFF', 'RESTRICT_SELECT_ON', 'RESTRICT_RENDER_OFF', 'RESTRICT_RENDER_ON', 'OUTLINER_DATA_EMPTY', 'OUTLINER_DATA_MESH', 'OUTLINER_DATA_CURVE', 'OUTLINER_DATA_LATTICE', 'OUTLINER_DATA_META', 'OUTLINER_DATA_LAMP', 'OUTLINER_DATA_CAMERA', 'OUTLINER_DATA_ARMATURE', 'OUTLINER_DATA_FONT', 'OUTLINER_DATA_SURFACE', 'OUTLINER_DATA_SPEAKER', 'OUTLINER_DATA_POSE', 'MESH_PLANE', 'MESH_CUBE', 'MESH_CIRCLE', 'MESH_UVSPHERE', 'MESH_ICOSPHERE', 'MESH_GRID', 'MESH_MONKEY', 'MESH_CYLINDER', 'MESH_TORUS', 'MESH_CONE', 'MESH_CAPSULE', 'LAMP_POINT', 'LAMP_SUN', 'LAMP_SPOT', 'LAMP_HEMI', 'LAMP_AREA', 'META_EMPTY', 'META_PLANE', 'META_CUBE', 'META_BALL', 'META_ELLIPSOID', 'META_CAPSULE', 'SURFACE_NCURVE', 'SURFACE_NCIRCLE', 'SURFACE_NSURFACE', 'SURFACE_NCYLINDER', 'SURFACE_NSPHERE', 'SURFACE_NTORUS', 'CURVE_BEZCURVE', 'CURVE_BEZCIRCLE', 'CURVE_NCURVE', 'CURVE_NCIRCLE', 'CURVE_PATH', 'COLOR_RED', 'COLOR_GREEN', 'COLOR_BLUE', 'TRIA_RIGHT_BAR', 'TRIA_DOWN_BAR', 'TRIA_LEFT_BAR', 'TRIA_UP_BAR', 'FORCE_FORCE', 'FORCE_WIND', 'FORCE_VORTEX', 'FORCE_MAGNETIC', 'FORCE_HARMONIC', 'FORCE_CHARGE', 'FORCE_LENNARDJONES', 'FORCE_TEXTURE', 'FORCE_CURVE', 'FORCE_BOID', 'FORCE_TURBULENCE', 'FORCE_DRAG', 'FORCE_SMOKEFLOW', 'NODE_INSERT_ON', 'NODE_INSERT_OFF', 'MODIFIER', 'MOD_WAVE', 'MOD_BUILD', 'MOD_DECIM', 'MOD_MIRROR', 'MOD_SOFT', 'MOD_SUBSURF', 'HOOK', 'MOD_PHYSICS', 'MOD_PARTICLES', 'MOD_BOOLEAN', 'MOD_EDGESPLIT', 'MOD_ARRAY', 'MOD_UVPROJECT', 'MOD_DISPLACE', 'MOD_CURVE', 'MOD_LATTICE', 'CONSTRAINT_DATA', 'MOD_ARMATURE', 'MOD_SHRINKWRAP', 'MOD_CAST', 'MOD_MESHDEFORM', 'MOD_BEVEL', 'MOD_SMOOTH', 'MOD_SIMPLEDEFORM', 'MOD_MASK', 'MOD_CLOTH', 'MOD_EXPLODE', 'MOD_FLUIDSIM', 'MOD_MULTIRES', 'MOD_SMOKE', 'MOD_SOLIDIFY', 'MOD_SCREW', 'MOD_VERTEX_WEIGHT', 'MOD_DYNAMICPAINT', 'MOD_REMESH', 'MOD_OCEAN', 'MOD_WARP', 'MOD_SKIN', 'MOD_TRIANGULATE', 'MOD_WIREFRAME', 'MOD_DATA_TRANSFER', 'MOD_NORMALEDIT', 'REC', 'PLAY', 'FF', 'REW', 'PAUSE', 'PREV_KEYFRAME', 'NEXT_KEYFRAME', 'PLAY_AUDIO', 'PLAY_REVERSE', 'PREVIEW_RANGE', 'ACTION_TWEAK', 'PMARKER_ACT', 'PMARKER_SEL', 'PMARKER', 'MARKER_HLT', 'MARKER', 'SPACE2', 'SPACE3', 'KEYINGSET', 'KEY_DEHLT', 'KEY_HLT', 'MUTE_IPO_OFF', 'MUTE_IPO_ON', 'VISIBLE_IPO_OFF', 'VISIBLE_IPO_ON', 'DRIVER', 'SOLO_OFF', 'SOLO_ON', 'FRAME_PREV', 'FRAME_NEXT', 'NLA_PUSHDOWN', 'IPO_CONSTANT', 'IPO_LINEAR', 'IPO_BEZIER', 'IPO_SINE', 'IPO_QUAD', 'IPO_CUBIC', 'IPO_QUART', 'IPO_QUINT', 'IPO_EXPO', 'IPO_CIRC', 'IPO_BOUNCE', 'IPO_ELASTIC', 'IPO_BACK', 'IPO_EASE_IN', 'IPO_EASE_OUT', 'IPO_EASE_IN_OUT', 'NORMALIZE_FCURVES', 'VERTEXSEL', 'EDGESEL', 'FACESEL', 'LOOPSEL', 'ROTATE', 'CURSOR', 'ROTATECOLLECTION', 'ROTATECENTER', 'ROTACTIVE', 'ALIGN', 'SMOOTHCURVE', 'SPHERECURVE', 'ROOTCURVE', 'SHARPCURVE', 'LINCURVE', 'NOCURVE', 'RNDCURVE', 'PROP_OFF', 'PROP_ON', 'PROP_CON', 'SCULPT_DYNTOPO', 'PARTICLE_POINT', 'PARTICLE_TIP', 'PARTICLE_PATH', 'MAN_TRANS', 'MAN_ROT', 'MAN_SCALE', 'MANIPUL', 'SNAP_OFF', 'SNAP_ON', 'SNAP_NORMAL', 'SNAP_GRID', 'SNAP_VERTEX', 'SNAP_EDGE', 'SNAP_FACE', 'SNAP_VOLUME', 'SNAP_INCREMENT', 'STICKY_UVS_LOC', 'STICKY_UVS_DISABLE', 'STICKY_UVS_VERT', 'CLIPUV_DEHLT', 'CLIPUV_HLT', 'SNAP_PEEL_OBJECT', 'GRID', 'PASTEDOWN', 'COPYDOWN', 'PASTEFLIPUP', 'PASTEFLIPDOWN', 'SNAP_SURFACE', 'AUTOMERGE_ON', 'AUTOMERGE_OFF', 'RETOPO', 'UV_VERTEXSEL', 'UV_EDGESEL', 'UV_FACESEL', 'UV_ISLANDSEL', 'UV_SYNC_SELECT', 'BBOX', 'WIRE', 'SOLID', 'SMOOTH', 'POTATO', 'ORTHO', 'LOCKVIEW_OFF', 'LOCKVIEW_ON', 'AXIS_SIDE', 'AXIS_FRONT', 'AXIS_TOP', 'NDOF_DOM', 'NDOF_TURN', 'NDOF_FLY', 'NDOF_TRANS', 'LAYER_USED', 'LAYER_ACTIVE', 'SORTALPHA', 'SORTBYEXT', 'SORTTIME', 'SORTSIZE', 'LONGDISPLAY', 'SHORTDISPLAY', 'GHOST', 'IMGDISPLAY', 'SAVE_AS', 'SAVE_COPY', 'BOOKMARKS', 'FONTPREVIEW', 'FILTER', 'NEWFOLDER', 'OPEN_RECENT', 'FILE_PARENT', 'FILE_REFRESH', 'FILE_FOLDER', 'FILE_BLANK', 'FILE_BLEND', 'FILE_IMAGE', 'FILE_MOVIE', 'FILE_SCRIPT', 'FILE_SOUND', 'FILE_FONT', 'FILE_TEXT', 'RECOVER_AUTO', 'SAVE_PREFS', 'LINK_BLEND', 'APPEND_BLEND', 'IMPORT', 'EXPORT', 'EXTERNAL_DATA', 'LOAD_FACTORY', 'LOOP_BACK', 'LOOP_FORWARDS', 'BACK', 'FORWARD', 'FILE_HIDDEN', 'FILE_BACKUP', 'DISK_DRIVE', 'MATPLANE', 'MATSPHERE', 'MATCUBE', 'MONKEY', 'HAIR', 'ALIASED', 'ANTIALIASED', 'MAT_SPHERE_SKY', 'WORDWRAP_OFF', 'WORDWRAP_ON', 'SYNTAX_OFF', 'SYNTAX_ON', 'LINENUMBERS_OFF', 'LINENUMBERS_ON', 'SCRIPTPLUGINS', 'SEQ_SEQUENCER', 'SEQ_PREVIEW', 'SEQ_LUMA_WAVEFORM', 'SEQ_CHROMA_SCOPE', 'SEQ_HISTOGRAM', 'SEQ_SPLITVIEW', 'IMAGE_RGB', 'IMAGE_RGB_ALPHA', 'IMAGE_ALPHA', 'IMAGE_ZDEPTH', 'IMAGEFILE', 'BRUSH_ADD', 'BRUSH_BLOB', 'BRUSH_BLUR', 'BRUSH_CLAY', 'BRUSH_CLAY_STRIPS', 'BRUSH_CLONE', 'BRUSH_CREASE', 'BRUSH_DARKEN', 'BRUSH_FILL', 'BRUSH_FLATTEN', 'BRUSH_GRAB', 'BRUSH_INFLATE', 'BRUSH_LAYER', 'BRUSH_LIGHTEN', 'BRUSH_MASK', 'BRUSH_MIX', 'BRUSH_MULTIPLY', 'BRUSH_NUDGE', 'BRUSH_PINCH', 'BRUSH_SCRAPE', 'BRUSH_SCULPT_DRAW', 'BRUSH_SMEAR', 'BRUSH_SMOOTH', 'BRUSH_SNAKE_HOOK', 'BRUSH_SOFTEN', 'BRUSH_SUBTRACT', 'BRUSH_TEXDRAW', 'BRUSH_TEXFILL', 'BRUSH_TEXMASK', 'BRUSH_THUMB', 'BRUSH_ROTATE', 'BRUSH_VERTEXDRAW', 'MATCAP_01', 'MATCAP_02', 'MATCAP_03', 'MATCAP_04', 'MATCAP_05', 'MATCAP_06', 'MATCAP_07', 'MATCAP_08', 'MATCAP_09', 'MATCAP_10', 'MATCAP_11', 'MATCAP_12', 'MATCAP_13', 'MATCAP_14', 'MATCAP_15', 'MATCAP_16', 'MATCAP_17', 'MATCAP_18', 'MATCAP_19', 'MATCAP_20', 'MATCAP_21', 'MATCAP_22', 'MATCAP_23', 'MATCAP_24', 'SMALL_TRI_RIGHT_VEC', 'KEYTYPE_KEYFRAME_VEC', 'KEYTYPE_BREAKDOWN_VEC', 'KEYTYPE_EXTREME_VEC', 'KEYTYPE_JITTER_VEC', 'KEYTYPE_MOVING_HOLD_VEC', 'COLORSET_01_VEC', 'COLORSET_02_VEC', 'COLORSET_03_VEC', 'COLORSET_04_VEC', 'COLORSET_05_VEC', 'COLORSET_06_VEC', 'COLORSET_07_VEC', 'COLORSET_08_VEC', 'COLORSET_09_VEC', 'COLORSET_10_VEC', 'COLORSET_11_VEC', 'COLORSET_12_VEC', 'COLORSET_13_VEC', 'COLORSET_14_VEC', 'COLORSET_15_VEC', 'COLORSET_16_VEC', 'COLORSET_17_VEC', 'COLORSET_18_VEC', 'COLORSET_19_VEC', 'COLORSET_20_VEC'], (optional))
        :type icon: str
        :param icon_value: Icon Value, Override automatic icon of the item
            (type: int in [0, inf], (optional))
        :type icon_value: int
        """

    def menu(self, menu, text="", text_ctxt="", translate=True, icon='NONE', icon_value=0):
        """menu
        
        :param menu: Identifier of the menu
            (type: str, (never None))
        :type menu: str
        :param text: Override automatic text of the item
            (type: str, (optional, never None))
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
            (type: str, (optional, never None))
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
            (type: boolean, (optional))
        :type translate: bool
        :param icon: Icon, Override automatic icon of the item
            (type: enum in ['NONE', 'QUESTION', 'ERROR', 'CANCEL', 'TRIA_RIGHT', 'TRIA_DOWN', 'TRIA_LEFT', 'TRIA_UP', 'ARROW_LEFTRIGHT', 'PLUS', 'DISCLOSURE_TRI_DOWN', 'DISCLOSURE_TRI_RIGHT', 'RADIOBUT_OFF', 'RADIOBUT_ON', 'MENU_PANEL', 'BLENDER', 'GRIP', 'DOT', 'COLLAPSEMENU', 'X', 'GO_LEFT', 'PLUG', 'UI', 'NODE', 'NODE_SEL', 'FULLSCREEN', 'SPLITSCREEN', 'RIGHTARROW_THIN', 'BORDERMOVE', 'VIEWZOOM', 'ZOOMIN', 'ZOOMOUT', 'PANEL_CLOSE', 'COPY_ID', 'EYEDROPPER', 'LINK_AREA', 'AUTO', 'CHECKBOX_DEHLT', 'CHECKBOX_HLT', 'UNLOCKED', 'LOCKED', 'UNPINNED', 'PINNED', 'SCREEN_BACK', 'RIGHTARROW', 'DOWNARROW_HLT', 'DOTSUP', 'DOTSDOWN', 'LINK', 'INLINK', 'PLUGIN', 'HELP', 'GHOST_ENABLED', 'COLOR', 'LINKED', 'UNLINKED', 'HAND', 'ZOOM_ALL', 'ZOOM_SELECTED', 'ZOOM_PREVIOUS', 'ZOOM_IN', 'ZOOM_OUT', 'RENDER_REGION', 'BORDER_RECT', 'BORDER_LASSO', 'FREEZE', 'STYLUS_PRESSURE', 'GHOST_DISABLED', 'NEW', 'FILE_TICK', 'QUIT', 'URL', 'RECOVER_LAST', 'FULLSCREEN_ENTER', 'FULLSCREEN_EXIT', 'BLANK1', 'LAMP', 'MATERIAL', 'TEXTURE', 'ANIM', 'WORLD', 'SCENE', 'EDIT', 'GAME', 'RADIO', 'SCRIPT', 'PARTICLES', 'PHYSICS', 'SPEAKER', 'TEXTURE_SHADED', 'VIEW3D', 'IPO', 'OOPS', 'BUTS', 'FILESEL', 'IMAGE_COL', 'INFO', 'SEQUENCE', 'TEXT', 'IMASEL', 'SOUND', 'ACTION', 'NLA', 'SCRIPTWIN', 'TIME', 'NODETREE', 'LOGIC', 'CONSOLE', 'PREFERENCES', 'CLIP', 'ASSET_MANAGER', 'OBJECT_DATAMODE', 'EDITMODE_HLT', 'FACESEL_HLT', 'VPAINT_HLT', 'TPAINT_HLT', 'WPAINT_HLT', 'SCULPTMODE_HLT', 'POSE_HLT', 'PARTICLEMODE', 'LIGHTPAINT', 'SCENE_DATA', 'RENDERLAYERS', 'WORLD_DATA', 'OBJECT_DATA', 'MESH_DATA', 'CURVE_DATA', 'META_DATA', 'LATTICE_DATA', 'LAMP_DATA', 'MATERIAL_DATA', 'TEXTURE_DATA', 'ANIM_DATA', 'CAMERA_DATA', 'PARTICLE_DATA', 'LIBRARY_DATA_DIRECT', 'GROUP', 'ARMATURE_DATA', 'POSE_DATA', 'BONE_DATA', 'CONSTRAINT', 'SHAPEKEY_DATA', 'CONSTRAINT_BONE', 'CAMERA_STEREO', 'PACKAGE', 'UGLYPACKAGE', 'BRUSH_DATA', 'IMAGE_DATA', 'FILE', 'FCURVE', 'FONT_DATA', 'RENDER_RESULT', 'SURFACE_DATA', 'EMPTY_DATA', 'SETTINGS', 'RENDER_ANIMATION', 'RENDER_STILL', 'LIBRARY_DATA_BROKEN', 'BOIDS', 'STRANDS', 'LIBRARY_DATA_INDIRECT', 'GREASEPENCIL', 'LINE_DATA', 'GROUP_BONE', 'GROUP_VERTEX', 'GROUP_VCOL', 'GROUP_UVS', 'RNA', 'RNA_ADD', 'OUTLINER_OB_EMPTY', 'OUTLINER_OB_MESH', 'OUTLINER_OB_CURVE', 'OUTLINER_OB_LATTICE', 'OUTLINER_OB_META', 'OUTLINER_OB_LAMP', 'OUTLINER_OB_CAMERA', 'OUTLINER_OB_ARMATURE', 'OUTLINER_OB_FONT', 'OUTLINER_OB_SURFACE', 'OUTLINER_OB_SPEAKER', 'RESTRICT_COLOR_OFF', 'RESTRICT_COLOR_ON', 'RESTRICT_VIEW_OFF', 'RESTRICT_VIEW_ON', 'RESTRICT_SELECT_OFF', 'RESTRICT_SELECT_ON', 'RESTRICT_RENDER_OFF', 'RESTRICT_RENDER_ON', 'OUTLINER_DATA_EMPTY', 'OUTLINER_DATA_MESH', 'OUTLINER_DATA_CURVE', 'OUTLINER_DATA_LATTICE', 'OUTLINER_DATA_META', 'OUTLINER_DATA_LAMP', 'OUTLINER_DATA_CAMERA', 'OUTLINER_DATA_ARMATURE', 'OUTLINER_DATA_FONT', 'OUTLINER_DATA_SURFACE', 'OUTLINER_DATA_SPEAKER', 'OUTLINER_DATA_POSE', 'MESH_PLANE', 'MESH_CUBE', 'MESH_CIRCLE', 'MESH_UVSPHERE', 'MESH_ICOSPHERE', 'MESH_GRID', 'MESH_MONKEY', 'MESH_CYLINDER', 'MESH_TORUS', 'MESH_CONE', 'MESH_CAPSULE', 'LAMP_POINT', 'LAMP_SUN', 'LAMP_SPOT', 'LAMP_HEMI', 'LAMP_AREA', 'META_EMPTY', 'META_PLANE', 'META_CUBE', 'META_BALL', 'META_ELLIPSOID', 'META_CAPSULE', 'SURFACE_NCURVE', 'SURFACE_NCIRCLE', 'SURFACE_NSURFACE', 'SURFACE_NCYLINDER', 'SURFACE_NSPHERE', 'SURFACE_NTORUS', 'CURVE_BEZCURVE', 'CURVE_BEZCIRCLE', 'CURVE_NCURVE', 'CURVE_NCIRCLE', 'CURVE_PATH', 'COLOR_RED', 'COLOR_GREEN', 'COLOR_BLUE', 'TRIA_RIGHT_BAR', 'TRIA_DOWN_BAR', 'TRIA_LEFT_BAR', 'TRIA_UP_BAR', 'FORCE_FORCE', 'FORCE_WIND', 'FORCE_VORTEX', 'FORCE_MAGNETIC', 'FORCE_HARMONIC', 'FORCE_CHARGE', 'FORCE_LENNARDJONES', 'FORCE_TEXTURE', 'FORCE_CURVE', 'FORCE_BOID', 'FORCE_TURBULENCE', 'FORCE_DRAG', 'FORCE_SMOKEFLOW', 'NODE_INSERT_ON', 'NODE_INSERT_OFF', 'MODIFIER', 'MOD_WAVE', 'MOD_BUILD', 'MOD_DECIM', 'MOD_MIRROR', 'MOD_SOFT', 'MOD_SUBSURF', 'HOOK', 'MOD_PHYSICS', 'MOD_PARTICLES', 'MOD_BOOLEAN', 'MOD_EDGESPLIT', 'MOD_ARRAY', 'MOD_UVPROJECT', 'MOD_DISPLACE', 'MOD_CURVE', 'MOD_LATTICE', 'CONSTRAINT_DATA', 'MOD_ARMATURE', 'MOD_SHRINKWRAP', 'MOD_CAST', 'MOD_MESHDEFORM', 'MOD_BEVEL', 'MOD_SMOOTH', 'MOD_SIMPLEDEFORM', 'MOD_MASK', 'MOD_CLOTH', 'MOD_EXPLODE', 'MOD_FLUIDSIM', 'MOD_MULTIRES', 'MOD_SMOKE', 'MOD_SOLIDIFY', 'MOD_SCREW', 'MOD_VERTEX_WEIGHT', 'MOD_DYNAMICPAINT', 'MOD_REMESH', 'MOD_OCEAN', 'MOD_WARP', 'MOD_SKIN', 'MOD_TRIANGULATE', 'MOD_WIREFRAME', 'MOD_DATA_TRANSFER', 'MOD_NORMALEDIT', 'REC', 'PLAY', 'FF', 'REW', 'PAUSE', 'PREV_KEYFRAME', 'NEXT_KEYFRAME', 'PLAY_AUDIO', 'PLAY_REVERSE', 'PREVIEW_RANGE', 'ACTION_TWEAK', 'PMARKER_ACT', 'PMARKER_SEL', 'PMARKER', 'MARKER_HLT', 'MARKER', 'SPACE2', 'SPACE3', 'KEYINGSET', 'KEY_DEHLT', 'KEY_HLT', 'MUTE_IPO_OFF', 'MUTE_IPO_ON', 'VISIBLE_IPO_OFF', 'VISIBLE_IPO_ON', 'DRIVER', 'SOLO_OFF', 'SOLO_ON', 'FRAME_PREV', 'FRAME_NEXT', 'NLA_PUSHDOWN', 'IPO_CONSTANT', 'IPO_LINEAR', 'IPO_BEZIER', 'IPO_SINE', 'IPO_QUAD', 'IPO_CUBIC', 'IPO_QUART', 'IPO_QUINT', 'IPO_EXPO', 'IPO_CIRC', 'IPO_BOUNCE', 'IPO_ELASTIC', 'IPO_BACK', 'IPO_EASE_IN', 'IPO_EASE_OUT', 'IPO_EASE_IN_OUT', 'NORMALIZE_FCURVES', 'VERTEXSEL', 'EDGESEL', 'FACESEL', 'LOOPSEL', 'ROTATE', 'CURSOR', 'ROTATECOLLECTION', 'ROTATECENTER', 'ROTACTIVE', 'ALIGN', 'SMOOTHCURVE', 'SPHERECURVE', 'ROOTCURVE', 'SHARPCURVE', 'LINCURVE', 'NOCURVE', 'RNDCURVE', 'PROP_OFF', 'PROP_ON', 'PROP_CON', 'SCULPT_DYNTOPO', 'PARTICLE_POINT', 'PARTICLE_TIP', 'PARTICLE_PATH', 'MAN_TRANS', 'MAN_ROT', 'MAN_SCALE', 'MANIPUL', 'SNAP_OFF', 'SNAP_ON', 'SNAP_NORMAL', 'SNAP_GRID', 'SNAP_VERTEX', 'SNAP_EDGE', 'SNAP_FACE', 'SNAP_VOLUME', 'SNAP_INCREMENT', 'STICKY_UVS_LOC', 'STICKY_UVS_DISABLE', 'STICKY_UVS_VERT', 'CLIPUV_DEHLT', 'CLIPUV_HLT', 'SNAP_PEEL_OBJECT', 'GRID', 'PASTEDOWN', 'COPYDOWN', 'PASTEFLIPUP', 'PASTEFLIPDOWN', 'SNAP_SURFACE', 'AUTOMERGE_ON', 'AUTOMERGE_OFF', 'RETOPO', 'UV_VERTEXSEL', 'UV_EDGESEL', 'UV_FACESEL', 'UV_ISLANDSEL', 'UV_SYNC_SELECT', 'BBOX', 'WIRE', 'SOLID', 'SMOOTH', 'POTATO', 'ORTHO', 'LOCKVIEW_OFF', 'LOCKVIEW_ON', 'AXIS_SIDE', 'AXIS_FRONT', 'AXIS_TOP', 'NDOF_DOM', 'NDOF_TURN', 'NDOF_FLY', 'NDOF_TRANS', 'LAYER_USED', 'LAYER_ACTIVE', 'SORTALPHA', 'SORTBYEXT', 'SORTTIME', 'SORTSIZE', 'LONGDISPLAY', 'SHORTDISPLAY', 'GHOST', 'IMGDISPLAY', 'SAVE_AS', 'SAVE_COPY', 'BOOKMARKS', 'FONTPREVIEW', 'FILTER', 'NEWFOLDER', 'OPEN_RECENT', 'FILE_PARENT', 'FILE_REFRESH', 'FILE_FOLDER', 'FILE_BLANK', 'FILE_BLEND', 'FILE_IMAGE', 'FILE_MOVIE', 'FILE_SCRIPT', 'FILE_SOUND', 'FILE_FONT', 'FILE_TEXT', 'RECOVER_AUTO', 'SAVE_PREFS', 'LINK_BLEND', 'APPEND_BLEND', 'IMPORT', 'EXPORT', 'EXTERNAL_DATA', 'LOAD_FACTORY', 'LOOP_BACK', 'LOOP_FORWARDS', 'BACK', 'FORWARD', 'FILE_HIDDEN', 'FILE_BACKUP', 'DISK_DRIVE', 'MATPLANE', 'MATSPHERE', 'MATCUBE', 'MONKEY', 'HAIR', 'ALIASED', 'ANTIALIASED', 'MAT_SPHERE_SKY', 'WORDWRAP_OFF', 'WORDWRAP_ON', 'SYNTAX_OFF', 'SYNTAX_ON', 'LINENUMBERS_OFF', 'LINENUMBERS_ON', 'SCRIPTPLUGINS', 'SEQ_SEQUENCER', 'SEQ_PREVIEW', 'SEQ_LUMA_WAVEFORM', 'SEQ_CHROMA_SCOPE', 'SEQ_HISTOGRAM', 'SEQ_SPLITVIEW', 'IMAGE_RGB', 'IMAGE_RGB_ALPHA', 'IMAGE_ALPHA', 'IMAGE_ZDEPTH', 'IMAGEFILE', 'BRUSH_ADD', 'BRUSH_BLOB', 'BRUSH_BLUR', 'BRUSH_CLAY', 'BRUSH_CLAY_STRIPS', 'BRUSH_CLONE', 'BRUSH_CREASE', 'BRUSH_DARKEN', 'BRUSH_FILL', 'BRUSH_FLATTEN', 'BRUSH_GRAB', 'BRUSH_INFLATE', 'BRUSH_LAYER', 'BRUSH_LIGHTEN', 'BRUSH_MASK', 'BRUSH_MIX', 'BRUSH_MULTIPLY', 'BRUSH_NUDGE', 'BRUSH_PINCH', 'BRUSH_SCRAPE', 'BRUSH_SCULPT_DRAW', 'BRUSH_SMEAR', 'BRUSH_SMOOTH', 'BRUSH_SNAKE_HOOK', 'BRUSH_SOFTEN', 'BRUSH_SUBTRACT', 'BRUSH_TEXDRAW', 'BRUSH_TEXFILL', 'BRUSH_TEXMASK', 'BRUSH_THUMB', 'BRUSH_ROTATE', 'BRUSH_VERTEXDRAW', 'MATCAP_01', 'MATCAP_02', 'MATCAP_03', 'MATCAP_04', 'MATCAP_05', 'MATCAP_06', 'MATCAP_07', 'MATCAP_08', 'MATCAP_09', 'MATCAP_10', 'MATCAP_11', 'MATCAP_12', 'MATCAP_13', 'MATCAP_14', 'MATCAP_15', 'MATCAP_16', 'MATCAP_17', 'MATCAP_18', 'MATCAP_19', 'MATCAP_20', 'MATCAP_21', 'MATCAP_22', 'MATCAP_23', 'MATCAP_24', 'SMALL_TRI_RIGHT_VEC', 'KEYTYPE_KEYFRAME_VEC', 'KEYTYPE_BREAKDOWN_VEC', 'KEYTYPE_EXTREME_VEC', 'KEYTYPE_JITTER_VEC', 'KEYTYPE_MOVING_HOLD_VEC', 'COLORSET_01_VEC', 'COLORSET_02_VEC', 'COLORSET_03_VEC', 'COLORSET_04_VEC', 'COLORSET_05_VEC', 'COLORSET_06_VEC', 'COLORSET_07_VEC', 'COLORSET_08_VEC', 'COLORSET_09_VEC', 'COLORSET_10_VEC', 'COLORSET_11_VEC', 'COLORSET_12_VEC', 'COLORSET_13_VEC', 'COLORSET_14_VEC', 'COLORSET_15_VEC', 'COLORSET_16_VEC', 'COLORSET_17_VEC', 'COLORSET_18_VEC', 'COLORSET_19_VEC', 'COLORSET_20_VEC'], (optional))
        :type icon: str
        :param icon_value: Icon Value, Override automatic icon of the item
            (type: int in [0, inf], (optional))
        :type icon_value: int
        """

    def separator(self):
        """Item. Inserts empty space into the layout between items"""

    def context_pointer_set(self, name, data):
        """context_pointer_set
        
        :param name: Name, Name of entry in the context
            (type: str, (never None))
        :type name: str
        :param data: Pointer to put in context
            (type: bpy.types.AnyType)
        :type data: AnyType
        """

    def template_header(self):
        """Inserts common Space header UI (editor type selector)"""

    def template_ID(self, data, property, new="", open="", unlink=""):
        """template_ID
        
        :param data: Data from which to take property
            (type: bpy.types.AnyType, (never None))
        :type data: AnyType
        :param property: Identifier of property in data
            (type: str, (never None))
        :type property: str
        :param new: Operator identifier to create a new ID block
            (type: str, (optional, never None))
        :type new: str
        :param open: Operator identifier to open a file for creating a new ID block
            (type: str, (optional, never None))
        :type open: str
        :param unlink: Operator identifier to unlink the ID block
            (type: str, (optional, never None))
        :type unlink: str
        """

    def template_ID_preview(self, data, property, new="", open="", unlink="", rows=0, cols=0):
        """template_ID_preview
        
        :param data: Data from which to take property
            (type: bpy.types.AnyType, (never None))
        :type data: AnyType
        :param property: Identifier of property in data
            (type: str, (never None))
        :type property: str
        :param new: Operator identifier to create a new ID block
            (type: str, (optional, never None))
        :type new: str
        :param open: Operator identifier to open a file for creating a new ID block
            (type: str, (optional, never None))
        :type open: str
        :param unlink: Operator identifier to unlink the ID block
            (type: str, (optional, never None))
        :type unlink: str
        :param rows: Number of thumbnail preview rows to display
            (type: int in [0, inf], (optional))
        :type rows: int
        :param cols: Number of thumbnail preview columns to display
            (type: int in [0, inf], (optional))
        :type cols: int
        """

    def template_any_ID(self, data, property, type_property, text="", text_ctxt="", translate=True):
        """template_any_ID
        
        :param data: Data from which to take property
            (type: bpy.types.AnyType, (never None))
        :type data: AnyType
        :param property: Identifier of property in data
            (type: str, (never None))
        :type property: str
        :param type_property: Identifier of property in data giving the type of the ID-blocks to use
            (type: str, (never None))
        :type type_property: str
        :param text: Override automatic text of the item
            (type: str, (optional, never None))
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
            (type: str, (optional, never None))
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
            (type: boolean, (optional))
        :type translate: bool
        """

    def template_path_builder(self, data, property, root, text="", text_ctxt="", translate=True):
        """template_path_builder
        
        :param data: Data from which to take property
            (type: bpy.types.AnyType, (never None))
        :type data: AnyType
        :param property: Identifier of property in data
            (type: str, (never None))
        :type property: str
        :param root: ID-block from which path is evaluated from
            (type: bpy.types.ID)
        :type root: ID
        :param text: Override automatic text of the item
            (type: str, (optional, never None))
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
            (type: str, (optional, never None))
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
            (type: boolean, (optional))
        :type translate: bool
        """

    def template_modifier(self, data):
        """Generates the UI layout for modifiers
        
        :param data: Modifier data
            (type: bpy.types.Modifier, (never None))
        :type data: Modifier
        :return: Sub-layout to put items in
        :param : (type: bpy.types.UILayout)
        :rtype: UILayout
        """

    def template_constraint(self, data):
        """Generates the UI layout for constraints
        
        :param data: Constraint data
            (type: bpy.types.Constraint, (never None))
        :type data: Constraint
        :return: Sub-layout to put items in
        :param : (type: bpy.types.UILayout)
        :rtype: UILayout
        """

    def template_preview(self, id, show_buttons=True, parent=None, slot=None, preview_id=""):
        """Item. A preview window for materials, textures, lamps or worlds
        
        :param id: ID data-block
            (type: bpy.types.ID)
        :type id: ID
        :param show_buttons: Show preview buttons?
            (type: boolean, (optional))
        :type show_buttons: bool
        :param parent: ID data-block
            (type: bpy.types.ID, (optional))
        :type parent: ID
        :param slot: Texture slot
            (type: bpy.types.TextureSlot, (optional))
        :type slot: TextureSlot
        :param preview_id: Identifier of this preview widget, if not set the ID type will be used (i.e. all previews of materials without explicit ID will have the same size...)
            (type: str, (optional, never None))
        :type preview_id: str
        """

    def template_curve_mapping(self, data, property, type='NONE', levels=False, brush=False, use_negative_slope=False):
        """Item. A curve mapping widget used for e.g falloff curves for lamps
        
        :param data: Data from which to take property
            (type: bpy.types.AnyType, (never None))
        :type data: AnyType
        :param property: Identifier of property in data
            (type: str, (never None))
        :type property: str
        :param type: Type, Type of curves to display
            (type: enum in ['NONE', 'VECTOR', 'COLOR', 'HUE'], (optional))
        :type type: str
        :param levels: Show black/white levels
            (type: boolean, (optional))
        :type levels: bool
        :param brush: Show brush options
            (type: boolean, (optional))
        :type brush: bool
        :param use_negative_slope: Use a negative slope by default
            (type: boolean, (optional))
        :type use_negative_slope: bool
        """

    def template_color_ramp(self, data, property, expand=False):
        """Item. A color ramp widget
        
        :param data: Data from which to take property
            (type: bpy.types.AnyType, (never None))
        :type data: AnyType
        :param property: Identifier of property in data
            (type: str, (never None))
        :type property: str
        :param expand: Expand button to show more detail
            (type: boolean, (optional))
        :type expand: bool
        """

    def template_icon_view(self, data, property, show_labels=False, scale=5.0):
        """Enum. Large widget showing Icon previews
        
        :param data: Data from which to take property
            (type: bpy.types.AnyType, (never None))
        :type data: AnyType
        :param property: Identifier of property in data
            (type: str, (never None))
        :type property: str
        :param show_labels: Show enum label in preview buttons
            (type: boolean, (optional))
        :type show_labels: bool
        :param scale: Scale, Scale the icon size (by the button size)
            (type: float in [1, 100], (optional))
        :type scale: float
        """

    def template_histogram(self, data, property):
        """Item. A histogramm widget to analyze imaga data
        
        :param data: Data from which to take property
            (type: bpy.types.AnyType, (never None))
        :type data: AnyType
        :param property: Identifier of property in data
            (type: str, (never None))
        :type property: str
        """

    def template_waveform(self, data, property):
        """Item. A waveform widget to analyze imaga data
        
        :param data: Data from which to take property
            (type: bpy.types.AnyType, (never None))
        :type data: AnyType
        :param property: Identifier of property in data
            (type: str, (never None))
        :type property: str
        """

    def template_vectorscope(self, data, property):
        """Item. A vectorscope widget to analyze imaga data
        
        :param data: Data from which to take property
            (type: bpy.types.AnyType, (never None))
        :type data: AnyType
        :param property: Identifier of property in data
            (type: str, (never None))
        :type property: str
        """

    def template_layers(self, data, property, used_layers_data, used_layers_property, active_layer):
        """template_layers
        
        :param data: Data from which to take property
            (type: bpy.types.AnyType, (never None))
        :type data: AnyType
        :param property: Identifier of property in data
            (type: str, (never None))
        :type property: str
        :param used_layers_data: Data from which to take property
            (type: bpy.types.AnyType)
        :type used_layers_data: AnyType
        :param used_layers_property: Identifier of property in data
            (type: str, (never None))
        :type used_layers_property: str
        :param active_layer: Active Layer
            (type: int in [0, inf])
        :type active_layer: int
        """

    def template_color_picker(self, data, property, value_slider=False, lock=False, lock_luminosity=False, cubic=False):
        """Item. A color wheel widget to pick colors
        
        :param data: Data from which to take property
            (type: bpy.types.AnyType, (never None))
        :type data: AnyType
        :param property: Identifier of property in data
            (type: str, (never None))
        :type property: str
        :param value_slider: Display the value slider to the right of the color wheel
            (type: boolean, (optional))
        :type value_slider: bool
        :param lock: Lock the color wheel display to value 1.0 regardless of actual color
            (type: boolean, (optional))
        :type lock: bool
        :param lock_luminosity: Keep the color at its original vector length
            (type: boolean, (optional))
        :type lock_luminosity: bool
        :param cubic: Cubic saturation for picking values close to white
            (type: boolean, (optional))
        :type cubic: bool
        """

    def template_palette(self, data, property, color=False):
        """Item. A palette used to pick colors
        
        :param data: Data from which to take property
            (type: bpy.types.AnyType, (never None))
        :type data: AnyType
        :param property: Identifier of property in data
            (type: str, (never None))
        :type property: str
        :param color: Display the colors as colors or values
            (type: boolean, (optional))
        :type color: bool
        """

    def template_image_layers(self, image, image_user):
        """template_image_layers"""

    def template_image(self, data, property, image_user, compact=False, multiview=False):
        """Item(s). User interface for selecting images and their source paths
        
        :param data: Data from which to take property
            (type: bpy.types.AnyType, (never None))
        :type data: AnyType
        :param property: Identifier of property in data
            (type: str, (never None))
        :type property: str
        :param compact: Use more compact layout
            (type: boolean, (optional))
        :type compact: bool
        :param multiview: Expose Multi-View options
            (type: boolean, (optional))
        :type multiview: bool
        """

    def template_image_settings(self, image_settings, color_management=False):
        """User interface for setting image format options
        
        :param color_management: Show color management settings
            (type: boolean, (optional))
        :type color_management: bool
        """

    def template_image_stereo_3d(self, stereo_3d_format):
        """User interface for setting image stereo 3d options"""

    def template_image_views(self, image_settings):
        """User interface for setting image views output options"""

    def template_movieclip(self, data, property, compact=False):
        """Item(s). User interface for selecting movie clips and their source paths
        
        :param data: Data from which to take property
            (type: bpy.types.AnyType, (never None))
        :type data: AnyType
        :param property: Identifier of property in data
            (type: str, (never None))
        :type property: str
        :param compact: Use more compact layout
            (type: boolean, (optional))
        :type compact: bool
        """

    def template_track(self, data, property):
        """Item. A movie-track widget to preview tracking image.
        
        :param data: Data from which to take property
            (type: bpy.types.AnyType, (never None))
        :type data: AnyType
        :param property: Identifier of property in data
            (type: str, (never None))
        :type property: str
        """

    def template_marker(self, data, property, clip_user, track, compact=False):
        """Item. A widget to control single marker settings.
        
        :param data: Data from which to take property
            (type: bpy.types.AnyType, (never None))
        :type data: AnyType
        :param property: Identifier of property in data
            (type: str, (never None))
        :type property: str
        :param compact: Use more compact layout
            (type: boolean, (optional))
        :type compact: bool
        """

    def template_movieclip_information(self, data, property, clip_user):
        """Item. Movie clip information data.
        
        :param data: Data from which to take property
            (type: bpy.types.AnyType, (never None))
        :type data: AnyType
        :param property: Identifier of property in data
            (type: str, (never None))
        :type property: str
        """

    def template_list(self, listtype_name, list_id, dataptr, propname, active_dataptr, active_propname, item_dyntip_propname="", rows=5, maxrows=5, type='DEFAULT', columns=9):
        """Item. A list widget to display data, e.g. vertexgroups.
        
        :param listtype_name: Identifier of the list type to use
            (type: str, (never None))
        :type listtype_name: str
        :param list_id: Identifier of this list widget (mandatory when using default "UI_UL_list" class). If this is set, the uilist gets a custom ID, otherwise it takes the name of the class used to define the uilist (for example, if the class name is "OBJECT_UL_vgroups", and list_id is not set by the script, then bl_idname = "OBJECT_UL_vgroups")
            (type: str, (optional, never None))
        :type list_id: str
        :param dataptr: Data from which to take the Collection property
            (type: bpy.types.AnyType)
        :type dataptr: AnyType
        :param propname: Identifier of the Collection property in data
            (type: str, (never None))
        :type propname: str
        :param active_dataptr: Data from which to take the integer property, index of the active item
            (type: bpy.types.AnyType, (never None))
        :type active_dataptr: AnyType
        :param active_propname: Identifier of the integer property in active_data, index of the active item
            (type: str, (never None))
        :type active_propname: str
        :param item_dyntip_propname: Identifier of a string property in items, to use as tooltip content
            (type: str, (optional, never None))
        :type item_dyntip_propname: str
        :param rows: Default and minimum number of rows to display
            (type: int in [0, inf], (optional))
        :type rows: int
        :param maxrows: Default maximum number of rows to display
            (type: int in [0, inf], (optional))
        :type maxrows: int
        :param type: Type, Type of layout to use
            * 'DEFAULT': Default Layout, Use the default, multi-rows layout.
            * 'COMPACT': Compact Layout, Use the compact, single-row layout.
            * 'GRID': Grid Layout, Use the grid-based layout.
            (type: enum in ['DEFAULT', 'COMPACT', 'GRID'], (optional))
        :type type: str
        :param columns: Number of items to display per row, for GRID layout
            (type: int in [0, inf], (optional))
        :type columns: int
        """

    def template_running_jobs(self):
        """template_running_jobs"""

    def template_operator_search(self):
        """template_operator_search"""

    def template_header_3D(self):
        """Inserts common 3DView header UI (selectors for context mode, shading, etc.)"""

    def template_edit_mode_selection(self):
        """Inserts common 3DView Edit modes header UI (selector for selection mode)"""

    def template_reports_banner(self):
        """template_reports_banner"""

    def template_node_link(self, ntree, node, socket):
        """template_node_link"""

    def template_node_view(self, ntree, node, socket):
        """template_node_view"""

    def template_texture_user(self):
        """template_texture_user"""

    def template_keymap_item_properties(self, item):
        """template_keymap_item_properties"""

    def template_component_menu(self, data, property, name=""):
        """Item. Display expanded property in a popup menu
        
        :param data: Data from which to take property
            (type: bpy.types.AnyType)
        :type data: AnyType
        :param property: Identifier of property in data
            (type: str, (never None))
        :type property: str
        """

    def introspect(self):
        """introspect
        
        :return: Descr, DESCR
        :param : (type: string, (never None))
        :rtype: str
        """

    def template_colorspace_settings(self, data, property):
        """Item. A widget to control input color space settings.
        
        :param data: Data from which to take property
            (type: bpy.types.AnyType, (never None))
        :type data: AnyType
        :param property: Identifier of property in data
            (type: str, (never None))
        :type property: str
        """

    def template_colormanaged_view_settings(self, data, property):
        """Item. A widget to control color managed view settings settings.
        
        :param data: Data from which to take property
            (type: bpy.types.AnyType, (never None))
        :type data: AnyType
        :param property: Identifier of property in data
            (type: str, (never None))
        :type property: str
        """

    def template_node_socket(self, color=(0.0, 0.0, 0.0, 1.0)):
        """Node Socket Icon
        
        :param color: Color
            (type: float array of 4 items in [0, 1], (optional))
        :type color: collections.Sequence[float]
        """

    def template_cache_file(self, data, property):
        """Item(s). User interface for selecting cache files and their source paths
        
        :param data: Data from which to take property
            (type: bpy.types.AnyType, (never None))
        :type data: AnyType
        :param property: Identifier of property in data
            (type: str, (never None))
        :type property: str
        """


class UIList(bpy_struct):
    """UI list containing the elements of a collection"""

    bitflag_filter_item = 0
    """The value of the reserved bitflag 'FILTER_ITEM' (in filter_flags values)
    (type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """

    bl_idname = ""
    """If this is set, the uilist gets a custom ID, otherwise it takes the name of the class used to define the uilist (for example, if the class name is "OBJECT_UL_vgroups", and bl_idname is not set by the script, then bl_idname = "OBJECT_UL_vgroups")
    (type: string, default "", (never None))
    
    :type: str
    """

    filter_name = ""
    """Only show items matching this name (use '*' as wildcard)
    (type: string, default "", (never None))
    
    :type: str
    """

    layout_type = 'DEFAULT'
    """
    * 'DEFAULT': Default Layout, Use the default, multi-rows layout.
    * 'COMPACT': Compact Layout, Use the compact, single-row layout.
    * 'GRID': Grid Layout, Use the grid-based layout.
    (type: enum in ['DEFAULT', 'COMPACT', 'GRID'], default 'DEFAULT', (readonly))
    
    :type: str
    """

    use_filter_invert = False
    """Invert filtering (show hidden items, and vice-versa)
    (type: boolean, default False)
    
    :type: bool
    """

    use_filter_show = False
    """Show filtering options
    (type: boolean, default False)
    
    :type: bool
    """

    use_filter_sort_alpha = False
    """Sort items by their name
    (type: boolean, default False)
    
    :type: bool
    """

    use_filter_sort_reverse = False
    """Invert the order of shown items
    (type: boolean, default False)
    
    :type: bool
    """

    def draw_item(self, context, layout, data, item, icon, active_data, active_property, index=0, flt_flag=0):
        """Draw an item in the list (NOTE: when you define your own draw_item function, you may want to check given 'item' is of the right type...)
        
        :param layout: Layout to draw the item
            (type: bpy.types.UILayout, (never None))
        :type layout: UILayout
        :param data: Data from which to take Collection property
            (type: bpy.types.AnyType)
        :type data: AnyType
        :param item: Item of the collection property
            (type: bpy.types.AnyType)
        :type item: AnyType
        :param icon: Icon of the item in the collection
            (type: int in [0, inf])
        :type icon: int
        :param active_data: Data from which to take property for the active element
            (type: bpy.types.AnyType, (never None))
        :type active_data: AnyType
        :param active_property: Identifier of property in active_data, for the active element
            (type: str, (optional argument, never None))
        :type active_property: str
        :param index: Index of the item in the collection
            (type: int in [0, inf], (optional))
        :type index: int
        :param flt_flag: The filter-flag result for this item
            (type: int in [0, inf], (optional))
        :type flt_flag: int
        """

    def draw_filter(self, context, layout):
        """Draw filtering options
        
        :param layout: Layout to draw the item
            (type: bpy.types.UILayout, (never None))
        :type layout: UILayout
        """

    def filter_items(self, context, data, property):
        """Filter and/or re-order items of the collection (output filter results in filter_flags, and reorder results in filter_neworder arrays)
        
        :param data: Data from which to take Collection property
            (type: bpy.types.AnyType)
        :type data: AnyType
        :param property: Identifier of property in data, for the collection
            (type: str, (never None))
        :type property: str
        :return: (filter_flags, filter_neworder)
            filter_flags, An array of filter flags, one for each item in the collection (NOTE: FILTER_ITEM bit is reserved, it defines whether the item is shown or not), int array of 1 items in [0, inf]
            filter_neworder, An array of indices, one for each item in the collection, mapping the org index to the new one, int array of 1 items in [0, inf]
        :rtype: tuple
        """


class UIPieMenu(bpy_struct):
    """"""

    layout = None
    """(type: bpy.types.UILayout, (readonly))
    
    :type: UILayout
    """


class UIPopupMenu(bpy_struct):
    """"""

    layout = None
    """(type: bpy.types.UILayout, (readonly))
    
    :type: UILayout
    """


class UVLoopLayers(bpy_struct):
    """Collection of uv loop layers"""

    active = None
    """Active UV loop layer
    (type: bpy.types.MeshUVLoopLayer)
    
    :type: MeshUVLoopLayer
    """

    active_index = 0
    """Active UV loop layer index
    (type: int in [0, inf], default 0)
    
    :type: int
    """


class UVProjector(bpy_struct):
    """UV projector used by the UV project modifier"""

    object = None
    """Object to use as projector transform
    (type: bpy.types.Object)
    
    :type: Object
    """


class UVTextures(bpy_struct):
    """Collection of UV maps"""

    active = None
    """Active UV Map
    (type: bpy.types.MeshTexturePolyLayer)
    
    :type: MeshTexturePolyLayer
    """

    active_index = 0
    """Active UV Map index
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    def new(self, name="UVMap"):
        """Add a UV map layer to Mesh
        
        :param name: UV map name
            (type: str, (optional, never None))
        :type name: str
        :return: The newly created layer
        :param : (type: bpy.types.MeshTexturePolyLayer)
        :rtype: MeshTexturePolyLayer
        """

    def remove(self, layer):
        """Remove a vertex color layer
        
        :param layer: The layer to remove
            (type: bpy.types.MeshTexturePolyLayer, (never None))
        :type layer: MeshTexturePolyLayer
        """


class UnifiedPaintSettings(bpy_struct):
    """Overrides for some of the active brush's settings"""

    color = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    secondary_color = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    size = 0
    """Radius of the brush
    (type: int in [1, 5000], default 0)
    
    :type: int
    """

    strength = 0.5
    """How powerful the effect of the brush is when applied
    (type: float in [0, 10], default 0.5)
    
    :type: float
    """

    unprojected_radius = 0.0
    """Radius of brush in Blender units
    (type: float in [0.001, inf], default 0.0)
    
    :type: float
    """

    use_locked_size = False
    """When locked brush stays same size relative to object; when unlocked brush size is given in pixels
    (type: boolean, default False)
    
    :type: bool
    """

    use_pressure_size = False
    """Enable tablet pressure sensitivity for size
    (type: boolean, default False)
    
    :type: bool
    """

    use_pressure_strength = False
    """Enable tablet pressure sensitivity for strength
    (type: boolean, default False)
    
    :type: bool
    """

    use_unified_color = False
    """Instead of per-brush color, the color is shared across brushes
    (type: boolean, default False)
    
    :type: bool
    """

    use_unified_size = False
    """Instead of per-brush radius, the radius is shared across brushes
    (type: boolean, default False)
    
    :type: bool
    """

    use_unified_strength = False
    """Instead of per-brush strength, the strength is shared across brushes
    (type: boolean, default False)
    
    :type: bool
    """

    use_unified_weight = False
    """Instead of per-brush weight, the weight is shared across brushes
    (type: boolean, default False)
    
    :type: bool
    """

    weight = 0.5
    """Weight to assign in vertex groups
    (type: float in [0, 1], default 0.5)
    
    :type: float
    """


class UnitSettings(bpy_struct):
    """"""

    scale_length = 0.0
    """Scale to use when converting between blender units and dimensions
    (type: float in [1e-05, 100000], default 0.0)
    
    :type: float
    """

    system = 'NONE'
    """The unit system to use for button display
    (type: enum in ['NONE', 'METRIC', 'IMPERIAL'], default 'NONE')
    
    :type: str
    """

    system_rotation = 'DEGREES'
    """Unit to use for displaying/editing rotation values
    * 'DEGREES': Degrees, Use degrees for measuring angles and rotations.
    * 'RADIANS': Radians.
    (type: enum in ['DEGREES', 'RADIANS'], default 'DEGREES')
    
    :type: str
    """

    use_separate = False
    """Display units in pairs (e.g. 1m 0cm)
    (type: boolean, default False)
    
    :type: bool
    """


class UnknownType(bpy_struct):
    """Stub RNA type used for pointers to unknown or internal data"""


class UserPreferences(bpy_struct):
    """Global user preferences"""

    active_section = 'INTERFACE'
    """Active section of the user preferences shown in the user interface
    (type: enum in ['INTERFACE', 'EDITING', 'INPUT', 'ADDONS', 'THEMES', 'FILES', 'SYSTEM'], default 'INTERFACE')
    
    :type: str
    """

    addons = None
    """(type: bpy.types.Addons bpy.types.bpy_prop_collection of bpy.types.Addon, (readonly))
    
    :type: Addons
    """

    app_template = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    autoexec_paths = None
    """(type: bpy.types.PathCompareCollection bpy.types.bpy_prop_collection of bpy.types.PathCompare, (readonly))
    
    :type: PathCompareCollection
    """

    edit = None
    """Settings for interacting with Blender data
    (type: bpy.types.UserPreferencesEdit, (readonly, never None))
    
    :type: UserPreferencesEdit
    """

    filepaths = None
    """Default paths for external files
    (type: bpy.types.UserPreferencesFilePaths, (readonly, never None))
    
    :type: UserPreferencesFilePaths
    """

    inputs = None
    """Settings for input devices
    (type: bpy.types.UserPreferencesInput, (readonly, never None))
    
    :type: UserPreferencesInput
    """

    system = None
    """Graphics driver and operating system settings
    (type: bpy.types.UserPreferencesSystem, (readonly, never None))
    
    :type: UserPreferencesSystem
    """

    themes = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.Theme, (readonly))
    
    :type: bpy_prop_collection
    """

    ui_styles = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.ThemeStyle, (readonly))
    
    :type: bpy_prop_collection
    """

    version = (0, 0, 0)
    """Version of Blender the userpref.blend was saved with
    (type: int array of 3 items in [0, inf], default (0, 0, 0), (readonly))
    
    :type: collections.Sequence[int]
    """

    view = None
    """Preferences related to viewing data
    (type: bpy.types.UserPreferencesView, (readonly, never None))
    
    :type: UserPreferencesView
    """


class UserPreferencesEdit(bpy_struct):
    """Settings for interacting with Blender data"""

    auto_keying_mode = 'ADD_REPLACE_KEYS'
    """Mode of automatic keyframe insertion for Objects and Bones (default setting used for new Scenes)
    (type: enum in ['ADD_REPLACE_KEYS', 'REPLACE_KEYS'], default 'ADD_REPLACE_KEYS')
    
    :type: str
    """

    fcurve_unselected_alpha = 0.0
    """Amount that unselected F-Curves stand out from the background (Graph Editor)
    (type: float in [0.001, 1], default 0.0)
    
    :type: float
    """

    grease_pencil_default_color = (0.0, 0.0, 0.0, 0.0)
    """Color of new Grease Pencil layers
    (type: float array of 4 items in [0, inf], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    grease_pencil_eraser_radius = 0
    """Radius of eraser 'brush'
    (type: int in [1, 500], default 0)
    
    :type: int
    """

    grease_pencil_euclidean_distance = 0
    """Distance moved by mouse when drawing stroke to include
    (type: int in [0, 100], default 0)
    
    :type: int
    """

    grease_pencil_manhattan_distance = 0
    """Pixels moved by mouse per axis when drawing stroke
    (type: int in [0, 100], default 0)
    
    :type: int
    """

    keyframe_new_handle_type = 'FREE'
    """Handle type for handles of new keyframes
    * 'FREE': Free.
    * 'VECTOR': Vector.
    * 'ALIGNED': Aligned.
    * 'AUTO': Automatic.
    * 'AUTO_CLAMPED': Auto Clamped, Auto handles clamped to not overshoot.
    (type: enum in ['FREE', 'VECTOR', 'ALIGNED', 'AUTO', 'AUTO_CLAMPED'], default 'FREE')
    
    :type: str
    """

    keyframe_new_interpolation_type = 'CONSTANT'
    """Interpolation mode used for first keyframe on newly added F-Curves (subsequent keyframes take interpolation from preceding keyframe)
    * 'CONSTANT': Constant, No interpolation, value of A gets held until B is encountered.
    * 'LINEAR': Linear, Straight-line interpolation between A and B (i.e. no ease in/out).
    * 'BEZIER': Bezier, Smooth interpolation between A and B, with some control over curve shape.
    * 'SINE': Sinusoidal, Sinusoidal easing (weakest, almost linear but with a slight curvature).
    * 'QUAD': Quadratic, Quadratic easing.
    * 'CUBIC': Cubic, Cubic easing.
    * 'QUART': Quartic, Quartic easing.
    * 'QUINT': Quintic, Quintic easing.
    * 'EXPO': Exponential, Exponential easing (dramatic).
    * 'CIRC': Circular, Circular easing (strongest and most dynamic).
    * 'BACK': Back, Cubic easing with overshoot and settle.
    * 'BOUNCE': Bounce, Exponentially decaying parabolic bounce, like when objects collide.
    * 'ELASTIC': Elastic, Exponentially decaying sine wave, like an elastic band.
    (type: enum in ['CONSTANT', 'LINEAR', 'BEZIER', 'SINE', 'QUAD', 'CUBIC', 'QUART', 'QUINT', 'EXPO', 'CIRC', 'BACK', 'BOUNCE', 'ELASTIC'], default 'CONSTANT')
    
    :type: str
    """

    material_link = 'OBDATA'
    """Toggle whether the material is linked to object data or the object block
    * 'OBDATA': ObData, Toggle whether the material is linked to object data or the object block.
    * 'OBJECT': Object, Toggle whether the material is linked to object data or the object block.
    (type: enum in ['OBDATA', 'OBJECT'], default 'OBDATA')
    
    :type: str
    """

    node_margin = 0
    """Minimum distance between nodes for Auto-offsetting nodes
    (type: int in [0, 255], default 0)
    
    :type: int
    """

    object_align = 'WORLD'
    """When adding objects from a 3D View menu, either align them with that view or with the world
    * 'WORLD': World, Align newly added objects to the world coordinate system.
    * 'VIEW': View, Align newly added objects facing the active 3D View direction.
    (type: enum in ['WORLD', 'VIEW'], default 'WORLD')
    
    :type: str
    """

    sculpt_paint_overlay_color = (0.0, 0.0, 0.0)
    """Color of texture overlay
    (type: float array of 3 items in [0, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    undo_memory_limit = 0
    """Maximum memory usage in megabytes (0 means unlimited)
    (type: int in [0, 32767], default 0)
    
    :type: int
    """

    undo_steps = 0
    """Number of undo steps available (smaller values conserve memory)
    (type: int in [0, 256], default 0)
    
    :type: int
    """

    use_auto_keying = False
    """Automatic keyframe insertion for Objects and Bones (default setting used for new Scenes)
    (type: boolean, default False)
    
    :type: bool
    """

    use_auto_keying_warning = False
    """Show warning indicators when transforming objects and bones if auto keying is enabled
    (type: boolean, default False)
    
    :type: bool
    """

    use_drag_immediately = False
    """Moving things with a mouse drag confirms when releasing the button
    (type: boolean, default False)
    
    :type: bool
    """

    use_duplicate_action = False
    """Causes actions to be duplicated with the object
    (type: boolean, default False)
    
    :type: bool
    """

    use_duplicate_armature = False
    """Causes armature data to be duplicated with the object
    (type: boolean, default False)
    
    :type: bool
    """

    use_duplicate_curve = False
    """Causes curve data to be duplicated with the object
    (type: boolean, default False)
    
    :type: bool
    """

    use_duplicate_fcurve = False
    """Causes F-curve data to be duplicated with the object
    (type: boolean, default False)
    
    :type: bool
    """

    use_duplicate_lamp = False
    """Causes lamp data to be duplicated with the object
    (type: boolean, default False)
    
    :type: bool
    """

    use_duplicate_material = False
    """Causes material data to be duplicated with the object
    (type: boolean, default False)
    
    :type: bool
    """

    use_duplicate_mesh = False
    """Causes mesh data to be duplicated with the object
    (type: boolean, default False)
    
    :type: bool
    """

    use_duplicate_metaball = False
    """Causes metaball data to be duplicated with the object
    (type: boolean, default False)
    
    :type: bool
    """

    use_duplicate_particle = False
    """Causes particle systems to be duplicated with the object
    (type: boolean, default False)
    
    :type: bool
    """

    use_duplicate_surface = False
    """Causes surface data to be duplicated with the object
    (type: boolean, default False)
    
    :type: bool
    """

    use_duplicate_text = False
    """Causes text data to be duplicated with the object
    (type: boolean, default False)
    
    :type: bool
    """

    use_duplicate_texture = False
    """Causes texture data to be duplicated with the object
    (type: boolean, default False)
    
    :type: bool
    """

    use_enter_edit_mode = False
    """Enter Edit Mode automatically after adding a new object
    (type: boolean, default False)
    
    :type: bool
    """

    use_global_undo = False
    """Global undo works by keeping a full copy of the file itself in memory, so takes extra memory
    (type: boolean, default False)
    
    :type: bool
    """

    use_grease_pencil_simplify_stroke = False
    """Simplify the final stroke
    (type: boolean, default False)
    
    :type: bool
    """

    use_insertkey_xyz_to_rgb = False
    """Color for newly added transformation F-Curves (Location, Rotation, Scale) and also Color is based on the transform axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_keyframe_insert_available = False
    """Automatic keyframe insertion in available F-Curves
    (type: boolean, default False)
    
    :type: bool
    """

    use_keyframe_insert_needed = False
    """Keyframe insertion only when keyframe needed
    (type: boolean, default False)
    
    :type: bool
    """

    use_negative_frames = False
    """Current frame number can be manually set to a negative value
    (type: boolean, default False)
    
    :type: bool
    """

    use_visual_keying = False
    """Use Visual keying automatically for constrained objects
    (type: boolean, default False)
    
    :type: bool
    """


class UserPreferencesFilePaths(bpy_struct):
    """Default paths for external files"""

    animation_player = ""
    """Path to a custom animation/frame sequence player
    (type: string, default "", (never None))
    
    :type: str
    """

    animation_player_preset = 'INTERNAL'
    """Preset configs for external animation players
    * 'INTERNAL': Internal, Built-in animation player.
    * 'DJV': Djv, Open source frame player: http://djv.sourceforge.net.
    * 'FRAMECYCLER': FrameCycler, Frame player from IRIDAS.
    * 'RV': rv, Frame player from Tweak Software.
    * 'MPLAYER': MPlayer, Media player for video & png/jpeg/sgi image sequences.
    * 'CUSTOM': Custom, Custom animation player executable path.
    (type: enum in ['INTERNAL', 'DJV', 'FRAMECYCLER', 'RV', 'MPLAYER', 'CUSTOM'], default 'INTERNAL')
    
    :type: str
    """

    auto_save_time = 0
    """The time (in minutes) to wait between automatic temporary saves
    (type: int in [1, 60], default 0)
    
    :type: int
    """

    font_directory = ""
    """The default directory to search for loading fonts
    (type: string, default "", (never None))
    
    :type: str
    """

    hide_recent_locations = False
    """Hide recent locations in the file selector
    (type: boolean, default False)
    
    :type: bool
    """

    hide_system_bookmarks = False
    """Hide system bookmarks in the file selector
    (type: boolean, default False)
    
    :type: bool
    """

    i18n_branches_directory = ""
    """The path to the '/branches' directory of your local svn-translation copy, to allow translating from the UI
    (type: string, default "", (never None))
    
    :type: str
    """

    image_editor = ""
    """Path to an image editor
    (type: string, default "", (never None))
    
    :type: str
    """

    recent_files = 0
    """Maximum number of recently opened files to remember
    (type: int in [0, 30], default 0)
    
    :type: int
    """

    render_cache_directory = ""
    """Where to cache raw render results
    (type: string, default "", (never None))
    
    :type: str
    """

    render_output_directory = ""
    """The default directory for rendering output, for new scenes
    (type: string, default "", (never None))
    
    :type: str
    """

    save_version = 0
    """The number of old versions to maintain in the current directory, when manually saving
    (type: int in [0, 32], default 0)
    
    :type: int
    """

    script_directory = ""
    """Alternate script path, matching the default layout with subdirs: startup, add-ons & modules (requires restart)
    (type: string, default "", (never None))
    
    :type: str
    """

    show_hidden_files_datablocks = False
    """Hide files/data-blocks that start with a dot (.*)
    (type: boolean, default False)
    
    :type: bool
    """

    show_thumbnails = False
    """Open in thumbnail view for images and movies
    (type: boolean, default False)
    
    :type: bool
    """

    sound_directory = ""
    """The default directory to search for sounds
    (type: string, default "", (never None))
    
    :type: str
    """

    temporary_directory = ""
    """The directory for storing temporary save files
    (type: string, default "", (never None))
    
    :type: str
    """

    texture_directory = ""
    """The default directory to search for textures
    (type: string, default "", (never None))
    
    :type: str
    """

    use_auto_save_temporary_files = False
    """Automatic saving of temporary files in temp directory, uses process ID (Sculpt or edit mode data won't be saved!')
    (type: boolean, default False)
    
    :type: bool
    """

    use_file_compression = False
    """Enable file compression when saving .blend files
    (type: boolean, default False)
    
    :type: bool
    """

    use_filter_files = False
    """Display only files with extensions in the image select window
    (type: boolean, default False)
    
    :type: bool
    """

    use_keep_session = False
    """Always load session recovery and save it after quitting Blender
    (type: boolean, default False)
    
    :type: bool
    """

    use_load_ui = False
    """Load user interface setup when loading .blend files
    (type: boolean, default False)
    
    :type: bool
    """

    use_relative_paths = False
    """Default relative path option for the file selector
    (type: boolean, default False)
    
    :type: bool
    """

    use_save_preview_images = False
    """Enables automatic saving of preview images in the .blend file
    (type: boolean, default False)
    
    :type: bool
    """


class UserPreferencesInput(bpy_struct):
    """Settings for input devices"""

    active_keyconfig = ""
    """The name of the active key configuration
    (type: string, default "", (never None))
    
    :type: str
    """

    drag_threshold = 0
    """Amount of pixels you have to drag before dragging UI items happens
    (type: int in [3, 40], default 0)
    
    :type: int
    """

    invert_mouse_zoom = False
    """Invert the axis of mouse movement for zooming
    (type: boolean, default False)
    
    :type: bool
    """

    invert_zoom_wheel = False
    """Swap the Mouse Wheel zoom direction
    (type: boolean, default False)
    
    :type: bool
    """

    mouse_double_click_time = 0
    """Time/delay (in ms) for a double click
    (type: int in [1, 1000], default 0)
    
    :type: int
    """

    navigation_mode = 'WALK'
    """Which method to use for viewport navigation
    * 'WALK': Walk, Interactively walk or free navigate around the scene.
    * 'FLY': Fly, Use fly dynamics to navigate the scene.
    (type: enum in ['WALK', 'FLY'], default 'WALK')
    
    :type: str
    """

    ndof_deadzone = 0.0
    """Threshold of initial movement needed from the device's rest position
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    ndof_fly_helicopter = False
    """Device up/down directly controls your Z position
    (type: boolean, default False)
    
    :type: bool
    """

    ndof_lock_horizon = False
    """Keep horizon level while flying with 3D Mouse
    (type: boolean, default False)
    
    :type: bool
    """

    ndof_orbit_sensitivity = 0.0
    """Overall sensitivity of the 3D Mouse for orbiting
    (type: float in [0.01, 40], default 0.0)
    
    :type: float
    """

    ndof_pan_yz_swap_axis = False
    """Pan using up/down on the device (otherwise forward/backward)
    (type: boolean, default False)
    
    :type: bool
    """

    ndof_panx_invert_axis = False
    """(type: boolean, default False)
    
    :type: bool
    """

    ndof_pany_invert_axis = False
    """(type: boolean, default False)
    
    :type: bool
    """

    ndof_panz_invert_axis = False
    """(type: boolean, default False)
    
    :type: bool
    """

    ndof_rotx_invert_axis = False
    """(type: boolean, default False)
    
    :type: bool
    """

    ndof_roty_invert_axis = False
    """(type: boolean, default False)
    
    :type: bool
    """

    ndof_rotz_invert_axis = False
    """(type: boolean, default False)
    
    :type: bool
    """

    ndof_sensitivity = 0.0
    """Overall sensitivity of the 3D Mouse for panning
    (type: float in [0.01, 40], default 0.0)
    
    :type: float
    """

    ndof_show_guide = False
    """Display the center and axis during rotation
    (type: boolean, default False)
    
    :type: bool
    """

    ndof_view_navigate_method = 'FREE'
    """Navigation style in the viewport
    * 'FREE': Free, Use full 6 degrees of freedom by default.
    * 'ORBIT': Orbit, Orbit about the view center by default.
    (type: enum in ['FREE', 'ORBIT'], default 'FREE')
    
    :type: str
    """

    ndof_view_rotate_method = 'TRACKBALL'
    """Rotation style in the viewport
    * 'TURNTABLE': Turntable, Use turntable style rotation in the viewport.
    * 'TRACKBALL': Trackball, Use trackball style rotation in the viewport.
    (type: enum in ['TURNTABLE', 'TRACKBALL'], default 'TRACKBALL')
    
    :type: str
    """

    ndof_zoom_invert = False
    """Zoom using opposite direction
    (type: boolean, default False)
    
    :type: bool
    """

    select_mouse = 'RIGHT'
    """Mouse button used for selection
    * 'LEFT': Left, Use left Mouse Button for selection.
    * 'RIGHT': Right, Use Right Mouse Button for selection.
    (type: enum in ['LEFT', 'RIGHT'], default 'RIGHT')
    
    :type: str
    """

    tweak_threshold = 0
    """Number of pixels you have to drag before tweak event is triggered
    (type: int in [3, 1024], default 0)
    
    :type: int
    """

    use_emulate_numpad = False
    """Main 1 to 0 keys act as the numpad ones (useful for laptops)
    (type: boolean, default False)
    
    :type: bool
    """

    use_mouse_continuous = False
    """Allow moving the mouse outside the view on some manipulations (transform, ui control drag)
    (type: boolean, default False)
    
    :type: bool
    """

    use_mouse_emulate_3_button = False
    """Emulate Middle Mouse with Alt+Left Mouse (doesn't work with Left Mouse Select option)
    (type: boolean, default False)
    
    :type: bool
    """

    use_mouse_mmb_paste = False
    """In text window, paste with middle mouse button instead of panning
    (type: boolean, default False)
    
    :type: bool
    """

    use_ndof = True
    """(type: boolean, default True, (readonly))
    
    :type: bool
    """

    use_trackpad_natural = False
    """If your system uses 'natural' scrolling, this option keeps consistent trackpad usage throughout the UI
    (type: boolean, default False)
    
    :type: bool
    """

    view_rotate_method = 'TURNTABLE'
    """Rotation style in the viewport
    * 'TURNTABLE': Turntable, Use turntable style rotation in the viewport.
    * 'TRACKBALL': Trackball, Use trackball style rotation in the viewport.
    (type: enum in ['TURNTABLE', 'TRACKBALL'], default 'TURNTABLE')
    
    :type: str
    """

    view_zoom_axis = 'VERTICAL'
    """Axis of mouse movement to zoom in or out on
    * 'VERTICAL': Vertical, Zoom in and out based on vertical mouse movement.
    * 'HORIZONTAL': Horizontal, Zoom in and out based on horizontal mouse movement.
    (type: enum in ['VERTICAL', 'HORIZONTAL'], default 'VERTICAL')
    
    :type: str
    """

    view_zoom_method = 'CONTINUE'
    """Which style to use for viewport scaling
    * 'CONTINUE': Continue, Old style zoom, continues while moving mouse up or down.
    * 'DOLLY': Dolly, Zoom in and out based on vertical mouse movement.
    * 'SCALE': Scale, Zoom in and out like scaling the view, mouse movements relative to center.
    (type: enum in ['CONTINUE', 'DOLLY', 'SCALE'], default 'CONTINUE')
    
    :type: str
    """

    walk_navigation = None
    """Settings for walk navigation mode
    (type: bpy.types.WalkNavigation, (readonly, never None))
    
    :type: WalkNavigation
    """

    wheel_scroll_lines = 0
    """Number of lines scrolled at a time with the mouse wheel
    (type: int in [0, 32], default 0)
    
    :type: int
    """


class UserPreferencesSystem(bpy_struct):
    """Graphics driver and operating system settings"""

    anisotropic_filter = 'FILTER_0'
    """Quality of the anisotropic filtering (values greater than 1.0 enable anisotropic filtering)
    (type: enum in ['FILTER_0', 'FILTER_2', 'FILTER_4', 'FILTER_8', 'FILTER_16'], default 'FILTER_0')
    
    :type: str
    """

    audio_channels = 'MONO'
    """Audio channel count
    * 'MONO': Mono, Set audio channels to mono.
    * 'STEREO': Stereo, Set audio channels to stereo.
    * 'SURROUND4': 4 Channels, Set audio channels to 4 channels.
    * 'SURROUND51': 5.1 Surround, Set audio channels to 5.1 surround sound.
    * 'SURROUND71': 7.1 Surround, Set audio channels to 7.1 surround sound.
    (type: enum in ['MONO', 'STEREO', 'SURROUND4', 'SURROUND51', 'SURROUND71'], default 'MONO')
    
    :type: str
    """

    audio_device = 'NONE'
    """Audio output device
    * 'NONE': None, Null device - there will be no audio output.
    * 'OPENAL': OpenAL, OpenAL device - supports 3D audio, recommended for game engine usage.
    (type: enum in ['NONE', 'OPENAL'], default 'NONE')
    
    :type: str
    """

    audio_mixing_buffer = 'SAMPLES_256'
    """Number of samples used by the audio mixing buffer
    * 'SAMPLES_256': 256, Set audio mixing buffer size to 256 samples.
    * 'SAMPLES_512': 512, Set audio mixing buffer size to 512 samples.
    * 'SAMPLES_1024': 1024, Set audio mixing buffer size to 1024 samples.
    * 'SAMPLES_2048': 2048, Set audio mixing buffer size to 2048 samples.
    * 'SAMPLES_4096': 4096, Set audio mixing buffer size to 4096 samples.
    * 'SAMPLES_8192': 8192, Set audio mixing buffer size to 8192 samples.
    * 'SAMPLES_16384': 16384, Set audio mixing buffer size to 16384 samples.
    * 'SAMPLES_32768': 32768, Set audio mixing buffer size to 32768 samples.
    (type: enum in ['SAMPLES_256', 'SAMPLES_512', 'SAMPLES_1024', 'SAMPLES_2048', 'SAMPLES_4096', 'SAMPLES_8192', 'SAMPLES_16384', 'SAMPLES_32768'], default 'SAMPLES_256')
    
    :type: str
    """

    audio_sample_format = 'U8'
    """Audio sample format
    * 'U8': 8-bit Unsigned, Set audio sample format to 8 bit unsigned integer.
    * 'S16': 16-bit Signed, Set audio sample format to 16 bit signed integer.
    * 'S24': 24-bit Signed, Set audio sample format to 24 bit signed integer.
    * 'S32': 32-bit Signed, Set audio sample format to 32 bit signed integer.
    * 'FLOAT': 32-bit Float, Set audio sample format to 32 bit float.
    * 'DOUBLE': 64-bit Float, Set audio sample format to 64 bit float.
    (type: enum in ['U8', 'S16', 'S24', 'S32', 'FLOAT', 'DOUBLE'], default 'U8')
    
    :type: str
    """

    audio_sample_rate = 'RATE_44100'
    """Audio sample rate
    * 'RATE_44100': 44.1 kHz, Set audio sampling rate to 44100 samples per second.
    * 'RATE_48000': 48 kHz, Set audio sampling rate to 48000 samples per second.
    * 'RATE_96000': 96 kHz, Set audio sampling rate to 96000 samples per second.
    * 'RATE_192000': 192 kHz, Set audio sampling rate to 192000 samples per second.
    (type: enum in ['RATE_44100', 'RATE_48000', 'RATE_96000', 'RATE_192000'], default 'RATE_44100')
    
    :type: str
    """

    author = ""
    """Name that will be used in exported files when format supports such feature
    (type: string, default "", (never None))
    
    :type: str
    """

    color_picker_type = 'CIRCLE_HSV'
    """Different styles of displaying the color picker widget
    * 'CIRCLE_HSV': Circle (HSV), A circular Hue/Saturation color wheel, with Value slider.
    * 'CIRCLE_HSL': Circle (HSL), A circular Hue/Saturation color wheel, with Lightness slider.
    * 'SQUARE_SV': Square (SV + H), A square showing Saturation/Value, with Hue slider.
    * 'SQUARE_HS': Square (HS + V), A square showing Hue/Saturation, with Value slider.
    * 'SQUARE_HV': Square (HV + S), A square showing Hue/Value, with Saturation slider.
    (type: enum in ['CIRCLE_HSV', 'CIRCLE_HSL', 'SQUARE_SV', 'SQUARE_HS', 'SQUARE_HV'], default 'CIRCLE_HSV')
    
    :type: str
    """

    dpi = 0
    """Font size and resolution for display
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    font_path_ui = ""
    """Path to interface font
    (type: string, default "", (never None))
    
    :type: str
    """

    font_path_ui_mono = ""
    """Path to interface mono-space Font
    (type: string, default "", (never None))
    
    :type: str
    """

    frame_server_port = 0
    """Frameserver Port for Frameserver Rendering
    (type: int in [0, 32727], default 0)
    
    :type: int
    """

    gl_clip_alpha = 0.0
    """Clip alpha below this threshold in the 3D textured view
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    gl_texture_limit = 'CLAMP_OFF'
    """Limit the texture size to save graphics memory
    (type: enum in ['CLAMP_OFF', 'CLAMP_8192', 'CLAMP_4096', 'CLAMP_2048', 'CLAMP_1024', 'CLAMP_512', 'CLAMP_256', 'CLAMP_128'], default 'CLAMP_OFF')
    
    :type: str
    """

    image_draw_method = '2DTEXTURE'
    """Method used for displaying images on the screen
    * '2DTEXTURE': 2D Texture, Use CPU for display transform and draw image with 2D texture.
    * 'GLSL': GLSL, Use GLSL shaders for display transform and draw image with 2D texture.
    * 'DRAWPIXELS': DrawPixels, Use CPU for display transform and draw image using DrawPixels.
    (type: enum in ['2DTEXTURE', 'GLSL', 'DRAWPIXELS'], default '2DTEXTURE')
    
    :type: str
    """

    legacy_compute_device_type = 0
    """For backwards compatibility only
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    memory_cache_limit = 0
    """Memory cache limit (in megabytes)
    (type: int in [0, 32768], default 0)
    
    :type: int
    """

    multi_sample = 'NONE'
    """Enable OpenGL multi-sampling, only for systems that support it, requires restart
    * 'NONE': No MultiSample, Do not use OpenGL MultiSample.
    * '2': MultiSample: 2, Use 2x OpenGL MultiSample (requires restart).
    * '4': MultiSample: 4, Use 4x OpenGL MultiSample (requires restart).
    * '8': MultiSample: 8, Use 8x OpenGL MultiSample (requires restart).
    * '16': MultiSample: 16, Use 16x OpenGL MultiSample (requires restart).
    (type: enum in ['NONE', '2', '4', '8', '16'], default 'NONE')
    
    :type: str
    """

    opensubdiv_compute_type = 'NONE'
    """Type of computer back-end used with OpenSubdiv
    (type: enum in ['NONE'], default 'NONE')
    
    :type: str
    """

    pixel_size = 0.0
    """(type: float in [-inf, inf], default 0.0, (readonly))
    
    :type: float
    """

    prefetch_frames = 0
    """Number of frames to render ahead during playback (sequencer only)
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    screencast_fps = 0
    """Frame rate for the screencast to be played back
    (type: int in [10, 100], default 0)
    
    :type: int
    """

    screencast_wait_time = 0
    """Time in milliseconds between each frame recorded for screencast
    (type: int in [10, 1000], default 0)
    
    :type: int
    """

    scrollback = 0
    """Maximum number of lines to store for the console buffer
    (type: int in [32, 32768], default 0)
    
    :type: int
    """

    select_method = 'AUTO'
    """Use OpenGL occlusion queries or selection render mode to accelerate selection
    (type: enum in ['AUTO', 'GL_SELECT', 'GL_QUERY'], default 'AUTO')
    
    :type: str
    """

    solid_lights = None
    """Lights user to display objects in solid draw mode
    (type: bpy.types.bpy_prop_collection of bpy.types.UserSolidLight, (readonly))
    
    :type: bpy_prop_collection
    """

    texture_collection_rate = 0
    """Number of seconds between each run of the GL texture garbage collector
    (type: int in [1, 3600], default 0)
    
    :type: int
    """

    texture_time_out = 0
    """Time since last access of a GL texture in seconds after which it is freed (set to 0 to keep textures allocated)
    (type: int in [0, 3600], default 0)
    
    :type: int
    """

    use_16bit_textures = False
    """Use 16 bit per component texture for float images
    (type: boolean, default False)
    
    :type: bool
    """

    use_gpu_mipmap = False
    """Generate Image Mipmaps on the GPU
    (type: boolean, default False)
    
    :type: bool
    """

    use_international_fonts = False
    """Use international fonts
    (type: boolean, default False)
    
    :type: bool
    """

    use_mipmaps = False
    """Scale textures for the 3D View (looks nicer but uses more memory and slows image reloading)
    (type: boolean, default False)
    
    :type: bool
    """

    use_preview_images = False
    """Allow user to choose any codec (Windows only, might generate instability)
    (type: boolean, default False)
    
    :type: bool
    """

    use_region_overlap = False
    """Draw tool/property regions over the main region, when using Triple Buffer
    (type: boolean, default False)
    
    :type: bool
    """

    use_scripts_auto_execute = False
    """Allow any .blend file to run scripts automatically (unsafe with blend files from an untrusted source)
    (type: boolean, default False)
    
    :type: bool
    """

    use_select_pick_depth = False
    """Use the depth buffer for picking 3D View selection
    (type: boolean, default False)
    
    :type: bool
    """

    use_tabs_as_spaces = False
    """Automatically convert all new tabs into spaces for new and loaded text files
    (type: boolean, default False)
    
    :type: bool
    """

    use_text_antialiasing = False
    """Draw user interface text anti-aliased
    (type: boolean, default False)
    
    :type: bool
    """

    use_textured_fonts = False
    """Use textures for drawing international fonts
    (type: boolean, default False)
    
    :type: bool
    """

    use_translate_interface = False
    """Translate interface
    (type: boolean, default False)
    
    :type: bool
    """

    use_translate_new_dataname = False
    """Translate new data names (when adding/creating some)
    (type: boolean, default False)
    
    :type: bool
    """

    use_translate_tooltips = False
    """Translate tooltips
    (type: boolean, default False)
    
    :type: bool
    """

    use_weight_color_range = False
    """Enable color range used for weight visualization in weight painting mode
    (type: boolean, default False)
    
    :type: bool
    """

    weight_color_range = None
    """Color range used for weight visualization in weight painting mode
    (type: bpy.types.ColorRamp, (readonly, never None))
    
    :type: ColorRamp
    """

    window_draw_method = 'TRIPLE_BUFFER'
    """Drawing method used by the window manager
    * 'AUTOMATIC': Automatic, Automatically set based on graphics card and driver.
    * 'TRIPLE_BUFFER': Triple Buffer, Use a third buffer for minimal redraws at the cost of more memory.
    * 'OVERLAP': Overlap, Redraw all overlapping regions, minimal memory usage but more redraws.
    * 'OVERLAP_FLIP': Overlap Flip, Redraw all overlapping regions, minimal memory usage but more redraws (for graphics drivers that do flipping).
    * 'FULL': Full, Do a full redraw each time, slow, only use for reference or when everything else fails.
    (type: enum in ['AUTOMATIC', 'TRIPLE_BUFFER', 'OVERLAP', 'OVERLAP_FLIP', 'FULL'], default 'TRIPLE_BUFFER')
    
    :type: str
    """


class UserPreferencesView(bpy_struct):
    """Preferences related to viewing data"""

    manipulator_handle_size = 25
    """Size of manipulator handles as percentage of the radius
    (type: int in [2, 40], default 25)
    
    :type: int
    """

    manipulator_hotspot = 14
    """Distance around the handles to accept mouse clicks
    (type: int in [4, 40], default 14)
    
    :type: int
    """

    manipulator_size = 75
    """Diameter of the manipulator
    (type: int in [10, 200], default 75)
    
    :type: int
    """

    mini_axis_brightness = 0
    """Brightness of the icon
    (type: int in [0, 10], default 0)
    
    :type: int
    """

    mini_axis_size = 0
    """The axes icon's size
    (type: int in [10, 64], default 0)
    
    :type: int
    """

    object_origin_size = 0
    """Diameter in Pixels for Object/Lamp origin display
    (type: int in [4, 10], default 0)
    
    :type: int
    """

    open_left_mouse_delay = 0
    """Time in 1/10 seconds to hold the Left Mouse Button before opening the toolbox
    (type: int in [1, 40], default 0)
    
    :type: int
    """

    open_right_mouse_delay = 0
    """Time in 1/10 seconds to hold the Right Mouse Button before opening the toolbox
    (type: int in [1, 40], default 0)
    
    :type: int
    """

    open_sublevel_delay = 0
    """Time delay in 1/10 seconds before automatically opening sub level menus
    (type: int in [1, 40], default 0)
    
    :type: int
    """

    open_toplevel_delay = 0
    """Time delay in 1/10 seconds before automatically opening top level menus
    (type: int in [1, 40], default 0)
    
    :type: int
    """

    pie_animation_timeout = 0
    """Time needed to fully animate the pie to unfolded state (in 1/100ths of sec)
    (type: int in [0, 1000], default 0)
    
    :type: int
    """

    pie_initial_timeout = 0
    """Pie menus will use the initial mouse position as center for this amount of time (in 1/100ths of sec)
    (type: int in [0, 1000], default 0)
    
    :type: int
    """

    pie_menu_confirm = 0
    """Distance threshold after which selection is made (zero to disable)
    (type: int in [0, 1000], default 0)
    
    :type: int
    """

    pie_menu_radius = 0
    """Pie menu size in pixels
    (type: int in [0, 1000], default 0)
    
    :type: int
    """

    pie_menu_threshold = 0
    """Distance from center needed before a selection can be made
    (type: int in [0, 1000], default 0)
    
    :type: int
    """

    rotation_angle = 0.0
    """Rotation step for numerical pad keys (2 4 6 8)
    (type: float in [0, 90], default 0.0)
    
    :type: float
    """

    show_column_layout = False
    """Use a column layout for toolbox
    (type: boolean, default False)
    
    :type: bool
    """

    show_large_cursors = False
    """Use large mouse cursors when available
    (type: boolean, default False)
    
    :type: bool
    """

    show_manipulator = False
    """Use 3D transform manipulator
    (type: boolean, default False)
    
    :type: bool
    """

    show_mini_axis = False
    """Show a small rotating 3D axes in the bottom left corner of the 3D View
    (type: boolean, default False)
    
    :type: bool
    """

    show_object_info = False
    """Display objects name and frame number in 3D view
    (type: boolean, default False)
    
    :type: bool
    """

    show_playback_fps = False
    """Show the frames per second screen refresh rate, while animation is played back
    (type: boolean, default False)
    
    :type: bool
    """

    show_splash = False
    """Display splash screen on startup
    (type: boolean, default False)
    
    :type: bool
    """

    show_tooltips = False
    """Display tooltips (when off hold Alt to force display)
    (type: boolean, default False)
    
    :type: bool
    """

    show_tooltips_python = False
    """Show Python references in tooltips
    (type: boolean, default False)
    
    :type: bool
    """

    show_view_name = False
    """Show the name of the view's direction in each 3D View
    (type: boolean, default False)
    
    :type: bool
    """

    smooth_view = 0
    """Time to animate the view in milliseconds, zero to disable
    (type: int in [0, 1000], default 0)
    
    :type: int
    """

    timecode_style = 'MINIMAL'
    """Format of Time Codes displayed when not displaying timing in terms of frames
    * 'MINIMAL': Minimal Info, Most compact representation, uses '+' as separator for sub-second frame numbers, with left and right truncation of the timecode as necessary.
    * 'SMPTE': SMPTE (Full), Full SMPTE timecode (format is HH:MM:SS:FF).
    * 'SMPTE_COMPACT': SMPTE (Compact), SMPTE timecode showing minutes, seconds, and frames only - hours are also shown if necessary, but not by default.
    * 'MILLISECONDS': Compact with Milliseconds, Similar to SMPTE (Compact), except that instead of frames, milliseconds are shown instead.
    * 'SECONDS_ONLY': Only Seconds, Direct conversion of frame numbers to seconds.
    (type: enum in ['MINIMAL', 'SMPTE', 'SMPTE_COMPACT', 'MILLISECONDS', 'SECONDS_ONLY'], default 'MINIMAL')
    
    :type: str
    """

    ui_scale = 1.0
    """Changes the size of the fonts and buttons in the interface
    (type: float in [0.25, 4], default 1.0)
    
    :type: float
    """

    use_auto_perspective = False
    """Automatically switch between orthographic and perspective when changing from top/front/side views
    (type: boolean, default False)
    
    :type: bool
    """

    use_camera_lock_parent = False
    """When the camera is locked to the view and in fly mode, transform the parent rather than the camera
    (type: boolean, default False)
    
    :type: bool
    """

    use_directional_menus = False
    """Otherwise menus, etc will always be top to bottom, left to right, no matter opening direction
    (type: boolean, default False)
    
    :type: bool
    """

    use_global_pivot = False
    """Lock the same rotation/scaling pivot in all 3D Views
    (type: boolean, default False)
    
    :type: bool
    """

    use_global_scene = False
    """Force the current Scene to be displayed in all Screens
    (type: boolean, default False)
    
    :type: bool
    """

    use_mouse_depth_cursor = False
    """Use the depth under the mouse when placing the cursor
    (type: boolean, default False)
    
    :type: bool
    """

    use_mouse_depth_navigate = False
    """Use the depth under the mouse to improve view pan/rotate/zoom functionality
    (type: boolean, default False)
    
    :type: bool
    """

    use_mouse_over_open = False
    """Open menu buttons and pulldowns automatically when the mouse is hovering
    (type: boolean, default False)
    
    :type: bool
    """

    use_quit_dialog = False
    """Ask for confirmation when quitting through the window close button
    (type: boolean, default False)
    
    :type: bool
    """

    use_rotate_around_active = False
    """Use selection as the pivot point
    (type: boolean, default False)
    
    :type: bool
    """

    use_zoom_to_mouse = False
    """Zoom in towards the mouse pointer's position in the 3D view, rather than the 2D window center
    (type: boolean, default False)
    
    :type: bool
    """

    view2d_grid_spacing_min = 0
    """Minimum number of pixels between each gridline in 2D Viewports
    (type: int in [1, 500], default 0)
    
    :type: int
    """

    view_frame_keyframes = 0
    """Keyframes around cursor that we zoom around
    (type: int in [1, 500], default 0)
    
    :type: int
    """

    view_frame_seconds = 0.0
    """Seconds around cursor that we zoom around
    (type: float in [0, 10000], default 0.0)
    
    :type: float
    """

    view_frame_type = 'KEEP_RANGE'
    """How zooming to frame focuses around current frame
    (type: enum in ['KEEP_RANGE', 'SECONDS', 'KEYFRAMES'], default 'KEEP_RANGE')
    
    :type: str
    """


class UserSolidLight(bpy_struct):
    """Light used for OpenGL lighting in solid draw mode"""

    diffuse_color = (0.0, 0.0, 0.0)
    """Diffuse color of the OpenGL light
    (type: float array of 3 items in [0, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    direction = (0.0, 1.0, 0.0)
    """Direction that the OpenGL light is shining
    (type: float array of 3 items in [-inf, inf], default (0.0, 1.0, 0.0))
    
    :type: mathutils.Vector
    """

    specular_color = (0.0, 0.0, 0.0)
    """Color of the light's specular highlight
    (type: float array of 3 items in [0, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    use = False
    """Enable this OpenGL light in solid draw mode
    (type: boolean, default False)
    
    :type: bool
    """


class VertexColors(bpy_struct):
    """Collection of vertex colors"""

    active = None
    """Active vertex color layer
    (type: bpy.types.MeshColorLayer, (readonly))
    
    :type: MeshColorLayer
    """

    active_index = 0
    """Active vertex color index
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    def new(self, name="Col"):
        """Add a vertex color layer to Mesh
        
        :param name: Vertex color name
            (type: str, (optional, never None))
        :type name: str
        :return: The newly created layer
        :param : (type: bpy.types.MeshColorLayer)
        :rtype: MeshColorLayer
        """


class VertexFloatProperties(bpy_struct):
    """Collection of float properties"""

    def new(self, name="Float Prop"):
        """Add a float property layer to Mesh
        
        :param name: Float property name
            (type: str, (optional, never None))
        :type name: str
        :return: The newly created layer
        :param : (type: bpy.types.MeshVertexFloatPropertyLayer)
        :rtype: MeshVertexFloatPropertyLayer
        """


class VertexGroup(bpy_struct):
    """Group of vertices, used for armature deform and other purposes"""

    index = 0
    """Index number of the vertex group
    (type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """

    lock_weight = False
    """Maintain the relative weights for the group
    (type: boolean, default False)
    
    :type: bool
    """

    name = ""
    """Vertex group name
    (type: string, default "", (never None))
    
    :type: str
    """

    def add(self, index, weight, type):
        """Add vertices to the group
        
        :param index: Index List
            (type: int array of 1 items in [-inf, inf])
        :type index: collections.Sequence[int]
        :param weight: Vertex weight
            (type: float in [0, 1])
        :type weight: float
        :param type: Vertex assign mode
            * 'REPLACE': Replace, Replace.
            * 'ADD': Add, Add.
            * 'SUBTRACT': Subtract, Subtract.
            (type: enum in ['REPLACE', 'ADD', 'SUBTRACT'])
        :type type: str
        """

    def remove(self, index):
        """Remove a vertex from the group
        
        :param index: Index List
            (type: int array of 1 items in [-inf, inf])
        :type index: collections.Sequence[int]
        """

    def weight(self, index):
        """Get a vertex weight from the group
        
        :param index: Index, The index of the vertex
            (type: int in [0, inf])
        :type index: int
        :return: Vertex weight
        :param : (type: float in [0, 1])
        :rtype: float
        """


class VertexGroupElement(bpy_struct):
    """Weight value of a vertex in a vertex group"""

    group = 0
    """(type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """

    weight = 0.0
    """Vertex Weight
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """


class VertexGroups(bpy_struct):
    """Collection of vertex groups"""

    active = None
    """Vertex groups of the object
    (type: bpy.types.VertexGroup, (readonly))
    
    :type: VertexGroup
    """

    active_index = 0
    """Active index in vertex group array
    (type: int in [0, 32767], default 0)
    
    :type: int
    """

    def new(self, name="Group"):
        """Add vertex group to object
        
        :param name: Vertex group name
            (type: str, (optional, never None))
        :type name: str
        :return: New vertex group
        :param : (type: bpy.types.VertexGroup)
        :rtype: VertexGroup
        """

    def remove(self, group):
        """Delete vertex group from object
        
        :param group: Vertex group to remove
            (type: bpy.types.VertexGroup, (never None))
        :type group: VertexGroup
        """

    def clear(self):
        """Delete all vertex groups from object"""


class VertexIntProperties(bpy_struct):
    """Collection of int properties"""

    def new(self, name="Int Prop"):
        """Add a integer property layer to Mesh
        
        :param name: Int property name
            (type: str, (optional, never None))
        :type name: str
        :return: The newly created layer
        :param : (type: bpy.types.MeshVertexIntPropertyLayer)
        :rtype: MeshVertexIntPropertyLayer
        """


class VertexStringProperties(bpy_struct):
    """Collection of string properties"""

    def new(self, name="String Prop"):
        """Add a string property layer to Mesh
        
        :param name: String property name
            (type: str, (optional, never None))
        :type name: str
        :return: The newly created layer
        :param : (type: bpy.types.MeshVertexStringPropertyLayer)
        :rtype: MeshVertexStringPropertyLayer
        """


class View2D(bpy_struct):
    """Scroll and zoom for a 2D region"""

    def region_to_view(self, x, y):
        """Transform region coordinates to 2D view
        
        :param x: x, Region x coordinate
            (type: int in [-inf, inf])
        :type x: int
        :param y: y, Region y coordinate
            (type: int in [-inf, inf])
        :type y: int
        :return: Result, View coordinates
        :param : (type: float array of 2 items in [-inf, inf])
        :rtype: collections.Sequence[float]
        """

    def view_to_region(self, x, y, clip=True):
        """Transform 2D view coordinates to region
        
        :param x: x, 2D View x coordinate
            (type: float in [-inf, inf])
        :type x: float
        :param y: y, 2D View y coordinate
            (type: float in [-inf, inf])
        :type y: float
        :param clip: Clip, Clip coordinates to the visible region
            (type: boolean, (optional))
        :type clip: bool
        :return: Result, Region coordinates
        :param : (type: int array of 2 items in [-inf, inf])
        :rtype: collections.Sequence[int]
        """


class VoxelData(bpy_struct):
    """Voxel data settings"""

    domain_object = None
    """Object used as the smoke simulation domain
    (type: bpy.types.Object)
    
    :type: Object
    """

    extension = 'EXTEND'
    """How the texture is extrapolated past its original bounds
    * 'EXTEND': Extend, Extend by repeating edge pixels of the image.
    * 'CLIP': Clip, Clip to image size and set exterior pixels as transparent.
    * 'REPEAT': Repeat, Cause the image to repeat horizontally and vertically.
    (type: enum in ['EXTEND', 'CLIP', 'REPEAT'], default 'EXTEND')
    
    :type: str
    """

    file_format = 'BLENDER_VOXEL'
    """Format of the source data set to render
    * 'BLENDER_VOXEL': Blender Voxel, Default binary voxel file format.
    * 'RAW_8BIT': 8 bit RAW, 8 bit grayscale binary data.
    * 'IMAGE_SEQUENCE': Image Sequence, Generate voxels from a sequence of image slices.
    * 'SMOKE': Smoke, Render voxels from a Blender smoke simulation.
    * 'HAIR': Hair, Render voxels from a Blender hair simulation.
    (type: enum in ['BLENDER_VOXEL', 'RAW_8BIT', 'IMAGE_SEQUENCE', 'SMOKE', 'HAIR'], default 'BLENDER_VOXEL')
    
    :type: str
    """

    filepath = ""
    """The external source data file to use
    (type: string, default "", (never None))
    
    :type: str
    """

    hair_data_type = 'HAIRDENSITY'
    """Simulation value to be used as a texture
    * 'HAIRDENSITY': Density, Use hair density as texture data.
    * 'HAIRRESTDENSITY': Rest Density, Use hair rest density as texture data.
    * 'HAIRVELOCITY': Velocity, Use hair velocity as texture data.
    * 'HAIRENERGY': Energy, Use potential hair energy as texture data.
    (type: enum in ['HAIRDENSITY', 'HAIRRESTDENSITY', 'HAIRVELOCITY', 'HAIRENERGY'], default 'HAIRDENSITY')
    
    :type: str
    """

    intensity = 0.0
    """Multiplier for intensity values
    (type: float in [0.01, inf], default 0.0)
    
    :type: float
    """

    interpolation = 'NEREASTNEIGHBOR'
    """Method to interpolate/smooth values between voxel cells
    * 'NEREASTNEIGHBOR': Nearest Neighbor, No interpolation, fast but blocky and low quality.
    * 'TRILINEAR': Linear, Good smoothness and speed.
    * 'QUADRATIC': Quadratic, Mid-range quality and speed.
    * 'TRICUBIC_CATROM': Cubic Catmull-Rom, High quality interpolation, but slower.
    * 'TRICUBIC_BSPLINE': Cubic B-Spline, Smoothed high quality interpolation, but slower.
    (type: enum in ['NEREASTNEIGHBOR', 'TRILINEAR', 'QUADRATIC', 'TRICUBIC_CATROM', 'TRICUBIC_BSPLINE'], default 'NEREASTNEIGHBOR')
    
    :type: str
    """

    resolution = (0, 0, 0)
    """Resolution of the voxel grid
    (type: int array of 3 items in [1, 100000], default (0, 0, 0))
    
    :type: collections.Sequence[int]
    """

    smoke_data_type = 'SMOKEDENSITY'
    """Simulation value to be used as a texture
    * 'SMOKEDENSITY': Smoke, Use smoke density and color as texture data.
    * 'SMOKEFLAME': Flame, Use flame temperature as texture data.
    * 'SMOKEHEAT': Heat, Use smoke heat as texture data. Values from -2.0 to 2.0 are used.
    * 'SMOKEVEL': Velocity, Use smoke velocity as texture data.
    (type: enum in ['SMOKEDENSITY', 'SMOKEFLAME', 'SMOKEHEAT', 'SMOKEVEL'], default 'SMOKEDENSITY')
    
    :type: str
    """

    still_frame = 0
    """The frame number to always use
    (type: int in [-500000, 500000], default 0)
    
    :type: int
    """

    use_still_frame = False
    """Always render a still frame from the voxel data sequence
    (type: boolean, default False)
    
    :type: bool
    """


class WalkNavigation(bpy_struct):
    """Walk navigation settings"""

    jump_height = 0.0
    """Maximum height of a jump
    (type: float in [0.1, 100], default 0.0)
    
    :type: float
    """

    mouse_speed = 0.0
    """Speed factor for when looking around, high values mean faster mouse movement
    (type: float in [0.01, 10], default 0.0)
    
    :type: float
    """

    teleport_time = 0.0
    """Interval of time warp when teleporting in navigation mode
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    use_gravity = False
    """Walk with gravity, or free navigate
    (type: boolean, default False)
    
    :type: bool
    """

    use_mouse_reverse = False
    """Reverse the vertical movement of the mouse
    (type: boolean, default False)
    
    :type: bool
    """

    view_height = 0.0
    """View distance from the floor when walking
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """

    walk_speed = 0.0
    """Base speed for walking and flying
    (type: float in [0.01, 100], default 0.0)
    
    :type: float
    """

    walk_speed_factor = 0.0
    """Multiplication factor when using the fast or slow modifiers
    (type: float in [0.01, 10], default 0.0)
    
    :type: float
    """


class Window(bpy_struct):
    """Open window"""

    height = 0
    """Window height
    (type: int in [0, 32767], default 0, (readonly))
    
    :type: int
    """

    screen = None
    """Active screen showing in the window
    (type: bpy.types.Screen, (never None))
    
    :type: Screen
    """

    stereo_3d_display = None
    """Settings for stereo 3d display
    (type: bpy.types.Stereo3dDisplay, (readonly, never None))
    
    :type: Stereo3dDisplay
    """

    width = 0
    """Window width
    (type: int in [0, 32767], default 0, (readonly))
    
    :type: int
    """

    x = 0
    """Horizontal location of the window
    (type: int in [-32768, 32767], default 0, (readonly))
    
    :type: int
    """

    y = 0
    """Vertical location of the window
    (type: int in [-32768, 32767], default 0, (readonly))
    
    :type: int
    """

    def cursor_warp(self, x, y):
        """Set the cursor position"""

    def cursor_set(self, cursor):
        """Set the cursor
        
        :param cursor: cursor
            (type: enum in ['DEFAULT', 'NONE', 'WAIT', 'CROSSHAIR', 'MOVE_X', 'MOVE_Y', 'KNIFE', 'TEXT', 'PAINT_BRUSH', 'HAND', 'SCROLL_X', 'SCROLL_Y', 'SCROLL_XY', 'EYEDROPPER'])
        :type cursor: str
        """

    def cursor_modal_set(self, cursor):
        """Restore the previous cursor after calling cursor_modal_set
        
        :param cursor: cursor
            (type: enum in ['DEFAULT', 'NONE', 'WAIT', 'CROSSHAIR', 'MOVE_X', 'MOVE_Y', 'KNIFE', 'TEXT', 'PAINT_BRUSH', 'HAND', 'SCROLL_X', 'SCROLL_Y', 'SCROLL_XY', 'EYEDROPPER'])
        :type cursor: str
        """

    def cursor_modal_restore(self):
        """cursor_modal_restore"""


class WorldLighting(bpy_struct):
    """Lighting for a World data-block"""

    adapt_to_speed = 0.0
    """Use the speed vector pass to reduce AO samples in fast moving pixels - higher values result in more aggressive sample reduction (requires Vec pass enabled, for Raytrace Adaptive QMC)
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    ao_blend_type = 'ADD'
    """Defines how AO mixes with material shading
    * 'MULTIPLY': Multiply, Multiply direct lighting with ambient occlusion, darkening the result.
    * 'ADD': Add, Add light and shadow.
    (type: enum in ['MULTIPLY', 'ADD'], default 'ADD')
    
    :type: str
    """

    ao_factor = 0.0
    """Factor for ambient occlusion blending
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    bias = 0.0
    """Bias (in radians) to prevent smoothed faces from showing banding (for Raytrace Constant Jittered)
    (type: float in [0, 0.5], default 0.0)
    
    :type: float
    """

    correction = 0.0
    """Ad-hoc correction for over-occlusion due to the approximation
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    distance = 0.0
    """Length of rays, defines how far away other faces give occlusion effect
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    environment_color = 'PLAIN'
    """Defines where the color of the environment light comes from
    * 'PLAIN': White, Plain diffuse energy (white.).
    * 'SKY_COLOR': Sky Color, Use horizon and zenith color for diffuse energy.
    * 'SKY_TEXTURE': Sky Texture, Does full Sky texture render for diffuse energy.
    (type: enum in ['PLAIN', 'SKY_COLOR', 'SKY_TEXTURE'], default 'PLAIN')
    
    :type: str
    """

    environment_energy = 0.0
    """Defines the strength of environment light
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    error_threshold = 0.0
    """Low values are slower and higher quality
    (type: float in [0.0001, 10], default 0.0)
    
    :type: float
    """

    falloff_strength = 0.0
    """Attenuation falloff strength, the higher, the less influence distant objects have
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    gather_method = 'RAYTRACE'
    """
    * 'RAYTRACE': Raytrace, Accurate, but slow when noise-free results are required.
    * 'APPROXIMATE': Approximate, Inaccurate, but faster and without noise.
    (type: enum in ['RAYTRACE', 'APPROXIMATE'], default 'RAYTRACE')
    
    :type: str
    """

    indirect_bounces = 0
    """Number of indirect diffuse light bounces
    (type: int in [1, 32767], default 0)
    
    :type: int
    """

    indirect_factor = 0.0
    """Factor for how much surrounding objects contribute to light
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    passes = 0
    """Number of preprocessing passes to reduce over-occlusion
    (type: int in [0, 10], default 0)
    
    :type: int
    """

    sample_method = 'CONSTANT_JITTERED'
    """Method for generating shadow samples (for Raytrace)
    * 'CONSTANT_JITTERED': Constant Jittered, Fastest and gives the most noise.
    * 'ADAPTIVE_QMC': Adaptive QMC, Fast in high-contrast areas.
    * 'CONSTANT_QMC': Constant QMC, Best quality.
    (type: enum in ['CONSTANT_JITTERED', 'ADAPTIVE_QMC', 'CONSTANT_QMC'], default 'CONSTANT_JITTERED')
    
    :type: str
    """

    samples = 0
    """Amount of ray samples. Higher values give smoother results and longer rendering times
    (type: int in [1, 128], default 0)
    
    :type: int
    """

    threshold = 0.0
    """Samples below this threshold will be considered fully shadowed/unshadowed and skipped (for Raytrace Adaptive QMC)
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    use_ambient_occlusion = False
    """Use Ambient Occlusion to add shadowing based on distance between objects
    (type: boolean, default False)
    
    :type: bool
    """

    use_cache = False
    """Cache AO results in pixels and interpolate over neighboring pixels for speedup
    (type: boolean, default False)
    
    :type: bool
    """

    use_environment_light = False
    """Add light coming from the environment
    (type: boolean, default False)
    
    :type: bool
    """

    use_falloff = False
    """Distance will be used to attenuate shadows
    (type: boolean, default False)
    
    :type: bool
    """

    use_indirect_light = False
    """Add indirect light bouncing of surrounding objects
    (type: boolean, default False)
    
    :type: bool
    """


class WorldMistSettings(bpy_struct):
    """Mist settings for a World data-block"""

    depth = 0.0
    """Distance over which the mist effect fades in
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    falloff = 'QUADRATIC'
    """Type of transition used to fade mist
    * 'QUADRATIC': Quadratic, Use quadratic progression.
    * 'LINEAR': Linear, Use linear progression.
    * 'INVERSE_QUADRATIC': Inverse Quadratic, Use inverse quadratic progression.
    (type: enum in ['QUADRATIC', 'LINEAR', 'INVERSE_QUADRATIC'], default 'QUADRATIC')
    
    :type: str
    """

    height = 0.0
    """Control how much mist density decreases with height
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    intensity = 0.0
    """Overall minimum intensity of the mist effect
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    start = 0.0
    """Starting distance of the mist, measured from the camera
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    use_mist = False
    """Occlude objects with the environment color as they are further away
    (type: boolean, default False)
    
    :type: bool
    """


class WorldTextureSlots(bpy_struct):
    """Collection of texture slots"""

    def add(self):
        """add
        
        :return: The newly initialized mtex
        :param : (type: bpy.types.WorldTextureSlot)
        :rtype: WorldTextureSlot
        """

    def create(self, index):
        """create
        
        :param index: Index, Slot index to initialize
            (type: int in [0, inf])
        :type index: int
        :return: The newly initialized mtex
        :param : (type: bpy.types.WorldTextureSlot)
        :rtype: WorldTextureSlot
        """

    def clear(self, index):
        """clear
        
        :param index: Index, Slot index to clear
            (type: int in [0, inf])
        :type index: int
        """


class Action(ID):
    """A collection of F-Curves for animation"""

    fcurves = None
    """The individual F-Curves that make up the action
    (type: bpy.types.ActionFCurves bpy.types.bpy_prop_collection of bpy.types.FCurve, (readonly))
    
    :type: ActionFCurves
    """

    frame_range = (0.0, 0.0)
    """The final frame range of all F-Curves within this action
    (type: float array of 2 items in [-inf, inf], default (0.0, 0.0), (readonly))
    
    :type: mathutils.Vector
    """

    groups = None
    """Convenient groupings of F-Curves
    (type: bpy.types.ActionGroups bpy.types.bpy_prop_collection of bpy.types.ActionGroup, (readonly))
    
    :type: ActionGroups
    """

    id_root = 'ACTION'
    """Type of ID block that action can be used on - DO NOT CHANGE UNLESS YOU KNOW WHAT YOU ARE DOING
    (type: enum in ['ACTION', 'ARMATURE', 'BRUSH', 'CAMERA', 'CACHEFILE', 'CURVE', 'FONT', 'GREASEPENCIL', 'GROUP', 'IMAGE', 'KEY', 'LAMP', 'LIBRARY', 'LINESTYLE', 'LATTICE', 'MASK', 'MATERIAL', 'META', 'MESH', 'MOVIECLIP', 'NODETREE', 'OBJECT', 'PAINTCURVE', 'PALETTE', 'PARTICLE', 'SCENE', 'SCREEN', 'SOUND', 'SPEAKER', 'TEXT', 'TEXTURE', 'WINDOWMANAGER', 'WORLD'], default 'ACTION')
    
    :type: str
    """

    pose_markers = None
    """Markers specific to this action, for labeling poses
    (type: bpy.types.ActionPoseMarkers bpy.types.bpy_prop_collection of bpy.types.TimelineMarker, (readonly))
    
    :type: ActionPoseMarkers
    """


class ActionActuator(Actuator):
    """Actuator to control the object movement"""

    action = None
    """(type: bpy.types.Action)
    
    :type: Action
    """

    apply_to_children = False
    """Update Action on all children Objects as well
    (type: boolean, default False)
    
    :type: bool
    """

    blend_mode = 'BLEND'
    """How this layer is blended with previous layers
    (type: enum in ['BLEND', 'ADD'], default 'BLEND')
    
    :type: str
    """

    frame_blend_in = 0
    """Number of frames of motion blending
    (type: int in [0, 32767], default 0)
    
    :type: int
    """

    frame_end = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    frame_property = ""
    """Assign the action's current frame number to this property
    (type: string, default "", (never None))
    
    :type: str
    """

    frame_start = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    layer = 0
    """The animation layer to play the action on
    (type: int in [0, 32766], default 0)
    
    :type: int
    """

    layer_weight = 0.0
    """How much of the previous layer to blend into this one
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    play_mode = 'PLAY'
    """Action playback type
    (type: enum in ['PLAY', 'PINGPONG', 'FLIPPER', 'LOOPSTOP', 'LOOPEND', 'PROPERTY'], default 'PLAY')
    
    :type: str
    """

    priority = 0
    """Execution priority - lower numbers will override actions with higher numbers (with 2 or more actions at once, the overriding channels must be lower in the stack)
    (type: int in [0, 100], default 0)
    
    :type: int
    """

    property = ""
    """Use this property to define the Action position
    (type: string, default "", (never None))
    
    :type: str
    """

    use_additive = False
    """Action is added to the current loc/rot/scale in global or local coordinate according to Local flag
    (type: boolean, default False)
    
    :type: bool
    """

    use_continue_last_frame = False
    """Restore last frame when switching on/off, otherwise play from the start each time
    (type: boolean, default False)
    
    :type: bool
    """

    use_force = False
    """Apply Action as a global or local force depending on the local option (dynamic objects only)
    (type: boolean, default False)
    
    :type: bool
    """

    use_local = False
    """Let the Action act in local coordinates, used in Force and Add mode
    (type: boolean, default False)
    
    :type: bool
    """


class ActionConstraint(Constraint):
    """Map an action to the transform axes of a bone"""

    action = None
    """The constraining action
    (type: bpy.types.Action)
    
    :type: Action
    """

    frame_end = 0
    """Last frame of the Action to use
    (type: int in [-500000, 500000], default 0)
    
    :type: int
    """

    frame_start = 0
    """First frame of the Action to use
    (type: int in [-500000, 500000], default 0)
    
    :type: int
    """

    max = 0.0
    """Maximum value for target channel range
    (type: float in [-1000, 1000], default 0.0)
    
    :type: float
    """

    min = 0.0
    """Minimum value for target channel range
    (type: float in [-1000, 1000], default 0.0)
    
    :type: float
    """

    subtarget = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    target = None
    """Target Object
    (type: bpy.types.Object)
    
    :type: Object
    """

    transform_channel = 'ROTATION_X'
    """Transformation channel from the target that is used to key the Action
    (type: enum in ['LOCATION_X', 'LOCATION_Y', 'LOCATION_Z', 'ROTATION_X', 'ROTATION_Y', 'ROTATION_Z', 'SCALE_X', 'SCALE_Y', 'SCALE_Z'], default 'ROTATION_X')
    
    :type: str
    """

    use_bone_object_action = False
    """Bones only: apply the object's transformation channels of the action to the constrained bone, instead of bone's channels
    (type: boolean, default False)
    
    :type: bool
    """


class ActuatorSensor(Sensor):
    """Sensor to detect state modifications of actuators"""

    actuator = ""
    """Actuator name, actuator active state modifications will be detected
    (type: string, default "", (never None))
    
    :type: str
    """


class AlwaysSensor(Sensor):
    """Sensor to generate continuous pulses"""


class AndController(Controller):
    """Controller passing on events based on a logical AND operation"""


class Armature(ID):
    """Armature data-block containing a hierarchy of bones, usually used for rigging characters"""

    animation_data = None
    """Animation data for this data-block
    (type: bpy.types.AnimData, (readonly))
    
    :type: AnimData
    """

    bones = None
    """(type: bpy.types.ArmatureBones bpy.types.bpy_prop_collection of bpy.types.Bone, (readonly))
    
    :type: ArmatureBones
    """

    deform_method = 'BLENDER'
    """Vertex Deformer Method (Game Engine only)
    * 'BLENDER': Blender, Use Blender's armature vertex deformation.
    * 'BGE_CPU': BGE, Use vertex deformation code optimized for the BGE.
    (type: enum in ['BLENDER', 'BGE_CPU'], default 'BLENDER')
    
    :type: str
    """

    draw_type = 'OCTAHEDRAL'
    """
    * 'OCTAHEDRAL': Octahedral, Display bones as octahedral shape (default).
    * 'STICK': Stick, Display bones as simple 2D lines with dots.
    * 'BBONE': B-Bone, Display bones as boxes, showing subdivision and B-Splines.
    * 'ENVELOPE': Envelope, Display bones as extruded spheres, showing deformation influence volume.
    * 'WIRE': Wire, Display bones as thin wires, showing subdivision and B-Splines.
    (type: enum in ['OCTAHEDRAL', 'STICK', 'BBONE', 'ENVELOPE', 'WIRE'], default 'OCTAHEDRAL')
    
    :type: str
    """

    edit_bones = None
    """(type: bpy.types.ArmatureEditBones bpy.types.bpy_prop_collection of bpy.types.EditBone, (readonly))
    
    :type: ArmatureEditBones
    """

    ghost_frame_end = 0
    """End frame of range of Ghosts to display (not for 'Around Current Frame' Onion-skinning method)
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    ghost_frame_start = 0
    """Starting frame of range of Ghosts to display (not for 'Around Current Frame' Onion-skinning method)
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    ghost_size = 0
    """Frame step for Ghosts (not for 'On Keyframes' Onion-skinning method)
    (type: int in [1, 20], default 0)
    
    :type: int
    """

    ghost_step = 0
    """Number of frame steps on either side of current frame to show as ghosts (only for 'Around Current Frame' Onion-skinning method)
    (type: int in [0, 30], default 0)
    
    :type: int
    """

    ghost_type = 'CURRENT_FRAME'
    """Method of Onion-skinning for active Action
    * 'CURRENT_FRAME': Around Frame, Display Ghosts of poses within a fixed number of frames around the current frame.
    * 'RANGE': In Range, Display Ghosts of poses within specified range.
    * 'KEYS': On Keyframes, Display Ghosts of poses on Keyframes.
    (type: enum in ['CURRENT_FRAME', 'RANGE', 'KEYS'], default 'CURRENT_FRAME')
    
    :type: str
    """

    is_editmode = False
    """True when used in editmode
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    layers = (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
    """Armature layer visibility
    (type: boolean array of 32 items, default (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False))
    
    :type: collections.Sequence[bool]
    """

    layers_protected = (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
    """Protected layers in Proxy Instances are restored to Proxy settings on file reload and undo
    (type: boolean array of 32 items, default (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False))
    
    :type: collections.Sequence[bool]
    """

    pose_position = 'POSE'
    """Show armature in binding pose or final posed state
    * 'POSE': Pose Position, Show armature in posed state.
    * 'REST': Rest Position, Show Armature in binding pose state (no posing possible).
    (type: enum in ['POSE', 'REST'], default 'POSE')
    
    :type: str
    """

    show_axes = False
    """Draw bone axes
    (type: boolean, default False)
    
    :type: bool
    """

    show_bone_custom_shapes = False
    """Draw bones with their custom shapes
    (type: boolean, default False)
    
    :type: bool
    """

    show_group_colors = False
    """Draw bone group colors
    (type: boolean, default False)
    
    :type: bool
    """

    show_names = False
    """Draw bone names
    (type: boolean, default False)
    
    :type: bool
    """

    show_only_ghost_selected = False
    """(type: boolean, default False)
    
    :type: bool
    """

    use_auto_ik = False
    """Add temporary IK constraints while grabbing bones in Pose Mode
    (type: boolean, default False)
    
    :type: bool
    """

    use_deform_delay = False
    """Don't deform children when manipulating bones in Pose Mode
    (type: boolean, default False)
    
    :type: bool
    """

    use_mirror_x = False
    """Apply changes to matching bone on opposite side of X-Axis
    (type: boolean, default False)
    
    :type: bool
    """

    def transform(self, matrix):
        """Transform armature bones by a matrix
        
        :param matrix: Matrix
            (type: float array of 16 items in [-inf, inf])
        :type matrix: mathutils.Matrix
        """


class ArmatureActuator(Actuator):
    """"""

    bone = ""
    """Bone on which the constraint is defined
    (type: string, default "", (never None))
    
    :type: str
    """

    constraint = ""
    """Name of the constraint to control
    (type: string, default "", (never None))
    
    :type: str
    """

    influence = 0.0
    """Influence of this constraint
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    mode = 'RUN'
    """(type: enum in ['RUN', 'ENABLE', 'DISABLE', 'SETTARGET', 'SETWEIGHT', 'SETINFLUENCE'], default 'RUN')
    
    :type: str
    """

    secondary_target = None
    """Set this object as the secondary target of the constraint (only IK polar target at the moment)
    (type: bpy.types.Object)
    
    :type: Object
    """

    target = None
    """Set this object as the target of the constraint
    (type: bpy.types.Object)
    
    :type: Object
    """

    weight = 0.0
    """Weight of this constraint
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """


class ArmatureModifier(Modifier):
    """Armature deformation modifier"""

    invert_vertex_group = False
    """Invert vertex group influence
    (type: boolean, default False)
    
    :type: bool
    """

    object = None
    """Armature object to deform with
    (type: bpy.types.Object)
    
    :type: Object
    """

    use_bone_envelopes = False
    """Bind Bone envelopes to armature modifier
    (type: boolean, default False)
    
    :type: bool
    """

    use_deform_preserve_volume = False
    """Deform rotation interpolation with quaternions
    (type: boolean, default False)
    
    :type: bool
    """

    use_multi_modifier = False
    """Use same input as previous modifier, and mix results using overall vgroup
    (type: boolean, default False)
    
    :type: bool
    """

    use_vertex_groups = False
    """Bind vertex groups to armature modifier
    (type: boolean, default False)
    
    :type: bool
    """

    vertex_group = ""
    """Name of Vertex Group which determines influence of modifier per point
    (type: string, default "", (never None))
    
    :type: str
    """


class ArmatureSensor(Sensor):
    """Sensor to detect values and changes in values of IK solver"""

    bone = ""
    """Identify the bone to check value from
    (type: string, default "", (never None))
    
    :type: str
    """

    constraint = ""
    """Identify the bone constraint to check value from
    (type: string, default "", (never None))
    
    :type: str
    """

    test_type = 'STATECHG'
    """Type of value and test
    (type: enum in ['STATECHG', 'LINERRORBELOW', 'LINERRORABOVE', 'ROTERRORBELOW', 'ROTERRORABOVE'], default 'STATECHG')
    
    :type: str
    """

    value = 0.0
    """Value to be used in comparison
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """


class ArrayModifier(Modifier):
    """Array duplication modifier"""

    constant_offset_displace = (0.0, 0.0, 0.0)
    """Value for the distance between arrayed items
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    count = 0
    """Number of duplicates to make
    (type: int in [1, inf], default 0)
    
    :type: int
    """

    curve = None
    """Curve object to fit array length to
    (type: bpy.types.Object)
    
    :type: Object
    """

    end_cap = None
    """Mesh object to use as an end cap
    (type: bpy.types.Object)
    
    :type: Object
    """

    fit_length = 0.0
    """Length to fit array within
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    fit_type = 'FIXED_COUNT'
    """Array length calculation method
    * 'FIXED_COUNT': Fixed Count, Duplicate the object a certain number of times.
    * 'FIT_LENGTH': Fit Length, Duplicate the object as many times as fits in a certain length.
    * 'FIT_CURVE': Fit Curve, Fit the duplicated objects to a curve.
    (type: enum in ['FIXED_COUNT', 'FIT_LENGTH', 'FIT_CURVE'], default 'FIXED_COUNT')
    
    :type: str
    """

    merge_threshold = 0.0
    """Limit below which to merge vertices
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    offset_object = None
    """Use the location and rotation of another object to determine the distance and rotational change between arrayed items
    (type: bpy.types.Object)
    
    :type: Object
    """

    relative_offset_displace = (0.0, 0.0, 0.0)
    """The size of the geometry will determine the distance between arrayed items
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    start_cap = None
    """Mesh object to use as a start cap
    (type: bpy.types.Object)
    
    :type: Object
    """

    use_constant_offset = False
    """Add a constant offset
    (type: boolean, default False)
    
    :type: bool
    """

    use_merge_vertices = False
    """Merge vertices in adjacent duplicates
    (type: boolean, default False)
    
    :type: bool
    """

    use_merge_vertices_cap = False
    """Merge vertices in first and last duplicates
    (type: boolean, default False)
    
    :type: bool
    """

    use_object_offset = False
    """Add another object's transformation to the total offset
    (type: boolean, default False)
    
    :type: bool
    """

    use_relative_offset = False
    """Add an offset relative to the object's bounding box
    (type: boolean, default False)
    
    :type: bool
    """


class Available(KeyingSetInfo):
    """"""

    def generate(self, ksi, context, ks, data):
        """"""

    def iterator(self, ksi, context, ks):
        """"""

    def poll(self, ksi, context):
        """"""


class BevelModifier(Modifier):
    """Bevel modifier to make edges and vertices more rounded"""

    angle_limit = 0.0
    """Angle above which to bevel edges
    (type: float in [0, 3.14159], default 0.0)
    
    :type: float
    """

    edge_weight_method = 'AVERAGE'
    """What edge weight to use for weighting a vertex
    (type: enum in ['AVERAGE', 'SHARPEST', 'LARGEST'], default 'AVERAGE')
    
    :type: str
    """

    limit_method = 'NONE'
    """
    * 'NONE': None, Bevel the entire mesh by a constant amount.
    * 'ANGLE': Angle, Only bevel edges with sharp enough angles between faces.
    * 'WEIGHT': Weight, Use bevel weights to determine how much bevel is applied in edge mode.
    * 'VGROUP': Vertex Group, Use vertex group weights to select whether vertex or edge is beveled.
    (type: enum in ['NONE', 'ANGLE', 'WEIGHT', 'VGROUP'], default 'NONE')
    
    :type: str
    """

    loop_slide = False
    """Prefer sliding along edges to having even widths
    (type: boolean, default False)
    
    :type: bool
    """

    material = 0
    """Material index of generated faces, -1 for automatic
    (type: int in [-1, 32767], default 0)
    
    :type: int
    """

    offset_type = 'OFFSET'
    """What distance Width measures
    * 'OFFSET': Offset, Amount is offset of new edges from original.
    * 'WIDTH': Width, Amount is width of new face.
    * 'DEPTH': Depth, Amount is perpendicular distance from original edge to bevel face.
    * 'PERCENT': Percent, Amount is percent of adjacent edge length.
    (type: enum in ['OFFSET', 'WIDTH', 'DEPTH', 'PERCENT'], default 'OFFSET')
    
    :type: str
    """

    profile = 0.0
    """The profile shape (0.5 = round)
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    segments = 0
    """Number of segments for round edges/verts
    (type: int in [1, 100], default 0)
    
    :type: int
    """

    use_clamp_overlap = False
    """Clamp the width to avoid overlap
    (type: boolean, default False)
    
    :type: bool
    """

    use_only_vertices = False
    """Bevel verts/corners, not edges
    (type: boolean, default False)
    
    :type: bool
    """

    vertex_group = ""
    """Vertex group name
    (type: string, default "", (never None))
    
    :type: str
    """

    width = 0.0
    """Bevel value/amount
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """


class BoidRuleAverageSpeed(BoidRule):
    """"""

    level = 0.0
    """How much velocity's z-component is kept constant
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    speed = 0.0
    """Percentage of maximum speed
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    wander = 0.0
    """How fast velocity's direction is randomized
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """


class BoidRuleAvoid(BoidRule):
    """"""

    fear_factor = 0.0
    """Avoid object if danger from it is above this threshold
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    object = None
    """Object to avoid
    (type: bpy.types.Object)
    
    :type: Object
    """

    use_predict = False
    """Predict target movement
    (type: boolean, default False)
    
    :type: bool
    """


class BoidRuleAvoidCollision(BoidRule):
    """"""

    look_ahead = 0.0
    """Time to look ahead in seconds
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    use_avoid = False
    """Avoid collision with other boids
    (type: boolean, default False)
    
    :type: bool
    """

    use_avoid_collision = False
    """Avoid collision with deflector objects
    (type: boolean, default False)
    
    :type: bool
    """


class BoidRuleFight(BoidRule):
    """"""

    distance = 0.0
    """Attack boids at max this distance
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    flee_distance = 0.0
    """Flee to this distance
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """


class BoidRuleFollowLeader(BoidRule):
    """"""

    distance = 0.0
    """Distance behind leader to follow
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    object = None
    """Follow this object instead of a boid
    (type: bpy.types.Object)
    
    :type: Object
    """

    queue_count = 0
    """How many boids in a line
    (type: int in [0, 100], default 0)
    
    :type: int
    """

    use_line = False
    """Follow leader in a line
    (type: boolean, default False)
    
    :type: bool
    """


class BoidRuleGoal(BoidRule):
    """"""

    object = None
    """Goal object
    (type: bpy.types.Object)
    
    :type: Object
    """

    use_predict = False
    """Predict target movement
    (type: boolean, default False)
    
    :type: bool
    """


class BoolProperty(Property):
    """RNA boolean property definition"""

    array_length = 0
    """Maximum length of the array, 0 means unlimited
    (type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """

    default = False
    """Default value for this number
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    default_array = (False, False, False)
    """Default value for this array
    (type: boolean array of 3 items, default (False, False, False), (readonly))
    
    :type: collections.Sequence[bool]
    """

    is_array = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """


class BooleanModifier(Modifier):
    """Boolean operations modifier"""

    double_threshold = 0.0
    """Threshold for checking overlapping geometry
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    object = None
    """Mesh object to use for Boolean operation
    (type: bpy.types.Object)
    
    :type: Object
    """

    operation = 'INTERSECT'
    """
    * 'INTERSECT': Intersect, Keep the part of the mesh that intersects with the other selected object.
    * 'UNION': Union, Combine two meshes in an additive way.
    * 'DIFFERENCE': Difference, Combine two meshes in a subtractive way.
    (type: enum in ['INTERSECT', 'UNION', 'DIFFERENCE'], default 'INTERSECT')
    
    :type: str
    """

    solver = 'CARVE'
    """
    * 'BMESH': BMesh, Use the BMesh boolean solver.
    * 'CARVE': Carve, Use the Carve boolean solver.
    (type: enum in ['BMESH', 'CARVE'], default 'CARVE')
    
    :type: str
    """


class BrightContrastModifier(SequenceModifier):
    """Bright/contrast modifier data for sequence strip"""

    bright = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    contrast = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """


class Brush(ID):
    """Brush data-block for storing brush settings for painting and sculpting"""

    auto_smooth_factor = 0.0
    """Amount of smoothing to automatically apply to each stroke
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    blend = 'MIX'
    """Brush blending mode
    * 'MIX': Mix, Use mix blending mode while painting.
    * 'ADD': Add, Use add blending mode while painting.
    * 'SUB': Subtract, Use subtract blending mode while painting.
    * 'MUL': Multiply, Use multiply blending mode while painting.
    * 'LIGHTEN': Lighten, Use lighten blending mode while painting.
    * 'DARKEN': Darken, Use darken blending mode while painting.
    * 'ERASE_ALPHA': Erase Alpha, Erase alpha while painting.
    * 'ADD_ALPHA': Add Alpha, Add alpha while painting.
    * 'OVERLAY': Overlay, Use overlay blending mode while painting.
    * 'HARDLIGHT': Hard light, Use hard light blending mode while painting.
    * 'COLORBURN': Color burn, Use color burn blending mode while painting.
    * 'LINEARBURN': Linear burn, Use linear burn blending mode while painting.
    * 'COLORDODGE': Color dodge, Use color dodge blending mode while painting.
    * 'SCREEN': Screen, Use screen blending mode while painting.
    * 'SOFTLIGHT': Soft light, Use softlight blending mode while painting.
    * 'PINLIGHT': Pin light, Use pinlight blending mode while painting.
    * 'VIVIDLIGHT': Vivid light, Use vividlight blending mode while painting.
    * 'LINEARLIGHT': Linear light, Use linearlight blending mode while painting.
    * 'DIFFERENCE': Difference, Use difference blending mode while painting.
    * 'EXCLUSION': Exclusion, Use exclusion blending mode while painting.
    * 'HUE': Hue, Use hue blending mode while painting.
    * 'SATURATION': Saturation, Use saturation blending mode while painting.
    * 'LUMINOSITY': Luminosity, Use luminosity blending mode while painting.
    * 'COLOR': Color, Use color blending mode while painting.
    (type: enum in ['MIX', 'ADD', 'SUB', 'MUL', 'LIGHTEN', 'DARKEN', 'ERASE_ALPHA', 'ADD_ALPHA', 'OVERLAY', 'HARDLIGHT', 'COLORBURN', 'LINEARBURN', 'COLORDODGE', 'SCREEN', 'SOFTLIGHT', 'PINLIGHT', 'VIVIDLIGHT', 'LINEARLIGHT', 'DIFFERENCE', 'EXCLUSION', 'HUE', 'SATURATION', 'LUMINOSITY', 'COLOR'], default 'MIX')
    
    :type: str
    """

    blur_kernel_radius = 0
    """Radius of kernel used for soften and sharpen in pixels
    (type: int in [1, 10000], default 0)
    
    :type: int
    """

    blur_mode = 'GAUSSIAN'
    """(type: enum in ['BOX', 'GAUSSIAN'], default 'GAUSSIAN')
    
    :type: str
    """

    brush_capabilities = None
    """Brush's capabilities
    (type: bpy.types.BrushCapabilities, (readonly, never None))
    
    :type: BrushCapabilities
    """

    clone_alpha = 0.0
    """Opacity of clone image display
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    clone_image = None
    """Image for clone tool
    (type: bpy.types.Image)
    
    :type: Image
    """

    clone_offset = (0.0, 0.0)
    """(type: float array of 2 items in [-inf, inf], default (0.0, 0.0))
    
    :type: mathutils.Vector
    """

    color = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    crease_pinch_factor = 0.666667
    """How much the crease brush pinches
    (type: float in [0, 1], default 0.666667)
    
    :type: float
    """

    cursor_color_add = (0.0, 0.0, 0.0)
    """Color of cursor when adding
    (type: float array of 3 items in [0, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    cursor_color_subtract = (0.0, 0.0, 0.0)
    """Color of cursor when subtracting
    (type: float array of 3 items in [0, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    cursor_overlay_alpha = 0
    """(type: int in [0, 100], default 0)
    
    :type: int
    """

    curve = None
    """Editable falloff curve
    (type: bpy.types.CurveMapping, (readonly, never None))
    
    :type: CurveMapping
    """

    direction = 'ADD'
    """
    * 'ADD': Add, Add effect of brush.
    * 'SUBTRACT': Subtract, Subtract effect of brush.
    (type: enum in ['ADD', 'SUBTRACT'], default 'ADD')
    
    :type: str
    """

    fill_threshold = 0.0
    """Threshold above which filling is not propagated
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    grad_spacing = 0
    """Spacing before brush gradient goes full circle
    (type: int in [1, 10000], default 0)
    
    :type: int
    """

    gradient = None
    """(type: bpy.types.ColorRamp, (readonly))
    
    :type: ColorRamp
    """

    gradient_fill_mode = 'LINEAR'
    """(type: enum in ['LINEAR', 'RADIAL'], default 'LINEAR')
    
    :type: str
    """

    gradient_stroke_mode = 'PRESSURE'
    """(type: enum in ['PRESSURE', 'SPACING_REPEAT', 'SPACING_CLAMP'], default 'PRESSURE')
    
    :type: str
    """

    height = 0.5
    """Affectable height of brush (layer height for layer tool, i.e.)
    (type: float in [0, 1], default 0.5)
    
    :type: float
    """

    icon_filepath = ""
    """File path to brush icon
    (type: string, default "", (never None))
    
    :type: str
    """

    image_paint_capabilities = None
    """Brush's capabilities in image paint mode
    (type: bpy.types.ImapaintToolCapabilities, (readonly, never None))
    
    :type: ImapaintToolCapabilities
    """

    image_tool = 'DRAW'
    """(type: enum in ['DRAW', 'SOFTEN', 'SMEAR', 'CLONE', 'FILL', 'MASK'], default 'DRAW')
    
    :type: str
    """

    jitter = 0.0
    """Jitter the position of the brush while painting
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """

    jitter_absolute = 0
    """Jitter the position of the brush in pixels while painting
    (type: int in [0, 1000000], default 0)
    
    :type: int
    """

    mask_overlay_alpha = 0
    """(type: int in [0, 100], default 0)
    
    :type: int
    """

    mask_stencil_dimension = (0.0, 0.0)
    """Dimensions of mask stencil in viewport
    (type: float array of 2 items in [-inf, inf], default (0.0, 0.0))
    
    :type: mathutils.Vector
    """

    mask_stencil_pos = (0.0, 0.0)
    """Position of mask stencil in viewport
    (type: float array of 2 items in [-inf, inf], default (0.0, 0.0))
    
    :type: mathutils.Vector
    """

    mask_texture = None
    """(type: bpy.types.Texture)
    
    :type: Texture
    """

    mask_texture_slot = None
    """(type: bpy.types.BrushTextureSlot, (readonly))
    
    :type: BrushTextureSlot
    """

    mask_tool = 'DRAW'
    """(type: enum in ['DRAW', 'SMOOTH'], default 'DRAW')
    
    :type: str
    """

    normal_weight = 0.0
    """How much grab will pull vertexes out of surface during a grab
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    paint_curve = None
    """Active Paint Curve
    (type: bpy.types.PaintCurve)
    
    :type: PaintCurve
    """

    plane_offset = 0.0
    """Adjust plane on which the brush acts towards or away from the object surface
    (type: float in [-2, 2], default 0.0)
    
    :type: float
    """

    plane_trim = 0.5
    """If a vertex is further away from offset plane than this, then it is not affected
    (type: float in [0, 1], default 0.5)
    
    :type: float
    """

    rake_factor = 0.0
    """How much grab will follow cursor rotation
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    rate = 0.0
    """Interval between paints for Airbrush
    (type: float in [0.0001, 10000], default 0.0)
    
    :type: float
    """

    sculpt_capabilities = None
    """Brush's capabilities in sculpt mode
    (type: bpy.types.SculptToolCapabilities, (readonly, never None))
    
    :type: SculptToolCapabilities
    """

    sculpt_plane = 'AREA'
    """(type: enum in ['AREA', 'VIEW', 'X', 'Y', 'Z'], default 'AREA')
    
    :type: str
    """

    sculpt_tool = 'BLOB'
    """(type: enum in ['BLOB', 'CLAY', 'CLAY_STRIPS', 'CREASE', 'DRAW', 'FILL', 'FLATTEN', 'GRAB', 'INFLATE', 'LAYER', 'MASK', 'NUDGE', 'PINCH', 'ROTATE', 'SCRAPE', 'SIMPLIFY', 'SMOOTH', 'SNAKE_HOOK', 'THUMB'], default 'BLOB')
    
    :type: str
    """

    secondary_color = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    sharp_threshold = 0.0
    """Threshold below which, no sharpening is done
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    size = 0
    """Radius of the brush in pixels
    (type: int in [1, 5000], default 0)
    
    :type: int
    """

    smooth_stroke_factor = 0.0
    """Higher values give a smoother stroke
    (type: float in [0.5, 0.99], default 0.0)
    
    :type: float
    """

    smooth_stroke_radius = 0
    """Minimum distance from last point before stroke continues
    (type: int in [10, 200], default 0)
    
    :type: int
    """

    spacing = 0
    """Spacing between brush daubs as a percentage of brush diameter
    (type: int in [1, 1000], default 0)
    
    :type: int
    """

    stencil_dimension = (0.0, 0.0)
    """Dimensions of stencil in viewport
    (type: float array of 2 items in [-inf, inf], default (0.0, 0.0))
    
    :type: mathutils.Vector
    """

    stencil_pos = (0.0, 0.0)
    """Position of stencil in viewport
    (type: float array of 2 items in [-inf, inf], default (0.0, 0.0))
    
    :type: mathutils.Vector
    """

    strength = 0.5
    """How powerful the effect of the brush is when applied
    (type: float in [0, 10], default 0.5)
    
    :type: float
    """

    stroke_method = 'DOTS'
    """
    * 'DOTS': Dots, Apply paint on each mouse move step.
    * 'DRAG_DOT': Drag Dot, Allows a single dot to be carefully positioned.
    * 'SPACE': Space, Limit brush application to the distance specified by spacing.
    * 'AIRBRUSH': Airbrush, Keep applying paint effect while holding mouse (spray).
    * 'ANCHORED': Anchored, Keep the brush anchored to the initial location.
    * 'LINE': Line, Draw a line with dabs separated according to spacing.
    * 'CURVE': Curve, Define the stroke curve with a bezier curve (dabs are separated according to spacing).
    (type: enum in ['DOTS', 'DRAG_DOT', 'SPACE', 'AIRBRUSH', 'ANCHORED', 'LINE', 'CURVE'], default 'DOTS')
    
    :type: str
    """

    texture = None
    """(type: bpy.types.Texture)
    
    :type: Texture
    """

    texture_overlay_alpha = 0
    """(type: int in [0, 100], default 0)
    
    :type: int
    """

    texture_sample_bias = 0.0
    """Value added to texture samples
    (type: float in [-1, 1], default 0.0)
    
    :type: float
    """

    texture_slot = None
    """(type: bpy.types.BrushTextureSlot, (readonly))
    
    :type: BrushTextureSlot
    """

    unprojected_radius = 0.0
    """Radius of brush in Blender units
    (type: float in [0.001, inf], default 0.0)
    
    :type: float
    """

    use_accumulate = False
    """Accumulate stroke daubs on top of each other
    (type: boolean, default False)
    
    :type: bool
    """

    use_adaptive_space = False
    """Space daubs according to surface orientation instead of screen space
    (type: boolean, default False)
    
    :type: bool
    """

    use_airbrush = False
    """Keep applying paint effect while holding mouse (spray)
    (type: boolean, default False)
    
    :type: bool
    """

    use_alpha = False
    """When this is disabled, lock alpha while painting
    (type: boolean, default False)
    
    :type: bool
    """

    use_anchor = False
    """Keep the brush anchored to the initial location
    (type: boolean, default False)
    
    :type: bool
    """

    use_cursor_overlay = False
    """Show cursor in viewport
    (type: boolean, default False)
    
    :type: bool
    """

    use_cursor_overlay_override = False
    """Don't show overlay during a stroke
    (type: boolean, default False)
    
    :type: bool
    """

    use_curve = False
    """Define the stroke curve with a bezier curve. Dabs are separated according to spacing
    (type: boolean, default False)
    
    :type: bool
    """

    use_custom_icon = False
    """Set the brush icon from an image file
    (type: boolean, default False)
    
    :type: bool
    """

    use_edge_to_edge = False
    """Drag anchor brush from edge-to-edge
    (type: boolean, default False)
    
    :type: bool
    """

    use_frontface = False
    """Brush only affects vertexes that face the viewer
    (type: boolean, default False)
    
    :type: bool
    """

    use_gradient = False
    """Use Gradient by utilizing a sampling method
    (type: boolean, default False)
    
    :type: bool
    """

    use_inverse_smooth_pressure = False
    """Lighter pressure causes more smoothing to be applied
    (type: boolean, default False)
    
    :type: bool
    """

    use_line = False
    """Draw a line with dabs separated according to spacing
    (type: boolean, default False)
    
    :type: bool
    """

    use_locked_size = False
    """When locked brush stays same size relative to object; when unlocked brush size is given in pixels
    (type: boolean, default False)
    
    :type: bool
    """

    use_offset_pressure = False
    """Enable tablet pressure sensitivity for offset
    (type: boolean, default False)
    
    :type: bool
    """

    use_original_normal = False
    """When locked keep using normal of surface where stroke was initiated
    (type: boolean, default False)
    
    :type: bool
    """

    use_paint_image = False
    """Use this brush in texture paint mode
    (type: boolean, default False)
    
    :type: bool
    """

    use_paint_sculpt = False
    """Use this brush in sculpt mode
    (type: boolean, default False)
    
    :type: bool
    """

    use_paint_vertex = False
    """Use this brush in vertex paint mode
    (type: boolean, default False)
    
    :type: bool
    """

    use_paint_weight = False
    """Use this brush in weight paint mode
    (type: boolean, default False)
    
    :type: bool
    """

    use_persistent = False
    """Sculpt on a persistent layer of the mesh
    (type: boolean, default False)
    
    :type: bool
    """

    use_plane_trim = False
    """Enable Plane Trim
    (type: boolean, default False)
    
    :type: bool
    """

    use_pressure_jitter = False
    """Enable tablet pressure sensitivity for jitter
    (type: boolean, default False)
    
    :type: bool
    """

    use_pressure_masking = 'NONE'
    """Pen pressure makes texture influence smaller
    (type: enum in ['NONE', 'RAMP', 'CUTOFF'], default 'NONE')
    
    :type: str
    """

    use_pressure_size = False
    """Enable tablet pressure sensitivity for size
    (type: boolean, default False)
    
    :type: bool
    """

    use_pressure_spacing = False
    """Enable tablet pressure sensitivity for spacing
    (type: boolean, default False)
    
    :type: bool
    """

    use_pressure_strength = False
    """Enable tablet pressure sensitivity for strength
    (type: boolean, default False)
    
    :type: bool
    """

    use_primary_overlay = False
    """Show texture in viewport
    (type: boolean, default False)
    
    :type: bool
    """

    use_primary_overlay_override = False
    """Don't show overlay during a stroke
    (type: boolean, default False)
    
    :type: bool
    """

    use_relative_jitter = False
    """Jittering happens in screen space, not relative to brush size
    (type: boolean, default False)
    
    :type: bool
    """

    use_restore_mesh = False
    """Allow a single dot to be carefully positioned
    (type: boolean, default False)
    
    :type: bool
    """

    use_secondary_overlay = False
    """Show texture in viewport
    (type: boolean, default False)
    
    :type: bool
    """

    use_secondary_overlay_override = False
    """Don't show overlay during a stroke
    (type: boolean, default False)
    
    :type: bool
    """

    use_smooth_stroke = False
    """Brush lags behind mouse and follows a smoother path
    (type: boolean, default False)
    
    :type: bool
    """

    use_space = False
    """Limit brush application to the distance specified by spacing
    (type: boolean, default False)
    
    :type: bool
    """

    use_space_attenuation = False
    """Automatically adjust strength to give consistent results for different spacings
    (type: boolean, default False)
    
    :type: bool
    """

    vertex_tool = 'MIX'
    """Brush blending mode
    * 'MIX': Mix, Use mix blending mode while painting.
    * 'ADD': Add, Use add blending mode while painting.
    * 'SUB': Subtract, Use subtract blending mode while painting.
    * 'MUL': Multiply, Use multiply blending mode while painting.
    * 'BLUR': Blur, Blur the color with surrounding values.
    * 'LIGHTEN': Lighten, Use lighten blending mode while painting.
    * 'DARKEN': Darken, Use darken blending mode while painting.
    (type: enum in ['MIX', 'ADD', 'SUB', 'MUL', 'BLUR', 'LIGHTEN', 'DARKEN'], default 'MIX')
    
    :type: str
    """

    weight = 1.0
    """Vertex weight when brush is applied
    (type: float in [0, 1], default 1.0)
    
    :type: float
    """


class BrushTextureSlot(TextureSlot):
    """Texture slot for textures in a Brush data-block"""

    angle = 0.0
    """Brush texture rotation
    (type: float in [0, 6.28319], default 0.0)
    
    :type: float
    """

    has_random_texture_angle = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    has_texture_angle = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    has_texture_angle_source = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    map_mode = 'VIEW_PLANE'
    """(type: enum in ['VIEW_PLANE', 'AREA_PLANE', 'TILED', '3D', 'RANDOM', 'STENCIL'], default 'VIEW_PLANE')
    
    :type: str
    """

    mask_map_mode = 'VIEW_PLANE'
    """(type: enum in ['VIEW_PLANE', 'TILED', 'RANDOM', 'STENCIL'], default 'VIEW_PLANE')
    
    :type: str
    """

    random_angle = 0.0
    """Brush texture random angle
    (type: float in [0, 6.28319], default 0.0)
    
    :type: float
    """

    tex_paint_map_mode = 'VIEW_PLANE'
    """(type: enum in ['VIEW_PLANE', 'TILED', '3D', 'RANDOM', 'STENCIL'], default 'VIEW_PLANE')
    
    :type: str
    """

    use_rake = False
    """(type: boolean, default False)
    
    :type: bool
    """

    use_random = False
    """(type: boolean, default False)
    
    :type: bool
    """


class BuildModifier(Modifier):
    """Build effect modifier"""

    frame_duration = 0.0
    """Total time the build effect requires
    (type: float in [1, 500000], default 0.0)
    
    :type: float
    """

    frame_start = 0.0
    """Start frame of the effect
    (type: float in [-500000, 500000], default 0.0)
    
    :type: float
    """

    seed = 0
    """Seed for random if used
    (type: int in [1, 500000], default 0)
    
    :type: int
    """

    use_random_order = False
    """Randomize the faces or edges during build
    (type: boolean, default False)
    
    :type: bool
    """

    use_reverse = False
    """Deconstruct the mesh instead of building it
    (type: boolean, default False)
    
    :type: bool
    """


class CLIP_UL_tracking_objects(UIList):
    """"""

    def draw_item(self, context, layout, data, item, icon, active_data, active_propname, index):
        """"""


class CacheFile(ID):
    """"""

    animation_data = None
    """Animation data for this data-block
    (type: bpy.types.AnimData, (readonly))
    
    :type: AnimData
    """

    filepath = ""
    """Path to external displacements file
    (type: string, default "", (never None))
    
    :type: str
    """

    forward_axis = 'POS_X'
    """(type: enum in ['POS_X', 'POS_Y', 'POS_Z', 'NEG_X', 'NEG_Y', 'NEG_Z'], default 'POS_X')
    
    :type: str
    """

    frame = 0.0
    """The time to use for looking up the data in the cache file, or to determine which file to use in a file sequence
    (type: float in [-500000, 500000], default 0.0)
    
    :type: float
    """

    is_sequence = False
    """Whether the cache is separated in a series of files
    (type: boolean, default False)
    
    :type: bool
    """

    object_paths = None
    """Paths of the objects inside the Alembic archive
    (type: bpy.types.AlembicObjectPaths bpy.types.bpy_prop_collection of bpy.types.AlembicObjectPath, (readonly))
    
    :type: AlembicObjectPaths
    """

    override_frame = False
    """Whether to use a custom frame for looking up data in the cache file, instead of using the current scene frame
    (type: boolean, default False)
    
    :type: bool
    """

    scale = 0.0
    """Value by which to enlarge or shrink the object with respect to the world's origin (only applicable through a Transform Cache constraint)
    (type: float in [0.0001, 1000], default 0.0)
    
    :type: float
    """

    up_axis = 'POS_X'
    """(type: enum in ['POS_X', 'POS_Y', 'POS_Z', 'NEG_X', 'NEG_Y', 'NEG_Z'], default 'POS_X')
    
    :type: str
    """


class Camera(ID):
    """Camera data-block for storing camera settings"""

    angle = 0.0
    """Camera lens field of view
    (type: float in [0.00640536, 3.01675], default 0.0)
    
    :type: float
    """

    angle_x = 0.0
    """Camera lens horizontal field of view
    (type: float in [0.00640536, 3.01675], default 0.0)
    
    :type: float
    """

    angle_y = 0.0
    """Camera lens vertical field of view
    (type: float in [0.00640536, 3.01675], default 0.0)
    
    :type: float
    """

    animation_data = None
    """Animation data for this data-block
    (type: bpy.types.AnimData, (readonly))
    
    :type: AnimData
    """

    clip_end = 0.0
    """Camera far clipping distance
    (type: float in [1e-06, inf], default 0.0)
    
    :type: float
    """

    clip_start = 0.0
    """Camera near clipping distance
    (type: float in [1e-06, inf], default 0.0)
    
    :type: float
    """

    dof_distance = 0.0
    """Distance to the focus point for depth of field
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    dof_object = None
    """Use this object to define the depth of field focal point
    (type: bpy.types.Object)
    
    :type: Object
    """

    draw_size = 0.0
    """Apparent size of the Camera object in the 3D View
    (type: float in [0.01, 1000], default 0.0)
    
    :type: float
    """

    gpu_dof = None
    """(type: bpy.types.GPUDOFSettings, (readonly))
    
    :type: GPUDOFSettings
    """

    lens = 0.0
    """Perspective Camera lens value in millimeters
    (type: float in [1, inf], default 0.0)
    
    :type: float
    """

    lens_unit = 'MILLIMETERS'
    """Unit to edit lens in for the user interface
    * 'MILLIMETERS': Millimeters, Specify the lens in millimeters.
    * 'FOV': Field of View, Specify the lens as the field of view's angle.
    (type: enum in ['MILLIMETERS', 'FOV'], default 'MILLIMETERS')
    
    :type: str
    """

    ortho_scale = 0.0
    """Orthographic Camera scale (similar to zoom)
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    passepartout_alpha = 0.0
    """Opacity (alpha) of the darkened overlay in Camera view
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    sensor_fit = 'AUTO'
    """Method to fit image and field of view angle inside the sensor
    * 'AUTO': Auto, Fit to the sensor width or height depending on image resolution.
    * 'HORIZONTAL': Horizontal, Fit to the sensor width.
    * 'VERTICAL': Vertical, Fit to the sensor height.
    (type: enum in ['AUTO', 'HORIZONTAL', 'VERTICAL'], default 'AUTO')
    
    :type: str
    """

    sensor_height = 0.0
    """Vertical size of the image sensor area in millimeters
    (type: float in [1, inf], default 0.0)
    
    :type: float
    """

    sensor_width = 0.0
    """Horizontal size of the image sensor area in millimeters
    (type: float in [1, inf], default 0.0)
    
    :type: float
    """

    shift_x = 0.0
    """Camera horizontal shift
    (type: float in [-10, 10], default 0.0)
    
    :type: float
    """

    shift_y = 0.0
    """Camera vertical shift
    (type: float in [-10, 10], default 0.0)
    
    :type: float
    """

    show_guide = {'CENTER'}
    """Draw overlay
    (type: enum set in {'CENTER', 'CENTER_DIAGONAL', 'THIRDS', 'GOLDEN', 'GOLDEN_TRIANGLE_A', 'GOLDEN_TRIANGLE_B', 'HARMONY_TRIANGLE_A', 'HARMONY_TRIANGLE_B'}, default {'CENTER'})
    
    :type: enum set in {'CENTER', 'CENTER_DIAGONAL', 'THIRDS', 'GOLDEN', 'GOLDEN_TRIANGLE_A', 'GOLDEN_TRIANGLE_B', 'HARMONY_TRIANGLE_A', 'HARMONY_TRIANGLE_B'}
    """

    show_limits = False
    """Draw the clipping range and focus point on the camera
    (type: boolean, default False)
    
    :type: bool
    """

    show_mist = False
    """Draw a line from the Camera to indicate the mist area
    (type: boolean, default False)
    
    :type: bool
    """

    show_name = False
    """Show the active Camera's name in Camera view
    (type: boolean, default False)
    
    :type: bool
    """

    show_passepartout = False
    """Show a darkened overlay outside the image area in Camera view
    (type: boolean, default False)
    
    :type: bool
    """

    show_safe_areas = False
    """Show TV title safe and action safe areas in Camera view
    (type: boolean, default False)
    
    :type: bool
    """

    show_safe_center = False
    """Show safe areas to fit content in a different aspect ratio
    (type: boolean, default False)
    
    :type: bool
    """

    show_sensor = False
    """Show sensor size (film gate) in Camera view
    (type: boolean, default False)
    
    :type: bool
    """

    stereo = None
    """(type: bpy.types.CameraStereoData, (readonly, never None))
    
    :type: CameraStereoData
    """

    type = 'PERSP'
    """Camera types
    (type: enum in ['PERSP', 'ORTHO', 'PANO'], default 'PERSP')
    
    :type: str
    """

    def view_frame(self, scene=None):
        """Return 4 points for the cameras frame (before object transformation)
        
        :param scene: Scene to use for aspect calculation, when omitted 1:1 aspect is used
            (type: bpy.types.Scene, (optional))
        :type scene: Scene
        :return: (result_1, result_2, result_3, result_4)
            result_1, Result, float array of 3 items in [-inf, inf]
            result_2, Result, float array of 3 items in [-inf, inf]
            result_3, Result, float array of 3 items in [-inf, inf]
            result_4, Result, float array of 3 items in [-inf, inf]
        :rtype: tuple
        """


class CameraActuator(Actuator):
    """"""

    axis = 'POS_X'
    """Axis the Camera will try to get behind
    * 'POS_X': +X, Camera tries to get behind the X axis.
    * 'POS_Y': +Y, Camera tries to get behind the Y axis.
    * 'NEG_X': -X, Camera tries to get behind the -X axis.
    * 'NEG_Y': -Y, Camera tries to get behind the -Y axis.
    (type: enum in ['POS_X', 'POS_Y', 'NEG_X', 'NEG_Y'], default 'POS_X')
    
    :type: str
    """

    damping = 0.0
    """Strength of the constraint that drives the camera behind the target
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    height = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    max = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    min = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    object = None
    """Look at this Object
    (type: bpy.types.Object)
    
    :type: Object
    """


class CameraSolverConstraint(Constraint):
    """Lock motion to the reconstructed camera movement"""

    clip = None
    """Movie Clip to get tracking data from
    (type: bpy.types.MovieClip)
    
    :type: MovieClip
    """

    use_active_clip = False
    """Use active clip defined in scene
    (type: boolean, default False)
    
    :type: bool
    """


class CastModifier(Modifier):
    """Modifier to cast to other shapes"""

    cast_type = 'SPHERE'
    """Target object shape
    (type: enum in ['SPHERE', 'CYLINDER', 'CUBOID'], default 'SPHERE')
    
    :type: str
    """

    factor = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    object = None
    """Control object: if available, its location determines the center of the effect
    (type: bpy.types.Object)
    
    :type: Object
    """

    radius = 0.0
    """Only deform vertices within this distance from the center of the effect (leave as 0 for infinite.)
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    size = 0.0
    """Size of projection shape (leave as 0 for auto)
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    use_radius_as_size = False
    """Use radius as size of projection shape (0 = auto)
    (type: boolean, default False)
    
    :type: bool
    """

    use_transform = False
    """Use object transform to control projection shape
    (type: boolean, default False)
    
    :type: bool
    """

    use_x = False
    """(type: boolean, default False)
    
    :type: bool
    """

    use_y = False
    """(type: boolean, default False)
    
    :type: bool
    """

    use_z = False
    """(type: boolean, default False)
    
    :type: bool
    """

    vertex_group = ""
    """Vertex group name
    (type: string, default "", (never None))
    
    :type: str
    """


class ChildOfConstraint(Constraint):
    """Create constraint-based parent-child relationship"""

    inverse_matrix = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    """Transformation matrix to apply before
    (type: float array of 16 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Matrix
    """

    subtarget = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    target = None
    """Target Object
    (type: bpy.types.Object)
    
    :type: Object
    """

    use_location_x = False
    """Use X Location of Parent
    (type: boolean, default False)
    
    :type: bool
    """

    use_location_y = False
    """Use Y Location of Parent
    (type: boolean, default False)
    
    :type: bool
    """

    use_location_z = False
    """Use Z Location of Parent
    (type: boolean, default False)
    
    :type: bool
    """

    use_rotation_x = False
    """Use X Rotation of Parent
    (type: boolean, default False)
    
    :type: bool
    """

    use_rotation_y = False
    """Use Y Rotation of Parent
    (type: boolean, default False)
    
    :type: bool
    """

    use_rotation_z = False
    """Use Z Rotation of Parent
    (type: boolean, default False)
    
    :type: bool
    """

    use_scale_x = False
    """Use X Scale of Parent
    (type: boolean, default False)
    
    :type: bool
    """

    use_scale_y = False
    """Use Y Scale of Parent
    (type: boolean, default False)
    
    :type: bool
    """

    use_scale_z = False
    """Use Z Scale of Parent
    (type: boolean, default False)
    
    :type: bool
    """


class ClampToConstraint(Constraint):
    """Constrain an object's location to the nearest point along the target path"""

    main_axis = 'CLAMPTO_AUTO'
    """Main axis of movement
    (type: enum in ['CLAMPTO_AUTO', 'CLAMPTO_X', 'CLAMPTO_Y', 'CLAMPTO_Z'], default 'CLAMPTO_AUTO')
    
    :type: str
    """

    target = None
    """Target Object (Curves only)
    (type: bpy.types.Object)
    
    :type: Object
    """

    use_cyclic = False
    """Treat curve as cyclic curve (no clamping to curve bounding box)
    (type: boolean, default False)
    
    :type: bool
    """


class ClothModifier(Modifier):
    """Cloth simulation modifier"""

    collision_settings = None
    """(type: bpy.types.ClothCollisionSettings, (readonly, never None))
    
    :type: ClothCollisionSettings
    """

    hair_grid_max = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0), (readonly))
    
    :type: collections.Sequence[float]
    """

    hair_grid_min = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0), (readonly))
    
    :type: collections.Sequence[float]
    """

    hair_grid_resolution = (0, 0, 0)
    """(type: int array of 3 items in [-inf, inf], default (0, 0, 0), (readonly))
    
    :type: collections.Sequence[int]
    """

    point_cache = None
    """(type: bpy.types.PointCache, (readonly, never None))
    
    :type: PointCache
    """

    settings = None
    """(type: bpy.types.ClothSettings, (readonly, never None))
    
    :type: ClothSettings
    """

    solver_result = None
    """(type: bpy.types.ClothSolverResult, (readonly))
    
    :type: ClothSolverResult
    """


class CollectionProperty(Property):
    """RNA collection property to define lists, arrays and mappings"""

    fixed_type = None
    """Fixed pointer type, empty if variable type
    (type: bpy.types.Struct, (readonly))
    
    :type: Struct
    """


class CollisionModifier(Modifier):
    """Collision modifier defining modifier stack position used for collision"""

    settings = None
    """(type: bpy.types.CollisionSettings, (readonly, never None))
    
    :type: CollisionSettings
    """


class CollisionSensor(Sensor):
    """Sensor to detect objects colliding with the current object, with more settings than the Touch sensor"""

    material = ""
    """Only look for objects with this material (blank = all objects)
    (type: string, default "", (never None))
    
    :type: str
    """

    property = ""
    """Only look for objects with this property (blank = all objects)
    (type: string, default "", (never None))
    
    :type: str
    """

    use_material = False
    """Toggle collision on material or property
    (type: boolean, default False)
    
    :type: bool
    """

    use_pulse = False
    """Change to the set of colliding objects generates pulse
    (type: boolean, default False)
    
    :type: bool
    """


class ColorBalanceModifier(SequenceModifier):
    """Color balance modifier for sequence strip"""

    color_balance = None
    """(type: bpy.types.SequenceColorBalanceData, (readonly))
    
    :type: SequenceColorBalanceData
    """

    color_multiply = 1.0
    """(type: float in [0, 20], default 1.0)
    
    :type: float
    """


class ConstraintActuator(Actuator):
    """Actuator to handle Constraints"""

    angle_max = 0.0
    """Maximum angle allowed with target direction (no correction is done if angle with target direction is between min and max)
    (type: float in [0, 3.14159], default 0.0)
    
    :type: float
    """

    angle_min = 0.0
    """Minimum angle to maintain with target direction (no correction is done if angle with target direction is between min and max)
    (type: float in [0, 3.14159], default 0.0)
    
    :type: float
    """

    damping = 0
    """Damping factor: time constant (in frame) of low pass filter
    (type: int in [-32768, 32767], default 0)
    
    :type: int
    """

    damping_rotation = 0
    """Use a different damping for orientation
    (type: int in [-32768, 32767], default 0)
    
    :type: int
    """

    direction = 'NONE'
    """Direction of the ray
    (type: enum in ['NONE', 'DIRPX', 'DIRPY', 'DIRPZ', 'DIRNX', 'DIRNY', 'DIRNZ'], default 'NONE')
    
    :type: str
    """

    direction_axis = 'NONE'
    """Select the axis to be aligned along the reference direction
    (type: enum in ['NONE', 'DIRPX', 'DIRPY', 'DIRPZ', 'DIRNX', 'DIRNY', 'DIRNZ'], default 'NONE')
    
    :type: str
    """

    direction_axis_pos = 'NONE'
    """Select the axis to be aligned along the reference direction
    (type: enum in ['NONE', 'DIRPX', 'DIRPY', 'DIRPZ'], default 'NONE')
    
    :type: str
    """

    distance = 0.0
    """Keep this distance to target
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    fh_damping = 0.0
    """Damping factor of the force field spring
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    fh_force = 0.0
    """Spring force within the force field area
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    fh_height = 0.0
    """Height of the force field area
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    limit = 'NONE'
    """(type: enum in ['NONE', 'LOCX', 'LOCY', 'LOCZ'], default 'NONE')
    
    :type: str
    """

    limit_max = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    limit_min = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    material = ""
    """Ray detects only Objects with this material
    (type: string, default "", (never None))
    
    :type: str
    """

    mode = 'LOC'
    """The type of the constraint
    (type: enum in ['LOC', 'DIST', 'ORI', 'FH'], default 'LOC')
    
    :type: str
    """

    property = ""
    """Ray detects only Objects with this property
    (type: string, default "", (never None))
    
    :type: str
    """

    range = 0.0
    """Maximum length of ray
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    rotation_max = (0.0, 0.0, 0.0)
    """Reference Direction
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    time = 0
    """Maximum activation time in frame, 0 for unlimited
    (type: int in [-32768, 32767], default 0)
    
    :type: int
    """

    use_fh_normal = False
    """Add a horizontal spring force on slopes
    (type: boolean, default False)
    
    :type: bool
    """

    use_fh_paralel_axis = False
    """Keep object axis parallel to normal
    (type: boolean, default False)
    
    :type: bool
    """

    use_force_distance = False
    """Force distance of object to point of impact of ray
    (type: boolean, default False)
    
    :type: bool
    """

    use_local = False
    """Set ray along object's axis or global axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_material_detect = False
    """Detect material instead of property
    (type: boolean, default False)
    
    :type: bool
    """

    use_normal = False
    """Set object axis along (local axis) or parallel (global axis) to the normal at hit position
    (type: boolean, default False)
    
    :type: bool
    """

    use_persistent = False
    """Persistent actuator: stays active even if ray does not reach target
    (type: boolean, default False)
    
    :type: bool
    """


class ControlFluidSettings(FluidSettings):
    """Fluid simulation settings for objects controlling the motion of fluid in the simulation"""

    attraction_radius = 0.0
    """Force field radius around the control object
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    attraction_strength = 0.0
    """Force strength for directional attraction towards the control object
    (type: float in [-10, 10], default 0.0)
    
    :type: float
    """

    end_time = 0.0
    """Time when the control particles are deactivated
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    quality = 0.0
    """Quality which is used for object sampling (higher = better but slower)
    (type: float in [5, 100], default 0.0)
    
    :type: float
    """

    start_time = 0.0
    """Time when the control particles are activated
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    use = False
    """Object contributes to the fluid simulation
    (type: boolean, default False)
    
    :type: bool
    """

    use_reverse_frames = False
    """Reverse control object movement
    (type: boolean, default False)
    
    :type: bool
    """

    velocity_radius = 0.0
    """Force field radius around the control object
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    velocity_strength = 0.0
    """Force strength of how much of the control object's velocity is influencing the fluid velocity
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """


class CopyLocationConstraint(Constraint):
    """Copy the location of the target"""

    head_tail = 0.0
    """Target along length of bone: Head=0, Tail=1
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    invert_x = False
    """Invert the X location
    (type: boolean, default False)
    
    :type: bool
    """

    invert_y = False
    """Invert the Y location
    (type: boolean, default False)
    
    :type: bool
    """

    invert_z = False
    """Invert the Z location
    (type: boolean, default False)
    
    :type: bool
    """

    subtarget = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    target = None
    """Target Object
    (type: bpy.types.Object)
    
    :type: Object
    """

    use_bbone_shape = False
    """Follow shape of B-Bone segments when calculating Head/Tail position
    (type: boolean, default False)
    
    :type: bool
    """

    use_offset = False
    """Add original location into copied location
    (type: boolean, default False)
    
    :type: bool
    """

    use_x = False
    """Copy the target's X location
    (type: boolean, default False)
    
    :type: bool
    """

    use_y = False
    """Copy the target's Y location
    (type: boolean, default False)
    
    :type: bool
    """

    use_z = False
    """Copy the target's Z location
    (type: boolean, default False)
    
    :type: bool
    """


class CopyRotationConstraint(Constraint):
    """Copy the rotation of the target"""

    invert_x = False
    """Invert the X rotation
    (type: boolean, default False)
    
    :type: bool
    """

    invert_y = False
    """Invert the Y rotation
    (type: boolean, default False)
    
    :type: bool
    """

    invert_z = False
    """Invert the Z rotation
    (type: boolean, default False)
    
    :type: bool
    """

    subtarget = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    target = None
    """Target Object
    (type: bpy.types.Object)
    
    :type: Object
    """

    use_offset = False
    """Add original rotation into copied rotation
    (type: boolean, default False)
    
    :type: bool
    """

    use_x = False
    """Copy the target's X rotation
    (type: boolean, default False)
    
    :type: bool
    """

    use_y = False
    """Copy the target's Y rotation
    (type: boolean, default False)
    
    :type: bool
    """

    use_z = False
    """Copy the target's Z rotation
    (type: boolean, default False)
    
    :type: bool
    """


class CopyScaleConstraint(Constraint):
    """Copy the scale of the target"""

    subtarget = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    target = None
    """Target Object
    (type: bpy.types.Object)
    
    :type: Object
    """

    use_offset = False
    """Add original scale into copied scale
    (type: boolean, default False)
    
    :type: bool
    """

    use_x = False
    """Copy the target's X scale
    (type: boolean, default False)
    
    :type: bool
    """

    use_y = False
    """Copy the target's Y scale
    (type: boolean, default False)
    
    :type: bool
    """

    use_z = False
    """Copy the target's Z scale
    (type: boolean, default False)
    
    :type: bool
    """


class CopyTransformsConstraint(Constraint):
    """Copy all the transforms of the target"""

    head_tail = 0.0
    """Target along length of bone: Head=0, Tail=1
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    subtarget = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    target = None
    """Target Object
    (type: bpy.types.Object)
    
    :type: Object
    """

    use_bbone_shape = False
    """Follow shape of B-Bone segments when calculating Head/Tail position
    (type: boolean, default False)
    
    :type: bool
    """


class CorrectiveSmoothModifier(Modifier):
    """Correct distortion caused by deformation"""

    factor = 0.0
    """Smooth factor effect
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    invert_vertex_group = False
    """Invert vertex group influence
    (type: boolean, default False)
    
    :type: bool
    """

    is_bind = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    iterations = 0
    """(type: int in [-32768, 32767], default 0)
    
    :type: int
    """

    rest_source = 'ORCO'
    """Select the source of rest positions
    * 'ORCO': Original Coords, Use base mesh vert coords as the rest position.
    * 'BIND': Bind Coords, Use bind vert coords for rest position.
    (type: enum in ['ORCO', 'BIND'], default 'ORCO')
    
    :type: str
    """

    smooth_type = 'SIMPLE'
    """Method used for smoothing
    * 'SIMPLE': Simple, Use the average of adjacent edge-vertices.
    * 'LENGTH_WEIGHTED': Length Weight, Use the average of adjacent edge-vertices weighted by their length.
    (type: enum in ['SIMPLE', 'LENGTH_WEIGHTED'], default 'SIMPLE')
    
    :type: str
    """

    use_only_smooth = False
    """Apply smoothing without reconstructing the surface
    (type: boolean, default False)
    
    :type: bool
    """

    use_pin_boundary = False
    """Excludes boundary vertices from being smoothed
    (type: boolean, default False)
    
    :type: bool
    """

    vertex_group = ""
    """Name of Vertex Group which determines influence of modifier per point
    (type: string, default "", (never None))
    
    :type: str
    """


class Curve(ID):
    """Curve data-block storing curves, splines and NURBS"""

    animation_data = None
    """Animation data for this data-block
    (type: bpy.types.AnimData, (readonly))
    
    :type: AnimData
    """

    bevel_depth = 0.0
    """Bevel depth when not using a bevel object
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    bevel_factor_end = 0.0
    """Factor that defines to where beveling of spline happens (0=to the very beginning, 1=to the very end)
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    bevel_factor_mapping_end = 'RESOLUTION'
    """Determines how the end bevel factor is mapped to a spline
    * 'RESOLUTION': Resolution, Map the bevel factor to the number of subdivisions of a spline (U resolution).
    * 'SEGMENTS': Segments, Map the bevel factor to the length of a segment and to the number of subdivisions of a segment.
    * 'SPLINE': Spline, Map the bevel factor to the length of a spline.
    (type: enum in ['RESOLUTION', 'SEGMENTS', 'SPLINE'], default 'RESOLUTION')
    
    :type: str
    """

    bevel_factor_mapping_start = 'RESOLUTION'
    """Determines how the start bevel factor is mapped to a spline
    * 'RESOLUTION': Resolution, Map the bevel factor to the number of subdivisions of a spline (U resolution).
    * 'SEGMENTS': Segments, Map the bevel factor to the length of a segment and to the number of subdivisions of a segment.
    * 'SPLINE': Spline, Map the bevel factor to the length of a spline.
    (type: enum in ['RESOLUTION', 'SEGMENTS', 'SPLINE'], default 'RESOLUTION')
    
    :type: str
    """

    bevel_factor_start = 0.0
    """Factor that defines from where beveling of spline happens (0=from the very beginning, 1=from the very end)
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    bevel_object = None
    """Curve object name that defines the bevel shape
    (type: bpy.types.Object)
    
    :type: Object
    """

    bevel_resolution = 0
    """Bevel resolution when depth is non-zero and no specific bevel object has been defined
    (type: int in [0, 32], default 0)
    
    :type: int
    """

    dimensions = '2D'
    """Select 2D or 3D curve type
    * '2D': 2D, Clamp the Z axis of the curve.
    * '3D': 3D, Allow editing on the Z axis of this curve, also allows tilt and curve radius to be used.
    (type: enum in ['2D', '3D'], default '2D')
    
    :type: str
    """

    eval_time = 0.0
    """Parametric position along the length of the curve that Objects 'following' it should be at (position is evaluated by dividing by the 'Path Length' value)
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    extrude = 0.0
    """Amount of curve extrusion when not using a bevel object
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    fill_mode = 'FULL'
    """Mode of filling curve
    (type: enum in ['FULL', 'BACK', 'FRONT', 'HALF'], default 'FULL')
    
    :type: str
    """

    is_editmode = False
    """True when used in editmode
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    materials = None
    """(type: bpy.types.IDMaterials bpy.types.bpy_prop_collection of bpy.types.Material, (readonly))
    
    :type: IDMaterials
    """

    offset = 0.0
    """Offset the curve to adjust the width of a text
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    path_duration = 0
    """The number of frames that are needed to traverse the path, defining the maximum value for the 'Evaluation Time' setting
    (type: int in [1, 500000], default 0)
    
    :type: int
    """

    render_resolution_u = 0
    """Surface resolution in U direction used while rendering (zero uses preview resolution)
    (type: int in [0, 1024], default 0)
    
    :type: int
    """

    render_resolution_v = 0
    """Surface resolution in V direction used while rendering (zero uses preview resolution)
    (type: int in [0, 1024], default 0)
    
    :type: int
    """

    resolution_u = 0
    """Surface resolution in U direction
    (type: int in [1, 1024], default 0)
    
    :type: int
    """

    resolution_v = 0
    """Surface resolution in V direction
    (type: int in [1, 1024], default 0)
    
    :type: int
    """

    shape_keys = None
    """(type: bpy.types.Key, (readonly))
    
    :type: Key
    """

    show_handles = False
    """Display Bezier handles in editmode
    (type: boolean, default False)
    
    :type: bool
    """

    show_normal_face = False
    """Display 3D curve normals in editmode
    (type: boolean, default False)
    
    :type: bool
    """

    splines = None
    """Collection of splines in this curve data object
    (type: bpy.types.CurveSplines bpy.types.bpy_prop_collection of bpy.types.Spline, (readonly))
    
    :type: CurveSplines
    """

    taper_object = None
    """Curve object name that defines the taper (width)
    (type: bpy.types.Object)
    
    :type: Object
    """

    texspace_location = (0.0, 0.0, 0.0)
    """Texture space location
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    texspace_size = (0.0, 0.0, 0.0)
    """Texture space size
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    twist_mode = 'Z_UP'
    """The type of tilt calculation for 3D Curves
    * 'Z_UP': Z-Up, Use Z-Up axis to calculate the curve twist at each point.
    * 'MINIMUM': Minimum, Use the least twist over the entire curve.
    * 'TANGENT': Tangent, Use the tangent to calculate twist.
    (type: enum in ['Z_UP', 'MINIMUM', 'TANGENT'], default 'Z_UP')
    
    :type: str
    """

    twist_smooth = 0.0
    """Smoothing iteration for tangents
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    use_auto_texspace = False
    """Adjust active object's texture space automatically when transforming object
    (type: boolean, default False)
    
    :type: bool
    """

    use_deform_bounds = False
    """Option for curve-deform: Use the mesh bounds to clamp the deformation
    (type: boolean, default False)
    
    :type: bool
    """

    use_fill_caps = False
    """Fill caps for beveled curves
    (type: boolean, default False)
    
    :type: bool
    """

    use_fill_deform = False
    """Fill curve after applying shape keys and all modifiers
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_taper = False
    """Map effect of taper object on actually beveled curve
    (type: boolean, default False)
    
    :type: bool
    """

    use_path = False
    """Enable the curve to become a translation path
    (type: boolean, default False)
    
    :type: bool
    """

    use_path_follow = False
    """Make curve path children to rotate along the path
    (type: boolean, default False)
    
    :type: bool
    """

    use_radius = False
    """Option for paths and curve-deform: apply the curve radius with path following it and deforming
    (type: boolean, default False)
    
    :type: bool
    """

    use_stretch = False
    """Option for curve-deform: make deformed child to stretch along entire path
    (type: boolean, default False)
    
    :type: bool
    """

    use_uv_as_generated = False
    """Uses the UV values as Generated textured coordinates
    (type: boolean, default False)
    
    :type: bool
    """

    def transform(self, matrix, shape_keys=False):
        """Transform curve by a matrix
        
        :param matrix: Matrix
            (type: float array of 16 items in [-inf, inf])
        :type matrix: mathutils.Matrix
        :param shape_keys: Transform Shape Keys
            (type: boolean, (optional))
        :type shape_keys: bool
        """

    def validate_material_indices(self):
        """Validate material indices of splines or letters, return True when the curve has had invalid indices corrected (to default 0)
        
        :return: Result
        :rtype: bool
        """


class CurveModifier(Modifier):
    """Curve deformation modifier"""

    deform_axis = 'POS_X'
    """The axis that the curve deforms along
    (type: enum in ['POS_X', 'POS_Y', 'POS_Z', 'NEG_X', 'NEG_Y', 'NEG_Z'], default 'POS_X')
    
    :type: str
    """

    object = None
    """Curve object to deform with
    (type: bpy.types.Object)
    
    :type: Object
    """

    vertex_group = ""
    """Name of Vertex Group which determines influence of modifier per point
    (type: string, default "", (never None))
    
    :type: str
    """


class CurvesModifier(SequenceModifier):
    """RGB curves modifier for sequence strip"""

    curve_mapping = None
    """(type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """


class DampedTrackConstraint(Constraint):
    """Point toward target by taking the shortest rotation path"""

    head_tail = 0.0
    """Target along length of bone: Head=0, Tail=1
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    subtarget = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    target = None
    """Target Object
    (type: bpy.types.Object)
    
    :type: Object
    """

    track_axis = 'TRACK_X'
    """Axis that points to the target object
    (type: enum in ['TRACK_X', 'TRACK_Y', 'TRACK_Z', 'TRACK_NEGATIVE_X', 'TRACK_NEGATIVE_Y', 'TRACK_NEGATIVE_Z'], default 'TRACK_X')
    
    :type: str
    """

    use_bbone_shape = False
    """Follow shape of B-Bone segments when calculating Head/Tail position
    (type: boolean, default False)
    
    :type: bool
    """


class DataTransferModifier(Modifier):
    """Modifier transferring some data from a source mesh"""

    data_types_edges = {'SHARP_EDGE'}
    """Which edge data layers to transfer
    * 'SHARP_EDGE': Sharp, Transfer sharp mark.
    * 'SEAM': UV Seam, Transfer UV seam mark.
    * 'CREASE': Subsurf Crease, Transfer crease values.
    * 'BEVEL_WEIGHT_EDGE': Bevel Weight, Transfer bevel weights.
    * 'FREESTYLE_EDGE': Freestyle Mark, Transfer Freestyle edge mark.
    (type: enum set in {'SHARP_EDGE', 'SEAM', 'CREASE', 'BEVEL_WEIGHT_EDGE', 'FREESTYLE_EDGE'}, default {'SHARP_EDGE'})
    
    :type: enum set in {'SHARP_EDGE', 'SEAM', 'CREASE', 'BEVEL_WEIGHT_EDGE', 'FREESTYLE_EDGE'}
    """

    data_types_loops = {'CUSTOM_NORMAL'}
    """Which face corner data layers to transfer
    * 'CUSTOM_NORMAL': Custom Normals, Transfer custom normals.
    * 'VCOL': VCol, Vertex (face corners) colors.
    * 'UV': UVs, Transfer UV layers.
    (type: enum set in {'CUSTOM_NORMAL', 'VCOL', 'UV'}, default {'CUSTOM_NORMAL'})
    
    :type: enum set in {'CUSTOM_NORMAL', 'VCOL', 'UV'}
    """

    data_types_polys = {'SMOOTH'}
    """Which poly data layers to transfer
    * 'SMOOTH': Smooth, Transfer flat/smooth mark.
    * 'FREESTYLE_FACE': Freestyle Mark, Transfer Freestyle face mark.
    (type: enum set in {'SMOOTH', 'FREESTYLE_FACE'}, default {'SMOOTH'})
    
    :type: enum set in {'SMOOTH', 'FREESTYLE_FACE'}
    """

    data_types_verts = {'VGROUP_WEIGHTS'}
    """Which vertex data layers to transfer
    * 'VGROUP_WEIGHTS': Vertex Group(s), Transfer active or all vertex groups.
    * 'BEVEL_WEIGHT_VERT': Bevel Weight, Transfer bevel weights.
    (type: enum set in {'VGROUP_WEIGHTS', 'BEVEL_WEIGHT_VERT'}, default {'VGROUP_WEIGHTS'})
    
    :type: enum set in {'VGROUP_WEIGHTS', 'BEVEL_WEIGHT_VERT'}
    """

    edge_mapping = 'NEAREST'
    """Method used to map source edges to destination ones
    * 'TOPOLOGY': Topology, Copy from identical topology meshes.
    * 'VERT_NEAREST': Nearest Vertices, Copy from most similar edge (edge which vertices are the closest of destination edge's ones).
    * 'NEAREST': Nearest Edge, Copy from closest edge (using midpoints).
    * 'POLY_NEAREST': Nearest Face Edge, Copy from closest edge of closest face (using midpoints).
    * 'EDGEINTERP_VNORPROJ': Projected Edge Interpolated, Interpolate all source edges hit by the projection of destination one along its own normal (from vertices).
    (type: enum in ['TOPOLOGY', 'VERT_NEAREST', 'NEAREST', 'POLY_NEAREST', 'EDGEINTERP_VNORPROJ'], default 'NEAREST')
    
    :type: str
    """

    invert_vertex_group = False
    """Invert vertex group influence
    (type: boolean, default False)
    
    :type: bool
    """

    islands_precision = 0.0
    """Factor controlling precision of islands handling (typically, 0.1 should be enough, higher values can make things really slow)
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    layers_uv_select_dst = 'NAME'
    """How to match source and destination layers
    * 'ACTIVE': Active Layer, Affect active data layer of all targets.
    * 'NAME': By Name, Match target data layers to affect by name.
    * 'INDEX': By Order, Match target data layers to affect by order (indices).
    (type: enum in ['ACTIVE', 'NAME', 'INDEX'], default 'NAME')
    
    :type: str
    """

    layers_uv_select_src = 'ALL'
    """Which layers to transfer, in case of multi-layers types
    * 'ACTIVE': Active Layer, Only transfer active data layer.
    * 'ALL': All Layers, Transfer all data layers.
    * 'BONE_SELECT': Selected Pose Bones, Transfer all vertex groups used by selected pose bones.
    * 'BONE_DEFORM': Deform Pose Bones, Transfer all vertex groups used by deform bones.
    (type: enum in ['ACTIVE', 'ALL', 'BONE_SELECT', 'BONE_DEFORM'], default 'ALL')
    
    :type: str
    """

    layers_vcol_select_dst = 'NAME'
    """How to match source and destination layers
    * 'ACTIVE': Active Layer, Affect active data layer of all targets.
    * 'NAME': By Name, Match target data layers to affect by name.
    * 'INDEX': By Order, Match target data layers to affect by order (indices).
    (type: enum in ['ACTIVE', 'NAME', 'INDEX'], default 'NAME')
    
    :type: str
    """

    layers_vcol_select_src = 'ALL'
    """Which layers to transfer, in case of multi-layers types
    * 'ACTIVE': Active Layer, Only transfer active data layer.
    * 'ALL': All Layers, Transfer all data layers.
    * 'BONE_SELECT': Selected Pose Bones, Transfer all vertex groups used by selected pose bones.
    * 'BONE_DEFORM': Deform Pose Bones, Transfer all vertex groups used by deform bones.
    (type: enum in ['ACTIVE', 'ALL', 'BONE_SELECT', 'BONE_DEFORM'], default 'ALL')
    
    :type: str
    """

    layers_vgroup_select_dst = 'NAME'
    """How to match source and destination layers
    * 'ACTIVE': Active Layer, Affect active data layer of all targets.
    * 'NAME': By Name, Match target data layers to affect by name.
    * 'INDEX': By Order, Match target data layers to affect by order (indices).
    (type: enum in ['ACTIVE', 'NAME', 'INDEX'], default 'NAME')
    
    :type: str
    """

    layers_vgroup_select_src = 'ALL'
    """Which layers to transfer, in case of multi-layers types
    * 'ACTIVE': Active Layer, Only transfer active data layer.
    * 'ALL': All Layers, Transfer all data layers.
    * 'BONE_SELECT': Selected Pose Bones, Transfer all vertex groups used by selected pose bones.
    * 'BONE_DEFORM': Deform Pose Bones, Transfer all vertex groups used by deform bones.
    (type: enum in ['ACTIVE', 'ALL', 'BONE_SELECT', 'BONE_DEFORM'], default 'ALL')
    
    :type: str
    """

    loop_mapping = 'NEAREST_POLYNOR'
    """Method used to map source faces' corners to destination ones
    * 'TOPOLOGY': Topology, Copy from identical topology meshes.
    * 'NEAREST_NORMAL': Nearest Corner And Best Matching Normal, Copy from nearest corner which has the best matching normal.
    * 'NEAREST_POLYNOR': Nearest Corner And Best Matching Face Normal, Copy from nearest corner which has the face with the best matching normal to destination corner's face one.
    * 'NEAREST_POLY': Nearest Corner Of Nearest Face, Copy from nearest corner of nearest polygon.
    * 'POLYINTERP_NEAREST': Nearest Face Interpolated, Copy from interpolated corners of the nearest source polygon.
    * 'POLYINTERP_LNORPROJ': Projected Face Interpolated, Copy from interpolated corners of the source polygon hit by corner normal projection.
    (type: enum in ['TOPOLOGY', 'NEAREST_NORMAL', 'NEAREST_POLYNOR', 'NEAREST_POLY', 'POLYINTERP_NEAREST', 'POLYINTERP_LNORPROJ'], default 'NEAREST_POLYNOR')
    
    :type: str
    """

    max_distance = 1.0
    """Maximum allowed distance between source and destination element, for non-topology mappings
    (type: float in [0, inf], default 1.0)
    
    :type: float
    """

    mix_factor = 1.0
    """Factor to use when applying data to destination (exact behavior depends on mix mode)
    (type: float in [0, 1], default 1.0)
    
    :type: float
    """

    mix_mode = 'REPLACE'
    """How to affect destination elements with source values
    * 'REPLACE': Replace, Overwrite all elements' data.
    * 'ABOVE_THRESHOLD': Above Threshold, Only replace destination elements where data is above given threshold (exact behavior depends on data type).
    * 'BELOW_THRESHOLD': Below Threshold, Only replace destination elements where data is below given threshold (exact behavior depends on data type).
    * 'MIX': Mix, Mix source value into destination one, using given threshold as factor.
    * 'ADD': Add, Add source value to destination one, using given threshold as factor.
    * 'SUB': Subtract, Subtract source value to destination one, using given threshold as factor.
    * 'MUL': Multiply, Multiply source value to destination one, using given threshold as factor.
    (type: enum in ['REPLACE', 'ABOVE_THRESHOLD', 'BELOW_THRESHOLD', 'MIX', 'ADD', 'SUB', 'MUL'], default 'REPLACE')
    
    :type: str
    """

    object = None
    """Object to transfer data from
    (type: bpy.types.Object)
    
    :type: Object
    """

    poly_mapping = 'NEAREST'
    """Method used to map source faces to destination ones
    * 'TOPOLOGY': Topology, Copy from identical topology meshes.
    * 'NEAREST': Nearest Face, Copy from nearest polygon (using center points).
    * 'NORMAL': Best Normal-Matching, Copy from source polygon which normal is the closest to destination one.
    * 'POLYINTERP_PNORPROJ': Projected Face Interpolated, Interpolate all source polygons intersected by the projection of destination one along its own normal.
    (type: enum in ['TOPOLOGY', 'NEAREST', 'NORMAL', 'POLYINTERP_PNORPROJ'], default 'NEAREST')
    
    :type: str
    """

    ray_radius = 0.0
    """'Width' of rays (especially useful when raycasting against vertices or edges)
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    use_edge_data = False
    """Enable edge data transfer
    (type: boolean, default False)
    
    :type: bool
    """

    use_loop_data = False
    """Enable face corner data transfer
    (type: boolean, default False)
    
    :type: bool
    """

    use_max_distance = False
    """Source elements must be closer than given distance from destination one
    (type: boolean, default False)
    
    :type: bool
    """

    use_object_transform = True
    """Evaluate source and destination meshes in global space
    (type: boolean, default True)
    
    :type: bool
    """

    use_poly_data = False
    """Enable face data transfer
    (type: boolean, default False)
    
    :type: bool
    """

    use_vert_data = False
    """Enable vertex data transfer
    (type: boolean, default False)
    
    :type: bool
    """

    vert_mapping = 'NEAREST'
    """Method used to map source vertices to destination ones
    * 'TOPOLOGY': Topology, Copy from identical topology meshes.
    * 'NEAREST': Nearest vertex, Copy from closest vertex.
    * 'EDGE_NEAREST': Nearest Edge Vertex, Copy from closest vertex of closest edge.
    * 'EDGEINTERP_NEAREST': Nearest Edge Interpolated, Copy from interpolated values of vertices from closest point on closest edge.
    * 'POLY_NEAREST': Nearest Face Vertex, Copy from closest vertex of closest face.
    * 'POLYINTERP_NEAREST': Nearest Face Interpolated, Copy from interpolated values of vertices from closest point on closest face.
    * 'POLYINTERP_VNORPROJ': Projected Face Interpolated, Copy from interpolated values of vertices from point on closest face hit by normal-projection.
    (type: enum in ['TOPOLOGY', 'NEAREST', 'EDGE_NEAREST', 'EDGEINTERP_NEAREST', 'POLY_NEAREST', 'POLYINTERP_NEAREST', 'POLYINTERP_VNORPROJ'], default 'NEAREST')
    
    :type: str
    """

    vertex_group = ""
    """Vertex group name for selecting the affected areas
    (type: string, default "", (never None))
    
    :type: str
    """


class DecimateModifier(Modifier):
    """Decimation modifier"""

    angle_limit = 0.0
    """Only dissolve angles below this (planar only)
    (type: float in [0, 3.14159], default 0.0)
    
    :type: float
    """

    decimate_type = 'COLLAPSE'
    """
    * 'COLLAPSE': Collapse, Use edge collapsing.
    * 'UNSUBDIV': Un-Subdivide, Use un-subdivide face reduction.
    * 'DISSOLVE': Planar, Dissolve geometry to form planar polygons.
    (type: enum in ['COLLAPSE', 'UNSUBDIV', 'DISSOLVE'], default 'COLLAPSE')
    
    :type: str
    """

    delimit = {'NORMAL'}
    """Limit merging geometry
    * 'NORMAL': Normal, Delimit by face directions.
    * 'MATERIAL': Material, Delimit by face material.
    * 'SEAM': Seam, Delimit by edge seams.
    * 'SHARP': Sharp, Delimit by sharp edges.
    * 'UV': UVs, Delimit by UV coordinates.
    (type: enum set in {'NORMAL', 'MATERIAL', 'SEAM', 'SHARP', 'UV'}, default {'NORMAL'})
    
    :type: enum set in {'NORMAL', 'MATERIAL', 'SEAM', 'SHARP', 'UV'}
    """

    face_count = 0
    """The current number of faces in the decimated mesh
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    invert_vertex_group = False
    """Invert vertex group influence (collapse only)
    (type: boolean, default False)
    
    :type: bool
    """

    iterations = 0
    """Number of times reduce the geometry (unsubdivide only)
    (type: int in [0, 32767], default 0)
    
    :type: int
    """

    ratio = 0.0
    """Ratio of triangles to reduce to (collapse only)
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    symmetry_axis = 'X'
    """Axis of symmetry
    (type: enum in ['X', 'Y', 'Z'], default 'X')
    
    :type: str
    """

    use_collapse_triangulate = False
    """Keep triangulated faces resulting from decimation (collapse only)
    (type: boolean, default False)
    
    :type: bool
    """

    use_dissolve_boundaries = False
    """Dissolve all vertices inbetween face boundaries (planar only)
    (type: boolean, default False)
    
    :type: bool
    """

    use_symmetry = False
    """Maintain symmetry on an axis
    (type: boolean, default False)
    
    :type: bool
    """

    vertex_group = ""
    """Vertex group name (collapse only)
    (type: string, default "", (never None))
    
    :type: str
    """

    vertex_group_factor = 0.0
    """Vertex group strength
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """


class DelaySensor(Sensor):
    """Sensor to send delayed events"""

    delay = 0
    """Delay in number of logic tics before the positive trigger (default 60 per second)
    (type: int in [0, 5000], default 0)
    
    :type: int
    """

    duration = 0
    """If >0, delay in number of logic tics before the negative trigger following the positive trigger
    (type: int in [0, 5000], default 0)
    
    :type: int
    """

    use_repeat = False
    """Toggle repeat option (if selected, the sensor restarts after Delay+Duration logic tics)
    (type: boolean, default False)
    
    :type: bool
    """


class DisplaceModifier(Modifier):
    """Displacement modifier"""

    direction = 'X'
    """
    * 'X': X, Use the texture's intensity value to displace in the X direction.
    * 'Y': Y, Use the texture's intensity value to displace in the Y direction.
    * 'Z': Z, Use the texture's intensity value to displace in the Z direction.
    * 'NORMAL': Normal, Use the texture's intensity value to displace along the vertex normal.
    * 'CUSTOM_NORMAL': Custom Normal, Use the texture's intensity value to displace along the (averaged) custom normal (falls back to vertex).
    * 'RGB_TO_XYZ': RGB to XYZ, Use the texture's RGB values to displace the mesh in the XYZ direction.
    (type: enum in ['X', 'Y', 'Z', 'NORMAL', 'CUSTOM_NORMAL', 'RGB_TO_XYZ'], default 'X')
    
    :type: str
    """

    mid_level = 0.0
    """Material value that gives no displacement
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    space = 'LOCAL'
    """
    * 'LOCAL': Local, Direction is defined in local coordinates.
    * 'GLOBAL': Global, Direction is defined in global coordinates.
    (type: enum in ['LOCAL', 'GLOBAL'], default 'LOCAL')
    
    :type: str
    """

    strength = 0.0
    """Amount to displace geometry
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    texture = None
    """(type: bpy.types.Texture)
    
    :type: Texture
    """

    texture_coords = 'LOCAL'
    """
    * 'LOCAL': Local, Use the local coordinate system for the texture coordinates.
    * 'GLOBAL': Global, Use the global coordinate system for the texture coordinates.
    * 'OBJECT': Object, Use the linked object's local coordinate system for the texture coordinates.
    * 'UV': UV, Use UV coordinates for the texture coordinates.
    (type: enum in ['LOCAL', 'GLOBAL', 'OBJECT', 'UV'], default 'LOCAL')
    
    :type: str
    """

    texture_coords_object = None
    """Object to set the texture coordinates
    (type: bpy.types.Object)
    
    :type: Object
    """

    uv_layer = ""
    """UV map name
    (type: string, default "", (never None))
    
    :type: str
    """

    vertex_group = ""
    """Name of Vertex Group which determines influence of modifier per point
    (type: string, default "", (never None))
    
    :type: str
    """


class DomainFluidSettings(FluidSettings):
    """Fluid simulation settings for the domain of a fluid simulation"""

    compressibility = 0.0
    """Allowed compressibility due to gravitational force for standing fluid (directly affects simulation step size)
    (type: float in [0.001, 0.1], default 0.0)
    
    :type: float
    """

    end_time = 0.0
    """Simulation time of the last blender frame (in seconds)
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    filepath = ""
    """Directory (and/or filename prefix) to store baked fluid simulation files in
    (type: string, default "", (never None))
    
    :type: str
    """

    fluid_mesh_vertices = None
    """Vertices of the fluid mesh generated by simulation
    (type: bpy.types.bpy_prop_collection of bpy.types.FluidVertexVelocity, (readonly))
    
    :type: bpy_prop_collection
    """

    frame_offset = 0
    """Offset when reading baked cache
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    generate_particles = 0.0
    """Amount of particles to generate (0=off, 1=normal, >1=more)
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    gravity = (0.0, 0.0, 0.0)
    """Gravity in X, Y and Z direction
    (type: float array of 3 items in [-1000.1, 1000.1], default (0.0, 0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    grid_levels = 0
    """Number of coarsened grids to use (-1 for automatic)
    (type: int in [-1, 4], default 0)
    
    :type: int
    """

    memory_estimate = ""
    """Estimated amount of memory needed for baking the domain
    (type: string, default "", (readonly, never None))
    
    :type: str
    """

    partial_slip_factor = 0.0
    """Amount of mixing between no- and free-slip, 0 is no slip and 1 is free slip
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    preview_resolution = 0
    """Preview resolution in X,Y and Z direction
    (type: int in [1, 100], default 0)
    
    :type: int
    """

    render_display_mode = 'GEOMETRY'
    """How to display the mesh for rendering
    * 'GEOMETRY': Geometry, Display geometry.
    * 'PREVIEW': Preview, Display preview quality results.
    * 'FINAL': Final, Display final quality results.
    (type: enum in ['GEOMETRY', 'PREVIEW', 'FINAL'], default 'GEOMETRY')
    
    :type: str
    """

    resolution = 0
    """Domain resolution in X,Y and Z direction
    (type: int in [1, 1024], default 0)
    
    :type: int
    """

    simulation_rate = 0.0
    """Fluid motion rate (0 = stationary, 1 = normal speed)
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    simulation_scale = 0.0
    """Size of the simulation domain in meters
    (type: float in [0.001, 10], default 0.0)
    
    :type: float
    """

    slip_type = 'NOSLIP'
    """
    * 'NOSLIP': No Slip, Obstacle causes zero normal and tangential velocity (=sticky), default for all (only option for moving objects).
    * 'PARTIALSLIP': Partial Slip, Mix between no-slip and free-slip (non moving objects only!).
    * 'FREESLIP': Free Slip, Obstacle only causes zero normal velocity (=not sticky, non moving objects only!).
    (type: enum in ['NOSLIP', 'PARTIALSLIP', 'FREESLIP'], default 'NOSLIP')
    
    :type: str
    """

    start_time = 0.0
    """Simulation time of the first blender frame (in seconds)
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    surface_smooth = 0.0
    """Amount of surface smoothing (a value of 0 is off, 1 is normal smoothing and more than 1 is extra smoothing)
    (type: float in [0, 5], default 0.0)
    
    :type: float
    """

    surface_subdivisions = 0
    """Number of isosurface subdivisions (this is necessary for the inclusion of particles into the surface generation - WARNING: can lead to longer computation times !)
    (type: int in [0, 5], default 0)
    
    :type: int
    """

    threads = 0
    """Override number of threads for the simulation, 0 is automatic
    (type: int in [0, 1024], default 0)
    
    :type: int
    """

    tracer_particles = 0
    """Number of tracer particles to generate
    (type: int in [0, 10000], default 0)
    
    :type: int
    """

    use_reverse_frames = False
    """Reverse fluid frames
    (type: boolean, default False)
    
    :type: bool
    """

    use_speed_vectors = False
    """Generate speed vectors for vector blur
    (type: boolean, default False)
    
    :type: bool
    """

    use_surface_noobs = False
    """Removes the air gap between fluid surface and obstacles - WARNING: Can result in a dissolving surface in other areas
    (type: boolean, default False)
    
    :type: bool
    """

    use_time_override = False
    """Use a custom start and end time (in seconds) instead of the scene's timeline
    (type: boolean, default False)
    
    :type: bool
    """

    viewport_display_mode = 'GEOMETRY'
    """How to display the mesh in the viewport
    * 'GEOMETRY': Geometry, Display geometry.
    * 'PREVIEW': Preview, Display preview quality results.
    * 'FINAL': Final, Display final quality results.
    (type: enum in ['GEOMETRY', 'PREVIEW', 'FINAL'], default 'GEOMETRY')
    
    :type: str
    """

    viscosity_base = 0.0
    """Viscosity setting: value that is multiplied by 10 to the power of (exponent*-1)
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    viscosity_exponent = 0
    """Negative exponent for the viscosity value (to simplify entering small values e.g. 5*10^-6)
    (type: int in [0, 10], default 0)
    
    :type: int
    """


class DynamicPaintModifier(Modifier):
    """Dynamic Paint modifier"""

    brush_settings = None
    """(type: bpy.types.DynamicPaintBrushSettings, (readonly))
    
    :type: DynamicPaintBrushSettings
    """

    canvas_settings = None
    """(type: bpy.types.DynamicPaintCanvasSettings, (readonly))
    
    :type: DynamicPaintCanvasSettings
    """

    ui_type = 'CANVAS'
    """(type: enum in ['CANVAS', 'BRUSH'], default 'CANVAS')
    
    :type: str
    """


class EdgeSplitModifier(Modifier):
    """Edge splitting modifier to create sharp edges"""

    split_angle = 0.0
    """Angle above which to split edges
    (type: float in [0, 3.14159], default 0.0)
    
    :type: float
    """

    use_edge_angle = False
    """Split edges with high angle between faces
    (type: boolean, default False)
    
    :type: bool
    """

    use_edge_sharp = False
    """Split edges that are marked as sharp
    (type: boolean, default False)
    
    :type: bool
    """


class EditObjectActuator(Actuator):
    """Actuator used to edit objects"""

    angular_velocity = (0.0, 0.0, 0.0)
    """Angular velocity upon creation
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    dynamic_operation = 'RESTOREDYN'
    """(type: enum in ['RESTOREDYN', 'SUSPENDDYN', 'ENABLERIGIDBODY', 'DISABLERIGIDBODY', 'SETMASS'], default 'RESTOREDYN')
    
    :type: str
    """

    linear_velocity = (0.0, 0.0, 0.0)
    """Velocity upon creation
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    mass = 0.0
    """The mass of the object
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    mesh = None
    """Replace the existing, when left blank 'Phys' will remake the existing physics mesh
    (type: bpy.types.Mesh)
    
    :type: Mesh
    """

    mode = 'ADDOBJECT'
    """The mode of the actuator
    (type: enum in ['ADDOBJECT', 'ENDOBJECT', 'REPLACEMESH', 'TRACKTO', 'DYNAMICS'], default 'ADDOBJECT')
    
    :type: str
    """

    object = None
    """Add this Object and all its children (can't be on a visible layer)
    (type: bpy.types.Object)
    
    :type: Object
    """

    time = 0
    """Duration the new Object lives or the track takes
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    track_axis = 'TRACKAXISX'
    """The axis that points to the target object
    (type: enum in ['TRACKAXISX', 'TRACKAXISY', 'TRACKAXISZ', 'TRACKAXISNEGX', 'TRACKAXISNEGY', 'TRACKAXISNEGZ'], default 'TRACKAXISX')
    
    :type: str
    """

    track_object = None
    """Track to this Object
    (type: bpy.types.Object)
    
    :type: Object
    """

    up_axis = 'UPAXISX'
    """The axis that points upward
    (type: enum in ['UPAXISX', 'UPAXISY', 'UPAXISZ'], default 'UPAXISX')
    
    :type: str
    """

    use_3d_tracking = False
    """Enable 3D tracking
    (type: boolean, default False)
    
    :type: bool
    """

    use_local_angular_velocity = False
    """Apply the rotation locally
    (type: boolean, default False)
    
    :type: bool
    """

    use_local_linear_velocity = False
    """Apply the transformation locally
    (type: boolean, default False)
    
    :type: bool
    """

    use_replace_display_mesh = False
    """Replace the display mesh
    (type: boolean, default False)
    
    :type: bool
    """

    use_replace_physics_mesh = False
    """Replace the physics mesh (triangle bounds only - compound shapes not supported)
    (type: boolean, default False)
    
    :type: bool
    """


class EffectSequence(Sequence):
    """Sequence strip applying an effect on the images created by other strips"""

    alpha_mode = 'STRAIGHT'
    """Representation of alpha information in the RGBA pixels
    * 'STRAIGHT': Straight, RGB channels in transparent pixels are unaffected by the alpha channel.
    * 'PREMUL': Premultiplied, RGB channels in transparent pixels are multiplied by the alpha channel.
    (type: enum in ['STRAIGHT', 'PREMUL'], default 'STRAIGHT')
    
    :type: str
    """

    color_multiply = 1.0
    """(type: float in [0, 20], default 1.0)
    
    :type: float
    """

    color_saturation = 1.0
    """(type: float in [0, 20], default 1.0)
    
    :type: float
    """

    crop = None
    """(type: bpy.types.SequenceCrop, (readonly))
    
    :type: SequenceCrop
    """

    proxy = None
    """(type: bpy.types.SequenceProxy, (readonly))
    
    :type: SequenceProxy
    """

    strobe = 0.0
    """Only display every nth frame
    (type: float in [1, 30], default 0.0)
    
    :type: float
    """

    transform = None
    """(type: bpy.types.SequenceTransform, (readonly))
    
    :type: SequenceTransform
    """

    use_crop = False
    """Crop image before processing
    (type: boolean, default False)
    
    :type: bool
    """

    use_deinterlace = False
    """Remove fields from video movies
    (type: boolean, default False)
    
    :type: bool
    """

    use_flip_x = False
    """Flip on the X axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_flip_y = False
    """Flip on the Y axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_float = False
    """Convert input to float data
    (type: boolean, default False)
    
    :type: bool
    """

    use_proxy = False
    """Use a preview proxy and/or timecode index for this strip
    (type: boolean, default False)
    
    :type: bool
    """

    use_reverse_frames = False
    """Reverse frame order
    (type: boolean, default False)
    
    :type: bool
    """

    use_translation = False
    """Translate image before processing
    (type: boolean, default False)
    
    :type: bool
    """


class EnumProperty(Property):
    """RNA enumeration property definition, to choose from a number of predefined options"""

    default = 'DUMMY'
    """Default value for this enum
    (type: enum in ['DUMMY'], default 'DUMMY', (readonly))
    
    :type: str
    """

    default_flag = {}
    """Default value for this enum
    (type: enum set in {'DUMMY'}, default {}, (readonly))
    
    :type: enum set in {'DUMMY'}
    """

    enum_items = None
    """Possible values for the property
    (type: bpy.types.bpy_prop_collection of bpy.types.EnumPropertyItem, (readonly))
    
    :type: bpy_prop_collection
    """

    enum_items_static = None
    """Possible values for the property (never calls optional dynamic generation of those)
    (type: bpy.types.bpy_prop_collection of bpy.types.EnumPropertyItem, (readonly))
    
    :type: bpy_prop_collection
    """


class ExplodeModifier(Modifier):
    """Explosion effect modifier based on a particle system"""

    particle_uv = ""
    """UV map to change with particle age
    (type: string, default "", (never None))
    
    :type: str
    """

    protect = 0.0
    """Clean vertex group edges
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    show_alive = False
    """Show mesh when particles are alive
    (type: boolean, default False)
    
    :type: bool
    """

    show_dead = False
    """Show mesh when particles are dead
    (type: boolean, default False)
    
    :type: bool
    """

    show_unborn = False
    """Show mesh when particles are unborn
    (type: boolean, default False)
    
    :type: bool
    """

    use_edge_cut = False
    """Cut face edges for nicer shrapnel
    (type: boolean, default False)
    
    :type: bool
    """

    use_size = False
    """Use particle size for the shrapnel
    (type: boolean, default False)
    
    :type: bool
    """

    vertex_group = ""
    """(type: string, default "", (never None))
    
    :type: str
    """


class ExpressionController(Controller):
    """Controller passing on events based on the evaluation of an expression"""

    expression = ""
    """(type: string, default "", (never None))
    
    :type: str
    """


class FILEBROWSER_UL_dir(UIList):
    """"""

    def draw_item(self, context, layout, data, item, icon, active_data, active_propname, index):
        """"""


class FModifierCycles(FModifier):
    """Repeat the values of the modified F-Curve"""

    cycles_after = 0
    """Maximum number of cycles to allow after last keyframe (0 = infinite)
    (type: int in [-32768, 32767], default 0)
    
    :type: int
    """

    cycles_before = 0
    """Maximum number of cycles to allow before first keyframe (0 = infinite)
    (type: int in [-32768, 32767], default 0)
    
    :type: int
    """

    mode_after = 'NONE'
    """Cycling mode to use after last keyframe
    * 'NONE': No Cycles, Don't do anything.
    * 'REPEAT': Repeat Motion, Repeat keyframe range as-is.
    * 'REPEAT_OFFSET': Repeat with Offset, Repeat keyframe range, but with offset based on gradient between start and end values.
    * 'MIRROR': Repeat Mirrored, Alternate between forward and reverse playback of keyframe range.
    (type: enum in ['NONE', 'REPEAT', 'REPEAT_OFFSET', 'MIRROR'], default 'NONE')
    
    :type: str
    """

    mode_before = 'NONE'
    """Cycling mode to use before first keyframe
    * 'NONE': No Cycles, Don't do anything.
    * 'REPEAT': Repeat Motion, Repeat keyframe range as-is.
    * 'REPEAT_OFFSET': Repeat with Offset, Repeat keyframe range, but with offset based on gradient between start and end values.
    * 'MIRROR': Repeat Mirrored, Alternate between forward and reverse playback of keyframe range.
    (type: enum in ['NONE', 'REPEAT', 'REPEAT_OFFSET', 'MIRROR'], default 'NONE')
    
    :type: str
    """


class FModifierEnvelope(FModifier):
    """Scale the values of the modified F-Curve"""

    control_points = None
    """Control points defining the shape of the envelope
    (type: bpy.types.FModifierEnvelopeControlPoints bpy.types.bpy_prop_collection of bpy.types.FModifierEnvelopeControlPoint, (readonly))
    
    :type: FModifierEnvelopeControlPoints
    """

    default_max = 0.0
    """Upper distance from Reference Value for 1:1 default influence
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    default_min = 0.0
    """Lower distance from Reference Value for 1:1 default influence
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    reference_value = 0.0
    """Value that envelope's influence is centered around / based on
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """


class FModifierFunctionGenerator(FModifier):
    """Generate values using a Built-In Function"""

    amplitude = 0.0
    """Scale factor determining the maximum/minimum values
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    function_type = 'SIN'
    """Type of built-in function to use
    * 'SIN': Sine.
    * 'COS': Cosine.
    * 'TAN': Tangent.
    * 'SQRT': Square Root.
    * 'LN': Natural Logarithm.
    * 'SINC': Normalized Sine, sin(x) / x.
    (type: enum in ['SIN', 'COS', 'TAN', 'SQRT', 'LN', 'SINC'], default 'SIN')
    
    :type: str
    """

    phase_multiplier = 0.0
    """Scale factor determining the 'speed' of the function
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    phase_offset = 0.0
    """Constant factor to offset time by for function
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    use_additive = False
    """Values generated by this modifier are applied on top of the existing values instead of overwriting them
    (type: boolean, default False)
    
    :type: bool
    """

    value_offset = 0.0
    """Constant factor to offset values by
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """


class FModifierGenerator(FModifier):
    """Deterministically generate values for the modified F-Curve"""

    coefficients = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    """Coefficients for 'x' (starting from lowest power of x^0)
    (type: float array of 32 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    mode = 'POLYNOMIAL'
    """Type of generator to use
    (type: enum in ['POLYNOMIAL', 'POLYNOMIAL_FACTORISED'], default 'POLYNOMIAL')
    
    :type: str
    """

    poly_order = 0
    """The highest power of 'x' for this polynomial (number of coefficients - 1)
    (type: int in [1, 100], default 0)
    
    :type: int
    """

    use_additive = False
    """Values generated by this modifier are applied on top of the existing values instead of overwriting them
    (type: boolean, default False)
    
    :type: bool
    """


class FModifierLimits(FModifier):
    """Limit the time/value ranges of the modified F-Curve"""

    max_x = 0.0
    """Highest X value to allow
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    max_y = 0.0
    """Highest Y value to allow
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    min_x = 0.0
    """Lowest X value to allow
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    min_y = 0.0
    """Lowest Y value to allow
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    use_max_x = False
    """Use the maximum X value
    (type: boolean, default False)
    
    :type: bool
    """

    use_max_y = False
    """Use the maximum Y value
    (type: boolean, default False)
    
    :type: bool
    """

    use_min_x = False
    """Use the minimum X value
    (type: boolean, default False)
    
    :type: bool
    """

    use_min_y = False
    """Use the minimum Y value
    (type: boolean, default False)
    
    :type: bool
    """


class FModifierNoise(FModifier):
    """Give randomness to the modified F-Curve"""

    blend_type = 'REPLACE'
    """Method of modifying the existing F-Curve
    (type: enum in ['REPLACE', 'ADD', 'SUBTRACT', 'MULTIPLY'], default 'REPLACE')
    
    :type: str
    """

    depth = 0
    """Amount of fine level detail present in the noise
    (type: int in [0, 32767], default 0)
    
    :type: int
    """

    offset = 0.0
    """Time offset for the noise effect
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    phase = 0.0
    """A random seed for the noise effect
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    scale = 0.0
    """Scaling (in time) of the noise
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    strength = 0.0
    """Amplitude of the noise - the amount that it modifies the underlying curve
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """


class FModifierPython(FModifier):
    """Perform user-defined operation on the modified F-Curve"""


class FModifierStepped(FModifier):
    """Hold each interpolated value from the F-Curve for several frames without changing the timing"""

    frame_end = 0.0
    """Frame that modifier's influence ends (if applicable)
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    frame_offset = 0.0
    """Reference number of frames before frames get held (use to get hold for '1-3' vs '5-7' holding patterns)
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    frame_start = 0.0
    """Frame that modifier's influence starts (if applicable)
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    frame_step = 0.0
    """Number of frames to hold each value
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    use_frame_end = False
    """Restrict modifier to only act before its 'end' frame
    (type: boolean, default False)
    
    :type: bool
    """

    use_frame_start = False
    """Restrict modifier to only act after its 'start' frame
    (type: boolean, default False)
    
    :type: bool
    """


class Filter2DActuator(Actuator):
    """Actuator to apply screen graphic effects"""

    filter_pass = 0
    """Set filter order
    (type: int in [0, 99], default 0)
    
    :type: int
    """

    glsl_shader = None
    """(type: bpy.types.Text)
    
    :type: Text
    """

    mode = 'REMOVE'
    """(type: enum in ['ENABLE', 'DISABLE', 'REMOVE', 'MOTIONBLUR', 'BLUR', 'SHARPEN', 'DILATION', 'EROSION', 'LAPLACIAN', 'SOBEL', 'PREWITT', 'GRAYSCALE', 'SEPIA', 'INVERT', 'CUSTOMFILTER'], default 'REMOVE')
    
    :type: str
    """

    motion_blur_factor = 0.0
    """Motion blur factor
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    use_motion_blur = False
    """Enable/Disable Motion Blur
    (type: boolean, default False)
    
    :type: bool
    """


class FloatProperty(Property):
    """RNA floating pointer number property definition"""

    array_length = 0
    """Maximum length of the array, 0 means unlimited
    (type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """

    default = 0.0
    """Default value for this number
    (type: float in [-inf, inf], default 0.0, (readonly))
    
    :type: float
    """

    default_array = (0.0, 0.0, 0.0)
    """Default value for this array
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0), (readonly))
    
    :type: collections.Sequence[float]
    """

    hard_max = 0.0
    """Maximum value used by buttons
    (type: float in [-inf, inf], default 0.0, (readonly))
    
    :type: float
    """

    hard_min = 0.0
    """Minimum value used by buttons
    (type: float in [-inf, inf], default 0.0, (readonly))
    
    :type: float
    """

    is_array = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    precision = 0
    """Number of digits after the dot used by buttons
    (type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """

    soft_max = 0.0
    """Maximum value used by buttons
    (type: float in [-inf, inf], default 0.0, (readonly))
    
    :type: float
    """

    soft_min = 0.0
    """Minimum value used by buttons
    (type: float in [-inf, inf], default 0.0, (readonly))
    
    :type: float
    """

    step = 0.0
    """Step size used by number buttons, for floats 1/100th of the step size
    (type: float in [0, inf], default 0.0, (readonly))
    
    :type: float
    """


class FloorConstraint(Constraint):
    """Use the target object for location limitation"""

    floor_location = 'FLOOR_X'
    """Location of target that object will not pass through
    (type: enum in ['FLOOR_X', 'FLOOR_Y', 'FLOOR_Z', 'FLOOR_NEGATIVE_X', 'FLOOR_NEGATIVE_Y', 'FLOOR_NEGATIVE_Z'], default 'FLOOR_X')
    
    :type: str
    """

    offset = 0.0
    """Offset of floor from object origin
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    subtarget = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    target = None
    """Target Object
    (type: bpy.types.Object)
    
    :type: Object
    """

    use_rotation = False
    """Use the target's rotation to determine floor
    (type: boolean, default False)
    
    :type: bool
    """

    use_sticky = False
    """Immobilize object while constrained
    (type: boolean, default False)
    
    :type: bool
    """


class FluidFluidSettings(FluidSettings):
    """Fluid simulation settings for the fluid in the simulation"""

    initial_velocity = (0.0, 0.0, 0.0)
    """Initial velocity of fluid
    (type: float array of 3 items in [-1000.1, 1000.1], default (0.0, 0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    use = False
    """Object contributes to the fluid simulation
    (type: boolean, default False)
    
    :type: bool
    """

    use_animated_mesh = False
    """Export this mesh as an animated one (slower and enforces No Slip, only use if really necessary [e.g. armatures or parented objects], animated pos/rot/scale F-Curves do not require it)
    (type: boolean, default False)
    
    :type: bool
    """

    volume_initialization = 'VOLUME'
    """Volume initialization type (WARNING: complex volumes might require too much memory and break simulation)
    * 'VOLUME': Volume, Use only the inner volume of the mesh.
    * 'SHELL': Shell, Use only the outer shell of the mesh.
    * 'BOTH': Both, Use both the inner volume and the outer shell of the mesh.
    (type: enum in ['VOLUME', 'SHELL', 'BOTH'], default 'VOLUME')
    
    :type: str
    """


class FluidSimulationModifier(Modifier):
    """Fluid simulation modifier"""

    settings = None
    """Settings for how this object is used in the fluid simulation
    (type: bpy.types.FluidSettings, (readonly, never None))
    
    :type: FluidSettings
    """


class FollowPathConstraint(Constraint):
    """Lock motion to the target path"""

    forward_axis = 'FORWARD_X'
    """Axis that points forward along the path
    (type: enum in ['FORWARD_X', 'FORWARD_Y', 'FORWARD_Z', 'TRACK_NEGATIVE_X', 'TRACK_NEGATIVE_Y', 'TRACK_NEGATIVE_Z'], default 'FORWARD_X')
    
    :type: str
    """

    offset = 0.0
    """Offset from the position corresponding to the time frame
    (type: float in [-500000, 500000], default 0.0)
    
    :type: float
    """

    offset_factor = 0.0
    """Percentage value defining target position along length of curve
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    target = None
    """Target Object
    (type: bpy.types.Object)
    
    :type: Object
    """

    up_axis = 'UP_X'
    """Axis that points upward
    (type: enum in ['UP_X', 'UP_Y', 'UP_Z'], default 'UP_X')
    
    :type: str
    """

    use_curve_follow = False
    """Object will follow the heading and banking of the curve
    (type: boolean, default False)
    
    :type: bool
    """

    use_curve_radius = False
    """Object is scaled by the curve radius
    (type: boolean, default False)
    
    :type: bool
    """

    use_fixed_location = False
    """Object will stay locked to a single point somewhere along the length of the curve regardless of time
    (type: boolean, default False)
    
    :type: bool
    """


class FollowTrackConstraint(Constraint):
    """Lock motion to the target motion track"""

    camera = None
    """Camera to which motion is parented (if empty active scene camera is used)
    (type: bpy.types.Object)
    
    :type: Object
    """

    clip = None
    """Movie Clip to get tracking data from
    (type: bpy.types.MovieClip)
    
    :type: MovieClip
    """

    depth_object = None
    """Object used to define depth in camera space by projecting onto surface of this object
    (type: bpy.types.Object)
    
    :type: Object
    """

    frame_method = 'STRETCH'
    """How the footage fits in the camera frame
    (type: enum in ['STRETCH', 'FIT', 'CROP'], default 'STRETCH')
    
    :type: str
    """

    object = ""
    """Movie tracking object to follow (if empty, camera object is used)
    (type: string, default "", (never None))
    
    :type: str
    """

    track = ""
    """Movie tracking track to follow
    (type: string, default "", (never None))
    
    :type: str
    """

    use_3d_position = False
    """Use 3D position of track to parent to
    (type: boolean, default False)
    
    :type: bool
    """

    use_active_clip = False
    """Use active clip defined in scene
    (type: boolean, default False)
    
    :type: bool
    """

    use_undistorted_position = False
    """Parent to undistorted position of 2D track
    (type: boolean, default False)
    
    :type: bool
    """


class FreestyleLineStyle(ID):
    """Freestyle line style, reusable by multiple line sets"""

    active_texture = None
    """Active texture slot being displayed
    (type: bpy.types.Texture)
    
    :type: Texture
    """

    active_texture_index = 0
    """Index of active texture slot
    (type: int in [0, 17], default 0)
    
    :type: int
    """

    alpha = 0.0
    """Base alpha transparency, possibly modified by alpha transparency modifiers
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    alpha_modifiers = None
    """List of alpha transparency modifiers
    (type: bpy.types.LineStyleAlphaModifiers bpy.types.bpy_prop_collection of bpy.types.LineStyleAlphaModifier, (readonly))
    
    :type: LineStyleAlphaModifiers
    """

    angle_max = 0.0
    """Maximum 2D angle for splitting chains
    (type: float in [0, 3.14159], default 0.0)
    
    :type: float
    """

    angle_min = 0.0
    """Minimum 2D angle for splitting chains
    (type: float in [0, 3.14159], default 0.0)
    
    :type: float
    """

    animation_data = None
    """Animation data for this data-block
    (type: bpy.types.AnimData, (readonly))
    
    :type: AnimData
    """

    caps = 'BUTT'
    """Select the shape of both ends of strokes
    * 'BUTT': Butt, Butt cap (flat).
    * 'ROUND': Round, Round cap (half-circle).
    * 'SQUARE': Square, Square cap (flat and extended).
    (type: enum in ['BUTT', 'ROUND', 'SQUARE'], default 'BUTT')
    
    :type: str
    """

    chain_count = 0
    """Chain count for the selection of first N chains
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    chaining = 'PLAIN'
    """Select the way how feature edges are jointed to form chains
    * 'PLAIN': Plain, Plain chaining.
    * 'SKETCHY': Sketchy, Sketchy chaining with a multiple touch.
    (type: enum in ['PLAIN', 'SKETCHY'], default 'PLAIN')
    
    :type: str
    """

    color = (0.0, 0.0, 0.0)
    """Base line color, possibly modified by line color modifiers
    (type: float array of 3 items in [0, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    color_modifiers = None
    """List of line color modifiers
    (type: bpy.types.LineStyleColorModifiers bpy.types.bpy_prop_collection of bpy.types.LineStyleColorModifier, (readonly))
    
    :type: LineStyleColorModifiers
    """

    dash1 = 0
    """Length of the 1st dash for dashed lines
    (type: int in [0, 65535], default 0)
    
    :type: int
    """

    dash2 = 0
    """Length of the 2nd dash for dashed lines
    (type: int in [0, 65535], default 0)
    
    :type: int
    """

    dash3 = 0
    """Length of the 3rd dash for dashed lines
    (type: int in [0, 65535], default 0)
    
    :type: int
    """

    gap1 = 0
    """Length of the 1st gap for dashed lines
    (type: int in [0, 65535], default 0)
    
    :type: int
    """

    gap2 = 0
    """Length of the 2nd gap for dashed lines
    (type: int in [0, 65535], default 0)
    
    :type: int
    """

    gap3 = 0
    """Length of the 3rd gap for dashed lines
    (type: int in [0, 65535], default 0)
    
    :type: int
    """

    geometry_modifiers = None
    """List of stroke geometry modifiers
    (type: bpy.types.LineStyleGeometryModifiers bpy.types.bpy_prop_collection of bpy.types.LineStyleGeometryModifier, (readonly))
    
    :type: LineStyleGeometryModifiers
    """

    integration_type = 'MEAN'
    """Select the way how the sort key is computed for each chain
    * 'MEAN': Mean, The value computed for the chain is the mean of the values obtained for chain vertices.
    * 'MIN': Min, The value computed for the chain is the minimum of the values obtained for chain vertices.
    * 'MAX': Max, The value computed for the chain is the maximum of the values obtained for chain vertices.
    * 'FIRST': First, The value computed for the chain is the value obtained for the first chain vertex.
    * 'LAST': Last, The value computed for the chain is the value obtained for the last chain vertex.
    (type: enum in ['MEAN', 'MIN', 'MAX', 'FIRST', 'LAST'], default 'MEAN')
    
    :type: str
    """

    length_max = 0.0
    """Maximum curvilinear 2D length for the selection of chains
    (type: float in [0, 10000], default 0.0)
    
    :type: float
    """

    length_min = 0.0
    """Minimum curvilinear 2D length for the selection of chains
    (type: float in [0, 10000], default 0.0)
    
    :type: float
    """

    material_boundary = False
    """If true, chains of feature edges are split at material boundaries
    (type: boolean, default False)
    
    :type: bool
    """

    node_tree = None
    """Node tree for node-based shaders
    (type: bpy.types.NodeTree, (readonly))
    
    :type: NodeTree
    """

    panel = 'STROKES'
    """Select the property panel to be shown
    * 'STROKES': Strokes, Show the panel for stroke construction.
    * 'COLOR': Color, Show the panel for line color options.
    * 'ALPHA': Alpha, Show the panel for alpha transparency options.
    * 'THICKNESS': Thickness, Show the panel for line thickness options.
    * 'GEOMETRY': Geometry, Show the panel for stroke geometry options.
    * 'TEXTURE': Texture, Show the panel for stroke texture options.
    (type: enum in ['STROKES', 'COLOR', 'ALPHA', 'THICKNESS', 'GEOMETRY', 'TEXTURE'], default 'STROKES')
    
    :type: str
    """

    rounds = 0
    """Number of rounds in a sketchy multiple touch
    (type: int in [1, 1000], default 0)
    
    :type: int
    """

    sort_key = 'DISTANCE_FROM_CAMERA'
    """Select the sort key to determine the stacking order of chains
    * 'DISTANCE_FROM_CAMERA': Distance from Camera, Sort by distance from camera (closer lines lie on top of further lines).
    * '2D_LENGTH': 2D Length, Sort by curvilinear 2D length (longer lines lie on top of shorter lines).
    * 'PROJECTED_X': Projected X, Sort by the projected X value in the image coordinate system.
    * 'PROJECTED_Y': Projected Y, Sort by the projected Y value in the image coordinate system.
    (type: enum in ['DISTANCE_FROM_CAMERA', '2D_LENGTH', 'PROJECTED_X', 'PROJECTED_Y'], default 'DISTANCE_FROM_CAMERA')
    
    :type: str
    """

    sort_order = 'DEFAULT'
    """Select the sort order
    * 'DEFAULT': Default, Default order of the sort key.
    * 'REVERSE': Reverse, Reverse order.
    (type: enum in ['DEFAULT', 'REVERSE'], default 'DEFAULT')
    
    :type: str
    """

    split_dash1 = 0
    """Length of the 1st dash for splitting
    (type: int in [0, 65535], default 0)
    
    :type: int
    """

    split_dash2 = 0
    """Length of the 2nd dash for splitting
    (type: int in [0, 65535], default 0)
    
    :type: int
    """

    split_dash3 = 0
    """Length of the 3rd dash for splitting
    (type: int in [0, 65535], default 0)
    
    :type: int
    """

    split_gap1 = 0
    """Length of the 1st gap for splitting
    (type: int in [0, 65535], default 0)
    
    :type: int
    """

    split_gap2 = 0
    """Length of the 2nd gap for splitting
    (type: int in [0, 65535], default 0)
    
    :type: int
    """

    split_gap3 = 0
    """Length of the 3rd gap for splitting
    (type: int in [0, 65535], default 0)
    
    :type: int
    """

    split_length = 0.0
    """Curvilinear 2D length for chain splitting
    (type: float in [0, 10000], default 0.0)
    
    :type: float
    """

    texture_slots = None
    """Texture slots defining the mapping and influence of textures
    (type: bpy.types.LineStyleTextureSlots bpy.types.bpy_prop_collection of bpy.types.LineStyleTextureSlot, (readonly))
    
    :type: LineStyleTextureSlots
    """

    texture_spacing = 0.0
    """Spacing for textures along stroke length
    (type: float in [0.01, 100], default 0.0)
    
    :type: float
    """

    thickness = 0.0
    """Base line thickness, possibly modified by line thickness modifiers
    (type: float in [0, 10000], default 0.0)
    
    :type: float
    """

    thickness_modifiers = None
    """List of line thickness modifiers
    (type: bpy.types.LineStyleThicknessModifiers bpy.types.bpy_prop_collection of bpy.types.LineStyleThicknessModifier, (readonly))
    
    :type: LineStyleThicknessModifiers
    """

    thickness_position = 'CENTER'
    """Thickness position of silhouettes and border edges (applicable when plain chaining is used with the Same Object option)
    * 'CENTER': Center, Silhouettes and border edges are centered along stroke geometry.
    * 'INSIDE': Inside, Silhouettes and border edges are drawn inside of stroke geometry.
    * 'OUTSIDE': Outside, Silhouettes and border edges are drawn outside of stroke geometry.
    * 'RELATIVE': Relative, Silhouettes and border edges are shifted by a user-defined ratio.
    (type: enum in ['CENTER', 'INSIDE', 'OUTSIDE', 'RELATIVE'], default 'CENTER')
    
    :type: str
    """

    thickness_ratio = 0.0
    """A number between 0 (inside) and 1 (outside) specifying the relative position of stroke thickness
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    use_angle_max = False
    """Split chains at points with angles larger than the maximum 2D angle
    (type: boolean, default False)
    
    :type: bool
    """

    use_angle_min = False
    """Split chains at points with angles smaller than the minimum 2D angle
    (type: boolean, default False)
    
    :type: bool
    """

    use_chain_count = False
    """Enable the selection of first N chains
    (type: boolean, default False)
    
    :type: bool
    """

    use_chaining = False
    """Enable chaining of feature edges
    (type: boolean, default False)
    
    :type: bool
    """

    use_dashed_line = False
    """Enable or disable dashed line
    (type: boolean, default False)
    
    :type: bool
    """

    use_length_max = False
    """Enable the selection of chains by a maximum 2D length
    (type: boolean, default False)
    
    :type: bool
    """

    use_length_min = False
    """Enable the selection of chains by a minimum 2D length
    (type: boolean, default False)
    
    :type: bool
    """

    use_nodes = False
    """Use shader nodes for the line style
    (type: boolean, default False)
    
    :type: bool
    """

    use_same_object = False
    """If true, only feature edges of the same object are joined
    (type: boolean, default False)
    
    :type: bool
    """

    use_sorting = False
    """Arrange the stacking order of strokes
    (type: boolean, default False)
    
    :type: bool
    """

    use_split_length = False
    """Enable chain splitting by curvilinear 2D length
    (type: boolean, default False)
    
    :type: bool
    """

    use_split_pattern = False
    """Enable chain splitting by dashed line patterns
    (type: boolean, default False)
    
    :type: bool
    """

    use_texture = False
    """Enable or disable textured strokes
    (type: boolean, default False)
    
    :type: bool
    """


class GPENCIL_PIE_sculpt(Menu):
    """"""

    def draw(self, context):
        """"""

    def draw_preset(self, context):
        """Define these on the subclass:
                                    - preset_operator (string)
                                    - preset_subdir (string)
        Optionally:
                                    - preset_extensions (set of strings)
                                    - preset_operator_defaults (dict of keyword args)
        """

    def path_menu(self, searchpaths, operator, *, props_default=None, prop_filepath='filepath', filter_ext=None, filter_path=None, display_name=None):
        """Populate a menu from a list of paths.
        
        :param searchpaths: Paths to scan.
            (type: sequence of strings.)
        :type searchpaths: collections.Sequence
        :param operator: The operator id to use with each file.
        :type operator: str
        :param prop_filepath: Optional operator filepath property (defaults to "filepath").
        :type prop_filepath: str
        :param props_default: Properties to assign to each operator.
        :type props_default: dict
        :param filter_ext: Optional callback that takes the file extensions.
            Returning false excludes the file from the list.
        :type filter_ext: Callable that takes a string and returns a bool.
        :param display_name: Optional callback that takes the full path, returns the name to display.
        :type display_name: Callable that takes a string and returns a string.
        """


class GPENCIL_PIE_settings_palette(Menu):
    """"""

    def draw(self, context):
        """"""

    def draw_preset(self, context):
        """Define these on the subclass:
                                    - preset_operator (string)
                                    - preset_subdir (string)
        Optionally:
                                    - preset_extensions (set of strings)
                                    - preset_operator_defaults (dict of keyword args)
        """

    def path_menu(self, searchpaths, operator, *, props_default=None, prop_filepath='filepath', filter_ext=None, filter_path=None, display_name=None):
        """Populate a menu from a list of paths.
        
        :param searchpaths: Paths to scan.
            (type: sequence of strings.)
        :type searchpaths: collections.Sequence
        :param operator: The operator id to use with each file.
        :type operator: str
        :param prop_filepath: Optional operator filepath property (defaults to "filepath").
        :type prop_filepath: str
        :param props_default: Properties to assign to each operator.
        :type props_default: dict
        :param filter_ext: Optional callback that takes the file extensions.
            Returning false excludes the file from the list.
        :type filter_ext: Callable that takes a string and returns a bool.
        :param display_name: Optional callback that takes the full path, returns the name to display.
        :type display_name: Callable that takes a string and returns a string.
        """


class GPENCIL_PIE_tool_palette(Menu):
    """"""

    def draw(self, context):
        """"""

    def draw_preset(self, context):
        """Define these on the subclass:
                                    - preset_operator (string)
                                    - preset_subdir (string)
        Optionally:
                                    - preset_extensions (set of strings)
                                    - preset_operator_defaults (dict of keyword args)
        """

    def path_menu(self, searchpaths, operator, *, props_default=None, prop_filepath='filepath', filter_ext=None, filter_path=None, display_name=None):
        """Populate a menu from a list of paths.
        
        :param searchpaths: Paths to scan.
            (type: sequence of strings.)
        :type searchpaths: collections.Sequence
        :param operator: The operator id to use with each file.
        :type operator: str
        :param prop_filepath: Optional operator filepath property (defaults to "filepath").
        :type prop_filepath: str
        :param props_default: Properties to assign to each operator.
        :type props_default: dict
        :param filter_ext: Optional callback that takes the file extensions.
            Returning false excludes the file from the list.
        :type filter_ext: Callable that takes a string and returns a bool.
        :param display_name: Optional callback that takes the full path, returns the name to display.
        :type display_name: Callable that takes a string and returns a string.
        """


class GPENCIL_PIE_tools_more(Menu):
    """"""

    def draw(self, context):
        """"""

    def draw_preset(self, context):
        """Define these on the subclass:
                                    - preset_operator (string)
                                    - preset_subdir (string)
        Optionally:
                                    - preset_extensions (set of strings)
                                    - preset_operator_defaults (dict of keyword args)
        """

    def path_menu(self, searchpaths, operator, *, props_default=None, prop_filepath='filepath', filter_ext=None, filter_path=None, display_name=None):
        """Populate a menu from a list of paths.
        
        :param searchpaths: Paths to scan.
            (type: sequence of strings.)
        :type searchpaths: collections.Sequence
        :param operator: The operator id to use with each file.
        :type operator: str
        :param prop_filepath: Optional operator filepath property (defaults to "filepath").
        :type prop_filepath: str
        :param props_default: Properties to assign to each operator.
        :type props_default: dict
        :param filter_ext: Optional callback that takes the file extensions.
            Returning false excludes the file from the list.
        :type filter_ext: Callable that takes a string and returns a bool.
        :param display_name: Optional callback that takes the full path, returns the name to display.
        :type display_name: Callable that takes a string and returns a string.
        """


class GPENCIL_UL_brush(UIList):
    """"""

    def draw_item(self, context, layout, data, item, icon, active_data, active_propname, index):
        """"""


class GPENCIL_UL_layer(UIList):
    """"""

    def draw_item(self, context, layout, data, item, icon, active_data, active_propname, index):
        """"""


class GPENCIL_UL_palettecolor(UIList):
    """"""

    def draw_item(self, context, layout, data, item, icon, active_data, active_propname, index):
        """"""


class GameActuator(Actuator):
    """"""

    filename = ""
    """The file to use, depending on the mode (e.g. the blend file to load or a destination for saving a screenshot) - use the "//" prefix for a relative path
    (type: string, default "", (never None))
    
    :type: str
    """

    mode = 'START'
    """(type: enum in ['START', 'RESTART', 'QUIT', 'SAVECFG', 'LOADCFG', 'SCREENSHOT'], default 'START')
    
    :type: str
    """


class GameBooleanProperty(GameProperty):
    """Game engine user defined Boolean property"""

    value = False
    """Property value
    (type: boolean, default False)
    
    :type: bool
    """


class GameFloatProperty(GameProperty):
    """Game engine user defined floating point number property"""

    value = 0.0
    """Property value
    (type: float in [-10000, 10000], default 0.0)
    
    :type: float
    """


class GameIntProperty(GameProperty):
    """Game engine user defined integer number property"""

    value = 0
    """Property value
    (type: int in [-10000, 10000], default 0)
    
    :type: int
    """


class GameStringProperty(GameProperty):
    """Game engine user defined text string property"""

    value = ""
    """Property value
    (type: string, default "", (never None))
    
    :type: str
    """


class GameTimerProperty(GameProperty):
    """Game engine user defined timer property"""

    value = 0.0
    """Property value
    (type: float in [-10000, 10000], default 0.0)
    
    :type: float
    """


class GreasePencil(ID):
    """Freehand annotation sketchbook"""

    animation_data = None
    """Animation data for this data-block
    (type: bpy.types.AnimData, (readonly))
    
    :type: AnimData
    """

    layers = None
    """(type: bpy.types.GreasePencilLayers bpy.types.bpy_prop_collection of bpy.types.GPencilLayer, (readonly))
    
    :type: GreasePencilLayers
    """

    palettes = None
    """(type: bpy.types.GreasePencilPalettes bpy.types.bpy_prop_collection of bpy.types.GPencilPalette, (readonly))
    
    :type: GreasePencilPalettes
    """

    show_stroke_direction = False
    """Show stroke drawing direction with a bigger green dot (start) and smaller red dot (end) points
    (type: boolean, default False)
    
    :type: bool
    """

    use_onion_skinning = False
    """Show ghosts of the frames before and after the current frame, toggle to enable on active layer or disable all
    (type: boolean, default False)
    
    :type: bool
    """

    use_stroke_edit_mode = False
    """Edit Grease Pencil strokes instead of viewport data
    (type: boolean, default False)
    
    :type: bool
    """

    def clear(self):
        """Remove all the grease pencil data"""


class Group(ID):
    """Group of Object data-blocks"""

    dupli_offset = (0.0, 0.0, 0.0)
    """Offset from the origin to use when instancing as DupliGroup
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    layers = (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
    """Layers visible when this group is instanced as a dupli
    (type: boolean array of 20 items, default (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False))
    
    :type: collections.Sequence[bool]
    """

    objects = None
    """A collection of this groups objects
    (type: bpy.types.GroupObjects bpy.types.bpy_prop_collection of bpy.types.Object, (readonly))
    
    :type: GroupObjects
    """

    users_dupli_group = None
    """The dupli group this group is used in
                                (readonly)
    """


class HookModifier(Modifier):
    """Hook modifier to modify the location of vertices"""

    center = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    falloff_curve = None
    """Custom Lamp Falloff Curve
    (type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    falloff_radius = 0.0
    """If not zero, the distance from the hook where influence ends
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    falloff_type = 'NONE'
    """(type: enum in ['NONE', 'CURVE', 'SMOOTH', 'SPHERE', 'ROOT', 'INVERSE_SQUARE', 'SHARP', 'LINEAR', 'CONSTANT'], default 'NONE')
    
    :type: str
    """

    matrix_inverse = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    """Reverse the transformation between this object and its target
    (type: float array of 16 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Matrix
    """

    object = None
    """Parent Object for hook, also recalculates and clears offset
    (type: bpy.types.Object)
    
    :type: Object
    """

    strength = 0.0
    """Relative force of the hook
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    subtarget = ""
    """Name of Parent Bone for hook (if applicable), also recalculates and clears offset
    (type: string, default "", (never None))
    
    :type: str
    """

    use_falloff_uniform = False
    """Compensate for non-uniform object scale
    (type: boolean, default False)
    
    :type: bool
    """

    vertex_group = ""
    """Name of Vertex Group which determines influence of modifier per point
    (type: string, default "", (never None))
    
    :type: str
    """


class HueCorrectModifier(SequenceModifier):
    """Hue correction modifier for sequence strip"""

    curve_mapping = None
    """(type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """


class IMAGE_UV_sculpt(Panel):
    """"""

    def draw(self, context):
        """"""

    def paint_settings(self, context):
        """"""

    def prop_unified_color(self, parent, context, brush, prop_name, text=''):
        """"""

    def prop_unified_color_picker(self, parent, context, brush, prop_name, value_slider=True):
        """"""

    def prop_unified_size(self, parent, context, brush, prop_name, icon='NONE', text='', slider=False):
        """"""

    def prop_unified_strength(self, parent, context, brush, prop_name, icon='NONE', text='', slider=False):
        """"""

    def prop_unified_weight(self, parent, context, brush, prop_name, icon='NONE', text='', slider=False):
        """"""

    def unified_paint_settings(self, parent, context):
        """"""


class IMAGE_UV_sculpt_curve(Panel):
    """"""

    def draw(self, context):
        """"""


class Image(ID):
    """Image data-block referencing an external or packed image"""

    alpha_mode = 'STRAIGHT'
    """Representation of alpha information in the RGBA pixels
    * 'STRAIGHT': Straight, Transparent RGB and alpha pixels are unmodified.
    * 'PREMUL': Premultiplied, Transparent RGB pixels are multiplied by the alpha channel.
    (type: enum in ['STRAIGHT', 'PREMUL'], default 'STRAIGHT')
    
    :type: str
    """

    bindcode = (0, 0)
    """OpenGL bindcode
    (type: int array of 2 items in [0, inf], default (0, 0), (readonly))
    
    :type: collections.Sequence[int]
    """

    channels = 0
    """Number of channels in pixels buffer
    (type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """

    colorspace_settings = None
    """Input color space settings
    (type: bpy.types.ColorManagedInputColorspaceSettings, (readonly))
    
    :type: ColorManagedInputColorspaceSettings
    """

    depth = 0
    """Image bit depth
    (type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """

    display_aspect = (0.0, 0.0)
    """Display Aspect for this image, does not affect rendering
    (type: float array of 2 items in [0.1, inf], default (0.0, 0.0))
    
    :type: mathutils.Vector
    """

    field_order = 'EVEN'
    """Order of video fields (select which lines are displayed first)
    * 'EVEN': Upper First, Upper field first.
    * 'ODD': Lower First, Lower field first.
    (type: enum in ['EVEN', 'ODD'], default 'EVEN')
    
    :type: str
    """

    file_format = 'TARGA'
    """Format used for re-saving this file
    * 'BMP': BMP, Output image in bitmap format.
    * 'IRIS': Iris, Output image in (old!) SGI IRIS format.
    * 'PNG': PNG, Output image in PNG format.
    * 'JPEG': JPEG, Output image in JPEG format.
    * 'JPEG2000': JPEG 2000, Output image in JPEG 2000 format.
    * 'TARGA': Targa, Output image in Targa format.
    * 'TARGA_RAW': Targa Raw, Output image in uncompressed Targa format.
    * 'CINEON': Cineon, Output image in Cineon format.
    * 'DPX': DPX, Output image in DPX format.
    * 'OPEN_EXR_MULTILAYER': OpenEXR MultiLayer, Output image in multilayer OpenEXR format.
    * 'OPEN_EXR': OpenEXR, Output image in OpenEXR format.
    * 'HDR': Radiance HDR, Output image in Radiance HDR format.
    * 'TIFF': TIFF, Output image in TIFF format.
    * 'AVI_JPEG': AVI JPEG, Output video in AVI JPEG format.
    * 'AVI_RAW': AVI Raw, Output video in AVI Raw format.
    * 'FRAMESERVER': Frame Server, Output image to a frameserver.
    * 'FFMPEG': FFmpeg video, The most versatile way to output video files.
    (type: enum in ['BMP', 'IRIS', 'PNG', 'JPEG', 'JPEG2000', 'TARGA', 'TARGA_RAW', 'CINEON', 'DPX', 'OPEN_EXR_MULTILAYER', 'OPEN_EXR', 'HDR', 'TIFF', 'AVI_JPEG', 'AVI_RAW', 'FRAMESERVER', 'FFMPEG'], default 'TARGA')
    
    :type: str
    """

    filepath = ""
    """Image/Movie file name
    (type: string, default "", (never None))
    
    :type: str
    """

    filepath_raw = ""
    """Image/Movie file name (without data refreshing)
    (type: string, default "", (never None))
    
    :type: str
    """

    fps = 0
    """Speed of the animation in frames per second
    (type: int in [1, 100], default 0)
    
    :type: int
    """

    frame_duration = 0
    """Duration (in frames) of the image (1 when not a video/sequence)
    (type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """

    frame_end = 0
    """End frame of an animated texture
    (type: int in [0, 255], default 0)
    
    :type: int
    """

    frame_start = 0
    """Start frame of an animated texture
    (type: int in [0, 255], default 0)
    
    :type: int
    """

    generated_color = (0.0, 0.0, 0.0, 0.0)
    """Fill color for the generated image
    (type: float array of 4 items in [0, inf], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    generated_height = 0
    """Generated image height
    (type: int in [1, 65536], default 0)
    
    :type: int
    """

    generated_type = 'BLANK'
    """Generated image type
    * 'BLANK': Blank, Generate a blank image.
    * 'UV_GRID': UV Grid, Generated grid to test UV mappings.
    * 'COLOR_GRID': Color Grid, Generated improved UV grid to test UV mappings.
    (type: enum in ['BLANK', 'UV_GRID', 'COLOR_GRID'], default 'BLANK')
    
    :type: str
    """

    generated_width = 0
    """Generated image width
    (type: int in [1, 65536], default 0)
    
    :type: int
    """

    has_data = False
    """True if this image has data
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_dirty = False
    """Image has changed and is not saved
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_float = False
    """True if this image is stored in float buffer
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_multiview = False
    """Image has more than one view
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_stereo_3d = False
    """Image has left and right views
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    mapping = 'UV'
    """Mapping type to use for this image in the game engine
    * 'UV': UV Coordinates, Use UV coordinates for mapping the image.
    * 'REFLECTION': Reflection, Use reflection mapping for mapping the image.
    (type: enum in ['UV', 'REFLECTION'], default 'UV')
    
    :type: str
    """

    packed_file = None
    """First packed file of the image
    (type: bpy.types.PackedFile, (readonly))
    
    :type: PackedFile
    """

    packed_files = None
    """Collection of packed images
    (type: bpy.types.bpy_prop_collection of bpy.types.ImagePackedFile, (readonly))
    
    :type: bpy_prop_collection
    """

    pixels = 0.0
    """Image pixels in floating point values
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    render_slots = None
    """Render slots of the image
    (type: bpy.types.RenderSlots bpy.types.bpy_prop_collection of bpy.types.RenderSlot, (readonly))
    
    :type: RenderSlots
    """

    resolution = (0.0, 0.0)
    """X/Y pixels per meter
    (type: float array of 2 items in [-inf, inf], default (0.0, 0.0))
    
    :type: mathutils.Vector
    """

    size = (0, 0)
    """Width and height in pixels, zero when image data cant be loaded
    (type: int array of 2 items in [-inf, inf], default (0, 0), (readonly))
    
    :type: collections.Sequence[int]
    """

    source = 'FILE'
    """Where the image comes from
    * 'FILE': Single Image, Single image file.
    * 'SEQUENCE': Image Sequence, Multiple image files, as a sequence.
    * 'MOVIE': Movie, Movie file.
    * 'GENERATED': Generated, Generated image.
    * 'VIEWER': Viewer, Compositing node viewer.
    (type: enum in ['FILE', 'SEQUENCE', 'MOVIE', 'GENERATED', 'VIEWER'], default 'FILE')
    
    :type: str
    """

    stereo_3d_format = None
    """Settings for stereo 3d
    (type: bpy.types.Stereo3dFormat, (readonly, never None))
    
    :type: Stereo3dFormat
    """

    tiles_x = 0
    """Degree of repetition in the X direction
    (type: int in [1, 16], default 0)
    
    :type: int
    """

    tiles_y = 0
    """Degree of repetition in the Y direction
    (type: int in [1, 16], default 0)
    
    :type: int
    """

    type = 'IMAGE'
    """How to generate the image
    (type: enum in ['IMAGE', 'MULTILAYER', 'UV_TEST', 'RENDER_RESULT', 'COMPOSITING'], default 'IMAGE', (readonly))
    
    :type: str
    """

    use_alpha = False
    """Use the alpha channel information from the image or make image fully opaque
    (type: boolean, default False)
    
    :type: bool
    """

    use_animation = False
    """Use as animated texture in the game engine
    (type: boolean, default False)
    
    :type: bool
    """

    use_clamp_x = False
    """Disable texture repeating horizontally
    (type: boolean, default False)
    
    :type: bool
    """

    use_clamp_y = False
    """Disable texture repeating vertically
    (type: boolean, default False)
    
    :type: bool
    """

    use_deinterlace = False
    """Deinterlace movie file on load
    (type: boolean, default False)
    
    :type: bool
    """

    use_fields = False
    """Use fields of the image
    (type: boolean, default False)
    
    :type: bool
    """

    use_generated_float = False
    """Generate floating point buffer
    (type: boolean, default False)
    
    :type: bool
    """

    use_multiview = False
    """Use Multiple Views (when available)
    (type: boolean, default False)
    
    :type: bool
    """

    use_tiles = False
    """Use of tilemode for faces (default shift-LMB to pick the tile for selected faces)
    (type: boolean, default False)
    
    :type: bool
    """

    use_view_as_render = False
    """Apply render part of display transformation when displaying this image on the screen
    (type: boolean, default False)
    
    :type: bool
    """

    views_format = 'INDIVIDUAL'
    """Mode to load image views
    * 'INDIVIDUAL': Individual, Individual files for each view with the prefix as defined by the scene views.
    * 'STEREO_3D': Stereo 3D, Single file with an encoded stereo pair.
    (type: enum in ['INDIVIDUAL', 'STEREO_3D'], default 'INDIVIDUAL')
    
    :type: str
    """

    def save_render(self, filepath, scene=None):
        """Save image to a specific path using a scenes render settings
        
        :param filepath: Save path
            (type: str, (never None))
        :type filepath: str
        :param scene: Scene to take image parameters from
            (type: bpy.types.Scene, (optional))
        :type scene: Scene
        """

    def save(self):
        """Save image to its source path"""

    def pack(self, as_png=False, data="", data_len=0):
        """Pack an image as embedded data into the .blend file
        
        :param as_png: as_png, Pack the image as PNG (needed for generated/dirty images)
            (type: boolean, (optional))
        :type as_png: bool
        :param data: data, Raw data (bytes, exact content of the embedded file)
            (type: str, (optional, never None))
        :type data: str
        :param data_len: data_len, length of given data (mandatory if data is provided)
            (type: int in [0, inf], (optional))
        :type data_len: int
        """

    def unpack(self, method='USE_LOCAL'):
        """Save an image packed in the .blend file to disk
        
        :param method: method, How to unpack
            (type: enum in ['USE_LOCAL', 'WRITE_LOCAL', 'USE_ORIGINAL', 'WRITE_ORIGINAL'], (optional))
        :type method: str
        """

    def reload(self):
        """Reload the image from its source path"""

    def update(self):
        """Update the display image from the floating point buffer"""

    def scale(self, width, height):
        """Scale the image in pixels
        
        :param width: Width
            (type: int in [1, 10000])
        :type width: int
        :param height: Height
            (type: int in [1, 10000])
        :type height: int
        """

    def gl_touch(self, frame=0, filter=9985, mag=9729):
        """Delay the image from being cleaned from the cache due inactivity
        
        :param frame: Frame, Frame of image sequence or movie
            (type: int in [0, inf], (optional))
        :type frame: int
        :param filter: Filter, The texture minifying function to use if the image wasn't loaded
            (type: int in [-inf, inf], (optional))
        :type filter: int
        :param mag: Magnification, The texture magnification function to use if the image wasn't loaded
            (type: int in [-inf, inf], (optional))
        :type mag: int
        :return: Error, OpenGL error value
        :param : (type: int in [-inf, inf])
        :rtype: int
        """

    def gl_load(self, frame=0, filter=9985, mag=9729):
        """Load the image into OpenGL graphics memory
        
        :param frame: Frame, Frame of image sequence or movie
            (type: int in [0, inf], (optional))
        :type frame: int
        :param filter: Filter, The texture minifying function
            (type: int in [-inf, inf], (optional))
        :type filter: int
        :param mag: Magnification, The texture magnification function
            (type: int in [-inf, inf], (optional))
        :type mag: int
        :return: Error, OpenGL error value
        :param : (type: int in [-inf, inf])
        :rtype: int
        """

    def gl_free(self):
        """Free the image from OpenGL graphics memory"""

    def filepath_from_user(self, image_user=None):
        """Return the absolute path to the filepath of an image frame specified by the image user
        
        :param image_user: Image user of the image to get filepath for
            (type: bpy.types.ImageUser, (optional))
        :type image_user: ImageUser
        :return: File Path, The resulting filepath from the image and it's user
        :param : (type: string, (never None))
        :rtype: str
        """

    def buffers_free(self):
        """Free the image buffers from memory"""


class ImagePaint(Paint):
    """Properties of image and texture painting mode"""

    canvas = None
    """Image used as canvas
    (type: bpy.types.Image)
    
    :type: Image
    """

    clone_image = None
    """Image used as clone source
    (type: bpy.types.Image)
    
    :type: Image
    """

    dither = 0.0
    """Amount of dithering when painting on byte images
    (type: float in [0, 2], default 0.0)
    
    :type: float
    """

    invert_stencil = False
    """Invert the stencil layer
    (type: boolean, default False)
    
    :type: bool
    """

    missing_materials = False
    """The mesh is missing materials
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    missing_stencil = False
    """Image Painting does not have a stencil
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    missing_texture = False
    """Image Painting does not have a texture to paint on
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    missing_uvs = False
    """A UV layer is missing on the mesh
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    mode = 'MATERIAL'
    """Mode of operation for projection painting
    * 'MATERIAL': Material, Detect image slots from the material.
    * 'IMAGE': Image, Set image for texture painting directly.
    (type: enum in ['MATERIAL', 'IMAGE'], default 'MATERIAL')
    
    :type: str
    """

    normal_angle = 0
    """Paint most on faces pointing towards the view according to this angle
    (type: int in [0, 90], default 0)
    
    :type: int
    """

    screen_grab_size = (0, 0)
    """Size to capture the image for re-projecting
    (type: int array of 2 items in [512, 16384], default (0, 0))
    
    :type: collections.Sequence[int]
    """

    seam_bleed = 0
    """Extend paint beyond the faces UVs to reduce seams (in pixels, slower)
    (type: int in [-32768, 32767], default 0)
    
    :type: int
    """

    stencil_color = (0.0, 0.0, 0.0)
    """Stencil color in the viewport
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    stencil_image = None
    """Image used as stencil
    (type: bpy.types.Image)
    
    :type: Image
    """

    use_backface_culling = False
    """Ignore faces pointing away from the view (faster)
    (type: boolean, default False)
    
    :type: bool
    """

    use_clone_layer = False
    """Use another UV map as clone source, otherwise use the 3D cursor as the source
    (type: boolean, default False)
    
    :type: bool
    """

    use_normal_falloff = False
    """Paint most on faces pointing towards the view
    (type: boolean, default False)
    
    :type: bool
    """

    use_occlude = False
    """Only paint onto the faces directly under the brush (slower)
    (type: boolean, default False)
    
    :type: bool
    """

    use_stencil_layer = False
    """Set the mask layer from the UV map buttons
    (type: boolean, default False)
    
    :type: bool
    """

    def detect_data(self):
        """Check if required texpaint data exist
        
        :rtype: bool
        """


class ImageSequence(Sequence):
    """Sequence strip to load one or more images"""

    alpha_mode = 'STRAIGHT'
    """Representation of alpha information in the RGBA pixels
    * 'STRAIGHT': Straight, RGB channels in transparent pixels are unaffected by the alpha channel.
    * 'PREMUL': Premultiplied, RGB channels in transparent pixels are multiplied by the alpha channel.
    (type: enum in ['STRAIGHT', 'PREMUL'], default 'STRAIGHT')
    
    :type: str
    """

    animation_offset_end = 0
    """Animation end offset (trim end)
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    animation_offset_start = 0
    """Animation start offset (trim start)
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    color_multiply = 1.0
    """(type: float in [0, 20], default 1.0)
    
    :type: float
    """

    color_saturation = 1.0
    """(type: float in [0, 20], default 1.0)
    
    :type: float
    """

    colorspace_settings = None
    """Input color space settings
    (type: bpy.types.ColorManagedInputColorspaceSettings, (readonly))
    
    :type: ColorManagedInputColorspaceSettings
    """

    crop = None
    """(type: bpy.types.SequenceCrop, (readonly))
    
    :type: SequenceCrop
    """

    directory = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    elements = None
    """(type: bpy.types.SequenceElements bpy.types.bpy_prop_collection of bpy.types.SequenceElement, (readonly))
    
    :type: SequenceElements
    """

    proxy = None
    """(type: bpy.types.SequenceProxy, (readonly))
    
    :type: SequenceProxy
    """

    stereo_3d_format = None
    """Settings for stereo 3d
    (type: bpy.types.Stereo3dFormat, (readonly, never None))
    
    :type: Stereo3dFormat
    """

    strobe = 0.0
    """Only display every nth frame
    (type: float in [1, 30], default 0.0)
    
    :type: float
    """

    transform = None
    """(type: bpy.types.SequenceTransform, (readonly))
    
    :type: SequenceTransform
    """

    use_crop = False
    """Crop image before processing
    (type: boolean, default False)
    
    :type: bool
    """

    use_deinterlace = False
    """Remove fields from video movies
    (type: boolean, default False)
    
    :type: bool
    """

    use_flip_x = False
    """Flip on the X axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_flip_y = False
    """Flip on the Y axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_float = False
    """Convert input to float data
    (type: boolean, default False)
    
    :type: bool
    """

    use_multiview = False
    """Use Multiple Views (when available)
    (type: boolean, default False)
    
    :type: bool
    """

    use_proxy = False
    """Use a preview proxy and/or timecode index for this strip
    (type: boolean, default False)
    
    :type: bool
    """

    use_reverse_frames = False
    """Reverse frame order
    (type: boolean, default False)
    
    :type: bool
    """

    use_translation = False
    """Translate image before processing
    (type: boolean, default False)
    
    :type: bool
    """

    views_format = 'INDIVIDUAL'
    """Mode to load image views
    * 'INDIVIDUAL': Individual, Individual files for each view with the prefix as defined by the scene views.
    * 'STEREO_3D': Stereo 3D, Single file with an encoded stereo pair.
    (type: enum in ['INDIVIDUAL', 'STEREO_3D'], default 'INDIVIDUAL')
    
    :type: str
    """


class InflowFluidSettings(FluidSettings):
    """Fluid simulation settings for objects adding fluids in the simulation"""

    inflow_velocity = (0.0, 0.0, 0.0)
    """Initial velocity of fluid
    (type: float array of 3 items in [-1000.1, 1000.1], default (0.0, 0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    use = False
    """Object contributes to the fluid simulation
    (type: boolean, default False)
    
    :type: bool
    """

    use_animated_mesh = False
    """Export this mesh as an animated one (slower and enforces No Slip, only use if really necessary [e.g. armatures or parented objects], animated pos/rot/scale F-Curves do not require it)
    (type: boolean, default False)
    
    :type: bool
    """

    use_local_coords = False
    """Use local coordinates for inflow (e.g. for rotating objects)
    (type: boolean, default False)
    
    :type: bool
    """

    volume_initialization = 'VOLUME'
    """Volume initialization type (WARNING: complex volumes might require too much memory and break simulation)
    * 'VOLUME': Volume, Use only the inner volume of the mesh.
    * 'SHELL': Shell, Use only the outer shell of the mesh.
    * 'BOTH': Both, Use both the inner volume and the outer shell of the mesh.
    (type: enum in ['VOLUME', 'SHELL', 'BOTH'], default 'VOLUME')
    
    :type: str
    """


class IntProperty(Property):
    """RNA integer number property definition"""

    array_length = 0
    """Maximum length of the array, 0 means unlimited
    (type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """

    default = 0
    """Default value for this number
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    default_array = (0, 0, 0)
    """Default value for this array
    (type: int array of 3 items in [-inf, inf], default (0, 0, 0), (readonly))
    
    :type: collections.Sequence[int]
    """

    hard_max = 0
    """Maximum value used by buttons
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    hard_min = 0
    """Minimum value used by buttons
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    is_array = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    soft_max = 0
    """Maximum value used by buttons
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    soft_min = 0
    """Minimum value used by buttons
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    step = 0
    """Step size used by number buttons, for floats 1/100th of the step size
    (type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """


class Itasc(IKParam):
    """Parameters for the iTaSC IK solver"""

    damping_epsilon = 0.0
    """Singular value under which damping is progressively applied (higher values=more stability, less reactivity - default=0.1)
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    damping_max = 0.0
    """Maximum damping coefficient when singular value is nearly 0 (higher values=more stability, less reactivity - default=0.5)
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    feedback = 0.0
    """Feedback coefficient for error correction, average response time is 1/feedback (default=20)
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    iterations = 0
    """Maximum number of iterations for convergence in case of reiteration
    (type: int in [0, 1000], default 0)
    
    :type: int
    """

    mode = 'ANIMATION'
    """
    * 'ANIMATION': Animation, Stateless solver computing pose starting from current action and non-IK constraints.
    * 'SIMULATION': Simulation, State-full solver running in real-time context and ignoring actions and non-IK constraints.
    (type: enum in ['ANIMATION', 'SIMULATION'], default 'ANIMATION')
    
    :type: str
    """

    precision = 0.0
    """Precision of convergence in case of reiteration
    (type: float in [0, 0.1], default 0.0)
    
    :type: float
    """

    reiteration_method = 'NEVER'
    """Defines if the solver is allowed to reiterate (converge until precision is met) on none, first or all frames
    * 'NEVER': Never, The solver does not reiterate, not even on first frame (starts from rest pose).
    * 'INITIAL': Initial, The solver reiterates (converges) on the first frame but not on subsequent frame.
    * 'ALWAYS': Always, The solver reiterates (converges) on all frames.
    (type: enum in ['NEVER', 'INITIAL', 'ALWAYS'], default 'NEVER')
    
    :type: str
    """

    solver = 'SDLS'
    """Solving method selection: automatic damping or manual damping
    * 'SDLS': SDLS, Selective Damped Least Square.
    * 'DLS': DLS, Damped Least Square with Numerical Filtering.
    (type: enum in ['SDLS', 'DLS'], default 'SDLS')
    
    :type: str
    """

    step_count = 0
    """Divide the frame interval into this many steps
    (type: int in [1, 50], default 0)
    
    :type: int
    """

    step_max = 0.0
    """Higher bound for timestep in second in case of automatic substeps
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    step_min = 0.0
    """Lower bound for timestep in second in case of automatic substeps
    (type: float in [0, 0.1], default 0.0)
    
    :type: float
    """

    use_auto_step = False
    """Automatically determine the optimal number of steps for best performance/accuracy trade off
    (type: boolean, default False)
    
    :type: bool
    """

    velocity_max = 0.0
    """Maximum joint velocity in rad/s (default=50)
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """


class JoystickSensor(Sensor):
    """Sensor to detect joystick events"""

    axis_direction = 'RIGHTAXIS'
    """The direction of the axis
    (type: enum in ['RIGHTAXIS', 'UPAXIS', 'LEFTAXIS', 'DOWNAXIS'], default 'RIGHTAXIS')
    
    :type: str
    """

    axis_number = 0
    """Which axis pair to use, 1 is usually the main direction input
    (type: int in [1, 8], default 0)
    
    :type: int
    """

    axis_threshold = 0
    """Precision of the axis
    (type: int in [0, 32768], default 0)
    
    :type: int
    """

    button_number = 0
    """Which button to use
    (type: int in [0, 18], default 0)
    
    :type: int
    """

    event_type = 'BUTTON'
    """The type of event this joystick sensor is triggered on
    (type: enum in ['BUTTON', 'AXIS', 'HAT', 'AXIS_SINGLE'], default 'BUTTON')
    
    :type: str
    """

    hat_direction = 'UP'
    """Hat direction
    (type: enum in ['UP', 'DOWN', 'LEFT', 'RIGHT', 'UPRIGHT', 'DOWNLEFT', 'UPLEFT', 'DOWNRIGHT'], default 'UP')
    
    :type: str
    """

    hat_number = 0
    """Which hat to use
    (type: int in [1, 2], default 0)
    
    :type: int
    """

    joystick_index = 0
    """Which joystick to use
    (type: int in [0, 7], default 0)
    
    :type: int
    """

    single_axis_number = 0
    """Single axis (vertical/horizontal/other) to detect
    (type: int in [1, 16], default 0)
    
    :type: int
    """

    use_all_events = False
    """Triggered by all events on this joystick's current type (axis/button/hat)
    (type: boolean, default False)
    
    :type: bool
    """


class Key(ID):
    """Shape keys data-block containing different shapes of geometric data-blocks"""

    animation_data = None
    """Animation data for this data-block
    (type: bpy.types.AnimData, (readonly))
    
    :type: AnimData
    """

    eval_time = 0.0
    """Evaluation time for absolute shape keys
    (type: float in [0, 500000], default 0.0)
    
    :type: float
    """

    key_blocks = None
    """Shape keys
    (type: bpy.types.bpy_prop_collection of bpy.types.ShapeKey, (readonly))
    
    :type: bpy_prop_collection
    """

    reference_key = None
    """(type: bpy.types.ShapeKey, (readonly, never None))
    
    :type: ShapeKey
    """

    use_relative = False
    """Make shape keys relative, otherwise play through shapes as a sequence using the evaluation time
    (type: boolean, default False)
    
    :type: bool
    """

    user = None
    """Data-block using these shape keys
    (type: bpy.types.ID, (readonly, never None))
    
    :type: ID
    """


class KeyboardSensor(Sensor):
    """Sensor to detect keyboard events"""

    key = 'NONE'
    """
    * 'NONE': .
    * 'LEFTMOUSE': Left Mouse, LMB.
    * 'MIDDLEMOUSE': Middle Mouse, MMB.
    * 'RIGHTMOUSE': Right Mouse, RMB.
    * 'BUTTON4MOUSE': Button4 Mouse, MB4.
    * 'BUTTON5MOUSE': Button5 Mouse, MB5.
    * 'BUTTON6MOUSE': Button6 Mouse, MB6.
    * 'BUTTON7MOUSE': Button7 Mouse, MB7.
    * 'BUTTON8MOUSE': Button8 Mouse, MB8.
    * 'BUTTON9MOUSE': Button9 Mouse, MB9.
    * 'BUTTON10MOUSE': Button10 Mouse, MB10.
    * 'BUTTON11MOUSE': Button11 Mouse, MB11.
    * 'BUTTON12MOUSE': Button12 Mouse, MB12.
    * 'BUTTON13MOUSE': Button13 Mouse, MB13.
    * 'BUTTON14MOUSE': Button14 Mouse, MB14.
    * 'BUTTON15MOUSE': Button15 Mouse, MB15.
    * 'BUTTON16MOUSE': Button16 Mouse, MB16.
    * 'BUTTON17MOUSE': Button17 Mouse, MB17.
    * 'ACTIONMOUSE': Action Mouse, MBA.
    * 'SELECTMOUSE': Select Mouse, MBS.
    * 'PEN': Pen.
    * 'ERASER': Eraser.
    * 'MOUSEMOVE': Mouse Move, MsMov.
    * 'INBETWEEN_MOUSEMOVE': In-between Move, MsSubMov.
    * 'TRACKPADPAN': Mouse/Trackpad Pan, MsPan.
    * 'TRACKPADZOOM': Mouse/Trackpad Zoom, MsZoom.
    * 'MOUSEROTATE': Mouse/Trackpad Rotate, MsRot.
    * 'WHEELUPMOUSE': Wheel Up, WhUp.
    * 'WHEELDOWNMOUSE': Wheel Down, WhDown.
    * 'WHEELINMOUSE': Wheel In, WhIn.
    * 'WHEELOUTMOUSE': Wheel Out, WhOut.
    * 'EVT_TWEAK_L': Tweak Left, TwkL.
    * 'EVT_TWEAK_M': Tweak Middle, TwkM.
    * 'EVT_TWEAK_R': Tweak Right, TwkR.
    * 'EVT_TWEAK_A': Tweak Action, TwkA.
    * 'EVT_TWEAK_S': Tweak Select, TwkS.
    * 'A': A.
    * 'B': B.
    * 'C': C.
    * 'D': D.
    * 'E': E.
    * 'F': F.
    * 'G': G.
    * 'H': H.
    * 'I': I.
    * 'J': J.
    * 'K': K.
    * 'L': L.
    * 'M': M.
    * 'N': N.
    * 'O': O.
    * 'P': P.
    * 'Q': Q.
    * 'R': R.
    * 'S': S.
    * 'T': T.
    * 'U': U.
    * 'V': V.
    * 'W': W.
    * 'X': X.
    * 'Y': Y.
    * 'Z': Z.
    * 'ZERO': 0.
    * 'ONE': 1.
    * 'TWO': 2.
    * 'THREE': 3.
    * 'FOUR': 4.
    * 'FIVE': 5.
    * 'SIX': 6.
    * 'SEVEN': 7.
    * 'EIGHT': 8.
    * 'NINE': 9.
    * 'LEFT_CTRL': Left Ctrl, CtrlL.
    * 'LEFT_ALT': Left Alt, AltL.
    * 'LEFT_SHIFT': Left Shift, ShiftL.
    * 'RIGHT_ALT': Right Alt, AltR.
    * 'RIGHT_CTRL': Right Ctrl, CtrlR.
    * 'RIGHT_SHIFT': Right Shift, ShiftR.
    * 'OSKEY': OS Key, Cmd.
    * 'GRLESS': Grless.
    * 'ESC': Esc.
    * 'TAB': Tab.
    * 'RET': Return, Enter.
    * 'SPACE': Spacebar, Space.
    * 'LINE_FEED': Line Feed.
    * 'BACK_SPACE': Back Space, BkSpace.
    * 'DEL': Delete, Del.
    * 'COLON': :.
    * 'SEMI_COLON': ;.
    * 'PERIOD': ..
    * 'COMMA': ,.
    * 'QUOTE': ".
    * 'ACCENT_GRAVE': `.
    * 'MINUS': -.
    * 'PLUS': +.
    * 'SLASH': /.
    * 'BACK_SLASH': \.
    * 'EQUAL': =.
    * 'LEFT_BRACKET': [.
    * 'RIGHT_BRACKET': ].
    * 'ATKEY': @.
    * 'ASCIICIRCUM': ^.
    * 'LEFT_ARROW': Left Arrow, ←.
    * 'DOWN_ARROW': Down Arrow, ↓.
    * 'RIGHT_ARROW': Right Arrow, →.
    * 'UP_ARROW': Up Arrow, ↑.
    * 'NUMPAD_2': Numpad 2, Pad2.
    * 'NUMPAD_4': Numpad 4, Pad4.
    * 'NUMPAD_6': Numpad 6, Pad6.
    * 'NUMPAD_8': Numpad 8, Pad8.
    * 'NUMPAD_1': Numpad 1, Pad1.
    * 'NUMPAD_3': Numpad 3, Pad3.
    * 'NUMPAD_5': Numpad 5, Pad5.
    * 'NUMPAD_7': Numpad 7, Pad7.
    * 'NUMPAD_9': Numpad 9, Pad9.
    * 'NUMPAD_PERIOD': Numpad ., Pad..
    * 'NUMPAD_SLASH': Numpad /, Pad/.
    * 'NUMPAD_ASTERIX': Numpad *, Pad*.
    * 'NUMPAD_0': Numpad 0, Pad0.
    * 'NUMPAD_MINUS': Numpad -, Pad-.
    * 'NUMPAD_ENTER': Numpad Enter, PadEnter.
    * 'NUMPAD_PLUS': Numpad +, Pad+.
    * 'F1': F1.
    * 'F2': F2.
    * 'F3': F3.
    * 'F4': F4.
    * 'F5': F5.
    * 'F6': F6.
    * 'F7': F7.
    * 'F8': F8.
    * 'F9': F9.
    * 'F10': F10.
    * 'F11': F11.
    * 'F12': F12.
    * 'F13': F13.
    * 'F14': F14.
    * 'F15': F15.
    * 'F16': F16.
    * 'F17': F17.
    * 'F18': F18.
    * 'F19': F19.
    * 'PAUSE': Pause.
    * 'INSERT': Insert, Ins.
    * 'HOME': Home.
    * 'PAGE_UP': Page Up, PgUp.
    * 'PAGE_DOWN': Page Down, PgDown.
    * 'END': End.
    * 'HENKAN': Henkan.
    * 'MUHENKAN': Muhenkan.
    * 'KANA': Kana.
    * 'MENU': Menu.
    * 'MEDIA_PLAY': Media Play/Pause, >/||.
    * 'MEDIA_STOP': Media Stop, Stop.
    * 'MEDIA_FIRST': Media First, |<<.
    * 'MEDIA_LAST': Media Last, >>|.
    * 'TEXTINPUT': Text Input, TxtIn.
    * 'WINDOW_DEACTIVATE': Window Deactivate.
    * 'TIMER': Timer, Tmr.
    * 'TIMER0': Timer 0, Tmr0.
    * 'TIMER1': Timer 1, Tmr1.
    * 'TIMER2': Timer 2, Tmr2.
    * 'TIMER_JOBS': Timer Jobs, TmrJob.
    * 'TIMER_AUTOSAVE': Timer Autosave, TmrSave.
    * 'TIMER_REPORT': Timer Report, TmrReport.
    * 'TIMERREGION': Timer Region, TmrReg.
    * 'NDOF_MOTION': NDOF Motion, NdofMov.
    * 'NDOF_BUTTON_MENU': NDOF Menu, NdofMenu.
    * 'NDOF_BUTTON_FIT': NDOF Fit, NdofFit.
    * 'NDOF_BUTTON_TOP': NDOF Top, Ndof↑.
    * 'NDOF_BUTTON_BOTTOM': NDOF Bottom, Ndof↓.
    * 'NDOF_BUTTON_LEFT': NDOF Left, Ndof←.
    * 'NDOF_BUTTON_RIGHT': NDOF Right, Ndof→.
    * 'NDOF_BUTTON_FRONT': NDOF Front, NdofFront.
    * 'NDOF_BUTTON_BACK': NDOF Back, NdofBack.
    * 'NDOF_BUTTON_ISO1': NDOF Isometric 1, NdofIso1.
    * 'NDOF_BUTTON_ISO2': NDOF Isometric 2, NdofIso2.
    * 'NDOF_BUTTON_ROLL_CW': NDOF Roll CW, NdofRCW.
    * 'NDOF_BUTTON_ROLL_CCW': NDOF Roll CCW, NdofRCCW.
    * 'NDOF_BUTTON_SPIN_CW': NDOF Spin CW, NdofSCW.
    * 'NDOF_BUTTON_SPIN_CCW': NDOF Spin CCW, NdofSCCW.
    * 'NDOF_BUTTON_TILT_CW': NDOF Tilt CW, NdofTCW.
    * 'NDOF_BUTTON_TILT_CCW': NDOF Tilt CCW, NdofTCCW.
    * 'NDOF_BUTTON_ROTATE': NDOF Rotate, NdofRot.
    * 'NDOF_BUTTON_PANZOOM': NDOF Pan/Zoom, NdofPanZoom.
    * 'NDOF_BUTTON_DOMINANT': NDOF Dominant, NdofDom.
    * 'NDOF_BUTTON_PLUS': NDOF Plus, Ndof+.
    * 'NDOF_BUTTON_MINUS': NDOF Minus, Ndof-.
    * 'NDOF_BUTTON_ESC': NDOF Esc, NdofEsc.
    * 'NDOF_BUTTON_ALT': NDOF Alt, NdofAlt.
    * 'NDOF_BUTTON_SHIFT': NDOF Shift, NdofShift.
    * 'NDOF_BUTTON_CTRL': NDOF Ctrl, NdofCtrl.
    * 'NDOF_BUTTON_1': NDOF Button 1, NdofB1.
    * 'NDOF_BUTTON_2': NDOF Button 2, NdofB2.
    * 'NDOF_BUTTON_3': NDOF Button 3, NdofB3.
    * 'NDOF_BUTTON_4': NDOF Button 4, NdofB4.
    * 'NDOF_BUTTON_5': NDOF Button 5, NdofB5.
    * 'NDOF_BUTTON_6': NDOF Button 6, NdofB6.
    * 'NDOF_BUTTON_7': NDOF Button 7, NdofB7.
    * 'NDOF_BUTTON_8': NDOF Button 8, NdofB8.
    * 'NDOF_BUTTON_9': NDOF Button 9, NdofB9.
    * 'NDOF_BUTTON_10': NDOF Button 10, NdofB10.
    * 'NDOF_BUTTON_A': NDOF Button A, NdofBA.
    * 'NDOF_BUTTON_B': NDOF Button B, NdofBB.
    * 'NDOF_BUTTON_C': NDOF Button C, NdofBC.
    (type: enum in ['NONE', 'LEFTMOUSE', 'MIDDLEMOUSE', 'RIGHTMOUSE', 'BUTTON4MOUSE', 'BUTTON5MOUSE', 'BUTTON6MOUSE', 'BUTTON7MOUSE', 'BUTTON8MOUSE', 'BUTTON9MOUSE', 'BUTTON10MOUSE', 'BUTTON11MOUSE', 'BUTTON12MOUSE', 'BUTTON13MOUSE', 'BUTTON14MOUSE', 'BUTTON15MOUSE', 'BUTTON16MOUSE', 'BUTTON17MOUSE', 'ACTIONMOUSE', 'SELECTMOUSE', 'PEN', 'ERASER', 'MOUSEMOVE', 'INBETWEEN_MOUSEMOVE', 'TRACKPADPAN', 'TRACKPADZOOM', 'MOUSEROTATE', 'WHEELUPMOUSE', 'WHEELDOWNMOUSE', 'WHEELINMOUSE', 'WHEELOUTMOUSE', 'EVT_TWEAK_L', 'EVT_TWEAK_M', 'EVT_TWEAK_R', 'EVT_TWEAK_A', 'EVT_TWEAK_S', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'ZERO', 'ONE', 'TWO', 'THREE', 'FOUR', 'FIVE', 'SIX', 'SEVEN', 'EIGHT', 'NINE', 'LEFT_CTRL', 'LEFT_ALT', 'LEFT_SHIFT', 'RIGHT_ALT', 'RIGHT_CTRL', 'RIGHT_SHIFT', 'OSKEY', 'GRLESS', 'ESC', 'TAB', 'RET', 'SPACE', 'LINE_FEED', 'BACK_SPACE', 'DEL', 'COLON', 'SEMI_COLON', 'PERIOD', 'COMMA', 'QUOTE', 'ACCENT_GRAVE', 'MINUS', 'PLUS', 'SLASH', 'BACK_SLASH', 'EQUAL', 'LEFT_BRACKET', 'RIGHT_BRACKET', 'ATKEY', 'ASCIICIRCUM', 'LEFT_ARROW', 'DOWN_ARROW', 'RIGHT_ARROW', 'UP_ARROW', 'NUMPAD_2', 'NUMPAD_4', 'NUMPAD_6', 'NUMPAD_8', 'NUMPAD_1', 'NUMPAD_3', 'NUMPAD_5', 'NUMPAD_7', 'NUMPAD_9', 'NUMPAD_PERIOD', 'NUMPAD_SLASH', 'NUMPAD_ASTERIX', 'NUMPAD_0', 'NUMPAD_MINUS', 'NUMPAD_ENTER', 'NUMPAD_PLUS', 'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12', 'F13', 'F14', 'F15', 'F16', 'F17', 'F18', 'F19', 'PAUSE', 'INSERT', 'HOME', 'PAGE_UP', 'PAGE_DOWN', 'END', 'HENKAN', 'MUHENKAN', 'KANA', 'MENU', 'MEDIA_PLAY', 'MEDIA_STOP', 'MEDIA_FIRST', 'MEDIA_LAST', 'TEXTINPUT', 'WINDOW_DEACTIVATE', 'TIMER', 'TIMER0', 'TIMER1', 'TIMER2', 'TIMER_JOBS', 'TIMER_AUTOSAVE', 'TIMER_REPORT', 'TIMERREGION', 'NDOF_MOTION', 'NDOF_BUTTON_MENU', 'NDOF_BUTTON_FIT', 'NDOF_BUTTON_TOP', 'NDOF_BUTTON_BOTTOM', 'NDOF_BUTTON_LEFT', 'NDOF_BUTTON_RIGHT', 'NDOF_BUTTON_FRONT', 'NDOF_BUTTON_BACK', 'NDOF_BUTTON_ISO1', 'NDOF_BUTTON_ISO2', 'NDOF_BUTTON_ROLL_CW', 'NDOF_BUTTON_ROLL_CCW', 'NDOF_BUTTON_SPIN_CW', 'NDOF_BUTTON_SPIN_CCW', 'NDOF_BUTTON_TILT_CW', 'NDOF_BUTTON_TILT_CCW', 'NDOF_BUTTON_ROTATE', 'NDOF_BUTTON_PANZOOM', 'NDOF_BUTTON_DOMINANT', 'NDOF_BUTTON_PLUS', 'NDOF_BUTTON_MINUS', 'NDOF_BUTTON_ESC', 'NDOF_BUTTON_ALT', 'NDOF_BUTTON_SHIFT', 'NDOF_BUTTON_CTRL', 'NDOF_BUTTON_1', 'NDOF_BUTTON_2', 'NDOF_BUTTON_3', 'NDOF_BUTTON_4', 'NDOF_BUTTON_5', 'NDOF_BUTTON_6', 'NDOF_BUTTON_7', 'NDOF_BUTTON_8', 'NDOF_BUTTON_9', 'NDOF_BUTTON_10', 'NDOF_BUTTON_A', 'NDOF_BUTTON_B', 'NDOF_BUTTON_C'], default 'NONE')
    
    :type: str
    """

    log = ""
    """Property that indicates whether to log keystrokes as a string
    (type: string, default "", (never None))
    
    :type: str
    """

    modifier_key_1 = 'NONE'
    """Modifier key code
    * 'NONE': .
    * 'LEFTMOUSE': Left Mouse, LMB.
    * 'MIDDLEMOUSE': Middle Mouse, MMB.
    * 'RIGHTMOUSE': Right Mouse, RMB.
    * 'BUTTON4MOUSE': Button4 Mouse, MB4.
    * 'BUTTON5MOUSE': Button5 Mouse, MB5.
    * 'BUTTON6MOUSE': Button6 Mouse, MB6.
    * 'BUTTON7MOUSE': Button7 Mouse, MB7.
    * 'BUTTON8MOUSE': Button8 Mouse, MB8.
    * 'BUTTON9MOUSE': Button9 Mouse, MB9.
    * 'BUTTON10MOUSE': Button10 Mouse, MB10.
    * 'BUTTON11MOUSE': Button11 Mouse, MB11.
    * 'BUTTON12MOUSE': Button12 Mouse, MB12.
    * 'BUTTON13MOUSE': Button13 Mouse, MB13.
    * 'BUTTON14MOUSE': Button14 Mouse, MB14.
    * 'BUTTON15MOUSE': Button15 Mouse, MB15.
    * 'BUTTON16MOUSE': Button16 Mouse, MB16.
    * 'BUTTON17MOUSE': Button17 Mouse, MB17.
    * 'ACTIONMOUSE': Action Mouse, MBA.
    * 'SELECTMOUSE': Select Mouse, MBS.
    * 'PEN': Pen.
    * 'ERASER': Eraser.
    * 'MOUSEMOVE': Mouse Move, MsMov.
    * 'INBETWEEN_MOUSEMOVE': In-between Move, MsSubMov.
    * 'TRACKPADPAN': Mouse/Trackpad Pan, MsPan.
    * 'TRACKPADZOOM': Mouse/Trackpad Zoom, MsZoom.
    * 'MOUSEROTATE': Mouse/Trackpad Rotate, MsRot.
    * 'WHEELUPMOUSE': Wheel Up, WhUp.
    * 'WHEELDOWNMOUSE': Wheel Down, WhDown.
    * 'WHEELINMOUSE': Wheel In, WhIn.
    * 'WHEELOUTMOUSE': Wheel Out, WhOut.
    * 'EVT_TWEAK_L': Tweak Left, TwkL.
    * 'EVT_TWEAK_M': Tweak Middle, TwkM.
    * 'EVT_TWEAK_R': Tweak Right, TwkR.
    * 'EVT_TWEAK_A': Tweak Action, TwkA.
    * 'EVT_TWEAK_S': Tweak Select, TwkS.
    * 'A': A.
    * 'B': B.
    * 'C': C.
    * 'D': D.
    * 'E': E.
    * 'F': F.
    * 'G': G.
    * 'H': H.
    * 'I': I.
    * 'J': J.
    * 'K': K.
    * 'L': L.
    * 'M': M.
    * 'N': N.
    * 'O': O.
    * 'P': P.
    * 'Q': Q.
    * 'R': R.
    * 'S': S.
    * 'T': T.
    * 'U': U.
    * 'V': V.
    * 'W': W.
    * 'X': X.
    * 'Y': Y.
    * 'Z': Z.
    * 'ZERO': 0.
    * 'ONE': 1.
    * 'TWO': 2.
    * 'THREE': 3.
    * 'FOUR': 4.
    * 'FIVE': 5.
    * 'SIX': 6.
    * 'SEVEN': 7.
    * 'EIGHT': 8.
    * 'NINE': 9.
    * 'LEFT_CTRL': Left Ctrl, CtrlL.
    * 'LEFT_ALT': Left Alt, AltL.
    * 'LEFT_SHIFT': Left Shift, ShiftL.
    * 'RIGHT_ALT': Right Alt, AltR.
    * 'RIGHT_CTRL': Right Ctrl, CtrlR.
    * 'RIGHT_SHIFT': Right Shift, ShiftR.
    * 'OSKEY': OS Key, Cmd.
    * 'GRLESS': Grless.
    * 'ESC': Esc.
    * 'TAB': Tab.
    * 'RET': Return, Enter.
    * 'SPACE': Spacebar, Space.
    * 'LINE_FEED': Line Feed.
    * 'BACK_SPACE': Back Space, BkSpace.
    * 'DEL': Delete, Del.
    * 'COLON': :.
    * 'SEMI_COLON': ;.
    * 'PERIOD': ..
    * 'COMMA': ,.
    * 'QUOTE': ".
    * 'ACCENT_GRAVE': `.
    * 'MINUS': -.
    * 'PLUS': +.
    * 'SLASH': /.
    * 'BACK_SLASH': \.
    * 'EQUAL': =.
    * 'LEFT_BRACKET': [.
    * 'RIGHT_BRACKET': ].
    * 'ATKEY': @.
    * 'ASCIICIRCUM': ^.
    * 'LEFT_ARROW': Left Arrow, ←.
    * 'DOWN_ARROW': Down Arrow, ↓.
    * 'RIGHT_ARROW': Right Arrow, →.
    * 'UP_ARROW': Up Arrow, ↑.
    * 'NUMPAD_2': Numpad 2, Pad2.
    * 'NUMPAD_4': Numpad 4, Pad4.
    * 'NUMPAD_6': Numpad 6, Pad6.
    * 'NUMPAD_8': Numpad 8, Pad8.
    * 'NUMPAD_1': Numpad 1, Pad1.
    * 'NUMPAD_3': Numpad 3, Pad3.
    * 'NUMPAD_5': Numpad 5, Pad5.
    * 'NUMPAD_7': Numpad 7, Pad7.
    * 'NUMPAD_9': Numpad 9, Pad9.
    * 'NUMPAD_PERIOD': Numpad ., Pad..
    * 'NUMPAD_SLASH': Numpad /, Pad/.
    * 'NUMPAD_ASTERIX': Numpad *, Pad*.
    * 'NUMPAD_0': Numpad 0, Pad0.
    * 'NUMPAD_MINUS': Numpad -, Pad-.
    * 'NUMPAD_ENTER': Numpad Enter, PadEnter.
    * 'NUMPAD_PLUS': Numpad +, Pad+.
    * 'F1': F1.
    * 'F2': F2.
    * 'F3': F3.
    * 'F4': F4.
    * 'F5': F5.
    * 'F6': F6.
    * 'F7': F7.
    * 'F8': F8.
    * 'F9': F9.
    * 'F10': F10.
    * 'F11': F11.
    * 'F12': F12.
    * 'F13': F13.
    * 'F14': F14.
    * 'F15': F15.
    * 'F16': F16.
    * 'F17': F17.
    * 'F18': F18.
    * 'F19': F19.
    * 'PAUSE': Pause.
    * 'INSERT': Insert, Ins.
    * 'HOME': Home.
    * 'PAGE_UP': Page Up, PgUp.
    * 'PAGE_DOWN': Page Down, PgDown.
    * 'END': End.
    * 'HENKAN': Henkan.
    * 'MUHENKAN': Muhenkan.
    * 'KANA': Kana.
    * 'MENU': Menu.
    * 'MEDIA_PLAY': Media Play/Pause, >/||.
    * 'MEDIA_STOP': Media Stop, Stop.
    * 'MEDIA_FIRST': Media First, |<<.
    * 'MEDIA_LAST': Media Last, >>|.
    * 'TEXTINPUT': Text Input, TxtIn.
    * 'WINDOW_DEACTIVATE': Window Deactivate.
    * 'TIMER': Timer, Tmr.
    * 'TIMER0': Timer 0, Tmr0.
    * 'TIMER1': Timer 1, Tmr1.
    * 'TIMER2': Timer 2, Tmr2.
    * 'TIMER_JOBS': Timer Jobs, TmrJob.
    * 'TIMER_AUTOSAVE': Timer Autosave, TmrSave.
    * 'TIMER_REPORT': Timer Report, TmrReport.
    * 'TIMERREGION': Timer Region, TmrReg.
    * 'NDOF_MOTION': NDOF Motion, NdofMov.
    * 'NDOF_BUTTON_MENU': NDOF Menu, NdofMenu.
    * 'NDOF_BUTTON_FIT': NDOF Fit, NdofFit.
    * 'NDOF_BUTTON_TOP': NDOF Top, Ndof↑.
    * 'NDOF_BUTTON_BOTTOM': NDOF Bottom, Ndof↓.
    * 'NDOF_BUTTON_LEFT': NDOF Left, Ndof←.
    * 'NDOF_BUTTON_RIGHT': NDOF Right, Ndof→.
    * 'NDOF_BUTTON_FRONT': NDOF Front, NdofFront.
    * 'NDOF_BUTTON_BACK': NDOF Back, NdofBack.
    * 'NDOF_BUTTON_ISO1': NDOF Isometric 1, NdofIso1.
    * 'NDOF_BUTTON_ISO2': NDOF Isometric 2, NdofIso2.
    * 'NDOF_BUTTON_ROLL_CW': NDOF Roll CW, NdofRCW.
    * 'NDOF_BUTTON_ROLL_CCW': NDOF Roll CCW, NdofRCCW.
    * 'NDOF_BUTTON_SPIN_CW': NDOF Spin CW, NdofSCW.
    * 'NDOF_BUTTON_SPIN_CCW': NDOF Spin CCW, NdofSCCW.
    * 'NDOF_BUTTON_TILT_CW': NDOF Tilt CW, NdofTCW.
    * 'NDOF_BUTTON_TILT_CCW': NDOF Tilt CCW, NdofTCCW.
    * 'NDOF_BUTTON_ROTATE': NDOF Rotate, NdofRot.
    * 'NDOF_BUTTON_PANZOOM': NDOF Pan/Zoom, NdofPanZoom.
    * 'NDOF_BUTTON_DOMINANT': NDOF Dominant, NdofDom.
    * 'NDOF_BUTTON_PLUS': NDOF Plus, Ndof+.
    * 'NDOF_BUTTON_MINUS': NDOF Minus, Ndof-.
    * 'NDOF_BUTTON_ESC': NDOF Esc, NdofEsc.
    * 'NDOF_BUTTON_ALT': NDOF Alt, NdofAlt.
    * 'NDOF_BUTTON_SHIFT': NDOF Shift, NdofShift.
    * 'NDOF_BUTTON_CTRL': NDOF Ctrl, NdofCtrl.
    * 'NDOF_BUTTON_1': NDOF Button 1, NdofB1.
    * 'NDOF_BUTTON_2': NDOF Button 2, NdofB2.
    * 'NDOF_BUTTON_3': NDOF Button 3, NdofB3.
    * 'NDOF_BUTTON_4': NDOF Button 4, NdofB4.
    * 'NDOF_BUTTON_5': NDOF Button 5, NdofB5.
    * 'NDOF_BUTTON_6': NDOF Button 6, NdofB6.
    * 'NDOF_BUTTON_7': NDOF Button 7, NdofB7.
    * 'NDOF_BUTTON_8': NDOF Button 8, NdofB8.
    * 'NDOF_BUTTON_9': NDOF Button 9, NdofB9.
    * 'NDOF_BUTTON_10': NDOF Button 10, NdofB10.
    * 'NDOF_BUTTON_A': NDOF Button A, NdofBA.
    * 'NDOF_BUTTON_B': NDOF Button B, NdofBB.
    * 'NDOF_BUTTON_C': NDOF Button C, NdofBC.
    (type: enum in ['NONE', 'LEFTMOUSE', 'MIDDLEMOUSE', 'RIGHTMOUSE', 'BUTTON4MOUSE', 'BUTTON5MOUSE', 'BUTTON6MOUSE', 'BUTTON7MOUSE', 'BUTTON8MOUSE', 'BUTTON9MOUSE', 'BUTTON10MOUSE', 'BUTTON11MOUSE', 'BUTTON12MOUSE', 'BUTTON13MOUSE', 'BUTTON14MOUSE', 'BUTTON15MOUSE', 'BUTTON16MOUSE', 'BUTTON17MOUSE', 'ACTIONMOUSE', 'SELECTMOUSE', 'PEN', 'ERASER', 'MOUSEMOVE', 'INBETWEEN_MOUSEMOVE', 'TRACKPADPAN', 'TRACKPADZOOM', 'MOUSEROTATE', 'WHEELUPMOUSE', 'WHEELDOWNMOUSE', 'WHEELINMOUSE', 'WHEELOUTMOUSE', 'EVT_TWEAK_L', 'EVT_TWEAK_M', 'EVT_TWEAK_R', 'EVT_TWEAK_A', 'EVT_TWEAK_S', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'ZERO', 'ONE', 'TWO', 'THREE', 'FOUR', 'FIVE', 'SIX', 'SEVEN', 'EIGHT', 'NINE', 'LEFT_CTRL', 'LEFT_ALT', 'LEFT_SHIFT', 'RIGHT_ALT', 'RIGHT_CTRL', 'RIGHT_SHIFT', 'OSKEY', 'GRLESS', 'ESC', 'TAB', 'RET', 'SPACE', 'LINE_FEED', 'BACK_SPACE', 'DEL', 'COLON', 'SEMI_COLON', 'PERIOD', 'COMMA', 'QUOTE', 'ACCENT_GRAVE', 'MINUS', 'PLUS', 'SLASH', 'BACK_SLASH', 'EQUAL', 'LEFT_BRACKET', 'RIGHT_BRACKET', 'ATKEY', 'ASCIICIRCUM', 'LEFT_ARROW', 'DOWN_ARROW', 'RIGHT_ARROW', 'UP_ARROW', 'NUMPAD_2', 'NUMPAD_4', 'NUMPAD_6', 'NUMPAD_8', 'NUMPAD_1', 'NUMPAD_3', 'NUMPAD_5', 'NUMPAD_7', 'NUMPAD_9', 'NUMPAD_PERIOD', 'NUMPAD_SLASH', 'NUMPAD_ASTERIX', 'NUMPAD_0', 'NUMPAD_MINUS', 'NUMPAD_ENTER', 'NUMPAD_PLUS', 'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12', 'F13', 'F14', 'F15', 'F16', 'F17', 'F18', 'F19', 'PAUSE', 'INSERT', 'HOME', 'PAGE_UP', 'PAGE_DOWN', 'END', 'HENKAN', 'MUHENKAN', 'KANA', 'MENU', 'MEDIA_PLAY', 'MEDIA_STOP', 'MEDIA_FIRST', 'MEDIA_LAST', 'TEXTINPUT', 'WINDOW_DEACTIVATE', 'TIMER', 'TIMER0', 'TIMER1', 'TIMER2', 'TIMER_JOBS', 'TIMER_AUTOSAVE', 'TIMER_REPORT', 'TIMERREGION', 'NDOF_MOTION', 'NDOF_BUTTON_MENU', 'NDOF_BUTTON_FIT', 'NDOF_BUTTON_TOP', 'NDOF_BUTTON_BOTTOM', 'NDOF_BUTTON_LEFT', 'NDOF_BUTTON_RIGHT', 'NDOF_BUTTON_FRONT', 'NDOF_BUTTON_BACK', 'NDOF_BUTTON_ISO1', 'NDOF_BUTTON_ISO2', 'NDOF_BUTTON_ROLL_CW', 'NDOF_BUTTON_ROLL_CCW', 'NDOF_BUTTON_SPIN_CW', 'NDOF_BUTTON_SPIN_CCW', 'NDOF_BUTTON_TILT_CW', 'NDOF_BUTTON_TILT_CCW', 'NDOF_BUTTON_ROTATE', 'NDOF_BUTTON_PANZOOM', 'NDOF_BUTTON_DOMINANT', 'NDOF_BUTTON_PLUS', 'NDOF_BUTTON_MINUS', 'NDOF_BUTTON_ESC', 'NDOF_BUTTON_ALT', 'NDOF_BUTTON_SHIFT', 'NDOF_BUTTON_CTRL', 'NDOF_BUTTON_1', 'NDOF_BUTTON_2', 'NDOF_BUTTON_3', 'NDOF_BUTTON_4', 'NDOF_BUTTON_5', 'NDOF_BUTTON_6', 'NDOF_BUTTON_7', 'NDOF_BUTTON_8', 'NDOF_BUTTON_9', 'NDOF_BUTTON_10', 'NDOF_BUTTON_A', 'NDOF_BUTTON_B', 'NDOF_BUTTON_C'], default 'NONE')
    
    :type: str
    """

    modifier_key_2 = 'NONE'
    """Modifier key code
    * 'NONE': .
    * 'LEFTMOUSE': Left Mouse, LMB.
    * 'MIDDLEMOUSE': Middle Mouse, MMB.
    * 'RIGHTMOUSE': Right Mouse, RMB.
    * 'BUTTON4MOUSE': Button4 Mouse, MB4.
    * 'BUTTON5MOUSE': Button5 Mouse, MB5.
    * 'BUTTON6MOUSE': Button6 Mouse, MB6.
    * 'BUTTON7MOUSE': Button7 Mouse, MB7.
    * 'BUTTON8MOUSE': Button8 Mouse, MB8.
    * 'BUTTON9MOUSE': Button9 Mouse, MB9.
    * 'BUTTON10MOUSE': Button10 Mouse, MB10.
    * 'BUTTON11MOUSE': Button11 Mouse, MB11.
    * 'BUTTON12MOUSE': Button12 Mouse, MB12.
    * 'BUTTON13MOUSE': Button13 Mouse, MB13.
    * 'BUTTON14MOUSE': Button14 Mouse, MB14.
    * 'BUTTON15MOUSE': Button15 Mouse, MB15.
    * 'BUTTON16MOUSE': Button16 Mouse, MB16.
    * 'BUTTON17MOUSE': Button17 Mouse, MB17.
    * 'ACTIONMOUSE': Action Mouse, MBA.
    * 'SELECTMOUSE': Select Mouse, MBS.
    * 'PEN': Pen.
    * 'ERASER': Eraser.
    * 'MOUSEMOVE': Mouse Move, MsMov.
    * 'INBETWEEN_MOUSEMOVE': In-between Move, MsSubMov.
    * 'TRACKPADPAN': Mouse/Trackpad Pan, MsPan.
    * 'TRACKPADZOOM': Mouse/Trackpad Zoom, MsZoom.
    * 'MOUSEROTATE': Mouse/Trackpad Rotate, MsRot.
    * 'WHEELUPMOUSE': Wheel Up, WhUp.
    * 'WHEELDOWNMOUSE': Wheel Down, WhDown.
    * 'WHEELINMOUSE': Wheel In, WhIn.
    * 'WHEELOUTMOUSE': Wheel Out, WhOut.
    * 'EVT_TWEAK_L': Tweak Left, TwkL.
    * 'EVT_TWEAK_M': Tweak Middle, TwkM.
    * 'EVT_TWEAK_R': Tweak Right, TwkR.
    * 'EVT_TWEAK_A': Tweak Action, TwkA.
    * 'EVT_TWEAK_S': Tweak Select, TwkS.
    * 'A': A.
    * 'B': B.
    * 'C': C.
    * 'D': D.
    * 'E': E.
    * 'F': F.
    * 'G': G.
    * 'H': H.
    * 'I': I.
    * 'J': J.
    * 'K': K.
    * 'L': L.
    * 'M': M.
    * 'N': N.
    * 'O': O.
    * 'P': P.
    * 'Q': Q.
    * 'R': R.
    * 'S': S.
    * 'T': T.
    * 'U': U.
    * 'V': V.
    * 'W': W.
    * 'X': X.
    * 'Y': Y.
    * 'Z': Z.
    * 'ZERO': 0.
    * 'ONE': 1.
    * 'TWO': 2.
    * 'THREE': 3.
    * 'FOUR': 4.
    * 'FIVE': 5.
    * 'SIX': 6.
    * 'SEVEN': 7.
    * 'EIGHT': 8.
    * 'NINE': 9.
    * 'LEFT_CTRL': Left Ctrl, CtrlL.
    * 'LEFT_ALT': Left Alt, AltL.
    * 'LEFT_SHIFT': Left Shift, ShiftL.
    * 'RIGHT_ALT': Right Alt, AltR.
    * 'RIGHT_CTRL': Right Ctrl, CtrlR.
    * 'RIGHT_SHIFT': Right Shift, ShiftR.
    * 'OSKEY': OS Key, Cmd.
    * 'GRLESS': Grless.
    * 'ESC': Esc.
    * 'TAB': Tab.
    * 'RET': Return, Enter.
    * 'SPACE': Spacebar, Space.
    * 'LINE_FEED': Line Feed.
    * 'BACK_SPACE': Back Space, BkSpace.
    * 'DEL': Delete, Del.
    * 'COLON': :.
    * 'SEMI_COLON': ;.
    * 'PERIOD': ..
    * 'COMMA': ,.
    * 'QUOTE': ".
    * 'ACCENT_GRAVE': `.
    * 'MINUS': -.
    * 'PLUS': +.
    * 'SLASH': /.
    * 'BACK_SLASH': \.
    * 'EQUAL': =.
    * 'LEFT_BRACKET': [.
    * 'RIGHT_BRACKET': ].
    * 'ATKEY': @.
    * 'ASCIICIRCUM': ^.
    * 'LEFT_ARROW': Left Arrow, ←.
    * 'DOWN_ARROW': Down Arrow, ↓.
    * 'RIGHT_ARROW': Right Arrow, →.
    * 'UP_ARROW': Up Arrow, ↑.
    * 'NUMPAD_2': Numpad 2, Pad2.
    * 'NUMPAD_4': Numpad 4, Pad4.
    * 'NUMPAD_6': Numpad 6, Pad6.
    * 'NUMPAD_8': Numpad 8, Pad8.
    * 'NUMPAD_1': Numpad 1, Pad1.
    * 'NUMPAD_3': Numpad 3, Pad3.
    * 'NUMPAD_5': Numpad 5, Pad5.
    * 'NUMPAD_7': Numpad 7, Pad7.
    * 'NUMPAD_9': Numpad 9, Pad9.
    * 'NUMPAD_PERIOD': Numpad ., Pad..
    * 'NUMPAD_SLASH': Numpad /, Pad/.
    * 'NUMPAD_ASTERIX': Numpad *, Pad*.
    * 'NUMPAD_0': Numpad 0, Pad0.
    * 'NUMPAD_MINUS': Numpad -, Pad-.
    * 'NUMPAD_ENTER': Numpad Enter, PadEnter.
    * 'NUMPAD_PLUS': Numpad +, Pad+.
    * 'F1': F1.
    * 'F2': F2.
    * 'F3': F3.
    * 'F4': F4.
    * 'F5': F5.
    * 'F6': F6.
    * 'F7': F7.
    * 'F8': F8.
    * 'F9': F9.
    * 'F10': F10.
    * 'F11': F11.
    * 'F12': F12.
    * 'F13': F13.
    * 'F14': F14.
    * 'F15': F15.
    * 'F16': F16.
    * 'F17': F17.
    * 'F18': F18.
    * 'F19': F19.
    * 'PAUSE': Pause.
    * 'INSERT': Insert, Ins.
    * 'HOME': Home.
    * 'PAGE_UP': Page Up, PgUp.
    * 'PAGE_DOWN': Page Down, PgDown.
    * 'END': End.
    * 'HENKAN': Henkan.
    * 'MUHENKAN': Muhenkan.
    * 'KANA': Kana.
    * 'MENU': Menu.
    * 'MEDIA_PLAY': Media Play/Pause, >/||.
    * 'MEDIA_STOP': Media Stop, Stop.
    * 'MEDIA_FIRST': Media First, |<<.
    * 'MEDIA_LAST': Media Last, >>|.
    * 'TEXTINPUT': Text Input, TxtIn.
    * 'WINDOW_DEACTIVATE': Window Deactivate.
    * 'TIMER': Timer, Tmr.
    * 'TIMER0': Timer 0, Tmr0.
    * 'TIMER1': Timer 1, Tmr1.
    * 'TIMER2': Timer 2, Tmr2.
    * 'TIMER_JOBS': Timer Jobs, TmrJob.
    * 'TIMER_AUTOSAVE': Timer Autosave, TmrSave.
    * 'TIMER_REPORT': Timer Report, TmrReport.
    * 'TIMERREGION': Timer Region, TmrReg.
    * 'NDOF_MOTION': NDOF Motion, NdofMov.
    * 'NDOF_BUTTON_MENU': NDOF Menu, NdofMenu.
    * 'NDOF_BUTTON_FIT': NDOF Fit, NdofFit.
    * 'NDOF_BUTTON_TOP': NDOF Top, Ndof↑.
    * 'NDOF_BUTTON_BOTTOM': NDOF Bottom, Ndof↓.
    * 'NDOF_BUTTON_LEFT': NDOF Left, Ndof←.
    * 'NDOF_BUTTON_RIGHT': NDOF Right, Ndof→.
    * 'NDOF_BUTTON_FRONT': NDOF Front, NdofFront.
    * 'NDOF_BUTTON_BACK': NDOF Back, NdofBack.
    * 'NDOF_BUTTON_ISO1': NDOF Isometric 1, NdofIso1.
    * 'NDOF_BUTTON_ISO2': NDOF Isometric 2, NdofIso2.
    * 'NDOF_BUTTON_ROLL_CW': NDOF Roll CW, NdofRCW.
    * 'NDOF_BUTTON_ROLL_CCW': NDOF Roll CCW, NdofRCCW.
    * 'NDOF_BUTTON_SPIN_CW': NDOF Spin CW, NdofSCW.
    * 'NDOF_BUTTON_SPIN_CCW': NDOF Spin CCW, NdofSCCW.
    * 'NDOF_BUTTON_TILT_CW': NDOF Tilt CW, NdofTCW.
    * 'NDOF_BUTTON_TILT_CCW': NDOF Tilt CCW, NdofTCCW.
    * 'NDOF_BUTTON_ROTATE': NDOF Rotate, NdofRot.
    * 'NDOF_BUTTON_PANZOOM': NDOF Pan/Zoom, NdofPanZoom.
    * 'NDOF_BUTTON_DOMINANT': NDOF Dominant, NdofDom.
    * 'NDOF_BUTTON_PLUS': NDOF Plus, Ndof+.
    * 'NDOF_BUTTON_MINUS': NDOF Minus, Ndof-.
    * 'NDOF_BUTTON_ESC': NDOF Esc, NdofEsc.
    * 'NDOF_BUTTON_ALT': NDOF Alt, NdofAlt.
    * 'NDOF_BUTTON_SHIFT': NDOF Shift, NdofShift.
    * 'NDOF_BUTTON_CTRL': NDOF Ctrl, NdofCtrl.
    * 'NDOF_BUTTON_1': NDOF Button 1, NdofB1.
    * 'NDOF_BUTTON_2': NDOF Button 2, NdofB2.
    * 'NDOF_BUTTON_3': NDOF Button 3, NdofB3.
    * 'NDOF_BUTTON_4': NDOF Button 4, NdofB4.
    * 'NDOF_BUTTON_5': NDOF Button 5, NdofB5.
    * 'NDOF_BUTTON_6': NDOF Button 6, NdofB6.
    * 'NDOF_BUTTON_7': NDOF Button 7, NdofB7.
    * 'NDOF_BUTTON_8': NDOF Button 8, NdofB8.
    * 'NDOF_BUTTON_9': NDOF Button 9, NdofB9.
    * 'NDOF_BUTTON_10': NDOF Button 10, NdofB10.
    * 'NDOF_BUTTON_A': NDOF Button A, NdofBA.
    * 'NDOF_BUTTON_B': NDOF Button B, NdofBB.
    * 'NDOF_BUTTON_C': NDOF Button C, NdofBC.
    (type: enum in ['NONE', 'LEFTMOUSE', 'MIDDLEMOUSE', 'RIGHTMOUSE', 'BUTTON4MOUSE', 'BUTTON5MOUSE', 'BUTTON6MOUSE', 'BUTTON7MOUSE', 'BUTTON8MOUSE', 'BUTTON9MOUSE', 'BUTTON10MOUSE', 'BUTTON11MOUSE', 'BUTTON12MOUSE', 'BUTTON13MOUSE', 'BUTTON14MOUSE', 'BUTTON15MOUSE', 'BUTTON16MOUSE', 'BUTTON17MOUSE', 'ACTIONMOUSE', 'SELECTMOUSE', 'PEN', 'ERASER', 'MOUSEMOVE', 'INBETWEEN_MOUSEMOVE', 'TRACKPADPAN', 'TRACKPADZOOM', 'MOUSEROTATE', 'WHEELUPMOUSE', 'WHEELDOWNMOUSE', 'WHEELINMOUSE', 'WHEELOUTMOUSE', 'EVT_TWEAK_L', 'EVT_TWEAK_M', 'EVT_TWEAK_R', 'EVT_TWEAK_A', 'EVT_TWEAK_S', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'ZERO', 'ONE', 'TWO', 'THREE', 'FOUR', 'FIVE', 'SIX', 'SEVEN', 'EIGHT', 'NINE', 'LEFT_CTRL', 'LEFT_ALT', 'LEFT_SHIFT', 'RIGHT_ALT', 'RIGHT_CTRL', 'RIGHT_SHIFT', 'OSKEY', 'GRLESS', 'ESC', 'TAB', 'RET', 'SPACE', 'LINE_FEED', 'BACK_SPACE', 'DEL', 'COLON', 'SEMI_COLON', 'PERIOD', 'COMMA', 'QUOTE', 'ACCENT_GRAVE', 'MINUS', 'PLUS', 'SLASH', 'BACK_SLASH', 'EQUAL', 'LEFT_BRACKET', 'RIGHT_BRACKET', 'ATKEY', 'ASCIICIRCUM', 'LEFT_ARROW', 'DOWN_ARROW', 'RIGHT_ARROW', 'UP_ARROW', 'NUMPAD_2', 'NUMPAD_4', 'NUMPAD_6', 'NUMPAD_8', 'NUMPAD_1', 'NUMPAD_3', 'NUMPAD_5', 'NUMPAD_7', 'NUMPAD_9', 'NUMPAD_PERIOD', 'NUMPAD_SLASH', 'NUMPAD_ASTERIX', 'NUMPAD_0', 'NUMPAD_MINUS', 'NUMPAD_ENTER', 'NUMPAD_PLUS', 'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12', 'F13', 'F14', 'F15', 'F16', 'F17', 'F18', 'F19', 'PAUSE', 'INSERT', 'HOME', 'PAGE_UP', 'PAGE_DOWN', 'END', 'HENKAN', 'MUHENKAN', 'KANA', 'MENU', 'MEDIA_PLAY', 'MEDIA_STOP', 'MEDIA_FIRST', 'MEDIA_LAST', 'TEXTINPUT', 'WINDOW_DEACTIVATE', 'TIMER', 'TIMER0', 'TIMER1', 'TIMER2', 'TIMER_JOBS', 'TIMER_AUTOSAVE', 'TIMER_REPORT', 'TIMERREGION', 'NDOF_MOTION', 'NDOF_BUTTON_MENU', 'NDOF_BUTTON_FIT', 'NDOF_BUTTON_TOP', 'NDOF_BUTTON_BOTTOM', 'NDOF_BUTTON_LEFT', 'NDOF_BUTTON_RIGHT', 'NDOF_BUTTON_FRONT', 'NDOF_BUTTON_BACK', 'NDOF_BUTTON_ISO1', 'NDOF_BUTTON_ISO2', 'NDOF_BUTTON_ROLL_CW', 'NDOF_BUTTON_ROLL_CCW', 'NDOF_BUTTON_SPIN_CW', 'NDOF_BUTTON_SPIN_CCW', 'NDOF_BUTTON_TILT_CW', 'NDOF_BUTTON_TILT_CCW', 'NDOF_BUTTON_ROTATE', 'NDOF_BUTTON_PANZOOM', 'NDOF_BUTTON_DOMINANT', 'NDOF_BUTTON_PLUS', 'NDOF_BUTTON_MINUS', 'NDOF_BUTTON_ESC', 'NDOF_BUTTON_ALT', 'NDOF_BUTTON_SHIFT', 'NDOF_BUTTON_CTRL', 'NDOF_BUTTON_1', 'NDOF_BUTTON_2', 'NDOF_BUTTON_3', 'NDOF_BUTTON_4', 'NDOF_BUTTON_5', 'NDOF_BUTTON_6', 'NDOF_BUTTON_7', 'NDOF_BUTTON_8', 'NDOF_BUTTON_9', 'NDOF_BUTTON_10', 'NDOF_BUTTON_A', 'NDOF_BUTTON_B', 'NDOF_BUTTON_C'], default 'NONE')
    
    :type: str
    """

    target = ""
    """Property that receives the keystrokes in case a string is logged
    (type: string, default "", (never None))
    
    :type: str
    """

    use_all_keys = False
    """Trigger this sensor on any keystroke
    (type: boolean, default False)
    
    :type: bool
    """


class KinematicConstraint(Constraint):
    """Inverse Kinematics"""

    chain_count = 0
    """How many bones are included in the IK effect - 0 uses all bones
    (type: int in [0, 255], default 0)
    
    :type: int
    """

    distance = 0.0
    """Radius of limiting sphere
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    ik_type = 'COPY_POSE'
    """(type: enum in ['COPY_POSE', 'DISTANCE'], default 'COPY_POSE')
    
    :type: str
    """

    iterations = 0
    """Maximum number of solving iterations
    (type: int in [0, 10000], default 0)
    
    :type: int
    """

    limit_mode = 'LIMITDIST_INSIDE'
    """Distances in relation to sphere of influence to allow
    * 'LIMITDIST_INSIDE': Inside, The object is constrained inside a virtual sphere around the target object, with a radius defined by the limit distance.
    * 'LIMITDIST_OUTSIDE': Outside, The object is constrained outside a virtual sphere around the target object, with a radius defined by the limit distance.
    * 'LIMITDIST_ONSURFACE': On Surface, The object is constrained on the surface of a virtual sphere around the target object, with a radius defined by the limit distance.
    (type: enum in ['LIMITDIST_INSIDE', 'LIMITDIST_OUTSIDE', 'LIMITDIST_ONSURFACE'], default 'LIMITDIST_INSIDE')
    
    :type: str
    """

    lock_location_x = False
    """Constraint position along X axis
    (type: boolean, default False)
    
    :type: bool
    """

    lock_location_y = False
    """Constraint position along Y axis
    (type: boolean, default False)
    
    :type: bool
    """

    lock_location_z = False
    """Constraint position along Z axis
    (type: boolean, default False)
    
    :type: bool
    """

    lock_rotation_x = False
    """Constraint rotation along X axis
    (type: boolean, default False)
    
    :type: bool
    """

    lock_rotation_y = False
    """Constraint rotation along Y axis
    (type: boolean, default False)
    
    :type: bool
    """

    lock_rotation_z = False
    """Constraint rotation along Z axis
    (type: boolean, default False)
    
    :type: bool
    """

    orient_weight = 0.0
    """For Tree-IK: Weight of orientation control for this target
    (type: float in [0.01, 1], default 0.0)
    
    :type: float
    """

    pole_angle = 0.0
    """Pole rotation offset
    (type: float in [-3.14159, 3.14159], default 0.0)
    
    :type: float
    """

    pole_subtarget = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    pole_target = None
    """Object for pole rotation
    (type: bpy.types.Object)
    
    :type: Object
    """

    reference_axis = 'BONE'
    """Constraint axis Lock options relative to Bone or Target reference
    (type: enum in ['BONE', 'TARGET'], default 'BONE')
    
    :type: str
    """

    subtarget = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    target = None
    """Target Object
    (type: bpy.types.Object)
    
    :type: Object
    """

    use_location = False
    """Chain follows position of target
    (type: boolean, default False)
    
    :type: bool
    """

    use_rotation = False
    """Chain follows rotation of target
    (type: boolean, default False)
    
    :type: bool
    """

    use_stretch = False
    """Enable IK Stretching
    (type: boolean, default False)
    
    :type: bool
    """

    use_tail = False
    """Include bone's tail as last element in chain
    (type: boolean, default False)
    
    :type: bool
    """

    weight = 0.0
    """For Tree-IK: Weight of position control for this target
    (type: float in [0.01, 1], default 0.0)
    
    :type: float
    """


class Lamp(ID):
    """Lamp data-block for lighting a scene"""

    active_texture = None
    """Active texture slot being displayed
    (type: bpy.types.Texture)
    
    :type: Texture
    """

    active_texture_index = 0
    """Index of active texture slot
    (type: int in [0, 17], default 0)
    
    :type: int
    """

    animation_data = None
    """Animation data for this data-block
    (type: bpy.types.AnimData, (readonly))
    
    :type: AnimData
    """

    color = (0.0, 0.0, 0.0)
    """Light color
    (type: float array of 3 items in [0, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    distance = 0.0
    """Falloff distance - the light is at half the original intensity at this point
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    energy = 0.0
    """Amount of light that the lamp emits
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    node_tree = None
    """Node tree for node based lamps
    (type: bpy.types.NodeTree, (readonly))
    
    :type: NodeTree
    """

    texture_slots = None
    """Texture slots defining the mapping and influence of textures
    (type: bpy.types.LampTextureSlots bpy.types.bpy_prop_collection of bpy.types.LampTextureSlot, (readonly))
    
    :type: LampTextureSlots
    """

    type = 'POINT'
    """Type of Lamp
    * 'POINT': Point, Omnidirectional point light source.
    * 'SUN': Sun, Constant direction parallel ray light source.
    * 'SPOT': Spot, Directional cone light source.
    * 'HEMI': Hemi, 180 degree constant light source.
    * 'AREA': Area, Directional area light source.
    (type: enum in ['POINT', 'SUN', 'SPOT', 'HEMI', 'AREA'], default 'POINT')
    
    :type: str
    """

    use_diffuse = False
    """Do diffuse shading
    (type: boolean, default False)
    
    :type: bool
    """

    use_negative = False
    """Cast negative light
    (type: boolean, default False)
    
    :type: bool
    """

    use_nodes = False
    """Use shader nodes to render the lamp
    (type: boolean, default False)
    
    :type: bool
    """

    use_own_layer = False
    """Illuminate objects only on the same layers the lamp is on
    (type: boolean, default False)
    
    :type: bool
    """

    use_specular = False
    """Create specular highlights
    (type: boolean, default False)
    
    :type: bool
    """


class LampTextureSlot(TextureSlot):
    """Texture slot for textures in a Lamp data-block"""

    color_factor = 0.0
    """Amount texture affects color values
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    object = None
    """Object to use for mapping with Object texture coordinates
    (type: bpy.types.Object)
    
    :type: Object
    """

    shadow_factor = 0.0
    """Amount texture affects shadow
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    texture_coords = 'GLOBAL'
    """
    * 'GLOBAL': Global, Use global coordinates for the texture coordinates.
    * 'VIEW': View, Use view coordinates for the texture coordinates.
    * 'OBJECT': Object, Use linked object's coordinates for texture coordinates.
    (type: enum in ['GLOBAL', 'VIEW', 'OBJECT'], default 'GLOBAL')
    
    :type: str
    """

    use_map_color = False
    """Let the texture affect the basic color of the lamp
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_shadow = False
    """Let the texture affect the shadow color of the lamp
    (type: boolean, default False)
    
    :type: bool
    """


class LaplacianDeformModifier(Modifier):
    """Mesh deform modifier"""

    is_bind = False
    """Whether geometry has been bound to anchors
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    iterations = 0
    """(type: int in [-inf, inf], default 0)
    
    :type: int
    """

    vertex_group = ""
    """Name of Vertex Group which determines Anchors
    (type: string, default "", (never None))
    
    :type: str
    """


class LaplacianSmoothModifier(Modifier):
    """Smoothing effect modifier"""

    iterations = 0
    """(type: int in [-32768, 32767], default 0)
    
    :type: int
    """

    lambda_border = 0.0
    """Lambda factor in border
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    lambda_factor = 0.0
    """Smooth factor effect
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    use_normalized = False
    """Improve and stabilize the enhanced shape
    (type: boolean, default False)
    
    :type: bool
    """

    use_volume_preserve = False
    """Apply volume preservation after smooth
    (type: boolean, default False)
    
    :type: bool
    """

    use_x = False
    """Smooth object along X axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_y = False
    """Smooth object along Y axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_z = False
    """Smooth object along Z axis
    (type: boolean, default False)
    
    :type: bool
    """

    vertex_group = ""
    """Name of Vertex Group which determines influence of modifier per point
    (type: string, default "", (never None))
    
    :type: str
    """


class Lattice(ID):
    """Lattice data-block defining a grid for deforming other objects"""

    animation_data = None
    """Animation data for this data-block
    (type: bpy.types.AnimData, (readonly))
    
    :type: AnimData
    """

    interpolation_type_u = 'KEY_LINEAR'
    """(type: enum in ['KEY_LINEAR', 'KEY_CARDINAL', 'KEY_CATMULL_ROM', 'KEY_BSPLINE'], default 'KEY_LINEAR')
    
    :type: str
    """

    interpolation_type_v = 'KEY_LINEAR'
    """(type: enum in ['KEY_LINEAR', 'KEY_CARDINAL', 'KEY_CATMULL_ROM', 'KEY_BSPLINE'], default 'KEY_LINEAR')
    
    :type: str
    """

    interpolation_type_w = 'KEY_LINEAR'
    """(type: enum in ['KEY_LINEAR', 'KEY_CARDINAL', 'KEY_CATMULL_ROM', 'KEY_BSPLINE'], default 'KEY_LINEAR')
    
    :type: str
    """

    is_editmode = False
    """True when used in editmode
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    points = None
    """Points of the lattice
    (type: bpy.types.bpy_prop_collection of bpy.types.LatticePoint, (readonly))
    
    :type: bpy_prop_collection
    """

    points_u = 0
    """Point in U direction (can't be changed when there are shape keys)
    (type: int in [1, 64], default 0)
    
    :type: int
    """

    points_v = 0
    """Point in V direction (can't be changed when there are shape keys)
    (type: int in [1, 64], default 0)
    
    :type: int
    """

    points_w = 0
    """Point in W direction (can't be changed when there are shape keys)
    (type: int in [1, 64], default 0)
    
    :type: int
    """

    shape_keys = None
    """(type: bpy.types.Key, (readonly))
    
    :type: Key
    """

    use_outside = False
    """Only draw, and take into account, the outer vertices
    (type: boolean, default False)
    
    :type: bool
    """

    vertex_group = ""
    """Vertex group to apply the influence of the lattice
    (type: string, default "", (never None))
    
    :type: str
    """

    def transform(self, matrix, shape_keys=False):
        """Transform lattice by a matrix
        
        :param matrix: Matrix
            (type: float array of 16 items in [-inf, inf])
        :type matrix: mathutils.Matrix
        :param shape_keys: Transform Shape Keys
            (type: boolean, (optional))
        :type shape_keys: bool
        """


class LatticeModifier(Modifier):
    """Lattice deformation modifier"""

    object = None
    """Lattice object to deform with
    (type: bpy.types.Object)
    
    :type: Object
    """

    strength = 0.0
    """Strength of modifier effect
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    vertex_group = ""
    """Name of Vertex Group which determines influence of modifier per point
    (type: string, default "", (never None))
    
    :type: str
    """


class Library(ID):
    """External .blend file from which data is linked"""

    filepath = ""
    """Path to the library .blend file
    (type: string, default "", (never None))
    
    :type: str
    """

    packed_file = None
    """(type: bpy.types.PackedFile, (readonly))
    
    :type: PackedFile
    """

    parent = None
    """(type: bpy.types.Library, (readonly))
    
    :type: Library
    """

    users_id = None
    """ID data blocks which use this library
                                (readonly)
    """

    def reload(self):
        """Reload this library and all its linked data-blocks"""


class LimitDistanceConstraint(Constraint):
    """Limit the distance from target object"""

    distance = 0.0
    """Radius of limiting sphere
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    head_tail = 0.0
    """Target along length of bone: Head=0, Tail=1
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    limit_mode = 'LIMITDIST_INSIDE'
    """Distances in relation to sphere of influence to allow
    * 'LIMITDIST_INSIDE': Inside, The object is constrained inside a virtual sphere around the target object, with a radius defined by the limit distance.
    * 'LIMITDIST_OUTSIDE': Outside, The object is constrained outside a virtual sphere around the target object, with a radius defined by the limit distance.
    * 'LIMITDIST_ONSURFACE': On Surface, The object is constrained on the surface of a virtual sphere around the target object, with a radius defined by the limit distance.
    (type: enum in ['LIMITDIST_INSIDE', 'LIMITDIST_OUTSIDE', 'LIMITDIST_ONSURFACE'], default 'LIMITDIST_INSIDE')
    
    :type: str
    """

    subtarget = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    target = None
    """Target Object
    (type: bpy.types.Object)
    
    :type: Object
    """

    use_bbone_shape = False
    """Follow shape of B-Bone segments when calculating Head/Tail position
    (type: boolean, default False)
    
    :type: bool
    """

    use_transform_limit = False
    """Transforms are affected by this constraint as well
    (type: boolean, default False)
    
    :type: bool
    """


class LimitLocationConstraint(Constraint):
    """Limit the location of the constrained object"""

    max_x = 0.0
    """Highest X value to allow
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    max_y = 0.0
    """Highest Y value to allow
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    max_z = 0.0
    """Highest Z value to allow
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    min_x = 0.0
    """Lowest X value to allow
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    min_y = 0.0
    """Lowest Y value to allow
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    min_z = 0.0
    """Lowest Z value to allow
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    use_max_x = False
    """Use the maximum X value
    (type: boolean, default False)
    
    :type: bool
    """

    use_max_y = False
    """Use the maximum Y value
    (type: boolean, default False)
    
    :type: bool
    """

    use_max_z = False
    """Use the maximum Z value
    (type: boolean, default False)
    
    :type: bool
    """

    use_min_x = False
    """Use the minimum X value
    (type: boolean, default False)
    
    :type: bool
    """

    use_min_y = False
    """Use the minimum Y value
    (type: boolean, default False)
    
    :type: bool
    """

    use_min_z = False
    """Use the minimum Z value
    (type: boolean, default False)
    
    :type: bool
    """

    use_transform_limit = False
    """Transforms are affected by this constraint as well
    (type: boolean, default False)
    
    :type: bool
    """


class LimitRotationConstraint(Constraint):
    """Limit the rotation of the constrained object"""

    max_x = 0.0
    """Highest X value to allow
    (type: float in [-1000, 1000], default 0.0)
    
    :type: float
    """

    max_y = 0.0
    """Highest Y value to allow
    (type: float in [-1000, 1000], default 0.0)
    
    :type: float
    """

    max_z = 0.0
    """Highest Z value to allow
    (type: float in [-1000, 1000], default 0.0)
    
    :type: float
    """

    min_x = 0.0
    """Lowest X value to allow
    (type: float in [-1000, 1000], default 0.0)
    
    :type: float
    """

    min_y = 0.0
    """Lowest Y value to allow
    (type: float in [-1000, 1000], default 0.0)
    
    :type: float
    """

    min_z = 0.0
    """Lowest Z value to allow
    (type: float in [-1000, 1000], default 0.0)
    
    :type: float
    """

    use_limit_x = False
    """Use the minimum X value
    (type: boolean, default False)
    
    :type: bool
    """

    use_limit_y = False
    """Use the minimum Y value
    (type: boolean, default False)
    
    :type: bool
    """

    use_limit_z = False
    """Use the minimum Z value
    (type: boolean, default False)
    
    :type: bool
    """

    use_transform_limit = False
    """Transforms are affected by this constraint as well
    (type: boolean, default False)
    
    :type: bool
    """


class LimitScaleConstraint(Constraint):
    """Limit the scaling of the constrained object"""

    max_x = 0.0
    """Highest X value to allow
    (type: float in [-1000, 1000], default 0.0)
    
    :type: float
    """

    max_y = 0.0
    """Highest Y value to allow
    (type: float in [-1000, 1000], default 0.0)
    
    :type: float
    """

    max_z = 0.0
    """Highest Z value to allow
    (type: float in [-1000, 1000], default 0.0)
    
    :type: float
    """

    min_x = 0.0
    """Lowest X value to allow
    (type: float in [-1000, 1000], default 0.0)
    
    :type: float
    """

    min_y = 0.0
    """Lowest Y value to allow
    (type: float in [-1000, 1000], default 0.0)
    
    :type: float
    """

    min_z = 0.0
    """Lowest Z value to allow
    (type: float in [-1000, 1000], default 0.0)
    
    :type: float
    """

    use_max_x = False
    """Use the maximum X value
    (type: boolean, default False)
    
    :type: bool
    """

    use_max_y = False
    """Use the maximum Y value
    (type: boolean, default False)
    
    :type: bool
    """

    use_max_z = False
    """Use the maximum Z value
    (type: boolean, default False)
    
    :type: bool
    """

    use_min_x = False
    """Use the minimum X value
    (type: boolean, default False)
    
    :type: bool
    """

    use_min_y = False
    """Use the minimum Y value
    (type: boolean, default False)
    
    :type: bool
    """

    use_min_z = False
    """Use the minimum Z value
    (type: boolean, default False)
    
    :type: bool
    """

    use_transform_limit = False
    """Transforms are affected by this constraint as well
    (type: boolean, default False)
    
    :type: bool
    """


class LineStyleAlphaModifier(LineStyleModifier):
    """Base type to define alpha transparency modifiers"""


class LineStyleColorModifier(LineStyleModifier):
    """Base type to define line color modifiers"""


class LineStyleGeometryModifier(LineStyleModifier):
    """Base type to define stroke geometry modifiers"""


class LineStyleTextureSlot(TextureSlot):
    """Texture slot for textures in a LineStyle data-block"""

    alpha_factor = 0.0
    """Amount texture affects alpha
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    diffuse_color_factor = 0.0
    """Amount texture affects diffuse color
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    mapping = 'FLAT'
    """
    * 'FLAT': Flat, Map X and Y coordinates directly.
    * 'CUBE': Cube, Map using the normal vector.
    * 'TUBE': Tube, Map with Z as central axis.
    * 'SPHERE': Sphere, Map with Z as central axis.
    (type: enum in ['FLAT', 'CUBE', 'TUBE', 'SPHERE'], default 'FLAT')
    
    :type: str
    """

    mapping_x = 'NONE'
    """(type: enum in ['NONE', 'X', 'Y', 'Z'], default 'NONE')
    
    :type: str
    """

    mapping_y = 'NONE'
    """(type: enum in ['NONE', 'X', 'Y', 'Z'], default 'NONE')
    
    :type: str
    """

    mapping_z = 'NONE'
    """(type: enum in ['NONE', 'X', 'Y', 'Z'], default 'NONE')
    
    :type: str
    """

    texture_coords = 'WINDOW'
    """Texture coordinates used to map the texture onto the background
    * 'WINDOW': Window, Use screen coordinates as texture coordinates.
    * 'GLOBAL': Global, Use global coordinates for the texture coordinates.
    * 'ALONG_STROKE': Along stroke, Use stroke length for texture coordinates.
    * 'ORCO': Generated, Use the original undeformed coordinates of the object.
    (type: enum in ['WINDOW', 'GLOBAL', 'ALONG_STROKE', 'ORCO'], default 'WINDOW')
    
    :type: str
    """

    use_map_alpha = False
    """The texture affects the alpha value
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_color_diffuse = False
    """The texture affects basic color of the stroke
    (type: boolean, default False)
    
    :type: bool
    """

    use_tips = False
    """Lower half of the texture is for tips of the stroke
    (type: boolean, default False)
    
    :type: bool
    """


class LineStyleThicknessModifier(LineStyleModifier):
    """Base type to define line thickness modifiers"""


class LocRotScale(KeyingSetInfo):
    """"""

    def generate(self, context, ks, data):
        """"""

    def iterator(self, ksi, context, ks):
        """"""

    def poll(self, ksi, context):
        """"""


class Location(KeyingSetInfo):
    """"""

    def generate(self, ksi, context, ks, data):
        """"""

    def iterator(self, ksi, context, ks):
        """"""

    def poll(self, ksi, context):
        """"""


class LockedTrackConstraint(Constraint):
    """Point toward the target along the track axis, while locking the other axis"""

    head_tail = 0.0
    """Target along length of bone: Head=0, Tail=1
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    lock_axis = 'LOCK_X'
    """Axis that points upward
    (type: enum in ['LOCK_X', 'LOCK_Y', 'LOCK_Z'], default 'LOCK_X')
    
    :type: str
    """

    subtarget = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    target = None
    """Target Object
    (type: bpy.types.Object)
    
    :type: Object
    """

    track_axis = 'TRACK_X'
    """Axis that points to the target object
    (type: enum in ['TRACK_X', 'TRACK_Y', 'TRACK_Z', 'TRACK_NEGATIVE_X', 'TRACK_NEGATIVE_Y', 'TRACK_NEGATIVE_Z'], default 'TRACK_X')
    
    :type: str
    """

    use_bbone_shape = False
    """Follow shape of B-Bone segments when calculating Head/Tail position
    (type: boolean, default False)
    
    :type: bool
    """


class MASK_UL_layers(UIList):
    """"""

    def draw_item(self, context, layout, data, item, icon, active_data, active_propname, index):
        """"""


class MATERIAL_UL_matslots(UIList):
    """"""

    def draw_item(self, context, layout, data, item, icon, active_data, active_propname, index):
        """"""


class MESH_UL_shape_keys(UIList):
    """"""

    def draw_item(self, context, layout, data, item, icon, active_data, active_propname, index):
        """"""


class MESH_UL_uvmaps_vcols(UIList):
    """"""

    def draw_item(self, context, layout, data, item, icon, active_data, active_propname, index):
        """"""


class MESH_UL_vgroups(UIList):
    """"""

    def draw_item(self, context, layout, data, item, icon, active_data, active_propname, index):
        """"""


class MaintainVolumeConstraint(Constraint):
    """Maintain a constant volume along a single scaling axis"""

    free_axis = 'SAMEVOL_X'
    """The free scaling axis of the object
    (type: enum in ['SAMEVOL_X', 'SAMEVOL_Y', 'SAMEVOL_Z'], default 'SAMEVOL_X')
    
    :type: str
    """

    volume = 0.0
    """Volume of the bone at rest
    (type: float in [0.001, 100], default 0.0)
    
    :type: float
    """


class Mask(ID):
    """Mask data-block defining mask for compositing"""

    active_layer_index = 0
    """Index of active layer in list of all mask's layers
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    animation_data = None
    """Animation data for this data-block
    (type: bpy.types.AnimData, (readonly))
    
    :type: AnimData
    """

    frame_end = 0
    """Final frame of the mask (used for sequencer)
    (type: int in [0, 500000], default 0)
    
    :type: int
    """

    frame_start = 0
    """First frame of the mask (used for sequencer)
    (type: int in [0, 500000], default 0)
    
    :type: int
    """

    layers = None
    """Collection of layers which defines this mask
    (type: bpy.types.MaskLayers bpy.types.bpy_prop_collection of bpy.types.MaskLayer, (readonly))
    
    :type: MaskLayers
    """


class MaskModifier(Modifier):
    """Mask modifier to hide parts of the mesh"""

    armature = None
    """Armature to use as source of bones to mask
    (type: bpy.types.Object)
    
    :type: Object
    """

    invert_vertex_group = False
    """Use vertices that are not part of region defined
    (type: boolean, default False)
    
    :type: bool
    """

    mode = 'VERTEX_GROUP'
    """(type: enum in ['VERTEX_GROUP', 'ARMATURE'], default 'VERTEX_GROUP')
    
    :type: str
    """

    vertex_group = ""
    """Vertex group name
    (type: string, default "", (never None))
    
    :type: str
    """


class MaskSequence(Sequence):
    """Sequence strip to load a video from a mask"""

    alpha_mode = 'STRAIGHT'
    """Representation of alpha information in the RGBA pixels
    * 'STRAIGHT': Straight, RGB channels in transparent pixels are unaffected by the alpha channel.
    * 'PREMUL': Premultiplied, RGB channels in transparent pixels are multiplied by the alpha channel.
    (type: enum in ['STRAIGHT', 'PREMUL'], default 'STRAIGHT')
    
    :type: str
    """

    animation_offset_end = 0
    """Animation end offset (trim end)
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    animation_offset_start = 0
    """Animation start offset (trim start)
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    color_multiply = 1.0
    """(type: float in [0, 20], default 1.0)
    
    :type: float
    """

    color_saturation = 1.0
    """(type: float in [0, 20], default 1.0)
    
    :type: float
    """

    crop = None
    """(type: bpy.types.SequenceCrop, (readonly))
    
    :type: SequenceCrop
    """

    mask = None
    """Mask that this sequence uses
    (type: bpy.types.Mask)
    
    :type: Mask
    """

    strobe = 0.0
    """Only display every nth frame
    (type: float in [1, 30], default 0.0)
    
    :type: float
    """

    transform = None
    """(type: bpy.types.SequenceTransform, (readonly))
    
    :type: SequenceTransform
    """

    use_crop = False
    """Crop image before processing
    (type: boolean, default False)
    
    :type: bool
    """

    use_deinterlace = False
    """Remove fields from video movies
    (type: boolean, default False)
    
    :type: bool
    """

    use_flip_x = False
    """Flip on the X axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_flip_y = False
    """Flip on the Y axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_float = False
    """Convert input to float data
    (type: boolean, default False)
    
    :type: bool
    """

    use_reverse_frames = False
    """Reverse frame order
    (type: boolean, default False)
    
    :type: bool
    """

    use_translation = False
    """Translate image before processing
    (type: boolean, default False)
    
    :type: bool
    """


class Material(ID):
    """Material data-block to define the appearance of geometric objects for rendering"""

    active_node_material = None
    """Active node material
    (type: bpy.types.Material)
    
    :type: Material
    """

    active_texture = None
    """Active texture slot being displayed
    (type: bpy.types.Texture)
    
    :type: Texture
    """

    active_texture_index = 0
    """Index of active texture slot
    (type: int in [0, 17], default 0)
    
    :type: int
    """

    alpha = 0.0
    """Alpha transparency of the material
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    ambient = 0.0
    """Amount of global ambient color the material receives
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    animation_data = None
    """Animation data for this data-block
    (type: bpy.types.AnimData, (readonly))
    
    :type: AnimData
    """

    darkness = 0.0
    """Minnaert darkness
    (type: float in [0, 2], default 0.0)
    
    :type: float
    """

    diffuse_color = (0.0, 0.0, 0.0)
    """Diffuse color of the material
    (type: float array of 3 items in [0, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    diffuse_fresnel = 0.0
    """Power of Fresnel
    (type: float in [0, 5], default 0.0)
    
    :type: float
    """

    diffuse_fresnel_factor = 0.0
    """Blending factor of Fresnel
    (type: float in [0, 5], default 0.0)
    
    :type: float
    """

    diffuse_intensity = 0.0
    """Amount of diffuse reflection
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    diffuse_ramp = None
    """Color ramp used to affect diffuse shading
    (type: bpy.types.ColorRamp, (readonly))
    
    :type: ColorRamp
    """

    diffuse_ramp_blend = 'MIX'
    """Blending method of the ramp and the diffuse color
    (type: enum in ['MIX', 'ADD', 'MULTIPLY', 'SUBTRACT', 'SCREEN', 'DIVIDE', 'DIFFERENCE', 'DARKEN', 'LIGHTEN', 'OVERLAY', 'DODGE', 'BURN', 'HUE', 'SATURATION', 'VALUE', 'COLOR', 'SOFT_LIGHT', 'LINEAR_LIGHT'], default 'MIX')
    
    :type: str
    """

    diffuse_ramp_factor = 0.0
    """Blending factor (also uses alpha in Colorband)
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    diffuse_ramp_input = 'SHADER'
    """How the ramp maps on the surface
    (type: enum in ['SHADER', 'ENERGY', 'NORMAL', 'RESULT'], default 'SHADER')
    
    :type: str
    """

    diffuse_shader = 'LAMBERT'
    """
    * 'LAMBERT': Lambert, Use a Lambertian shader.
    * 'OREN_NAYAR': Oren-Nayar, Use an Oren-Nayar shader.
    * 'TOON': Toon, Use a toon shader.
    * 'MINNAERT': Minnaert, Use a Minnaert shader.
    * 'FRESNEL': Fresnel, Use a Fresnel shader.
    (type: enum in ['LAMBERT', 'OREN_NAYAR', 'TOON', 'MINNAERT', 'FRESNEL'], default 'LAMBERT')
    
    :type: str
    """

    diffuse_toon_size = 0.0
    """Size of diffuse toon area
    (type: float in [0, 3.14], default 0.0)
    
    :type: float
    """

    diffuse_toon_smooth = 0.0
    """Smoothness of diffuse toon area
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    emit = 0.0
    """Amount of light to emit
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    game_settings = None
    """Game material settings
    (type: bpy.types.MaterialGameSettings, (readonly, never None))
    
    :type: MaterialGameSettings
    """

    halo = None
    """Halo settings for the material
    (type: bpy.types.MaterialHalo, (readonly, never None))
    
    :type: MaterialHalo
    """

    invert_z = False
    """Render material's faces with an inverted Z buffer (scanline only)
    (type: boolean, default False)
    
    :type: bool
    """

    light_group = None
    """Limit lighting to lamps in this Group
    (type: bpy.types.Group)
    
    :type: Group
    """

    line_color = (0.0, 0.0, 0.0, 0.0)
    """Line color used for Freestyle line rendering
    (type: float array of 4 items in [0, inf], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    line_priority = 0
    """The line color of a higher priority is used at material boundaries
    (type: int in [0, 32767], default 0)
    
    :type: int
    """

    mirror_color = (0.0, 0.0, 0.0)
    """Mirror color of the material
    (type: float array of 3 items in [0, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    node_tree = None
    """Node tree for node based materials
    (type: bpy.types.NodeTree, (readonly))
    
    :type: NodeTree
    """

    offset_z = 0.0
    """Give faces an artificial offset in the Z buffer for Z transparency
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    paint_active_slot = 0
    """Index of active texture paint slot
    (type: int in [0, 32767], default 0)
    
    :type: int
    """

    paint_clone_slot = 0
    """Index of clone texture paint slot
    (type: int in [0, 32767], default 0)
    
    :type: int
    """

    pass_index = 0
    """Index number for the "Material Index" render pass
    (type: int in [0, 32767], default 0)
    
    :type: int
    """

    physics = None
    """Game physics settings
    (type: bpy.types.MaterialPhysics, (readonly, never None))
    
    :type: MaterialPhysics
    """

    preview_render_type = 'FLAT'
    """Type of preview render
    * 'FLAT': Flat, Flat XY plane.
    * 'SPHERE': Sphere, Sphere.
    * 'CUBE': Cube, Cube.
    * 'MONKEY': Monkey, Monkey.
    * 'HAIR': Hair, Hair strands.
    * 'SPHERE_A': World Sphere, Large sphere with sky.
    (type: enum in ['FLAT', 'SPHERE', 'CUBE', 'MONKEY', 'HAIR', 'SPHERE_A'], default 'FLAT')
    
    :type: str
    """

    raytrace_mirror = None
    """Raytraced reflection settings for the material
    (type: bpy.types.MaterialRaytraceMirror, (readonly, never None))
    
    :type: MaterialRaytraceMirror
    """

    raytrace_transparency = None
    """Raytraced transparency settings for the material
    (type: bpy.types.MaterialRaytraceTransparency, (readonly, never None))
    
    :type: MaterialRaytraceTransparency
    """

    roughness = 0.0
    """Oren-Nayar Roughness
    (type: float in [0, 3.14], default 0.0)
    
    :type: float
    """

    shadow_buffer_bias = 0.0
    """Factor to multiply shadow buffer bias with (0 is ignore)
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    shadow_cast_alpha = 0.0
    """Shadow casting alpha, in use for Irregular and Deep shadow buffer
    (type: float in [0.001, 1], default 0.0)
    
    :type: float
    """

    shadow_only_type = 'SHADOW_ONLY_OLD'
    """How to draw shadows
    * 'SHADOW_ONLY_OLD': Shadow and Distance, Old shadow only method.
    * 'SHADOW_ONLY': Shadow Only, Improved shadow only method.
    * 'SHADOW_ONLY_SHADED': Shadow and Shading, Improved shadow only method which also renders lightless areas as shadows.
    (type: enum in ['SHADOW_ONLY_OLD', 'SHADOW_ONLY', 'SHADOW_ONLY_SHADED'], default 'SHADOW_ONLY_OLD')
    
    :type: str
    """

    shadow_ray_bias = 0.0
    """Shadow raytracing bias to prevent terminator problems on shadow boundary
    (type: float in [0, 0.25], default 0.0)
    
    :type: float
    """

    specular_alpha = 0.0
    """Alpha transparency for specular areas
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    specular_color = (0.0, 0.0, 0.0)
    """Specular color of the material
    (type: float array of 3 items in [0, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    specular_hardness = 0
    """How hard (sharp) the specular reflection is
    (type: int in [1, 511], default 0)
    
    :type: int
    """

    specular_intensity = 0.0
    """How intense (bright) the specular reflection is
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    specular_ior = 0.0
    """Specular index of refraction
    (type: float in [1, 10], default 0.0)
    
    :type: float
    """

    specular_ramp = None
    """Color ramp used to affect specular shading
    (type: bpy.types.ColorRamp, (readonly))
    
    :type: ColorRamp
    """

    specular_ramp_blend = 'MIX'
    """Blending method of the ramp and the specular color
    (type: enum in ['MIX', 'ADD', 'MULTIPLY', 'SUBTRACT', 'SCREEN', 'DIVIDE', 'DIFFERENCE', 'DARKEN', 'LIGHTEN', 'OVERLAY', 'DODGE', 'BURN', 'HUE', 'SATURATION', 'VALUE', 'COLOR', 'SOFT_LIGHT', 'LINEAR_LIGHT'], default 'MIX')
    
    :type: str
    """

    specular_ramp_factor = 0.0
    """Blending factor (also uses alpha in Colorband)
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    specular_ramp_input = 'SHADER'
    """How the ramp maps on the surface
    (type: enum in ['SHADER', 'ENERGY', 'NORMAL', 'RESULT'], default 'SHADER')
    
    :type: str
    """

    specular_shader = 'COOKTORR'
    """
    * 'COOKTORR': CookTorr, Use a Cook-Torrance shader.
    * 'PHONG': Phong, Use a Phong shader.
    * 'BLINN': Blinn, Use a Blinn shader.
    * 'TOON': Toon, Use a toon shader.
    * 'WARDISO': WardIso, Use a Ward anisotropic shader.
    (type: enum in ['COOKTORR', 'PHONG', 'BLINN', 'TOON', 'WARDISO'], default 'COOKTORR')
    
    :type: str
    """

    specular_slope = 0.0
    """The standard deviation of surface slope
    (type: float in [0, 0.4], default 0.0)
    
    :type: float
    """

    specular_toon_size = 0.0
    """Size of specular toon area
    (type: float in [0, 1.53], default 0.0)
    
    :type: float
    """

    specular_toon_smooth = 0.0
    """Smoothness of specular toon area
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    strand = None
    """Strand settings for the material
    (type: bpy.types.MaterialStrand, (readonly, never None))
    
    :type: MaterialStrand
    """

    subsurface_scattering = None
    """Subsurface scattering settings for the material
    (type: bpy.types.MaterialSubsurfaceScattering, (readonly, never None))
    
    :type: MaterialSubsurfaceScattering
    """

    texture_paint_images = None
    """Texture images used for texture painting
    (type: bpy.types.bpy_prop_collection of bpy.types.Image, (readonly))
    
    :type: bpy_prop_collection
    """

    texture_paint_slots = None
    """Texture slots defining the mapping and influence of textures
    (type: bpy.types.bpy_prop_collection of bpy.types.TexPaintSlot, (readonly))
    
    :type: bpy_prop_collection
    """

    texture_slots = None
    """Texture slots defining the mapping and influence of textures
    (type: bpy.types.MaterialTextureSlots bpy.types.bpy_prop_collection of bpy.types.MaterialTextureSlot, (readonly))
    
    :type: MaterialTextureSlots
    """

    translucency = 0.0
    """Amount of diffuse shading on the back side
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    transparency_method = 'MASK'
    """Method to use for rendering transparency
    * 'MASK': Mask, Mask the background.
    * 'Z_TRANSPARENCY': Z Transparency, Use alpha buffer for transparent faces.
    * 'RAYTRACE': Raytrace, Use raytracing for transparent refraction rendering.
    (type: enum in ['MASK', 'Z_TRANSPARENCY', 'RAYTRACE'], default 'MASK')
    
    :type: str
    """

    type = 'SURFACE'
    """Material type defining how the object is rendered
    * 'SURFACE': Surface, Render object as a surface.
    * 'WIRE': Wire, Render the edges of faces as wires (not supported in raytracing).
    * 'VOLUME': Volume, Render object as a volume.
    * 'HALO': Halo, Render object as halo particles.
    (type: enum in ['SURFACE', 'WIRE', 'VOLUME', 'HALO'], default 'SURFACE')
    
    :type: str
    """

    use_cast_approximate = False
    """Allow this material to cast shadows when using approximate ambient occlusion
    (type: boolean, default False)
    
    :type: bool
    """

    use_cast_buffer_shadows = False
    """Allow this material to cast shadows from shadow buffer lamps
    (type: boolean, default False)
    
    :type: bool
    """

    use_cast_shadows = False
    """Allow this material to cast shadows
    (type: boolean, default False)
    
    :type: bool
    """

    use_cast_shadows_only = False
    """Make objects with this material appear invisible (not rendered), only casting shadows
    (type: boolean, default False)
    
    :type: bool
    """

    use_cubic = False
    """Use cubic interpolation for diffuse values, for smoother transitions
    (type: boolean, default False)
    
    :type: bool
    """

    use_diffuse_ramp = False
    """Toggle diffuse ramp operations
    (type: boolean, default False)
    
    :type: bool
    """

    use_face_texture = False
    """Replace the object's base color with color from UV map image textures
    (type: boolean, default False)
    
    :type: bool
    """

    use_face_texture_alpha = False
    """Replace the object's base alpha value with alpha from UV map image textures
    (type: boolean, default False)
    
    :type: bool
    """

    use_full_oversampling = False
    """Force this material to render full shading/textures for all anti-aliasing samples
    (type: boolean, default False)
    
    :type: bool
    """

    use_light_group_exclusive = False
    """Material uses the light group exclusively - these lamps are excluded from other scene lighting
    (type: boolean, default False)
    
    :type: bool
    """

    use_light_group_local = False
    """When linked in, material uses local light group with the same name
    (type: boolean, default False)
    
    :type: bool
    """

    use_mist = False
    """Use mist with this material (in world settings)
    (type: boolean, default False)
    
    :type: bool
    """

    use_nodes = False
    """Use shader nodes to render the material
    (type: boolean, default False)
    
    :type: bool
    """

    use_object_color = False
    """Modulate the result with a per-object color
    (type: boolean, default False)
    
    :type: bool
    """

    use_only_shadow = False
    """Render shadows as the material's alpha value, making the material transparent except for shadowed areas
    (type: boolean, default False)
    
    :type: bool
    """

    use_ray_shadow_bias = False
    """Prevent raytraced shadow errors on surfaces with smooth shaded normals (terminator problem)
    (type: boolean, default False)
    
    :type: bool
    """

    use_raytrace = False
    """Include this material and geometry that uses it in raytracing calculations
    (type: boolean, default False)
    
    :type: bool
    """

    use_shadeless = False
    """Make this material insensitive to light or shadow
    (type: boolean, default False)
    
    :type: bool
    """

    use_shadows = False
    """Allow this material to receive shadows
    (type: boolean, default False)
    
    :type: bool
    """

    use_sky = False
    """Render this material with zero alpha, with sky background in place (scanline only)
    (type: boolean, default False)
    
    :type: bool
    """

    use_specular_ramp = False
    """Toggle specular ramp operations
    (type: boolean, default False)
    
    :type: bool
    """

    use_tangent_shading = False
    """Use the material's tangent vector instead of the normal for shading - for anisotropic shading effects
    (type: boolean, default False)
    
    :type: bool
    """

    use_textures = (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
    """Enable/Disable each texture
    (type: boolean array of 18 items, default (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False))
    
    :type: collections.Sequence[bool]
    """

    use_transparency = False
    """Render material as transparent
    (type: boolean, default False)
    
    :type: bool
    """

    use_transparent_shadows = False
    """Allow this object to receive transparent shadows cast through other objects
    (type: boolean, default False)
    
    :type: bool
    """

    use_uv_project = False
    """Use to ensure UV interpolation is correct for camera projections (use with UV project modifier)
    (type: boolean, default False)
    
    :type: bool
    """

    use_vertex_color_light = False
    """Add vertex colors as additional lighting
    (type: boolean, default False)
    
    :type: bool
    """

    use_vertex_color_paint = False
    """Replace object base color with vertex colors (multiply with 'texture face' face assigned textures)
    (type: boolean, default False)
    
    :type: bool
    """

    volume = None
    """Volume settings for the material
    (type: bpy.types.MaterialVolume, (readonly, never None))
    
    :type: MaterialVolume
    """


class MaterialTextureSlot(TextureSlot):
    """Texture slot for textures in a Material data-block"""

    alpha_factor = 0.0
    """Amount texture affects alpha
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    ambient_factor = 0.0
    """Amount texture affects ambient
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    bump_method = 'BUMP_ORIGINAL'
    """Method to use for bump mapping
    * 'BUMP_ORIGINAL': Original.
    * 'BUMP_COMPATIBLE': Compatible.
    * 'BUMP_LOW_QUALITY': Low Quality, Use 3 tap filtering.
    * 'BUMP_MEDIUM_QUALITY': Medium Quality, Use 5 tap filtering.
    * 'BUMP_BEST_QUALITY': Best Quality, Use bicubic filtering (requires OpenGL 3.0+, it will fall back on medium setting for other systems).
    (type: enum in ['BUMP_ORIGINAL', 'BUMP_COMPATIBLE', 'BUMP_LOW_QUALITY', 'BUMP_MEDIUM_QUALITY', 'BUMP_BEST_QUALITY'], default 'BUMP_ORIGINAL')
    
    :type: str
    """

    bump_objectspace = 'BUMP_VIEWSPACE'
    """Space to apply bump mapping in
    (type: enum in ['BUMP_VIEWSPACE', 'BUMP_OBJECTSPACE', 'BUMP_TEXTURESPACE'], default 'BUMP_VIEWSPACE')
    
    :type: str
    """

    density_factor = 0.0
    """Amount texture affects density
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    diffuse_color_factor = 0.0
    """Amount texture affects diffuse color
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    diffuse_factor = 0.0
    """Amount texture affects diffuse reflectivity
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    displacement_factor = 0.0
    """Amount texture displaces the surface
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    emission_color_factor = 0.0
    """Amount texture affects emission color
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    emission_factor = 0.0
    """Amount texture affects emission
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    emit_factor = 0.0
    """Amount texture affects emission
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    hardness_factor = 0.0
    """Amount texture affects hardness
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    mapping = 'FLAT'
    """
    * 'FLAT': Flat, Map X and Y coordinates directly.
    * 'CUBE': Cube, Map using the normal vector.
    * 'TUBE': Tube, Map with Z as central axis.
    * 'SPHERE': Sphere, Map with Z as central axis.
    (type: enum in ['FLAT', 'CUBE', 'TUBE', 'SPHERE'], default 'FLAT')
    
    :type: str
    """

    mapping_x = 'NONE'
    """(type: enum in ['NONE', 'X', 'Y', 'Z'], default 'NONE')
    
    :type: str
    """

    mapping_y = 'NONE'
    """(type: enum in ['NONE', 'X', 'Y', 'Z'], default 'NONE')
    
    :type: str
    """

    mapping_z = 'NONE'
    """(type: enum in ['NONE', 'X', 'Y', 'Z'], default 'NONE')
    
    :type: str
    """

    mirror_factor = 0.0
    """Amount texture affects mirror color
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    normal_factor = 0.0
    """Amount texture affects normal values
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    normal_map_space = 'CAMERA'
    """Set space of normal map image
    (type: enum in ['CAMERA', 'WORLD', 'OBJECT', 'TANGENT'], default 'CAMERA')
    
    :type: str
    """

    object = None
    """Object to use for mapping with Object texture coordinates
    (type: bpy.types.Object)
    
    :type: Object
    """

    raymir_factor = 0.0
    """Amount texture affects ray mirror
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    reflection_color_factor = 0.0
    """Amount texture affects color of out-scattered light
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    reflection_factor = 0.0
    """Amount texture affects brightness of out-scattered light
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    scattering_factor = 0.0
    """Amount texture affects scattering
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    specular_color_factor = 0.0
    """Amount texture affects specular color
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    specular_factor = 0.0
    """Amount texture affects specular reflectivity
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    texture_coords = 'GLOBAL'
    """
    * 'GLOBAL': Global, Use global coordinates for the texture coordinates.
    * 'OBJECT': Object, Use linked object's coordinates for texture coordinates.
    * 'UV': UV, Use UV coordinates for texture coordinates.
    * 'ORCO': Generated, Use the original undeformed coordinates of the object.
    * 'STRAND': Strand / Particle, Use normalized strand texture coordinate (1D) or particle age (X) and trail position (Y).
    * 'WINDOW': Window, Use screen coordinates as texture coordinates.
    * 'NORMAL': Normal, Use normal vector as texture coordinates.
    * 'REFLECTION': Reflection, Use reflection vector as texture coordinates.
    * 'STRESS': Stress, Use the difference of edge lengths compared to original coordinates of the mesh.
    * 'TANGENT': Tangent, Use the optional tangent vector as texture coordinates.
    (type: enum in ['GLOBAL', 'OBJECT', 'UV', 'ORCO', 'STRAND', 'WINDOW', 'NORMAL', 'REFLECTION', 'STRESS', 'TANGENT'], default 'GLOBAL')
    
    :type: str
    """

    translucency_factor = 0.0
    """Amount texture affects translucency
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    transmission_color_factor = 0.0
    """Amount texture affects result color after light has been scattered/absorbed
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    use = False
    """Enable this material texture slot
    (type: boolean, default False)
    
    :type: bool
    """

    use_from_dupli = False
    """Dupli's instanced from verts, faces or particles, inherit texture coordinate from their parent
    (type: boolean, default False)
    
    :type: bool
    """

    use_from_original = False
    """Dupli's derive their object coordinates from the original object's transformation
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_alpha = False
    """The texture affects the alpha value
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_ambient = False
    """The texture affects the value of ambient
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_color_diffuse = False
    """The texture affects basic color of the material
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_color_emission = False
    """The texture affects the color of emission
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_color_reflection = False
    """The texture affects the color of scattered light
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_color_spec = False
    """The texture affects the specularity color
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_color_transmission = False
    """The texture affects the result color after other light has been scattered/absorbed
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_density = False
    """The texture affects the volume's density
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_diffuse = False
    """The texture affects the value of diffuse reflectivity
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_displacement = False
    """Let the texture displace the surface
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_emission = False
    """The texture affects the volume's emission
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_emit = False
    """The texture affects the emit value
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_hardness = False
    """The texture affects the hardness value
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_mirror = False
    """The texture affects the mirror color
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_normal = False
    """The texture affects the rendered normal
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_raymir = False
    """The texture affects the ray-mirror value
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_reflect = False
    """The texture affects the reflected light's brightness
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_scatter = False
    """The texture affects the volume's scattering
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_specular = False
    """The texture affects the value of specular reflectivity
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_to_bounds = False
    """Map coordinates in object bounds
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_translucency = False
    """The texture affects the translucency value
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_warp = False
    """Let the texture warp texture coordinates of next channels
    (type: boolean, default False)
    
    :type: bool
    """

    uv_layer = ""
    """UV map to use for mapping with UV texture coordinates
    (type: string, default "", (never None))
    
    :type: str
    """

    warp_factor = 0.0
    """Amount texture affects texture coordinates of next channels
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """


class Mesh(ID):
    """Mesh data-block defining geometric surfaces"""

    animation_data = None
    """Animation data for this data-block
    (type: bpy.types.AnimData, (readonly))
    
    :type: AnimData
    """

    auto_smooth_angle = 3.14159
    """Maximum angle between face normals that will be considered as smooth (unused if custom split normals data are available)
    (type: float in [0, 3.14159], default 3.14159)
    
    :type: float
    """

    auto_texspace = False
    """Adjust active object's texture space automatically when transforming object
    (type: boolean, default False)
    
    :type: bool
    """

    edges = None
    """Edges of the mesh
    (type: bpy.types.MeshEdges bpy.types.bpy_prop_collection of bpy.types.MeshEdge, (readonly))
    
    :type: MeshEdges
    """

    has_custom_normals = False
    """True if there are custom split normals data in this mesh
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_editmode = False
    """True when used in editmode
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    loops = None
    """Loops of the mesh (polygon corners)
    (type: bpy.types.MeshLoops bpy.types.bpy_prop_collection of bpy.types.MeshLoop, (readonly))
    
    :type: MeshLoops
    """

    materials = None
    """(type: bpy.types.IDMaterials bpy.types.bpy_prop_collection of bpy.types.Material, (readonly))
    
    :type: IDMaterials
    """

    polygon_layers_float = None
    """(type: bpy.types.PolygonFloatProperties bpy.types.bpy_prop_collection of bpy.types.MeshPolygonFloatPropertyLayer, (readonly))
    
    :type: PolygonFloatProperties
    """

    polygon_layers_int = None
    """(type: bpy.types.PolygonIntProperties bpy.types.bpy_prop_collection of bpy.types.MeshPolygonIntPropertyLayer, (readonly))
    
    :type: PolygonIntProperties
    """

    polygon_layers_string = None
    """(type: bpy.types.PolygonStringProperties bpy.types.bpy_prop_collection of bpy.types.MeshPolygonStringPropertyLayer, (readonly))
    
    :type: PolygonStringProperties
    """

    polygons = None
    """Polygons of the mesh
    (type: bpy.types.MeshPolygons bpy.types.bpy_prop_collection of bpy.types.MeshPolygon, (readonly))
    
    :type: MeshPolygons
    """

    shape_keys = None
    """(type: bpy.types.Key, (readonly))
    
    :type: Key
    """

    show_double_sided = False
    """Display the mesh with double or single sided lighting (OpenGL only)
    (type: boolean, default False)
    
    :type: bool
    """

    show_edge_bevel_weight = False
    """Display weights created for the Bevel modifier
    (type: boolean, default False)
    
    :type: bool
    """

    show_edge_crease = False
    """Display creases created for Subdivision Surface modifier
    (type: boolean, default False)
    
    :type: bool
    """

    show_edge_seams = False
    """Display UV unwrapping seams
    (type: boolean, default False)
    
    :type: bool
    """

    show_edge_sharp = False
    """Display sharp edges, used with the Edge Split modifier
    (type: boolean, default False)
    
    :type: bool
    """

    show_edges = False
    """Display selected edges using highlights in the 3D view and UV editor
    (type: boolean, default False)
    
    :type: bool
    """

    show_extra_edge_angle = False
    """Display selected edge angle, using global values when set in the transform panel
    (type: boolean, default False)
    
    :type: bool
    """

    show_extra_edge_length = False
    """Display selected edge lengths, using global values when set in the transform panel
    (type: boolean, default False)
    
    :type: bool
    """

    show_extra_face_angle = False
    """Display the angles in the selected edges, using global values when set in the transform panel
    (type: boolean, default False)
    
    :type: bool
    """

    show_extra_face_area = False
    """Display the area of selected faces, using global values when set in the transform panel
    (type: boolean, default False)
    
    :type: bool
    """

    show_extra_indices = False
    """Display the index numbers of selected vertices, edges, and faces
    (type: boolean, default False)
    
    :type: bool
    """

    show_faces = False
    """Display all faces as shades in the 3D view and UV editor
    (type: boolean, default False)
    
    :type: bool
    """

    show_freestyle_edge_marks = False
    """Display Freestyle edge marks, used with the Freestyle renderer
    (type: boolean, default False)
    
    :type: bool
    """

    show_freestyle_face_marks = False
    """Display Freestyle face marks, used with the Freestyle renderer
    (type: boolean, default False)
    
    :type: bool
    """

    show_normal_face = False
    """Display face normals as lines
    (type: boolean, default False)
    
    :type: bool
    """

    show_normal_loop = False
    """Display vertex-per-face normals as lines
    (type: boolean, default False)
    
    :type: bool
    """

    show_normal_vertex = False
    """Display vertex normals as lines
    (type: boolean, default False)
    
    :type: bool
    """

    show_statvis = False
    """Display statistical information about the mesh
    (type: boolean, default False)
    
    :type: bool
    """

    show_weight = False
    """Draw weights in editmode
    (type: boolean, default False)
    
    :type: bool
    """

    skin_vertices = None
    """All skin vertices
    (type: bpy.types.bpy_prop_collection of bpy.types.MeshSkinVertexLayer, (readonly))
    
    :type: bpy_prop_collection
    """

    tessface_uv_textures = None
    """All UV maps for tessellated faces (read-only, for use by renderers)
    (type: bpy.types.TessfaceUVTextures bpy.types.bpy_prop_collection of bpy.types.MeshTextureFaceLayer, (readonly))
    
    :type: TessfaceUVTextures
    """

    tessface_vertex_colors = None
    """All tessellated face colors (read-only, for use by renderers)
    (type: bpy.types.VertexColors bpy.types.bpy_prop_collection of bpy.types.MeshColorLayer, (readonly))
    
    :type: VertexColors
    """

    tessfaces = None
    """Tessellated faces of the mesh (derived from polygons)
    (type: bpy.types.MeshTessFaces bpy.types.bpy_prop_collection of bpy.types.MeshTessFace, (readonly))
    
    :type: MeshTessFaces
    """

    texco_mesh = None
    """Derive texture coordinates from another mesh
    (type: bpy.types.Mesh)
    
    :type: Mesh
    """

    texspace_location = (0.0, 0.0, 0.0)
    """Texture space location
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    texspace_size = (0.0, 0.0, 0.0)
    """Texture space size
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    texture_mesh = None
    """Use another mesh for texture indices (vertex indices must be aligned)
    (type: bpy.types.Mesh)
    
    :type: Mesh
    """

    total_edge_sel = 0
    """Selected edge count in editmode
    (type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """

    total_face_sel = 0
    """Selected face count in editmode
    (type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """

    total_vert_sel = 0
    """Selected vertex count in editmode
    (type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """

    use_auto_smooth = False
    """Auto smooth (based on smooth/sharp faces/edges and angle between faces), or use custom split normals data if available
    (type: boolean, default False)
    
    :type: bool
    """

    use_auto_texspace = False
    """Adjust active object's texture space automatically when transforming object
    (type: boolean, default False)
    
    :type: bool
    """

    use_customdata_edge_bevel = False
    """(type: boolean, default False)
    
    :type: bool
    """

    use_customdata_edge_crease = False
    """(type: boolean, default False)
    
    :type: bool
    """

    use_customdata_vertex_bevel = False
    """(type: boolean, default False)
    
    :type: bool
    """

    use_mirror_topology = False
    """Use topology based mirroring (for when both sides of mesh have matching, unique topology)
    (type: boolean, default False)
    
    :type: bool
    """

    use_mirror_x = False
    """X Axis mirror editing
    (type: boolean, default False)
    
    :type: bool
    """

    use_paint_mask = False
    """Face selection masking for painting
    (type: boolean, default False)
    
    :type: bool
    """

    use_paint_mask_vertex = False
    """Vertex selection masking for painting (weight paint only)
    (type: boolean, default False)
    
    :type: bool
    """

    uv_layer_clone = None
    """UV loop layer to be used as cloning source
    (type: bpy.types.MeshUVLoopLayer)
    
    :type: MeshUVLoopLayer
    """

    uv_layer_clone_index = 0
    """Clone UV loop layer index
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    uv_layer_stencil = None
    """UV loop layer to mask the painted area
    (type: bpy.types.MeshUVLoopLayer)
    
    :type: MeshUVLoopLayer
    """

    uv_layer_stencil_index = 0
    """Mask UV loop layer index
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    uv_layers = None
    """All UV loop layers
    (type: bpy.types.UVLoopLayers bpy.types.bpy_prop_collection of bpy.types.MeshUVLoopLayer, (readonly))
    
    :type: UVLoopLayers
    """

    uv_texture_clone = None
    """UV map to be used as cloning source
    (type: bpy.types.MeshTexturePolyLayer)
    
    :type: MeshTexturePolyLayer
    """

    uv_texture_clone_index = 0
    """Clone UV map index
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    uv_texture_stencil = None
    """UV map to mask the painted area
    (type: bpy.types.MeshTexturePolyLayer)
    
    :type: MeshTexturePolyLayer
    """

    uv_texture_stencil_index = 0
    """Mask UV map index
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    uv_textures = None
    """All UV maps
    (type: bpy.types.UVTextures bpy.types.bpy_prop_collection of bpy.types.MeshTexturePolyLayer, (readonly))
    
    :type: UVTextures
    """

    vertex_colors = None
    """All vertex colors
    (type: bpy.types.LoopColors bpy.types.bpy_prop_collection of bpy.types.MeshLoopColorLayer, (readonly))
    
    :type: LoopColors
    """

    vertex_layers_float = None
    """(type: bpy.types.VertexFloatProperties bpy.types.bpy_prop_collection of bpy.types.MeshVertexFloatPropertyLayer, (readonly))
    
    :type: VertexFloatProperties
    """

    vertex_layers_int = None
    """(type: bpy.types.VertexIntProperties bpy.types.bpy_prop_collection of bpy.types.MeshVertexIntPropertyLayer, (readonly))
    
    :type: VertexIntProperties
    """

    vertex_layers_string = None
    """(type: bpy.types.VertexStringProperties bpy.types.bpy_prop_collection of bpy.types.MeshVertexStringPropertyLayer, (readonly))
    
    :type: VertexStringProperties
    """

    vertex_paint_masks = None
    """Vertex paint mask
    (type: bpy.types.bpy_prop_collection of bpy.types.MeshPaintMaskLayer, (readonly))
    
    :type: bpy_prop_collection
    """

    vertices = None
    """Vertices of the mesh
    (type: bpy.types.MeshVertices bpy.types.bpy_prop_collection of bpy.types.MeshVertex, (readonly))
    
    :type: MeshVertices
    """

    edge_keys = None
    """(readonly)"""

    def transform(self, matrix, shape_keys=False):
        """Transform mesh vertices by a matrix (Warning: inverts normals if matrix is negative)
        
        :param matrix: Matrix
            (type: float array of 16 items in [-inf, inf])
        :type matrix: mathutils.Matrix
        :param shape_keys: Transform Shape Keys
            (type: boolean, (optional))
        :type shape_keys: bool
        """

    def flip_normals(self):
        """Invert winding of all polygons (clears tessellation, does not handle custom normals)"""

    def calc_normals(self):
        """Calculate vertex normals"""

    def create_normals_split(self):
        """Empty split vertex normals"""

    def calc_normals_split(self):
        """Calculate split vertex normals, which preserve sharp edges"""

    def free_normals_split(self):
        """Free split vertex normals"""

    def split_faces(self, free_loop_normals=True):
        """Split faces based on the edge angle
        
        :param free_loop_normals: Free Loop Notmals, Free loop normals custom data layer
            (type: boolean, (optional))
        :type free_loop_normals: bool
        """

    def calc_tangents(self, uvmap=""):
        """Compute tangents and bitangent signs, to be used together with the split normals to get a complete tangent space for normal mapping (split normals are also computed if not yet present)
        
        :param uvmap: Name of the UV map to use for tangent space computation
            (type: str, (optional, never None))
        :type uvmap: str
        """

    def free_tangents(self):
        """Free tangents"""

    def calc_tessface(self, free_mpoly=False):
        """Calculate face tessellation (supports editmode too)
        
        :param free_mpoly: Free MPoly, Free data used by polygons and loops. WARNING: This destructive operation removes regular faces, only used on temporary mesh data-blocks to reduce memory footprint of render engines and export scripts
            (type: boolean, (optional))
        :type free_mpoly: bool
        """

    def calc_smooth_groups(self, use_bitflags=False):
        """Calculate smooth groups from sharp edges
        
        :param use_bitflags: Produce bitflags groups instead of simple numeric values
            (type: boolean, (optional))
        :type use_bitflags: bool
        :return: (poly_groups, groups)
            poly_groups, Smooth Groups, int array of 1 items in [-inf, inf]
            groups, Total number of groups, int in [0, inf]
        :rtype: tuple
        """

    def normals_split_custom_set(self, normals):
        """Define custom split normals of this mesh (use zero-vectors to keep auto ones)
        
        :param normals: Normals
            (type: float array of 3 items in [-1, 1])
        :type normals: collections.Sequence[float]
        """

    def normals_split_custom_set_from_vertices(self, normals):
        """Define custom split normals of this mesh, from vertices' normals (use zero-vectors to keep auto ones)
        
        :param normals: Normals
            (type: float array of 3 items in [-1, 1])
        :type normals: collections.Sequence[float]
        """

    def update(self, calc_edges=False, calc_tessface=False):
        """update
        
        :param calc_edges: Calculate Edges, Force recalculation of edges
            (type: boolean, (optional))
        :type calc_edges: bool
        :param calc_tessface: Calculate Tessellation, Force recalculation of tessellation faces
            (type: boolean, (optional))
        :type calc_tessface: bool
        """

    def unit_test_compare(self, mesh=None):
        """unit_test_compare
        
        :param mesh: Mesh to compare to
            (type: bpy.types.Mesh, (optional))
        :type mesh: Mesh
        :return: Return value, String description of result of comparison
        :param : (type: string, (never None))
        :rtype: str
        """

    def validate(self, verbose=False, clean_customdata=True):
        """Validate geometry, return True when the mesh has had invalid geometry corrected/removed
        
        :param verbose: Verbose, Output information about the errors found
            (type: boolean, (optional))
        :type verbose: bool
        :param clean_customdata: Clean Custom Data, Remove temp/cached custom-data layers, like e.g. normals...
            (type: boolean, (optional))
        :type clean_customdata: bool
        :return: Result
        :rtype: bool
        """

    def validate_material_indices(self):
        """Validate material indices of polygons, return True when the mesh has had invalid indices corrected (to default 0)
        
        :return: Result
        :rtype: bool
        """

    def from_pydata(self, vertices, edges, faces):
        """Make a mesh from a list of vertices/edges/faces
                                        Until we have a nicer way to make geometry, use this.
        
        :param vertices: float triplets each representing (X, Y, Z)
                                                                eg: [(0.0, 1.0, 0.5), ...].
        :type vertices: iterable object
        :param edges: int pairs, each pair contains two indices to the
                                                                vertices argument. eg: [(1, 2), ...]
        :type edges: iterable object
        :param faces: iterator of faces, each faces contains three or more indices to
                                                                the vertices argument. eg: [(5, 6, 8, 9), (1, 2, 3), ...]
        :type faces: iterable object
        """


class MeshCacheModifier(Modifier):
    """Cache Mesh"""

    cache_format = 'MDD'
    """(type: enum in ['MDD', 'PC2'], default 'MDD')
    
    :type: str
    """

    deform_mode = 'OVERWRITE'
    """
    * 'OVERWRITE': Overwrite, Replace vertex coords with cached values.
    * 'INTEGRATE': Integrate, Integrate deformation from this modifiers input with the mesh-cache coords (useful for shape keys).
    (type: enum in ['OVERWRITE', 'INTEGRATE'], default 'OVERWRITE')
    
    :type: str
    """

    eval_factor = 0.0
    """Evaluation time in seconds
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    eval_frame = 0.0
    """The frame to evaluate (starting at 0)
    (type: float in [0, 500000], default 0.0)
    
    :type: float
    """

    eval_time = 0.0
    """Evaluation time in seconds
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    factor = 0.0
    """Influence of the deformation
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    filepath = ""
    """Path to external displacements file
    (type: string, default "", (never None))
    
    :type: str
    """

    flip_axis = {'X'}
    """(type: enum set in {'X', 'Y', 'Z'}, default {'X'})
    
    :type: enum set in {'X', 'Y', 'Z'}
    """

    forward_axis = 'POS_X'
    """(type: enum in ['POS_X', 'POS_Y', 'POS_Z', 'NEG_X', 'NEG_Y', 'NEG_Z'], default 'POS_X')
    
    :type: str
    """

    frame_scale = 0.0
    """Evaluation time in seconds
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    frame_start = 0.0
    """Add this to the start frame
    (type: float in [-500000, 500000], default 0.0)
    
    :type: float
    """

    interpolation = 'NONE'
    """(type: enum in ['NONE', 'LINEAR'], default 'NONE')
    
    :type: str
    """

    play_mode = 'SCENE'
    """
    * 'SCENE': Scene, Use the time from the scene.
    * 'CUSTOM': Custom, Use the modifier's own time evaluation.
    (type: enum in ['SCENE', 'CUSTOM'], default 'SCENE')
    
    :type: str
    """

    time_mode = 'FRAME'
    """Method to control playback time
    * 'FRAME': Frame, Control playback using a frame-number (ignoring time FPS and start frame from the file).
    * 'TIME': Time, Control playback using time in seconds.
    * 'FACTOR': Factor, Control playback using a value between [0, 1].
    (type: enum in ['FRAME', 'TIME', 'FACTOR'], default 'FRAME')
    
    :type: str
    """

    up_axis = 'POS_X'
    """(type: enum in ['POS_X', 'POS_Y', 'POS_Z', 'NEG_X', 'NEG_Y', 'NEG_Z'], default 'POS_X')
    
    :type: str
    """


class MeshDeformModifier(Modifier):
    """Mesh deformation modifier to deform with other meshes"""

    invert_vertex_group = False
    """Invert vertex group influence
    (type: boolean, default False)
    
    :type: bool
    """

    is_bound = False
    """Whether geometry has been bound to control cage
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    object = None
    """Mesh object to deform with
    (type: bpy.types.Object)
    
    :type: Object
    """

    precision = 0
    """The grid size for binding
    (type: int in [2, 10], default 0)
    
    :type: int
    """

    use_dynamic_bind = False
    """Recompute binding dynamically on top of other deformers (slower and more memory consuming)
    (type: boolean, default False)
    
    :type: bool
    """

    vertex_group = ""
    """Vertex group name
    (type: string, default "", (never None))
    
    :type: str
    """


class MeshSequenceCacheModifier(Modifier):
    """Cache Mesh"""

    cache_file = None
    """(type: bpy.types.CacheFile)
    
    :type: CacheFile
    """

    object_path = ""
    """Path to the object in the Alembic archive used to lookup geometric data
    (type: string, default "", (never None))
    
    :type: str
    """

    read_data = {'VERT'}
    """(type: enum set in {'VERT', 'POLY', 'UV', 'COLOR'}, default {'VERT'})
    
    :type: enum set in {'VERT', 'POLY', 'UV', 'COLOR'}
    """


class MessageActuator(Actuator):
    """"""

    body_message = ""
    """Optional, message body Text
    (type: string, default "", (never None))
    
    :type: str
    """

    body_property = ""
    """The message body will be set by the Property Value
    (type: string, default "", (never None))
    
    :type: str
    """

    body_type = 'TEXT'
    """Toggle message type: either Text or a PropertyName
    (type: enum in ['TEXT', 'PROPERTY'], default 'TEXT')
    
    :type: str
    """

    subject = ""
    """Optional, message subject (this is what can be filtered on)
    (type: string, default "", (never None))
    
    :type: str
    """

    to_property = ""
    """Optional, send message to objects with this name only, or empty to broadcast
    (type: string, default "", (never None))
    
    :type: str
    """


class MessageSensor(Sensor):
    """Sensor to detect incoming messages"""

    subject = ""
    """Optional subject filter: only accept messages with this subject, or empty to accept all
    (type: string, default "", (never None))
    
    :type: str
    """


class MetaBall(ID):
    """Metaball data-block to defined blobby surfaces"""

    animation_data = None
    """Animation data for this data-block
    (type: bpy.types.AnimData, (readonly))
    
    :type: AnimData
    """

    elements = None
    """Meta elements
    (type: bpy.types.MetaBallElements bpy.types.bpy_prop_collection of bpy.types.MetaElement, (readonly))
    
    :type: MetaBallElements
    """

    is_editmode = False
    """True when used in editmode
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    materials = None
    """(type: bpy.types.IDMaterials bpy.types.bpy_prop_collection of bpy.types.Material, (readonly))
    
    :type: IDMaterials
    """

    render_resolution = 0.0
    """Polygonization resolution in rendering
    (type: float in [0.005, 10000], default 0.0)
    
    :type: float
    """

    resolution = 0.0
    """Polygonization resolution in the 3D viewport
    (type: float in [0.005, 10000], default 0.0)
    
    :type: float
    """

    texspace_location = (0.0, 0.0, 0.0)
    """Texture space location
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    texspace_size = (0.0, 0.0, 0.0)
    """Texture space size
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    threshold = 0.0
    """Influence of meta elements
    (type: float in [0, 5], default 0.0)
    
    :type: float
    """

    update_method = 'UPDATE_ALWAYS'
    """Metaball edit update behavior
    * 'UPDATE_ALWAYS': Always, While editing, update metaball always.
    * 'HALFRES': Half, While editing, update metaball in half resolution.
    * 'FAST': Fast, While editing, update metaball without polygonization.
    * 'NEVER': Never, While editing, don't update metaball at all.
    (type: enum in ['UPDATE_ALWAYS', 'HALFRES', 'FAST', 'NEVER'], default 'UPDATE_ALWAYS')
    
    :type: str
    """

    use_auto_texspace = False
    """Adjust active object's texture space automatically when transforming object
    (type: boolean, default False)
    
    :type: bool
    """

    def transform(self, matrix):
        """Transform meta elements by a matrix
        
        :param matrix: Matrix
            (type: float array of 16 items in [-inf, inf])
        :type matrix: mathutils.Matrix
        """


class MetaSequence(Sequence):
    """Sequence strip to group other strips as a single sequence strip"""

    alpha_mode = 'STRAIGHT'
    """Representation of alpha information in the RGBA pixels
    * 'STRAIGHT': Straight, RGB channels in transparent pixels are unaffected by the alpha channel.
    * 'PREMUL': Premultiplied, RGB channels in transparent pixels are multiplied by the alpha channel.
    (type: enum in ['STRAIGHT', 'PREMUL'], default 'STRAIGHT')
    
    :type: str
    """

    animation_offset_end = 0
    """Animation end offset (trim end)
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    animation_offset_start = 0
    """Animation start offset (trim start)
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    color_multiply = 1.0
    """(type: float in [0, 20], default 1.0)
    
    :type: float
    """

    color_saturation = 1.0
    """(type: float in [0, 20], default 1.0)
    
    :type: float
    """

    crop = None
    """(type: bpy.types.SequenceCrop, (readonly))
    
    :type: SequenceCrop
    """

    proxy = None
    """(type: bpy.types.SequenceProxy, (readonly))
    
    :type: SequenceProxy
    """

    sequences = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.Sequence, (readonly))
    
    :type: bpy_prop_collection
    """

    strobe = 0.0
    """Only display every nth frame
    (type: float in [1, 30], default 0.0)
    
    :type: float
    """

    transform = None
    """(type: bpy.types.SequenceTransform, (readonly))
    
    :type: SequenceTransform
    """

    use_crop = False
    """Crop image before processing
    (type: boolean, default False)
    
    :type: bool
    """

    use_deinterlace = False
    """Remove fields from video movies
    (type: boolean, default False)
    
    :type: bool
    """

    use_flip_x = False
    """Flip on the X axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_flip_y = False
    """Flip on the Y axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_float = False
    """Convert input to float data
    (type: boolean, default False)
    
    :type: bool
    """

    use_proxy = False
    """Use a preview proxy and/or timecode index for this strip
    (type: boolean, default False)
    
    :type: bool
    """

    use_reverse_frames = False
    """Reverse frame order
    (type: boolean, default False)
    
    :type: bool
    """

    use_translation = False
    """Translate image before processing
    (type: boolean, default False)
    
    :type: bool
    """


class MirrorModifier(Modifier):
    """Mirroring modifier"""

    merge_threshold = 0.0
    """Distance within which mirrored vertices are merged
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    mirror_object = None
    """Object to use as mirror
    (type: bpy.types.Object)
    
    :type: Object
    """

    mirror_offset_u = 0.0
    """Amount to offset mirrored UVs from the 0.5 point on the U axis
    (type: float in [-1, 1], default 0.0)
    
    :type: float
    """

    mirror_offset_v = 0.0
    """Amount to offset mirrored UVs from the 0.5 point on the V axis
    (type: float in [-1, 1], default 0.0)
    
    :type: float
    """

    use_clip = False
    """Prevent vertices from going through the mirror during transform
    (type: boolean, default False)
    
    :type: bool
    """

    use_mirror_merge = False
    """Merge vertices within the merge threshold
    (type: boolean, default False)
    
    :type: bool
    """

    use_mirror_u = False
    """Mirror the U texture coordinate around the 0.5 point
    (type: boolean, default False)
    
    :type: bool
    """

    use_mirror_v = False
    """Mirror the V texture coordinate around the 0.5 point
    (type: boolean, default False)
    
    :type: bool
    """

    use_mirror_vertex_groups = False
    """Mirror vertex groups (e.g. .R->.L)
    (type: boolean, default False)
    
    :type: bool
    """

    use_x = False
    """Enable X axis mirror
    (type: boolean, default False)
    
    :type: bool
    """

    use_y = False
    """Enable Y axis mirror
    (type: boolean, default False)
    
    :type: bool
    """

    use_z = False
    """Enable Z axis mirror
    (type: boolean, default False)
    
    :type: bool
    """


class MouseActuator(Actuator):
    """"""

    local_x = False
    """Apply rotation locally
    (type: boolean, default False)
    
    :type: bool
    """

    local_y = False
    """Apply rotation locally
    (type: boolean, default False)
    
    :type: bool
    """

    max_x = 0.0
    """Maximum positive rotation allowed by X mouse movement (0 for infinite)
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    max_y = 0.0
    """Maximum positive rotation allowed by Y mouse movement (0 for infinite)
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    min_x = 0.0
    """Maximum negative rotation allowed by X mouse movement (0 for infinite)
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    min_y = 0.0
    """Maximum negative rotation allowed by Y mouse movement (0 for infinite)
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    mode = 'VISIBILITY'
    """(type: enum in ['VISIBILITY', 'LOOK'], default 'VISIBILITY')
    
    :type: str
    """

    object_axis_x = 'OBJECT_AXIS_X'
    """Local object axis mouse movement in the X direction will apply to
    (type: enum in ['OBJECT_AXIS_X', 'OBJECT_AXIS_Y', 'OBJECT_AXIS_Z'], default 'OBJECT_AXIS_X')
    
    :type: str
    """

    object_axis_y = 'OBJECT_AXIS_X'
    """Local object axis mouse movement in the Y direction will apply to
    (type: enum in ['OBJECT_AXIS_X', 'OBJECT_AXIS_Y', 'OBJECT_AXIS_Z'], default 'OBJECT_AXIS_X')
    
    :type: str
    """

    reset_x = False
    """Reset the cursor's X position to the center of the screen space after calculating
    (type: boolean, default False)
    
    :type: bool
    """

    reset_y = False
    """Reset the cursor's Y position to the center of the screen space after calculating
    (type: boolean, default False)
    
    :type: bool
    """

    sensitivity_x = 0.0
    """Sensitivity of the X axis
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    sensitivity_y = 0.0
    """Sensitivity of the Y axis
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    threshold_x = 0.0
    """Amount of X motion before mouse movement will register
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    threshold_y = 0.0
    """Amount of Y motion before mouse movement will register
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    use_axis_x = False
    """Calculate mouse movement on the X axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_axis_y = False
    """Calculate mouse movement on the Y axis
    (type: boolean, default False)
    
    :type: bool
    """

    visible = False
    """Make mouse cursor visible
    (type: boolean, default False)
    
    :type: bool
    """


class MouseSensor(Sensor):
    """Sensor to detect mouse events"""

    material = ""
    """Only look for objects with this material (blank = all objects)
    (type: string, default "", (never None))
    
    :type: str
    """

    mouse_event = 'LEFTCLICK'
    """Type of event this mouse sensor should trigger on
    (type: enum in ['LEFTCLICK', 'MIDDLECLICK', 'RIGHTCLICK', 'WHEELUP', 'WHEELDOWN', 'MOVEMENT', 'MOUSEOVER', 'MOUSEOVERANY'], default 'LEFTCLICK')
    
    :type: str
    """

    property = ""
    """Only look for objects with this property (blank = all objects)
    (type: string, default "", (never None))
    
    :type: str
    """

    use_material = 'PROPERTY'
    """Toggle collision on material or property
    * 'PROPERTY': Property, Use a property for ray intersections.
    * 'MATERIAL': Material, Use a material for ray intersections.
    (type: enum in ['PROPERTY', 'MATERIAL'], default 'PROPERTY')
    
    :type: str
    """

    use_pulse = False
    """Moving the mouse over a different object generates a pulse
    (type: boolean, default False)
    
    :type: bool
    """

    use_x_ray = False
    """Toggle X-Ray option (see through objects that don't have the property)
    (type: boolean, default False)
    
    :type: bool
    """


class MovieClip(ID):
    """MovieClip data-block referencing an external movie file"""

    animation_data = None
    """Animation data for this data-block
    (type: bpy.types.AnimData, (readonly))
    
    :type: AnimData
    """

    colorspace_settings = None
    """Input color space settings
    (type: bpy.types.ColorManagedInputColorspaceSettings, (readonly))
    
    :type: ColorManagedInputColorspaceSettings
    """

    display_aspect = (0.0, 0.0)
    """Display Aspect for this clip, does not affect rendering
    (type: float array of 2 items in [0.1, inf], default (0.0, 0.0))
    
    :type: mathutils.Vector
    """

    filepath = ""
    """Filename of the movie or sequence file
    (type: string, default "", (never None))
    
    :type: str
    """

    frame_duration = 0
    """Detected duration of movie clip in frames
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    frame_offset = 0
    """Offset of footage first frame relative to it's file name (affects only how footage is loading, does not change data associated with a clip)
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    frame_start = 0
    """Global scene frame number at which this movie starts playing (affects all data associated with a clip)
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    grease_pencil = None
    """Grease pencil data for this movie clip
    (type: bpy.types.GreasePencil)
    
    :type: GreasePencil
    """

    proxy = None
    """(type: bpy.types.MovieClipProxy, (readonly))
    
    :type: MovieClipProxy
    """

    size = (0, 0)
    """Width and height in pixels, zero when image data cant be loaded
    (type: int array of 2 items in [-inf, inf], default (0, 0), (readonly))
    
    :type: collections.Sequence[int]
    """

    source = 'SEQUENCE'
    """Where the clip comes from
    * 'SEQUENCE': Image Sequence, Multiple image files, as a sequence.
    * 'MOVIE': Movie File, Movie file.
    (type: enum in ['SEQUENCE', 'MOVIE'], default 'SEQUENCE', (readonly))
    
    :type: str
    """

    tracking = None
    """(type: bpy.types.MovieTracking, (readonly))
    
    :type: MovieTracking
    """

    use_proxy = False
    """Use a preview proxy and/or timecode index for this clip
    (type: boolean, default False)
    
    :type: bool
    """

    use_proxy_custom_directory = False
    """Create proxy images in a custom directory (default is movie location)
    (type: boolean, default False)
    
    :type: bool
    """


class MovieClipSequence(Sequence):
    """Sequence strip to load a video from the clip editor"""

    alpha_mode = 'STRAIGHT'
    """Representation of alpha information in the RGBA pixels
    * 'STRAIGHT': Straight, RGB channels in transparent pixels are unaffected by the alpha channel.
    * 'PREMUL': Premultiplied, RGB channels in transparent pixels are multiplied by the alpha channel.
    (type: enum in ['STRAIGHT', 'PREMUL'], default 'STRAIGHT')
    
    :type: str
    """

    animation_offset_end = 0
    """Animation end offset (trim end)
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    animation_offset_start = 0
    """Animation start offset (trim start)
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    color_multiply = 1.0
    """(type: float in [0, 20], default 1.0)
    
    :type: float
    """

    color_saturation = 1.0
    """(type: float in [0, 20], default 1.0)
    
    :type: float
    """

    crop = None
    """(type: bpy.types.SequenceCrop, (readonly))
    
    :type: SequenceCrop
    """

    stabilize2d = False
    """Use the 2D stabilized version of the clip
    (type: boolean, default False)
    
    :type: bool
    """

    strobe = 0.0
    """Only display every nth frame
    (type: float in [1, 30], default 0.0)
    
    :type: float
    """

    transform = None
    """(type: bpy.types.SequenceTransform, (readonly))
    
    :type: SequenceTransform
    """

    undistort = False
    """Use the undistorted version of the clip
    (type: boolean, default False)
    
    :type: bool
    """

    use_crop = False
    """Crop image before processing
    (type: boolean, default False)
    
    :type: bool
    """

    use_deinterlace = False
    """Remove fields from video movies
    (type: boolean, default False)
    
    :type: bool
    """

    use_flip_x = False
    """Flip on the X axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_flip_y = False
    """Flip on the Y axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_float = False
    """Convert input to float data
    (type: boolean, default False)
    
    :type: bool
    """

    use_reverse_frames = False
    """Reverse frame order
    (type: boolean, default False)
    
    :type: bool
    """

    use_translation = False
    """Translate image before processing
    (type: boolean, default False)
    
    :type: bool
    """


class MovieSequence(Sequence):
    """Sequence strip to load a video"""

    alpha_mode = 'STRAIGHT'
    """Representation of alpha information in the RGBA pixels
    * 'STRAIGHT': Straight, RGB channels in transparent pixels are unaffected by the alpha channel.
    * 'PREMUL': Premultiplied, RGB channels in transparent pixels are multiplied by the alpha channel.
    (type: enum in ['STRAIGHT', 'PREMUL'], default 'STRAIGHT')
    
    :type: str
    """

    animation_offset_end = 0
    """Animation end offset (trim end)
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    animation_offset_start = 0
    """Animation start offset (trim start)
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    color_multiply = 1.0
    """(type: float in [0, 20], default 1.0)
    
    :type: float
    """

    color_saturation = 1.0
    """(type: float in [0, 20], default 1.0)
    
    :type: float
    """

    colorspace_settings = None
    """Input color space settings
    (type: bpy.types.ColorManagedInputColorspaceSettings, (readonly))
    
    :type: ColorManagedInputColorspaceSettings
    """

    crop = None
    """(type: bpy.types.SequenceCrop, (readonly))
    
    :type: SequenceCrop
    """

    elements = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.SequenceElement, (readonly))
    
    :type: bpy_prop_collection
    """

    filepath = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    mpeg_preseek = 0
    """For MPEG movies, preseek this many frames
    (type: int in [0, 50], default 0)
    
    :type: int
    """

    proxy = None
    """(type: bpy.types.SequenceProxy, (readonly))
    
    :type: SequenceProxy
    """

    stereo_3d_format = None
    """Settings for stereo 3d
    (type: bpy.types.Stereo3dFormat, (readonly, never None))
    
    :type: Stereo3dFormat
    """

    stream_index = 0
    """For files with several movie streams, use the stream with the given index
    (type: int in [0, 20], default 0)
    
    :type: int
    """

    strobe = 0.0
    """Only display every nth frame
    (type: float in [1, 30], default 0.0)
    
    :type: float
    """

    transform = None
    """(type: bpy.types.SequenceTransform, (readonly))
    
    :type: SequenceTransform
    """

    use_crop = False
    """Crop image before processing
    (type: boolean, default False)
    
    :type: bool
    """

    use_deinterlace = False
    """Remove fields from video movies
    (type: boolean, default False)
    
    :type: bool
    """

    use_flip_x = False
    """Flip on the X axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_flip_y = False
    """Flip on the Y axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_float = False
    """Convert input to float data
    (type: boolean, default False)
    
    :type: bool
    """

    use_multiview = False
    """Use Multiple Views (when available)
    (type: boolean, default False)
    
    :type: bool
    """

    use_proxy = False
    """Use a preview proxy and/or timecode index for this strip
    (type: boolean, default False)
    
    :type: bool
    """

    use_reverse_frames = False
    """Reverse frame order
    (type: boolean, default False)
    
    :type: bool
    """

    use_translation = False
    """Translate image before processing
    (type: boolean, default False)
    
    :type: bool
    """

    views_format = 'INDIVIDUAL'
    """Mode to load movie views
    * 'INDIVIDUAL': Individual, Individual files for each view with the prefix as defined by the scene views.
    * 'STEREO_3D': Stereo 3D, Single file with an encoded stereo pair.
    (type: enum in ['INDIVIDUAL', 'STEREO_3D'], default 'INDIVIDUAL')
    
    :type: str
    """


class MultiresModifier(Modifier):
    """Multiresolution mesh modifier"""

    filepath = ""
    """Path to external displacements file
    (type: string, default "", (never None))
    
    :type: str
    """

    is_external = False
    """Store multires displacements outside the .blend file, to save memory
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    levels = 0
    """Number of subdivisions to use in the viewport
    (type: int in [0, 255], default 0)
    
    :type: int
    """

    render_levels = 0
    """The subdivision level visible at render time
    (type: int in [0, 255], default 0)
    
    :type: int
    """

    sculpt_levels = 0
    """Number of subdivisions to use in sculpt mode
    (type: int in [0, 255], default 0)
    
    :type: int
    """

    show_only_control_edges = False
    """Skip drawing/rendering of interior subdivided edges
    (type: boolean, default False)
    
    :type: bool
    """

    subdivision_type = 'CATMULL_CLARK'
    """Select type of subdivision algorithm
    (type: enum in ['CATMULL_CLARK', 'SIMPLE'], default 'CATMULL_CLARK')
    
    :type: str
    """

    total_levels = 0
    """Number of subdivisions for which displacements are stored
    (type: int in [0, 255], default 0, (readonly))
    
    :type: int
    """

    use_subsurf_uv = False
    """Use subsurf to subdivide UVs
    (type: boolean, default False)
    
    :type: bool
    """


class NODE_UL_interface_sockets(UIList):
    """"""

    def draw_item(self, context, layout, data, item, icon, active_data, active_propname, index):
        """"""


class NandController(Controller):
    """Controller passing on events based on a logical NAND operation"""


class NearSensor(Sensor):
    """Sensor to detect nearby objects"""

    distance = 0.0
    """Trigger distance
    (type: float in [0, 10000], default 0.0)
    
    :type: float
    """

    property = ""
    """Only look for objects with this property (blank = all objects)
    (type: string, default "", (never None))
    
    :type: str
    """

    reset_distance = 0.0
    """The distance where the sensor forgets the actor
    (type: float in [0, 10000], default 0.0)
    
    :type: float
    """


class NodeCustomGroup(Node):
    """Base node type for custom registered node group types"""

    interface = None
    """Interface socket data
    (type: bpy.types.PropertyGroup, (readonly))
    
    :type: PropertyGroup
    """

    node_tree = None
    """(type: bpy.types.NodeTree)
    
    :type: NodeTree
    """


class NodeInternal(Node):
    """"""

    def poll(self, node_tree):
        """If non-null output is returned, the node type can be added to the tree
        
        :param node_tree: Node Tree
            (type: bpy.types.NodeTree)
        :type node_tree: NodeTree
        :rtype: bool
        """

    def poll_instance(self, node_tree):
        """If non-null output is returned, the node can be added to the tree
        
        :param node_tree: Node Tree
            (type: bpy.types.NodeTree)
        :type node_tree: NodeTree
        :rtype: bool
        """

    def update(self):
        """Update on editor changes"""

    def draw_buttons(self, context, layout):
        """Draw node buttons
        
        :param layout: Layout, Layout in the UI
            (type: bpy.types.UILayout, (never None))
        :type layout: UILayout
        """

    def draw_buttons_ext(self, context, layout):
        """Draw node buttons in the sidebar
        
        :param layout: Layout, Layout in the UI
            (type: bpy.types.UILayout, (never None))
        :type layout: UILayout
        """


class NodeSetting(PropertyGroup):
    """"""

    value = ""
    """Python expression to be evaluated as the initial node setting
    (type: string, default "", (never None))
    
    :type: str
    """


class NodeSocketInterfaceStandard(NodeSocketInterface):
    """"""

    type = 'VALUE'
    """Data type
    (type: enum in ['CUSTOM', 'VALUE', 'INT', 'BOOLEAN', 'VECTOR', 'STRING', 'RGBA', 'SHADER'], default 'VALUE', (readonly))
    
    :type: str
    """

    def draw(self, context, layout):
        """Draw template settings
        
        :param layout: Layout, Layout in the UI
            (type: bpy.types.UILayout, (never None))
        :type layout: UILayout
        """

    def draw_color(self, context):
        """Color of the socket icon
        
        :return: Color
        :param : (type: float array of 4 items in [0, 1])
        :rtype: collections.Sequence[float]
        """


class NodeSocketStandard(NodeSocket):
    """"""

    links = None
    """List of node links from or to this socket
                                (readonly)
    """

    def draw(self, context, layout, node, text):
        """Draw socket
        
        :param layout: Layout, Layout in the UI
            (type: bpy.types.UILayout, (never None))
        :type layout: UILayout
        :param node: Node, Node the socket belongs to
            (type: bpy.types.Node, (never None))
        :type node: Node
        :param text: Text, Text label to draw alongside properties
            (type: str, (never None))
        :type text: str
        """

    def draw_color(self, context, node):
        """Color of the socket icon
        
        :param node: Node, Node the socket belongs to
            (type: bpy.types.Node, (never None))
        :type node: Node
        :return: Color
        :param : (type: float array of 4 items in [0, 1])
        :rtype: collections.Sequence[float]
        """


class NodeTree(ID):
    """Node tree consisting of linked nodes used for shading, textures and compositing"""

    active_input = 0
    """Index of the active input
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    active_output = 0
    """Index of the active output
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    animation_data = None
    """Animation data for this data-block
    (type: bpy.types.AnimData, (readonly))
    
    :type: AnimData
    """

    bl_description = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    bl_icon = 'NODETREE'
    """The node tree icon
    (type: enum in ['NONE', 'QUESTION', 'ERROR', 'CANCEL', 'TRIA_RIGHT', 'TRIA_DOWN', 'TRIA_LEFT', 'TRIA_UP', 'ARROW_LEFTRIGHT', 'PLUS', 'DISCLOSURE_TRI_DOWN', 'DISCLOSURE_TRI_RIGHT', 'RADIOBUT_OFF', 'RADIOBUT_ON', 'MENU_PANEL', 'BLENDER', 'GRIP', 'DOT', 'COLLAPSEMENU', 'X', 'GO_LEFT', 'PLUG', 'UI', 'NODE', 'NODE_SEL', 'FULLSCREEN', 'SPLITSCREEN', 'RIGHTARROW_THIN', 'BORDERMOVE', 'VIEWZOOM', 'ZOOMIN', 'ZOOMOUT', 'PANEL_CLOSE', 'COPY_ID', 'EYEDROPPER', 'LINK_AREA', 'AUTO', 'CHECKBOX_DEHLT', 'CHECKBOX_HLT', 'UNLOCKED', 'LOCKED', 'UNPINNED', 'PINNED', 'SCREEN_BACK', 'RIGHTARROW', 'DOWNARROW_HLT', 'DOTSUP', 'DOTSDOWN', 'LINK', 'INLINK', 'PLUGIN', 'HELP', 'GHOST_ENABLED', 'COLOR', 'LINKED', 'UNLINKED', 'HAND', 'ZOOM_ALL', 'ZOOM_SELECTED', 'ZOOM_PREVIOUS', 'ZOOM_IN', 'ZOOM_OUT', 'RENDER_REGION', 'BORDER_RECT', 'BORDER_LASSO', 'FREEZE', 'STYLUS_PRESSURE', 'GHOST_DISABLED', 'NEW', 'FILE_TICK', 'QUIT', 'URL', 'RECOVER_LAST', 'FULLSCREEN_ENTER', 'FULLSCREEN_EXIT', 'BLANK1', 'LAMP', 'MATERIAL', 'TEXTURE', 'ANIM', 'WORLD', 'SCENE', 'EDIT', 'GAME', 'RADIO', 'SCRIPT', 'PARTICLES', 'PHYSICS', 'SPEAKER', 'TEXTURE_SHADED', 'VIEW3D', 'IPO', 'OOPS', 'BUTS', 'FILESEL', 'IMAGE_COL', 'INFO', 'SEQUENCE', 'TEXT', 'IMASEL', 'SOUND', 'ACTION', 'NLA', 'SCRIPTWIN', 'TIME', 'NODETREE', 'LOGIC', 'CONSOLE', 'PREFERENCES', 'CLIP', 'ASSET_MANAGER', 'OBJECT_DATAMODE', 'EDITMODE_HLT', 'FACESEL_HLT', 'VPAINT_HLT', 'TPAINT_HLT', 'WPAINT_HLT', 'SCULPTMODE_HLT', 'POSE_HLT', 'PARTICLEMODE', 'LIGHTPAINT', 'SCENE_DATA', 'RENDERLAYERS', 'WORLD_DATA', 'OBJECT_DATA', 'MESH_DATA', 'CURVE_DATA', 'META_DATA', 'LATTICE_DATA', 'LAMP_DATA', 'MATERIAL_DATA', 'TEXTURE_DATA', 'ANIM_DATA', 'CAMERA_DATA', 'PARTICLE_DATA', 'LIBRARY_DATA_DIRECT', 'GROUP', 'ARMATURE_DATA', 'POSE_DATA', 'BONE_DATA', 'CONSTRAINT', 'SHAPEKEY_DATA', 'CONSTRAINT_BONE', 'CAMERA_STEREO', 'PACKAGE', 'UGLYPACKAGE', 'BRUSH_DATA', 'IMAGE_DATA', 'FILE', 'FCURVE', 'FONT_DATA', 'RENDER_RESULT', 'SURFACE_DATA', 'EMPTY_DATA', 'SETTINGS', 'RENDER_ANIMATION', 'RENDER_STILL', 'LIBRARY_DATA_BROKEN', 'BOIDS', 'STRANDS', 'LIBRARY_DATA_INDIRECT', 'GREASEPENCIL', 'LINE_DATA', 'GROUP_BONE', 'GROUP_VERTEX', 'GROUP_VCOL', 'GROUP_UVS', 'RNA', 'RNA_ADD', 'OUTLINER_OB_EMPTY', 'OUTLINER_OB_MESH', 'OUTLINER_OB_CURVE', 'OUTLINER_OB_LATTICE', 'OUTLINER_OB_META', 'OUTLINER_OB_LAMP', 'OUTLINER_OB_CAMERA', 'OUTLINER_OB_ARMATURE', 'OUTLINER_OB_FONT', 'OUTLINER_OB_SURFACE', 'OUTLINER_OB_SPEAKER', 'RESTRICT_COLOR_OFF', 'RESTRICT_COLOR_ON', 'RESTRICT_VIEW_OFF', 'RESTRICT_VIEW_ON', 'RESTRICT_SELECT_OFF', 'RESTRICT_SELECT_ON', 'RESTRICT_RENDER_OFF', 'RESTRICT_RENDER_ON', 'OUTLINER_DATA_EMPTY', 'OUTLINER_DATA_MESH', 'OUTLINER_DATA_CURVE', 'OUTLINER_DATA_LATTICE', 'OUTLINER_DATA_META', 'OUTLINER_DATA_LAMP', 'OUTLINER_DATA_CAMERA', 'OUTLINER_DATA_ARMATURE', 'OUTLINER_DATA_FONT', 'OUTLINER_DATA_SURFACE', 'OUTLINER_DATA_SPEAKER', 'OUTLINER_DATA_POSE', 'MESH_PLANE', 'MESH_CUBE', 'MESH_CIRCLE', 'MESH_UVSPHERE', 'MESH_ICOSPHERE', 'MESH_GRID', 'MESH_MONKEY', 'MESH_CYLINDER', 'MESH_TORUS', 'MESH_CONE', 'MESH_CAPSULE', 'LAMP_POINT', 'LAMP_SUN', 'LAMP_SPOT', 'LAMP_HEMI', 'LAMP_AREA', 'META_EMPTY', 'META_PLANE', 'META_CUBE', 'META_BALL', 'META_ELLIPSOID', 'META_CAPSULE', 'SURFACE_NCURVE', 'SURFACE_NCIRCLE', 'SURFACE_NSURFACE', 'SURFACE_NCYLINDER', 'SURFACE_NSPHERE', 'SURFACE_NTORUS', 'CURVE_BEZCURVE', 'CURVE_BEZCIRCLE', 'CURVE_NCURVE', 'CURVE_NCIRCLE', 'CURVE_PATH', 'COLOR_RED', 'COLOR_GREEN', 'COLOR_BLUE', 'TRIA_RIGHT_BAR', 'TRIA_DOWN_BAR', 'TRIA_LEFT_BAR', 'TRIA_UP_BAR', 'FORCE_FORCE', 'FORCE_WIND', 'FORCE_VORTEX', 'FORCE_MAGNETIC', 'FORCE_HARMONIC', 'FORCE_CHARGE', 'FORCE_LENNARDJONES', 'FORCE_TEXTURE', 'FORCE_CURVE', 'FORCE_BOID', 'FORCE_TURBULENCE', 'FORCE_DRAG', 'FORCE_SMOKEFLOW', 'NODE_INSERT_ON', 'NODE_INSERT_OFF', 'MODIFIER', 'MOD_WAVE', 'MOD_BUILD', 'MOD_DECIM', 'MOD_MIRROR', 'MOD_SOFT', 'MOD_SUBSURF', 'HOOK', 'MOD_PHYSICS', 'MOD_PARTICLES', 'MOD_BOOLEAN', 'MOD_EDGESPLIT', 'MOD_ARRAY', 'MOD_UVPROJECT', 'MOD_DISPLACE', 'MOD_CURVE', 'MOD_LATTICE', 'CONSTRAINT_DATA', 'MOD_ARMATURE', 'MOD_SHRINKWRAP', 'MOD_CAST', 'MOD_MESHDEFORM', 'MOD_BEVEL', 'MOD_SMOOTH', 'MOD_SIMPLEDEFORM', 'MOD_MASK', 'MOD_CLOTH', 'MOD_EXPLODE', 'MOD_FLUIDSIM', 'MOD_MULTIRES', 'MOD_SMOKE', 'MOD_SOLIDIFY', 'MOD_SCREW', 'MOD_VERTEX_WEIGHT', 'MOD_DYNAMICPAINT', 'MOD_REMESH', 'MOD_OCEAN', 'MOD_WARP', 'MOD_SKIN', 'MOD_TRIANGULATE', 'MOD_WIREFRAME', 'MOD_DATA_TRANSFER', 'MOD_NORMALEDIT', 'REC', 'PLAY', 'FF', 'REW', 'PAUSE', 'PREV_KEYFRAME', 'NEXT_KEYFRAME', 'PLAY_AUDIO', 'PLAY_REVERSE', 'PREVIEW_RANGE', 'ACTION_TWEAK', 'PMARKER_ACT', 'PMARKER_SEL', 'PMARKER', 'MARKER_HLT', 'MARKER', 'SPACE2', 'SPACE3', 'KEYINGSET', 'KEY_DEHLT', 'KEY_HLT', 'MUTE_IPO_OFF', 'MUTE_IPO_ON', 'VISIBLE_IPO_OFF', 'VISIBLE_IPO_ON', 'DRIVER', 'SOLO_OFF', 'SOLO_ON', 'FRAME_PREV', 'FRAME_NEXT', 'NLA_PUSHDOWN', 'IPO_CONSTANT', 'IPO_LINEAR', 'IPO_BEZIER', 'IPO_SINE', 'IPO_QUAD', 'IPO_CUBIC', 'IPO_QUART', 'IPO_QUINT', 'IPO_EXPO', 'IPO_CIRC', 'IPO_BOUNCE', 'IPO_ELASTIC', 'IPO_BACK', 'IPO_EASE_IN', 'IPO_EASE_OUT', 'IPO_EASE_IN_OUT', 'NORMALIZE_FCURVES', 'VERTEXSEL', 'EDGESEL', 'FACESEL', 'LOOPSEL', 'ROTATE', 'CURSOR', 'ROTATECOLLECTION', 'ROTATECENTER', 'ROTACTIVE', 'ALIGN', 'SMOOTHCURVE', 'SPHERECURVE', 'ROOTCURVE', 'SHARPCURVE', 'LINCURVE', 'NOCURVE', 'RNDCURVE', 'PROP_OFF', 'PROP_ON', 'PROP_CON', 'SCULPT_DYNTOPO', 'PARTICLE_POINT', 'PARTICLE_TIP', 'PARTICLE_PATH', 'MAN_TRANS', 'MAN_ROT', 'MAN_SCALE', 'MANIPUL', 'SNAP_OFF', 'SNAP_ON', 'SNAP_NORMAL', 'SNAP_GRID', 'SNAP_VERTEX', 'SNAP_EDGE', 'SNAP_FACE', 'SNAP_VOLUME', 'SNAP_INCREMENT', 'STICKY_UVS_LOC', 'STICKY_UVS_DISABLE', 'STICKY_UVS_VERT', 'CLIPUV_DEHLT', 'CLIPUV_HLT', 'SNAP_PEEL_OBJECT', 'GRID', 'PASTEDOWN', 'COPYDOWN', 'PASTEFLIPUP', 'PASTEFLIPDOWN', 'SNAP_SURFACE', 'AUTOMERGE_ON', 'AUTOMERGE_OFF', 'RETOPO', 'UV_VERTEXSEL', 'UV_EDGESEL', 'UV_FACESEL', 'UV_ISLANDSEL', 'UV_SYNC_SELECT', 'BBOX', 'WIRE', 'SOLID', 'SMOOTH', 'POTATO', 'ORTHO', 'LOCKVIEW_OFF', 'LOCKVIEW_ON', 'AXIS_SIDE', 'AXIS_FRONT', 'AXIS_TOP', 'NDOF_DOM', 'NDOF_TURN', 'NDOF_FLY', 'NDOF_TRANS', 'LAYER_USED', 'LAYER_ACTIVE', 'SORTALPHA', 'SORTBYEXT', 'SORTTIME', 'SORTSIZE', 'LONGDISPLAY', 'SHORTDISPLAY', 'GHOST', 'IMGDISPLAY', 'SAVE_AS', 'SAVE_COPY', 'BOOKMARKS', 'FONTPREVIEW', 'FILTER', 'NEWFOLDER', 'OPEN_RECENT', 'FILE_PARENT', 'FILE_REFRESH', 'FILE_FOLDER', 'FILE_BLANK', 'FILE_BLEND', 'FILE_IMAGE', 'FILE_MOVIE', 'FILE_SCRIPT', 'FILE_SOUND', 'FILE_FONT', 'FILE_TEXT', 'RECOVER_AUTO', 'SAVE_PREFS', 'LINK_BLEND', 'APPEND_BLEND', 'IMPORT', 'EXPORT', 'EXTERNAL_DATA', 'LOAD_FACTORY', 'LOOP_BACK', 'LOOP_FORWARDS', 'BACK', 'FORWARD', 'FILE_HIDDEN', 'FILE_BACKUP', 'DISK_DRIVE', 'MATPLANE', 'MATSPHERE', 'MATCUBE', 'MONKEY', 'HAIR', 'ALIASED', 'ANTIALIASED', 'MAT_SPHERE_SKY', 'WORDWRAP_OFF', 'WORDWRAP_ON', 'SYNTAX_OFF', 'SYNTAX_ON', 'LINENUMBERS_OFF', 'LINENUMBERS_ON', 'SCRIPTPLUGINS', 'SEQ_SEQUENCER', 'SEQ_PREVIEW', 'SEQ_LUMA_WAVEFORM', 'SEQ_CHROMA_SCOPE', 'SEQ_HISTOGRAM', 'SEQ_SPLITVIEW', 'IMAGE_RGB', 'IMAGE_RGB_ALPHA', 'IMAGE_ALPHA', 'IMAGE_ZDEPTH', 'IMAGEFILE', 'BRUSH_ADD', 'BRUSH_BLOB', 'BRUSH_BLUR', 'BRUSH_CLAY', 'BRUSH_CLAY_STRIPS', 'BRUSH_CLONE', 'BRUSH_CREASE', 'BRUSH_DARKEN', 'BRUSH_FILL', 'BRUSH_FLATTEN', 'BRUSH_GRAB', 'BRUSH_INFLATE', 'BRUSH_LAYER', 'BRUSH_LIGHTEN', 'BRUSH_MASK', 'BRUSH_MIX', 'BRUSH_MULTIPLY', 'BRUSH_NUDGE', 'BRUSH_PINCH', 'BRUSH_SCRAPE', 'BRUSH_SCULPT_DRAW', 'BRUSH_SMEAR', 'BRUSH_SMOOTH', 'BRUSH_SNAKE_HOOK', 'BRUSH_SOFTEN', 'BRUSH_SUBTRACT', 'BRUSH_TEXDRAW', 'BRUSH_TEXFILL', 'BRUSH_TEXMASK', 'BRUSH_THUMB', 'BRUSH_ROTATE', 'BRUSH_VERTEXDRAW', 'MATCAP_01', 'MATCAP_02', 'MATCAP_03', 'MATCAP_04', 'MATCAP_05', 'MATCAP_06', 'MATCAP_07', 'MATCAP_08', 'MATCAP_09', 'MATCAP_10', 'MATCAP_11', 'MATCAP_12', 'MATCAP_13', 'MATCAP_14', 'MATCAP_15', 'MATCAP_16', 'MATCAP_17', 'MATCAP_18', 'MATCAP_19', 'MATCAP_20', 'MATCAP_21', 'MATCAP_22', 'MATCAP_23', 'MATCAP_24'], default 'NODETREE')
    
    :type: str
    """

    bl_idname = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    bl_label = ""
    """The node tree label
    (type: string, default "", (never None))
    
    :type: str
    """

    grease_pencil = None
    """Grease Pencil data-block
    (type: bpy.types.GreasePencil)
    
    :type: GreasePencil
    """

    inputs = None
    """Node tree inputs
    (type: bpy.types.NodeTreeInputs bpy.types.bpy_prop_collection of bpy.types.NodeSocketInterface, (readonly))
    
    :type: NodeTreeInputs
    """

    links = None
    """(type: bpy.types.NodeLinks bpy.types.bpy_prop_collection of bpy.types.NodeLink, (readonly))
    
    :type: NodeLinks
    """

    nodes = None
    """(type: bpy.types.Nodes bpy.types.bpy_prop_collection of bpy.types.Node, (readonly))
    
    :type: Nodes
    """

    outputs = None
    """Node tree outputs
    (type: bpy.types.NodeTreeOutputs bpy.types.bpy_prop_collection of bpy.types.NodeSocketInterface, (readonly))
    
    :type: NodeTreeOutputs
    """

    type = 'SHADER'
    """Node Tree type (deprecated, bl_idname is the actual node tree type identifier)
    * 'SHADER': Shader, Shader nodes.
    * 'TEXTURE': Texture, Texture nodes.
    * 'COMPOSITING': Compositing, Compositing nodes.
    (type: enum in ['SHADER', 'TEXTURE', 'COMPOSITING'], default 'SHADER', (readonly))
    
    :type: str
    """

    view_center = (0.0, 0.0)
    """(type: float array of 2 items in [-inf, inf], default (0.0, 0.0), (readonly))
    
    :type: mathutils.Vector
    """

    def interface_update(self, context):
        """Updated node group interface"""

    def poll(self, context):
        """Check visibility in the editor
        
        :rtype: bool
        """

    def update(self):
        """Update on editor changes"""

    def get_from_context(self, context):
        """Get a node tree from the context
        
        :return: (result_1, result_2, result_3)
            result_1, Active node tree from context, bpy.types.NodeTree
            result_2, ID data-block that owns the node tree, bpy.types.ID
            result_3, Original ID data-block selected from the context, bpy.types.ID
        :rtype: tuple
        """


class NorController(Controller):
    """Controller passing on events based on a logical NOR operation"""


class NormalEditModifier(Modifier):
    """Modifier affecting/generating custom normals"""

    invert_vertex_group = False
    """Invert vertex group influence
    (type: boolean, default False)
    
    :type: bool
    """

    mix_factor = 1.0
    """How much of generated normals to mix with exiting ones
    (type: float in [0, 1], default 1.0)
    
    :type: float
    """

    mix_limit = 1.0
    """Maximum angle between old and new normals
    (type: float in [0, 3.14159], default 1.0)
    
    :type: float
    """

    mix_mode = 'COPY'
    """How to mix generated normals with existing ones
    * 'COPY': Copy, Copy new normals (overwrite existing).
    * 'ADD': Add, Copy sum of new and old normals.
    * 'SUB': Subtract, Copy new normals minus old normals.
    * 'MUL': Multiply, Copy product of old and new normals (*not* cross product).
    (type: enum in ['COPY', 'ADD', 'SUB', 'MUL'], default 'COPY')
    
    :type: str
    """

    mode = 'RADIAL'
    """How to affect (generate) normals
    * 'RADIAL': Radial, From an ellipsoid (shape defined by the boundbox's dimensions, target is optional).
    * 'DIRECTIONAL': Directional, Normals 'track' (point to) the target object.
    (type: enum in ['RADIAL', 'DIRECTIONAL'], default 'RADIAL')
    
    :type: str
    """

    offset = (0.0, 0.0, 0.0)
    """Offset from object's center
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    target = None
    """Target object used to affect normals
    (type: bpy.types.Object)
    
    :type: Object
    """

    use_direction_parallel = True
    """Use same direction for all normals, from origin to target's center (Directional mode only)
    (type: boolean, default True)
    
    :type: bool
    """

    vertex_group = ""
    """Vertex group name for selecting/weighting the affected areas
    (type: string, default "", (never None))
    
    :type: str
    """


class Object(ID):
    """Object data-block defining an object in a scene"""

    active_material = None
    """Active material being displayed
    (type: bpy.types.Material)
    
    :type: Material
    """

    active_material_index = 0
    """Index of active material slot
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    active_shape_key = None
    """Current shape key
    (type: bpy.types.ShapeKey, (readonly))
    
    :type: ShapeKey
    """

    active_shape_key_index = 0
    """Current shape key index
    (type: int in [-32768, 32767], default 0)
    
    :type: int
    """

    animation_data = None
    """Animation data for this data-block
    (type: bpy.types.AnimData, (readonly))
    
    :type: AnimData
    """

    animation_visualization = None
    """Animation data for this data-block
    (type: bpy.types.AnimViz, (readonly, never None))
    
    :type: AnimViz
    """

    bound_box = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    """Object's bounding box in object-space coordinates, all values are -1.0 when not available
    (type: float array of 24 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (readonly))
    
    :type: collections.Sequence[float]
    """

    collision = None
    """Settings for using the object as a collider in physics simulation
    (type: bpy.types.CollisionSettings, (readonly))
    
    :type: CollisionSettings
    """

    color = (0.0, 0.0, 0.0, 0.0)
    """Object color and alpha, used when faces have the ObColor mode enabled
    (type: float array of 4 items in [0, inf], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    constraints = None
    """Constraints affecting the transformation of the object
    (type: bpy.types.ObjectConstraints bpy.types.bpy_prop_collection of bpy.types.Constraint, (readonly))
    
    :type: ObjectConstraints
    """

    data = None
    """Object data
    (type: bpy.types.ID)
    
    :type: ID
    """

    delta_location = (0.0, 0.0, 0.0)
    """Extra translation added to the location of the object
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    delta_rotation_euler = (0.0, 0.0, 0.0)
    """Extra rotation added to the rotation of the object (when using Euler rotations)
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Euler
    """

    delta_rotation_quaternion = (1.0, 0.0, 0.0, 0.0)
    """Extra rotation added to the rotation of the object (when using Quaternion rotations)
    (type: float array of 4 items in [-inf, inf], default (1.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Quaternion
    """

    delta_scale = (1.0, 1.0, 1.0)
    """Extra scaling added to the scale of the object
    (type: float array of 3 items in [-inf, inf], default (1.0, 1.0, 1.0))
    
    :type: mathutils.Vector
    """

    dimensions = (0.0, 0.0, 0.0)
    """Absolute bounding box dimensions of the object
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    draw_bounds_type = 'BOX'
    """Object boundary display type
    * 'BOX': Box, Draw bounds as box.
    * 'SPHERE': Sphere, Draw bounds as sphere.
    * 'CYLINDER': Cylinder, Draw bounds as cylinder.
    * 'CONE': Cone, Draw bounds as cone.
    * 'CAPSULE': Capsule, Draw bounds as capsule.
    (type: enum in ['BOX', 'SPHERE', 'CYLINDER', 'CONE', 'CAPSULE'], default 'BOX')
    
    :type: str
    """

    draw_type = 'BOUNDS'
    """Maximum draw type to display object with in viewport
    * 'BOUNDS': Bounds, Draw the bounds of the object.
    * 'WIRE': Wire, Draw the object as a wireframe.
    * 'SOLID': Solid, Draw the object as a solid (if solid drawing is enabled in the viewport).
    * 'TEXTURED': Textured, Draw the object with textures (if textures are enabled in the viewport).
    (type: enum in ['BOUNDS', 'WIRE', 'SOLID', 'TEXTURED'], default 'BOUNDS')
    
    :type: str
    """

    dupli_faces_scale = 0.0
    """Scale the DupliFace objects
    (type: float in [0.001, 10000], default 0.0)
    
    :type: float
    """

    dupli_frames_end = 0
    """End frame for DupliFrames
    (type: int in [-500000, 500000], default 0)
    
    :type: int
    """

    dupli_frames_off = 0
    """Recurring frames to exclude from the Dupliframes
    (type: int in [0, 500000], default 0)
    
    :type: int
    """

    dupli_frames_on = 0
    """Number of frames to use between DupOff frames
    (type: int in [0, 500000], default 0)
    
    :type: int
    """

    dupli_frames_start = 0
    """Start frame for DupliFrames
    (type: int in [-500000, 500000], default 0)
    
    :type: int
    """

    dupli_group = None
    """Instance an existing group
    (type: bpy.types.Group)
    
    :type: Group
    """

    dupli_list = None
    """Object duplis
    (type: bpy.types.bpy_prop_collection of bpy.types.DupliObject, (readonly))
    
    :type: bpy_prop_collection
    """

    dupli_type = 'NONE'
    """If not None, object duplication method to use
    * 'NONE': None.
    * 'FRAMES': Frames, Make copy of object for every frame.
    * 'VERTS': Verts, Duplicate child objects on all vertices.
    * 'FACES': Faces, Duplicate child objects on all faces.
    * 'GROUP': Group, Enable group instancing.
    (type: enum in ['NONE', 'FRAMES', 'VERTS', 'FACES', 'GROUP'], default 'NONE')
    
    :type: str
    """

    empty_draw_size = 0.0
    """Size of display for empties in the viewport
    (type: float in [0.0001, 1000], default 0.0)
    
    :type: float
    """

    empty_draw_type = 'PLAIN_AXES'
    """Viewport display style for empties
    (type: enum in ['PLAIN_AXES', 'ARROWS', 'SINGLE_ARROW', 'CIRCLE', 'CUBE', 'SPHERE', 'CONE', 'IMAGE'], default 'PLAIN_AXES')
    
    :type: str
    """

    empty_image_offset = (0.0, 0.0)
    """Origin offset distance
    (type: float array of 2 items in [-inf, inf], default (0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    field = None
    """Settings for using the object as a field in physics simulation
    (type: bpy.types.FieldSettings, (readonly))
    
    :type: FieldSettings
    """

    game = None
    """Game engine related settings for the object
    (type: bpy.types.GameObjectSettings, (readonly, never None))
    
    :type: GameObjectSettings
    """

    grease_pencil = None
    """Grease Pencil data-block
    (type: bpy.types.GreasePencil)
    
    :type: GreasePencil
    """

    hide = False
    """Restrict visibility in the viewport
    (type: boolean, default False)
    
    :type: bool
    """

    hide_render = False
    """Restrict renderability
    (type: boolean, default False)
    
    :type: bool
    """

    hide_select = False
    """Restrict selection in the viewport
    (type: boolean, default False)
    
    :type: bool
    """

    image_user = None
    """Parameters defining which layer, pass and frame of the image is displayed
    (type: bpy.types.ImageUser, (readonly, never None))
    
    :type: ImageUser
    """

    is_duplicator = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    layers = (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
    """Layers the object is on
    (type: boolean array of 20 items, default (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False))
    
    :type: collections.Sequence[bool]
    """

    layers_local_view = (False, False, False, False, False, False, False, False)
    """3D local view layers the object is on
    (type: boolean array of 8 items, default (False, False, False, False, False, False, False, False), (readonly))
    
    :type: collections.Sequence[bool]
    """

    location = (0.0, 0.0, 0.0)
    """Location of the object
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    lock_location = (False, False, False)
    """Lock editing of location in the interface
    (type: boolean array of 3 items, default (False, False, False))
    
    :type: collections.Sequence[bool]
    """

    lock_rotation = (False, False, False)
    """Lock editing of rotation in the interface
    (type: boolean array of 3 items, default (False, False, False))
    
    :type: collections.Sequence[bool]
    """

    lock_rotation_w = False
    """Lock editing of 'angle' component of four-component rotations in the interface
    (type: boolean, default False)
    
    :type: bool
    """

    lock_rotations_4d = False
    """Lock editing of four component rotations by components (instead of as Eulers)
    (type: boolean, default False)
    
    :type: bool
    """

    lock_scale = (False, False, False)
    """Lock editing of scale in the interface
    (type: boolean array of 3 items, default (False, False, False))
    
    :type: collections.Sequence[bool]
    """

    lod_levels = None
    """A collection of detail levels to automatically switch between
    (type: bpy.types.bpy_prop_collection of bpy.types.LodLevel, (readonly))
    
    :type: bpy_prop_collection
    """

    material_slots = None
    """Material slots in the object
    (type: bpy.types.bpy_prop_collection of bpy.types.MaterialSlot, (readonly))
    
    :type: bpy_prop_collection
    """

    matrix_basis = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    """Matrix access to location, rotation and scale (including deltas), before constraints and parenting are applied
    (type: float array of 16 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Matrix
    """

    matrix_local = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    """Parent relative transformation matrix - WARNING: Only takes into account 'Object' parenting, so e.g. in case of bone parenting you get a matrix relative to the Armature object, not to the actual parent bone
    (type: float array of 16 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Matrix
    """

    matrix_parent_inverse = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    """Inverse of object's parent matrix at time of parenting
    (type: float array of 16 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Matrix
    """

    matrix_world = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    """Worldspace transformation matrix
    (type: float array of 16 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Matrix
    """

    mode = 'OBJECT'
    """Object interaction mode
    * 'OBJECT': Object Mode.
    * 'EDIT': Edit Mode.
    * 'POSE': Pose Mode.
    * 'SCULPT': Sculpt Mode.
    * 'VERTEX_PAINT': Vertex Paint.
    * 'WEIGHT_PAINT': Weight Paint.
    * 'TEXTURE_PAINT': Texture Paint.
    * 'PARTICLE_EDIT': Particle Edit.
    * 'GPENCIL_EDIT': Edit Strokes, Edit Grease Pencil Strokes.
    (type: enum in ['OBJECT', 'EDIT', 'POSE', 'SCULPT', 'VERTEX_PAINT', 'WEIGHT_PAINT', 'TEXTURE_PAINT', 'PARTICLE_EDIT', 'GPENCIL_EDIT'], default 'OBJECT', (readonly))
    
    :type: str
    """

    modifiers = None
    """Modifiers affecting the geometric data of the object
    (type: bpy.types.ObjectModifiers bpy.types.bpy_prop_collection of bpy.types.Modifier, (readonly))
    
    :type: ObjectModifiers
    """

    motion_path = None
    """Motion Path for this element
    (type: bpy.types.MotionPath, (readonly))
    
    :type: MotionPath
    """

    parent = None
    """Parent Object
    (type: bpy.types.Object)
    
    :type: Object
    """

    parent_bone = ""
    """Name of parent bone in case of a bone parenting relation
    (type: string, default "", (never None))
    
    :type: str
    """

    parent_type = 'OBJECT'
    """Type of parent relation
    * 'OBJECT': Object, The object is parented to an object.
    * 'ARMATURE': Armature.
    * 'LATTICE': Lattice, The object is parented to a lattice.
    * 'VERTEX': Vertex, The object is parented to a vertex.
    * 'VERTEX_3': 3 Vertices.
    * 'BONE': Bone, The object is parented to a bone.
    (type: enum in ['OBJECT', 'ARMATURE', 'LATTICE', 'VERTEX', 'VERTEX_3', 'BONE'], default 'OBJECT')
    
    :type: str
    """

    parent_vertices = (0, 0, 0)
    """Indices of vertices in case of a vertex parenting relation
    (type: int array of 3 items in [0, inf], default (0, 0, 0))
    
    :type: collections.Sequence[int]
    """

    particle_systems = None
    """Particle systems emitted from the object
    (type: bpy.types.ParticleSystems bpy.types.bpy_prop_collection of bpy.types.ParticleSystem, (readonly))
    
    :type: ParticleSystems
    """

    pass_index = 0
    """Index number for the "Object Index" render pass
    (type: int in [0, 32767], default 0)
    
    :type: int
    """

    pose = None
    """Current pose for armatures
    (type: bpy.types.Pose, (readonly))
    
    :type: Pose
    """

    pose_library = None
    """Action used as a pose library for armatures
    (type: bpy.types.Action)
    
    :type: Action
    """

    proxy = None
    """Library object this proxy object controls
    (type: bpy.types.Object, (readonly))
    
    :type: Object
    """

    proxy_group = None
    """Library group duplicator object this proxy object controls
    (type: bpy.types.Object, (readonly))
    
    :type: Object
    """

    rigid_body = None
    """Settings for rigid body simulation
    (type: bpy.types.RigidBodyObject, (readonly))
    
    :type: RigidBodyObject
    """

    rigid_body_constraint = None
    """Constraint constraining rigid bodies
    (type: bpy.types.RigidBodyConstraint, (readonly))
    
    :type: RigidBodyConstraint
    """

    rotation_axis_angle = (0.0, 0.0, 1.0, 0.0)
    """Angle of Rotation for Axis-Angle rotation representation
    (type: float array of 4 items in [-inf, inf], default (0.0, 0.0, 1.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    rotation_euler = (0.0, 0.0, 0.0)
    """Rotation in Eulers
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Euler
    """

    rotation_mode = 'QUATERNION'
    """
    * 'QUATERNION': Quaternion (WXYZ), No Gimbal Lock.
    * 'XYZ': XYZ Euler, XYZ Rotation Order - prone to Gimbal Lock (default).
    * 'XZY': XZY Euler, XZY Rotation Order - prone to Gimbal Lock.
    * 'YXZ': YXZ Euler, YXZ Rotation Order - prone to Gimbal Lock.
    * 'YZX': YZX Euler, YZX Rotation Order - prone to Gimbal Lock.
    * 'ZXY': ZXY Euler, ZXY Rotation Order - prone to Gimbal Lock.
    * 'ZYX': ZYX Euler, ZYX Rotation Order - prone to Gimbal Lock.
    * 'AXIS_ANGLE': Axis Angle, Axis Angle (W+XYZ), defines a rotation around some axis defined by 3D-Vector.
    (type: enum in ['QUATERNION', 'XYZ', 'XZY', 'YXZ', 'YZX', 'ZXY', 'ZYX', 'AXIS_ANGLE'], default 'QUATERNION')
    
    :type: str
    """

    rotation_quaternion = (1.0, 0.0, 0.0, 0.0)
    """Rotation in Quaternions
    (type: float array of 4 items in [-inf, inf], default (1.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Quaternion
    """

    scale = (1.0, 1.0, 1.0)
    """Scaling of the object
    (type: float array of 3 items in [-inf, inf], default (1.0, 1.0, 1.0))
    
    :type: mathutils.Vector
    """

    select = False
    """Object selection state
    (type: boolean, default False)
    
    :type: bool
    """

    show_all_edges = False
    """Display all edges for mesh objects
    (type: boolean, default False)
    
    :type: bool
    """

    show_axis = False
    """Display the object's origin and axes
    (type: boolean, default False)
    
    :type: bool
    """

    show_bounds = False
    """Display the object's bounds
    (type: boolean, default False)
    
    :type: bool
    """

    show_name = False
    """Display the object's name
    (type: boolean, default False)
    
    :type: bool
    """

    show_only_shape_key = False
    """Always show the current Shape for this Object
    (type: boolean, default False)
    
    :type: bool
    """

    show_texture_space = False
    """Display the object's texture space
    (type: boolean, default False)
    
    :type: bool
    """

    show_transparent = False
    """Display material transparency in the object (unsupported for duplicator drawing)
    (type: boolean, default False)
    
    :type: bool
    """

    show_wire = False
    """Add the object's wireframe over solid drawing
    (type: boolean, default False)
    
    :type: bool
    """

    show_x_ray = False
    """Make the object draw in front of others (unsupported for duplicator drawing)
    (type: boolean, default False)
    
    :type: bool
    """

    slow_parent_offset = 0.0
    """Delay in the parent relationship
    (type: float in [-500000, 500000], default 0.0)
    
    :type: float
    """

    soft_body = None
    """Settings for soft body simulation
    (type: bpy.types.SoftBodySettings, (readonly))
    
    :type: SoftBodySettings
    """

    track_axis = 'POS_X'
    """Axis that points in 'forward' direction (applies to DupliFrame when parent 'Follow' is enabled)
    (type: enum in ['POS_X', 'POS_Y', 'POS_Z', 'NEG_X', 'NEG_Y', 'NEG_Z'], default 'POS_X')
    
    :type: str
    """

    type = 'EMPTY'
    """Type of Object
    (type: enum in ['MESH', 'CURVE', 'SURFACE', 'META', 'FONT', 'ARMATURE', 'LATTICE', 'EMPTY', 'CAMERA', 'LAMP', 'SPEAKER'], default 'EMPTY', (readonly))
    
    :type: str
    """

    up_axis = 'X'
    """Axis that points in the upward direction (applies to DupliFrame when parent 'Follow' is enabled)
    (type: enum in ['X', 'Y', 'Z'], default 'X')
    
    :type: str
    """

    use_color_wire = False
    """Use color wire
    (type: boolean, default False)
    
    :type: bool
    """

    use_dupli_faces_scale = False
    """Scale dupli based on face size
    (type: boolean, default False)
    
    :type: bool
    """

    use_dupli_frames_speed = False
    """Set dupliframes to use the current frame instead of parent curve's evaluation time
    (type: boolean, default False)
    
    :type: bool
    """

    use_dupli_vertices_rotation = False
    """Rotate dupli according to vertex normal
    (type: boolean, default False)
    
    :type: bool
    """

    use_dynamic_topology_sculpting = False
    """(type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_extra_recalc_data = False
    """Refresh this object's data again on frame changes, dependency graph hack
    (type: boolean, default False)
    
    :type: bool
    """

    use_extra_recalc_object = False
    """Refresh this object again on frame changes, dependency graph hack
    (type: boolean, default False)
    
    :type: bool
    """

    use_shape_key_edit_mode = False
    """Apply shape keys in edit mode (for Meshes only)
    (type: boolean, default False)
    
    :type: bool
    """

    use_slow_parent = False
    """Create a delay in the parent relationship (beware: this isn't renderfarm safe and may be invalid after jumping around the timeline)
    (type: boolean, default False)
    
    :type: bool
    """

    vertex_groups = None
    """Vertex groups of the object
    (type: bpy.types.VertexGroups bpy.types.bpy_prop_collection of bpy.types.VertexGroup, (readonly))
    
    :type: VertexGroups
    """

    wire_color = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    children = None
    """All the children of this object
                                    (readonly)
    """

    users_group = None
    """The groups this object is in
                                    (readonly)
    """

    users_scene = None
    """The scenes this object is in
                                    (readonly)
    """

    def convert_space(self, pose_bone=None, matrix=(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), from_space='WORLD', to_space='WORLD'):
        """Convert (transform) the given matrix from one space to another
        
        :param pose_bone: Bone to use to define spaces (may be None, in which case only the two 'WORLD' and 'LOCAL' spaces are usable)
            (type: bpy.types.PoseBone, (optional))
        :type pose_bone: PoseBone
        :param matrix: The matrix to transform
            (type: float array of 16 items in [-inf, inf], (optional))
        :type matrix: mathutils.Matrix
        :param from_space: The space in which 'matrix' is currently
            * 'WORLD': World Space, The most gobal space in Blender.
            * 'POSE': Pose Space, The pose space of a bone (its armature's object space).
            * 'LOCAL_WITH_PARENT': Local With Parent, The local space of a bone's parent bone.
            * 'LOCAL': Local Space, The local space of an object/bone.
            (type: enum in ['WORLD', 'POSE', 'LOCAL_WITH_PARENT', 'LOCAL'], (optional))
        :type from_space: str
        :param to_space: The space to which you want to transform 'matrix'
            * 'WORLD': World Space, The most gobal space in Blender.
            * 'POSE': Pose Space, The pose space of a bone (its armature's object space).
            * 'LOCAL_WITH_PARENT': Local With Parent, The local space of a bone's parent bone.
            * 'LOCAL': Local Space, The local space of an object/bone.
            (type: enum in ['WORLD', 'POSE', 'LOCAL_WITH_PARENT', 'LOCAL'], (optional))
        :type to_space: str
        :return: The transformed matrix
        :param : (type: float array of 16 items in [-inf, inf])
        :rtype: mathutils.Matrix
        """

    def calc_matrix_camera(self, x=1, y=1, scale_x=1.0, scale_y=1.0):
        """Generate the camera projection matrix of this object (mostly useful for Camera and Lamp types)
        
        :param x: Width of the render area
            (type: int in [0, inf], (optional))
        :type x: int
        :param y: Height of the render area
            (type: int in [0, inf], (optional))
        :type y: int
        :param scale_x: Width scaling factor
            (type: float in [1e-06, inf], (optional))
        :type scale_x: float
        :param scale_y: height scaling factor
            (type: float in [1e-06, inf], (optional))
        :type scale_y: float
        :return: The camera projection matrix
        :param : (type: float array of 16 items in [-inf, inf])
        :rtype: mathutils.Matrix
        """

    def camera_fit_coords(self, scene, coordinates):
        """Compute the coordinate (and scale for ortho cameras) given object should be to 'see' all given coordinates
        
        :param scene: Scene to get render size information from, if available
            (type: bpy.types.Scene)
        :type scene: Scene
        :param coordinates: Coordinates to fit in
            (type: float array of 1 items in [-inf, inf], (never None))
        :type coordinates: collections.Sequence[float]
        :return: (co_return, scale_return)
            co_return, The location to aim to be able to see all given points, float array of 3 items in [-inf, inf]
            scale_return, The ortho scale to aim to be able to see all given points (if relevant), float in [-inf, inf]
        :rtype: tuple
        """

    def to_mesh(self, scene, apply_modifiers, settings, calc_tessface=True, calc_undeformed=False):
        """Create a Mesh data-block with modifiers applied
        
        :param scene: Scene within which to evaluate modifiers
            (type: bpy.types.Scene, (never None))
        :type scene: Scene
        :param apply_modifiers: Apply modifiers
        :type apply_modifiers: bool
        :param settings: Modifier settings to apply
            * 'PREVIEW': Preview, Apply modifier preview settings.
            * 'RENDER': Render, Apply modifier render settings.
            (type: enum in ['PREVIEW', 'RENDER'])
        :type settings: str
        :param calc_tessface: Calculate Tessellation, Calculate tessellation faces
            (type: boolean, (optional))
        :type calc_tessface: bool
        :param calc_undeformed: Calculate Undeformed, Calculate undeformed vertex coordinates
            (type: boolean, (optional))
        :type calc_undeformed: bool
        :return: Mesh created from object, remove it if it is only used for export
        :param : (type: bpy.types.Mesh)
        :rtype: Mesh
        """

    def dupli_list_create(self, scene, settings='VIEWPORT'):
        """Create a list of dupli objects for this object, needs to be freed manually with free_dupli_list to restore the objects real matrix and layers
        
        :param scene: Scene within which to evaluate duplis
            (type: bpy.types.Scene, (never None))
        :type scene: Scene
        :param settings: Generate texture coordinates for rendering
            * 'VIEWPORT': Viewport, Generate duplis using viewport settings.
            * 'PREVIEW': Preview, Generate duplis using preview settings.
            * 'RENDER': Render, Generate duplis using render settings.
            (type: enum in ['VIEWPORT', 'PREVIEW', 'RENDER'], (optional))
        :type settings: str
        """

    def dupli_list_clear(self):
        """Free the list of dupli objects"""

    def find_armature(self):
        """Find armature influencing this object as a parent or via a modifier
        
        :return: Armature object influencing this object or NULL
        :param : (type: bpy.types.Object)
        :rtype: Object
        """

    def shape_key_add(self, name="Key", from_mix=True):
        """Add shape key to this object
        
        :param name: Unique name for the new keyblock
            (type: str, (optional, never None))
        :type name: str
        :param from_mix: Create new shape from existing mix of shapes
            (type: boolean, (optional))
        :type from_mix: bool
        :return: New shape keyblock
        :param : (type: bpy.types.ShapeKey)
        :rtype: ShapeKey
        """

    def shape_key_remove(self, key):
        """Remove a Shape Key from this object
        
        :param key: Keyblock to be removed
            (type: bpy.types.ShapeKey, (never None))
        :type key: ShapeKey
        """

    def ray_cast(self, origin, direction, distance=1.70141e+38):
        """Cast a ray onto in object space
        
        :param distance: Maximum distance
            (type: float in [0, inf], (optional))
        :type distance: float
        :return: (result, location, normal, index)
            result, boolean
            location, The hit location of this ray cast, float array of 3 items in [-inf, inf]
            normal, The face normal at the ray cast hit location, float array of 3 items in [-inf, inf]
            index, The face index, -1 when original data isn't available, int in [-inf, inf]
        :rtype: tuple
        """

    def closest_point_on_mesh(self, origin, distance=1.84467e+19):
        """Find the nearest point in object space
        
        :param distance: Maximum distance
            (type: float in [0, inf], (optional))
        :type distance: float
        :return: (result, location, normal, index)
            result, boolean
            location, The location on the object closest to the point, float array of 3 items in [-inf, inf]
            normal, The face normal at the closest point, float array of 3 items in [-inf, inf]
            index, The face index, -1 when original data isn't available, int in [-inf, inf]
        :rtype: tuple
        """

    def is_visible(self, scene):
        """Determine if object is visible in a given scene
        
        :return: Object visibility
        :rtype: bool
        """

    def is_modified(self, scene, settings):
        """Determine if this object is modified from the base mesh data
        
        :param settings: Modifier settings to apply
            * 'PREVIEW': Preview, Apply modifier preview settings.
            * 'RENDER': Render, Apply modifier render settings.
            (type: enum in ['PREVIEW', 'RENDER'])
        :type settings: str
        :return: Object visibility
        :rtype: bool
        """

    def is_deform_modified(self, scene, settings):
        """Determine if this object is modified by a deformation from the base mesh data
        
        :param settings: Modifier settings to apply
            * 'PREVIEW': Preview, Apply modifier preview settings.
            * 'RENDER': Render, Apply modifier render settings.
            (type: enum in ['PREVIEW', 'RENDER'])
        :type settings: str
        :return: Object visibility
        :rtype: bool
        """

    def dm_info(self, type):
        """Returns a string for derived mesh data
        
        :param type: Modifier settings to apply
            * 'SOURCE': Source, Source mesh.
            * 'DEFORM': Deform, Objects deform mesh.
            * 'FINAL': Final, Objects final mesh.
            (type: enum in ['SOURCE', 'DEFORM', 'FINAL'])
        :type type: str
        :return: result
        :param : (type: string, (never None))
        :rtype: str
        """

    def update_from_editmode(self):
        """Load the objects edit-mode data into the object data
        
        :return: Success
        :rtype: bool
        """

    def cache_release(self):
        """Release memory used by caches associated with this object. Intended to be used by render engines only"""


class ObjectActuator(Actuator):
    """Actuator to control the object movement"""

    angular_velocity = (0.0, 0.0, 0.0)
    """Angular velocity
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    damping = 0
    """Number of frames to reach the target velocity
    (type: int in [-32768, 32767], default 0)
    
    :type: int
    """

    derivate_coefficient = 0.0
    """Not required, high values can cause instability
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    force = (0.0, 0.0, 0.0)
    """Force
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    force_max_x = 0.0
    """Upper limit for X force
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    force_max_y = 0.0
    """Upper limit for Y force
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    force_max_z = 0.0
    """Upper limit for Z force
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    force_min_x = 0.0
    """Lower limit for X force
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    force_min_y = 0.0
    """Lower limit for Y force
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    force_min_z = 0.0
    """Lower limit for Z force
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    integral_coefficient = 0.0
    """Low value (0.01) for slow response, high value (0.5) for fast response
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    linear_velocity = (0.0, 0.0, 0.0)
    """Linear velocity (in Servo mode it sets the target relative linear velocity, it will be achieved by automatic application of force - Null velocity is a valid target)
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    mode = 'OBJECT_NORMAL'
    """Specify the motion system
    (type: enum in ['OBJECT_NORMAL', 'OBJECT_SERVO', 'OBJECT_CHARACTER'], default 'OBJECT_NORMAL')
    
    :type: str
    """

    offset_location = (0.0, 0.0, 0.0)
    """Location
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    offset_rotation = (0.0, 0.0, 0.0)
    """Rotation
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Euler
    """

    proportional_coefficient = 0.0
    """Typical value is 60x integral coefficient
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    reference_object = None
    """Reference object for velocity calculation, leave empty for world reference
    (type: bpy.types.Object)
    
    :type: Object
    """

    torque = (0.0, 0.0, 0.0)
    """Torque
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    use_add_character_location = False
    """Toggle between ADD and SET character location
    (type: boolean, default False)
    
    :type: bool
    """

    use_add_linear_velocity = False
    """Toggles between ADD and SET linV
    (type: boolean, default False)
    
    :type: bool
    """

    use_character_jump = False
    """Make the character jump using the settings in the physics properties
    (type: boolean, default False)
    
    :type: bool
    """

    use_local_angular_velocity = False
    """Angular velocity is defined in local coordinates
    (type: boolean, default False)
    
    :type: bool
    """

    use_local_force = False
    """Force is defined in local coordinates
    (type: boolean, default False)
    
    :type: bool
    """

    use_local_linear_velocity = False
    """Velocity is defined in local coordinates
    (type: boolean, default False)
    
    :type: bool
    """

    use_local_location = False
    """Location is defined in local coordinates
    (type: boolean, default False)
    
    :type: bool
    """

    use_local_rotation = False
    """Rotation is defined in local coordinates
    (type: boolean, default False)
    
    :type: bool
    """

    use_local_torque = False
    """Torque is defined in local coordinates
    (type: boolean, default False)
    
    :type: bool
    """

    use_servo_limit_x = False
    """Set limit to force along the X axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_servo_limit_y = False
    """Set limit to force along the Y axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_servo_limit_z = False
    """Set limit to force along the Z axis
    (type: boolean, default False)
    
    :type: bool
    """


class ObjectSolverConstraint(Constraint):
    """Lock motion to the reconstructed object movement"""

    camera = None
    """Camera to which motion is parented (if empty active scene camera is used)
    (type: bpy.types.Object)
    
    :type: Object
    """

    clip = None
    """Movie Clip to get tracking data from
    (type: bpy.types.MovieClip)
    
    :type: MovieClip
    """

    object = ""
    """Movie tracking object to follow
    (type: string, default "", (never None))
    
    :type: str
    """

    use_active_clip = False
    """Use active clip defined in scene
    (type: boolean, default False)
    
    :type: bool
    """


class ObstacleFluidSettings(FluidSettings):
    """Fluid simulation settings for obstacles in the simulation"""

    impact_factor = 0.0
    """This is an unphysical value for moving objects - it controls the impact an obstacle has on the fluid, =0 behaves a bit like outflow (deleting fluid), =1 is default, while >1 results in high forces (can be used to tweak total mass)
    (type: float in [-2, 10], default 0.0)
    
    :type: float
    """

    partial_slip_factor = 0.0
    """Amount of mixing between no- and free-slip, 0 is no slip and 1 is free slip
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    slip_type = 'NOSLIP'
    """
    * 'NOSLIP': No Slip, Obstacle causes zero normal and tangential velocity (=sticky), default for all (only option for moving objects).
    * 'PARTIALSLIP': Partial Slip, Mix between no-slip and free-slip (non moving objects only!).
    * 'FREESLIP': Free Slip, Obstacle only causes zero normal velocity (=not sticky, non moving objects only!).
    (type: enum in ['NOSLIP', 'PARTIALSLIP', 'FREESLIP'], default 'NOSLIP')
    
    :type: str
    """

    use = False
    """Object contributes to the fluid simulation
    (type: boolean, default False)
    
    :type: bool
    """

    use_animated_mesh = False
    """Export this mesh as an animated one (slower and enforces No Slip, only use if really necessary [e.g. armatures or parented objects], animated pos/rot/scale F-Curves do not require it)
    (type: boolean, default False)
    
    :type: bool
    """

    volume_initialization = 'VOLUME'
    """Volume initialization type (WARNING: complex volumes might require too much memory and break simulation)
    * 'VOLUME': Volume, Use only the inner volume of the mesh.
    * 'SHELL': Shell, Use only the outer shell of the mesh.
    * 'BOTH': Both, Use both the inner volume and the outer shell of the mesh.
    (type: enum in ['VOLUME', 'SHELL', 'BOTH'], default 'VOLUME')
    
    :type: str
    """


class OceanModifier(Modifier):
    """Simulate an ocean surface"""

    bake_foam_fade = 0.0
    """How much foam accumulates over time (baked ocean only)
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    choppiness = 0.0
    """Choppiness of the wave's crest (adds some horizontal component to the displacement)
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    damping = 0.0
    """Damp reflected waves going in opposite direction to the wind
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    depth = 0.0
    """Depth of the solid ground below the water surface
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    filepath = ""
    """Path to a folder to store external baked images
    (type: string, default "", (never None))
    
    :type: str
    """

    foam_coverage = 0.0
    """Amount of generated foam
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    foam_layer_name = ""
    """Name of the vertex color layer used for foam
    (type: string, default "", (never None))
    
    :type: str
    """

    frame_end = 0
    """End frame of the ocean baking
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    frame_start = 0
    """Start frame of the ocean baking
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    geometry_mode = 'GENERATE'
    """Method of modifying geometry
    * 'GENERATE': Generate, Generate ocean surface geometry at the specified resolution.
    * 'DISPLACE': Displace, Displace existing geometry according to simulation.
    (type: enum in ['GENERATE', 'DISPLACE'], default 'GENERATE')
    
    :type: str
    """

    is_cached = False
    """Whether the ocean is using cached data or simulating
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    random_seed = 0
    """Seed of the random generator
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    repeat_x = 0
    """Repetitions of the generated surface in X
    (type: int in [1, 1024], default 0)
    
    :type: int
    """

    repeat_y = 0
    """Repetitions of the generated surface in Y
    (type: int in [1, 1024], default 0)
    
    :type: int
    """

    resolution = 0
    """Resolution of the generated surface
    (type: int in [1, 1024], default 0)
    
    :type: int
    """

    size = 0.0
    """Surface scale factor (does not affect the height of the waves)
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    spatial_size = 0
    """Size of the simulation domain (in meters), and of the generated geometry (in BU)
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    time = 0.0
    """Current time of the simulation
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    use_foam = False
    """Generate foam mask as a vertex color channel
    (type: boolean, default False)
    
    :type: bool
    """

    use_normals = False
    """Output normals for bump mapping - disabling can speed up performance if its not needed
    (type: boolean, default False)
    
    :type: bool
    """

    wave_alignment = 0.0
    """How much the waves are aligned to each other
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    wave_direction = 0.0
    """Main direction of the waves when they are (partially) aligned
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    wave_scale = 0.0
    """Scale of the displacement effect
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    wave_scale_min = 0.0
    """Shortest allowed wavelength
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    wind_velocity = 0.0
    """Wind speed
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """


class OperatorFileListElement(PropertyGroup):
    """"""

    name = ""
    """Name of a file or directory within a file list
    (type: string, default "", (never None))
    
    :type: str
    """


class OperatorMousePath(PropertyGroup):
    """Mouse path values for operators that record such paths"""

    loc = (0.0, 0.0)
    """Mouse location
    (type: float array of 2 items in [-inf, inf], default (0.0, 0.0))
    
    :type: mathutils.Vector
    """

    time = 0.0
    """Time of mouse location
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """


class OperatorStrokeElement(PropertyGroup):
    """"""

    is_start = False
    """(type: boolean, default False)
    
    :type: bool
    """

    location = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    mouse = (0.0, 0.0)
    """(type: float array of 2 items in [-inf, inf], default (0.0, 0.0))
    
    :type: mathutils.Vector
    """

    pen_flip = False
    """(type: boolean, default False)
    
    :type: bool
    """

    pressure = 0.0
    """Tablet pressure
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    size = 0.0
    """Brush Size in screen space
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    time = 0.0
    """(type: float in [0, inf], default 0.0)
    
    :type: float
    """


class OrController(Controller):
    """Controller passing on events based on a logical OR operation"""


class OutflowFluidSettings(FluidSettings):
    """Fluid simulation settings for objects removing fluids from the simulation"""

    use = False
    """Object contributes to the fluid simulation
    (type: boolean, default False)
    
    :type: bool
    """

    use_animated_mesh = False
    """Export this mesh as an animated one (slower and enforces No Slip, only use if really necessary [e.g. armatures or parented objects], animated pos/rot/scale F-Curves do not require it)
    (type: boolean, default False)
    
    :type: bool
    """

    volume_initialization = 'VOLUME'
    """Volume initialization type (WARNING: complex volumes might require too much memory and break simulation)
    * 'VOLUME': Volume, Use only the inner volume of the mesh.
    * 'SHELL': Shell, Use only the outer shell of the mesh.
    * 'BOTH': Both, Use both the inner volume and the outer shell of the mesh.
    (type: enum in ['VOLUME', 'SHELL', 'BOTH'], default 'VOLUME')
    
    :type: str
    """


class PARTICLE_UL_particle_systems(UIList):
    """"""

    def draw_item(self, context, layout, data, item, icon, active_data, active_propname, index, flt_flag):
        """"""


class PHYSICS_UL_dynapaint_surfaces(UIList):
    """"""

    def draw_item(self, context, layout, data, item, icon, active_data, active_propname, index):
        """"""


class PaintCurve(ID):
    """"""


class Palette(ID):
    """"""

    colors = None
    """(type: bpy.types.PaletteColors bpy.types.bpy_prop_collection of bpy.types.PaletteColor, (readonly))
    
    :type: PaletteColors
    """


class ParentActuator(Actuator):
    """"""

    mode = 'SETPARENT'
    """(type: enum in ['SETPARENT', 'REMOVEPARENT'], default 'SETPARENT')
    
    :type: str
    """

    object = None
    """Set this object as parent
    (type: bpy.types.Object)
    
    :type: Object
    """

    use_compound = False
    """Add this object shape to the parent shape (only if the parent shape is already compound)
    (type: boolean, default False)
    
    :type: bool
    """

    use_ghost = False
    """Make this object ghost while parented
    (type: boolean, default False)
    
    :type: bool
    """


class ParticleFluidSettings(FluidSettings):
    """Fluid simulation settings for objects storing fluid particles generated by the simulation"""

    alpha_influence = 0.0
    """Amount of particle alpha change, inverse of size influence: 0=off (all same alpha), 1=full (larger particles get lower alphas, smaller ones higher values)
    (type: float in [0, 2], default 0.0)
    
    :type: float
    """

    filepath = ""
    """Directory (and/or filename prefix) to store and load particles from
    (type: string, default "", (never None))
    
    :type: str
    """

    particle_influence = 0.0
    """Amount of particle size scaling: 0=off (all same size), 1=full (range 0.2-2.0), >1=stronger
    (type: float in [0, 2], default 0.0)
    
    :type: float
    """

    show_tracer = False
    """Show tracer particles
    (type: boolean, default False)
    
    :type: bool
    """

    use_drops = False
    """Show drop particles
    (type: boolean, default False)
    
    :type: bool
    """

    use_floats = False
    """Show floating foam particles
    (type: boolean, default False)
    
    :type: bool
    """


class ParticleInstanceModifier(Modifier):
    """Particle system instancing modifier"""

    axis = 'X'
    """Pole axis for rotation
    (type: enum in ['X', 'Y', 'Z'], default 'X')
    
    :type: str
    """

    object = None
    """Object that has the particle system
    (type: bpy.types.Object)
    
    :type: Object
    """

    particle_system_index = 0
    """(type: int in [1, 10], default 0)
    
    :type: int
    """

    position = 0.0
    """Position along path
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    random_position = 0.0
    """Randomize position along path
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    show_alive = False
    """Show instances when particles are alive
    (type: boolean, default False)
    
    :type: bool
    """

    show_dead = False
    """Show instances when particles are dead
    (type: boolean, default False)
    
    :type: bool
    """

    show_unborn = False
    """Show instances when particles are unborn
    (type: boolean, default False)
    
    :type: bool
    """

    use_children = False
    """Create instances from child particles
    (type: boolean, default False)
    
    :type: bool
    """

    use_normal = False
    """Create instances from normal particles
    (type: boolean, default False)
    
    :type: bool
    """

    use_path = False
    """Create instances along particle paths
    (type: boolean, default False)
    
    :type: bool
    """

    use_preserve_shape = False
    """Don't stretch the object
    (type: boolean, default False)
    
    :type: bool
    """

    use_size = False
    """Use particle size to scale the instances
    (type: boolean, default False)
    
    :type: bool
    """


class ParticleSettings(ID):
    """Particle settings, reusable by multiple particle systems"""

    active_dupliweight = None
    """(type: bpy.types.ParticleDupliWeight, (readonly))
    
    :type: ParticleDupliWeight
    """

    active_dupliweight_index = 0
    """(type: int in [0, inf], default 0)
    
    :type: int
    """

    active_texture = None
    """Active texture slot being displayed
    (type: bpy.types.Texture)
    
    :type: Texture
    """

    active_texture_index = 0
    """Index of active texture slot
    (type: int in [0, 17], default 0)
    
    :type: int
    """

    adaptive_angle = 0
    """How many degrees path has to curve to make another render segment
    (type: int in [0, 45], default 0)
    
    :type: int
    """

    adaptive_pixel = 0
    """How many pixels path has to cover to make another render segment
    (type: int in [0, 50], default 0)
    
    :type: int
    """

    angular_velocity_factor = 0.0
    """Angular velocity amount (in radians per second)
    (type: float in [-200, 200], default 0.0)
    
    :type: float
    """

    angular_velocity_mode = 'NONE'
    """What axis is used to change particle rotation with time
    (type: enum in ['NONE', 'VELOCITY', 'HORIZONTAL', 'VERTICAL', 'GLOBAL_X', 'GLOBAL_Y', 'GLOBAL_Z', 'RAND'], default 'NONE')
    
    :type: str
    """

    animation_data = None
    """Animation data for this data-block
    (type: bpy.types.AnimData, (readonly))
    
    :type: AnimData
    """

    apply_effector_to_children = False
    """Apply effectors to children
    (type: boolean, default False)
    
    :type: bool
    """

    apply_guide_to_children = False
    """(type: boolean, default False)
    
    :type: bool
    """

    bending_random = 0.0
    """Random stiffness of hairs
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    billboard_align = 'X'
    """In respect to what the billboards are aligned
    (type: enum in ['X', 'Y', 'Z', 'VIEW', 'VEL'], default 'X')
    
    :type: str
    """

    billboard_animation = 'NONE'
    """How to animate billboard textures
    (type: enum in ['NONE', 'AGE', 'FRAME', 'ANGLE'], default 'NONE')
    
    :type: str
    """

    billboard_object = None
    """Billboards face this object (default is active camera)
    (type: bpy.types.Object)
    
    :type: Object
    """

    billboard_offset = (0.0, 0.0)
    """(type: float array of 2 items in [-100, 100], default (0.0, 0.0))
    
    :type: mathutils.Vector
    """

    billboard_offset_split = 'NONE'
    """How to offset billboard textures
    (type: enum in ['NONE', 'LINEAR', 'RANDOM'], default 'NONE')
    
    :type: str
    """

    billboard_size = (0.0, 0.0)
    """Scale billboards relative to particle size
    (type: float array of 2 items in [0.001, 10], default (0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    billboard_tilt = 0.0
    """Tilt of the billboards
    (type: float in [-1, 1], default 0.0)
    
    :type: float
    """

    billboard_tilt_random = 0.0
    """Random tilt of the billboards
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    billboard_uv_split = 0
    """Number of rows/columns to split UV coordinates for billboards
    (type: int in [1, 100], default 0)
    
    :type: int
    """

    billboard_velocity_head = 0.0
    """Scale billboards by velocity
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    billboard_velocity_tail = 0.0
    """Scale billboards by velocity
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    boids = None
    """(type: bpy.types.BoidSettings, (readonly))
    
    :type: BoidSettings
    """

    branch_threshold = 0.0
    """Threshold of branching
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    brownian_factor = 0.0
    """Amount of random, erratic particle movement
    (type: float in [0, 200], default 0.0)
    
    :type: float
    """

    child_length = 0.0
    """Length of child paths
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    child_length_threshold = 0.0
    """Amount of particles left untouched by child path length
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    child_nbr = 0
    """Number of children/parent
    (type: int in [0, 100000], default 0)
    
    :type: int
    """

    child_parting_factor = 0.0
    """Create parting in the children based on parent strands
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    child_parting_max = 0.0
    """Maximum root to tip angle (tip distance/root distance for long hair)
    (type: float in [0, 180], default 0.0)
    
    :type: float
    """

    child_parting_min = 0.0
    """Minimum root to tip angle (tip distance/root distance for long hair)
    (type: float in [0, 180], default 0.0)
    
    :type: float
    """

    child_radius = 0.0
    """Radius of children around parent
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    child_roundness = 0.0
    """Roundness of children around parent
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    child_size = 0.0
    """A multiplier for the child particle size
    (type: float in [0.001, 100000], default 0.0)
    
    :type: float
    """

    child_size_random = 0.0
    """Random variation to the size of the child particles
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    child_type = 'NONE'
    """Create child particles
    (type: enum in ['NONE', 'SIMPLE', 'INTERPOLATED'], default 'NONE')
    
    :type: str
    """

    clump_curve = None
    """Curve defining clump tapering
    (type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    clump_factor = 0.0
    """Amount of clumping
    (type: float in [-1, 1], default 0.0)
    
    :type: float
    """

    clump_noise_size = 0.0
    """Size of clump noise
    (type: float in [1e-05, 100000], default 0.0)
    
    :type: float
    """

    clump_shape = 0.0
    """Shape of clumping
    (type: float in [-0.999, 0.999], default 0.0)
    
    :type: float
    """

    collision_group = None
    """Limit colliders to this Group
    (type: bpy.types.Group)
    
    :type: Group
    """

    color_maximum = 0.0
    """Maximum length of the particle color vector
    (type: float in [0.01, 100], default 0.0)
    
    :type: float
    """

    count = 0
    """Total number of particles
    (type: int in [0, 10000000], default 0)
    
    :type: int
    """

    courant_target = 0.1
    """The relative distance a particle can move before requiring more subframes (target Courant number); 0.01-0.3 is the recommended range
    (type: float in [0.0001, 10], default 0.1)
    
    :type: float
    """

    create_long_hair_children = False
    """Calculate children that suit long hair well
    (type: boolean, default False)
    
    :type: bool
    """

    damping = 0.0
    """Amount of damping
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    distribution = 'JIT'
    """How to distribute particles on selected element
    (type: enum in ['JIT', 'RAND', 'GRID'], default 'JIT')
    
    :type: str
    """

    drag_factor = 0.0
    """Amount of air-drag
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    draw_color = 'NONE'
    """Draw additional particle data as a color
    (type: enum in ['NONE', 'MATERIAL', 'VELOCITY', 'ACCELERATION'], default 'NONE')
    
    :type: str
    """

    draw_method = 'NONE'
    """How particles are drawn in viewport
    (type: enum in ['NONE', 'RENDER', 'DOT', 'CIRC', 'CROSS', 'AXIS'], default 'NONE')
    
    :type: str
    """

    draw_percentage = 0
    """Percentage of particles to display in 3D view
    (type: int in [0, 100], default 0)
    
    :type: int
    """

    draw_size = 0
    """Size of particles on viewport in pixels (0=default)
    (type: int in [0, 1000], default 0)
    
    :type: int
    """

    draw_step = 0
    """How many steps paths are drawn with (power of 2)
    (type: int in [0, 10], default 0)
    
    :type: int
    """

    dupli_group = None
    """Show Objects in this Group in place of particles
    (type: bpy.types.Group)
    
    :type: Group
    """

    dupli_object = None
    """Show this Object in place of particles
    (type: bpy.types.Object)
    
    :type: Object
    """

    dupli_weights = None
    """Weights for all of the objects in the dupli group
    (type: bpy.types.bpy_prop_collection of bpy.types.ParticleDupliWeight, (readonly))
    
    :type: bpy_prop_collection
    """

    effect_hair = 0.0
    """Hair stiffness for effectors
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    effector_amount = 0
    """How many particles are effectors (0 is all particles)
    (type: int in [0, 10000], default 0)
    
    :type: int
    """

    effector_weights = None
    """(type: bpy.types.EffectorWeights, (readonly))
    
    :type: EffectorWeights
    """

    emit_from = 'VERT'
    """Where to emit particles from
    (type: enum in ['VERT', 'FACE', 'VOLUME'], default 'VERT')
    
    :type: str
    """

    factor_random = 0.0
    """Give the starting velocity a random variation
    (type: float in [0, 200], default 0.0)
    
    :type: float
    """

    fluid = None
    """(type: bpy.types.SPHFluidSettings, (readonly))
    
    :type: SPHFluidSettings
    """

    force_field_1 = None
    """(type: bpy.types.FieldSettings, (readonly))
    
    :type: FieldSettings
    """

    force_field_2 = None
    """(type: bpy.types.FieldSettings, (readonly))
    
    :type: FieldSettings
    """

    frame_end = 0.0
    """Frame number to stop emitting particles
    (type: float in [-500000, 500000], default 0.0)
    
    :type: float
    """

    frame_start = 0.0
    """Frame number to start emitting particles
    (type: float in [-500000, 500000], default 0.0)
    
    :type: float
    """

    grid_random = 0.0
    """Add random offset to the grid locations
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    grid_resolution = 0
    """The resolution of the particle grid
    (type: int in [1, 250], default 0)
    
    :type: int
    """

    hair_length = 0.0
    """Length of the hair
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """

    hair_step = 0
    """Number of hair segments
    (type: int in [2, 50], default 0)
    
    :type: int
    """

    hexagonal_grid = False
    """Create the grid in a hexagonal pattern
    (type: boolean, default False)
    
    :type: bool
    """

    integrator = 'EULER'
    """Algorithm used to calculate physics, from the fastest to the most stable/accurate: Midpoint, Euler, Verlet, RK4 (Old)
    (type: enum in ['EULER', 'VERLET', 'MIDPOINT', 'RK4'], default 'EULER')
    
    :type: str
    """

    invert_grid = False
    """Invert what is considered object and what is not
    (type: boolean, default False)
    
    :type: bool
    """

    is_fluid = False
    """Particles were created by a fluid simulation
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    jitter_factor = 0.0
    """Amount of jitter applied to the sampling
    (type: float in [0, 2], default 0.0)
    
    :type: float
    """

    keyed_loops = 0
    """Number of times the keys are looped
    (type: int in [1, 10000], default 0)
    
    :type: int
    """

    keys_step = 0
    """(type: int in [0, 32767], default 0)
    
    :type: int
    """

    kink = 'NO'
    """Type of periodic offset on the path
    (type: enum in ['NO', 'CURL', 'RADIAL', 'WAVE', 'BRAID', 'SPIRAL'], default 'NO')
    
    :type: str
    """

    kink_amplitude = 0.0
    """The amplitude of the offset
    (type: float in [-100000, 100000], default 0.0)
    
    :type: float
    """

    kink_amplitude_clump = 0.0
    """How much clump affects kink amplitude
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    kink_amplitude_random = 0.0
    """Random variation of the amplitude
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    kink_axis = 'X'
    """Which axis to use for offset
    (type: enum in ['X', 'Y', 'Z'], default 'X')
    
    :type: str
    """

    kink_axis_random = 0.0
    """Random variation of the orientation
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    kink_extra_steps = 0
    """Extra steps for resolution of special kink features
    (type: int in [1, inf], default 0)
    
    :type: int
    """

    kink_flat = 0.0
    """How flat the hairs are
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    kink_frequency = 0.0
    """The frequency of the offset (1/total length)
    (type: float in [-100000, 100000], default 0.0)
    
    :type: float
    """

    kink_shape = 0.0
    """Adjust the offset to the beginning/end
    (type: float in [-0.999, 0.999], default 0.0)
    
    :type: float
    """

    length_random = 0.0
    """Give path length a random variation
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    lifetime = 0.0
    """Life span of the particles
    (type: float in [1, 500000], default 0.0)
    
    :type: float
    """

    lifetime_random = 0.0
    """Give the particle life a random variation
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    line_length_head = 0.0
    """Length of the line's head
    (type: float in [0, 100000], default 0.0)
    
    :type: float
    """

    line_length_tail = 0.0
    """Length of the line's tail
    (type: float in [0, 100000], default 0.0)
    
    :type: float
    """

    lock_billboard = False
    """Lock the billboards align axis
    (type: boolean, default False)
    
    :type: bool
    """

    lock_boids_to_surface = False
    """Constrain boids to a surface
    (type: boolean, default False)
    
    :type: bool
    """

    mass = 0.0
    """Mass of the particles
    (type: float in [1e-08, 100000], default 0.0)
    
    :type: float
    """

    material = 0
    """Index of material slot used for rendering particles
    (type: int in [1, 32767], default 0)
    
    :type: int
    """

    material_slot = 'DUMMY'
    """Material slot used for rendering particles
    (type: enum in ['DUMMY'], default 'DUMMY')
    
    :type: str
    """

    normal_factor = 0.0
    """Let the surface normal give the particle a starting velocity
    (type: float in [-1000, 1000], default 0.0)
    
    :type: float
    """

    object_align_factor = (0.0, 0.0, 0.0)
    """Let the emitter object orientation give the particle a starting velocity
    (type: float array of 3 items in [-200, 200], default (0.0, 0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    object_factor = 0.0
    """Let the object give the particle a starting velocity
    (type: float in [-200, 200], default 0.0)
    
    :type: float
    """

    particle_factor = 0.0
    """Let the target particle give the particle a starting velocity
    (type: float in [-200, 200], default 0.0)
    
    :type: float
    """

    particle_size = 0.0
    """The size of the particles
    (type: float in [0.001, 100000], default 0.0)
    
    :type: float
    """

    path_end = 0.0
    """End time of drawn path
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    path_start = 0.0
    """Starting time of drawn path
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    phase_factor = 0.0
    """Rotation around the chosen orientation axis
    (type: float in [-1, 1], default 0.0)
    
    :type: float
    """

    phase_factor_random = 0.0
    """Randomize rotation around the chosen orientation axis
    (type: float in [0, 2], default 0.0)
    
    :type: float
    """

    physics_type = 'NO'
    """Particle physics type
    (type: enum in ['NO', 'NEWTON', 'KEYED', 'BOIDS', 'FLUID'], default 'NO')
    
    :type: str
    """

    react_event = 'DEATH'
    """The event of target particles to react on
    (type: enum in ['DEATH', 'COLLIDE', 'NEAR'], default 'DEATH')
    
    :type: str
    """

    reactor_factor = 0.0
    """Let the vector away from the target particle's location give the particle a starting velocity
    (type: float in [-10, 10], default 0.0)
    
    :type: float
    """

    regrow_hair = False
    """Regrow hair for each frame
    (type: boolean, default False)
    
    :type: bool
    """

    render_step = 0
    """How many steps paths are rendered with (power of 2)
    (type: int in [0, 20], default 0)
    
    :type: int
    """

    render_type = 'NONE'
    """How particles are rendered
    (type: enum in ['NONE', 'HALO', 'LINE', 'PATH', 'OBJECT', 'GROUP', 'BILLBOARD'], default 'NONE')
    
    :type: str
    """

    rendered_child_count = 0
    """Number of children/parent for rendering
    (type: int in [0, 100000], default 0)
    
    :type: int
    """

    rotation_factor_random = 0.0
    """Randomize particle orientation
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    rotation_mode = 'NONE'
    """Particle orientation axis (does not affect Explode modifier's results)
    (type: enum in ['NONE', 'NOR', 'NOR_TAN', 'VEL', 'GLOB_X', 'GLOB_Y', 'GLOB_Z', 'OB_X', 'OB_Y', 'OB_Z'], default 'NONE')
    
    :type: str
    """

    roughness_1 = 0.0
    """Amount of location dependent rough
    (type: float in [0, 100000], default 0.0)
    
    :type: float
    """

    roughness_1_size = 0.0
    """Size of location dependent rough
    (type: float in [0.01, 100000], default 0.0)
    
    :type: float
    """

    roughness_2 = 0.0
    """Amount of random rough
    (type: float in [0, 100000], default 0.0)
    
    :type: float
    """

    roughness_2_size = 0.0
    """Size of random rough
    (type: float in [0.01, 100000], default 0.0)
    
    :type: float
    """

    roughness_2_threshold = 0.0
    """Amount of particles left untouched by random rough
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    roughness_curve = None
    """Curve defining roughness
    (type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    roughness_end_shape = 0.0
    """Shape of end point rough
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    roughness_endpoint = 0.0
    """Amount of end point rough
    (type: float in [0, 100000], default 0.0)
    
    :type: float
    """

    show_guide_hairs = False
    """Show guide hairs
    (type: boolean, default False)
    
    :type: bool
    """

    show_hair_grid = False
    """Show hair simulation grid
    (type: boolean, default False)
    
    :type: bool
    """

    show_health = False
    """Draw boid health
    (type: boolean, default False)
    
    :type: bool
    """

    show_number = False
    """Show particle number
    (type: boolean, default False)
    
    :type: bool
    """

    show_size = False
    """Show particle size
    (type: boolean, default False)
    
    :type: bool
    """

    show_unborn = False
    """Show particles before they are emitted
    (type: boolean, default False)
    
    :type: bool
    """

    show_velocity = False
    """Show particle velocity
    (type: boolean, default False)
    
    :type: bool
    """

    simplify_rate = 0.0
    """Speed of simplification
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    simplify_refsize = 0
    """Reference size in pixels, after which simplification begins
    (type: int in [1, 32767], default 0)
    
    :type: int
    """

    simplify_transition = 0.0
    """Transition period for fading out strands
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    simplify_viewport = 0.0
    """Speed of Simplification
    (type: float in [0, 0.999], default 0.0)
    
    :type: float
    """

    size_random = 0.0
    """Give the particle size a random variation
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    subframes = 0
    """Subframes to simulate for improved stability and finer granularity simulations (dt = timestep / (subframes + 1))
    (type: int in [0, 1000], default 0)
    
    :type: int
    """

    tangent_factor = 0.0
    """Let the surface tangent give the particle a starting velocity
    (type: float in [-1000, 1000], default 0.0)
    
    :type: float
    """

    tangent_phase = 0.0
    """Rotate the surface tangent
    (type: float in [-1, 1], default 0.0)
    
    :type: float
    """

    texture_slots = None
    """Texture slots defining the mapping and influence of textures
    (type: bpy.types.ParticleSettingsTextureSlots bpy.types.bpy_prop_collection of bpy.types.ParticleSettingsTextureSlot, (readonly))
    
    :type: ParticleSettingsTextureSlots
    """

    time_tweak = 0.0
    """A multiplier for physics timestep (1.0 means one frame = 1/25 seconds)
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    timestep = 0.0
    """The simulation timestep per frame (seconds per frame)
    (type: float in [0.0001, 100], default 0.0)
    
    :type: float
    """

    trail_count = 0
    """Number of trail particles
    (type: int in [1, 100000], default 0)
    
    :type: int
    """

    type = 'EMITTER'
    """Particle Type
    (type: enum in ['EMITTER', 'HAIR'], default 'EMITTER')
    
    :type: str
    """

    use_absolute_path_time = False
    """Path timing is in absolute frames
    (type: boolean, default False)
    
    :type: bool
    """

    use_adaptive_subframes = False
    """Automatically set the number of subframes
    (type: boolean, default False)
    
    :type: bool
    """

    use_advanced_hair = False
    """Use full physics calculations for growing hair
    (type: boolean, default False)
    
    :type: bool
    """

    use_clump_curve = False
    """Use a curve to define clump tapering
    (type: boolean, default False)
    
    :type: bool
    """

    use_clump_noise = False
    """Create random clumps around the parent
    (type: boolean, default False)
    
    :type: bool
    """

    use_dead = False
    """Show particles after they have died
    (type: boolean, default False)
    
    :type: bool
    """

    use_die_on_collision = False
    """Particles die when they collide with a deflector object
    (type: boolean, default False)
    
    :type: bool
    """

    use_dynamic_rotation = False
    """Particle rotations are affected by collisions and effectors
    (type: boolean, default False)
    
    :type: bool
    """

    use_emit_random = False
    """Emit in random order of elements
    (type: boolean, default False)
    
    :type: bool
    """

    use_even_distribution = False
    """Use even distribution from faces based on face areas or edge lengths
    (type: boolean, default False)
    
    :type: bool
    """

    use_global_dupli = False
    """Use object's global coordinates for duplication
    (type: boolean, default False)
    
    :type: bool
    """

    use_group_count = False
    """Use object multiple times in the same group
    (type: boolean, default False)
    
    :type: bool
    """

    use_group_pick_random = False
    """Pick objects from group randomly
    (type: boolean, default False)
    
    :type: bool
    """

    use_hair_bspline = False
    """Interpolate hair using B-Splines
    (type: boolean, default False)
    
    :type: bool
    """

    use_modifier_stack = False
    """Emit particles from mesh with modifiers applied (must use same subsurf level for viewport and render for correct results)
    (type: boolean, default False)
    
    :type: bool
    """

    use_multiply_size_mass = False
    """Multiply mass by particle size
    (type: boolean, default False)
    
    :type: bool
    """

    use_parent_particles = False
    """Render parent particles
    (type: boolean, default False)
    
    :type: bool
    """

    use_react_multiple = False
    """React multiple times
    (type: boolean, default False)
    
    :type: bool
    """

    use_react_start_end = False
    """Give birth to unreacted particles eventually
    (type: boolean, default False)
    
    :type: bool
    """

    use_render_adaptive = False
    """Draw steps of the particle path
    (type: boolean, default False)
    
    :type: bool
    """

    use_render_emitter = False
    """Render emitter Object also
    (type: boolean, default False)
    
    :type: bool
    """

    use_rotation_dupli = False
    """Use object's rotation for duplication (global x-axis is aligned particle rotation axis)
    (type: boolean, default False)
    
    :type: bool
    """

    use_rotations = False
    """Calculate particle rotations
    (type: boolean, default False)
    
    :type: bool
    """

    use_roughness_curve = False
    """Use a curve to define roughness
    (type: boolean, default False)
    
    :type: bool
    """

    use_scale_dupli = False
    """Use object's scale for duplication
    (type: boolean, default False)
    
    :type: bool
    """

    use_self_effect = False
    """Particle effectors affect themselves
    (type: boolean, default False)
    
    :type: bool
    """

    use_simplify = False
    """Remove child strands as the object becomes smaller on the screen
    (type: boolean, default False)
    
    :type: bool
    """

    use_simplify_viewport = False
    """(type: boolean, default False)
    
    :type: bool
    """

    use_size_deflect = False
    """Use particle's size in deflection
    (type: boolean, default False)
    
    :type: bool
    """

    use_strand_primitive = False
    """Use the strand primitive for rendering
    (type: boolean, default False)
    
    :type: bool
    """

    use_velocity_length = False
    """Multiply line length by particle speed
    (type: boolean, default False)
    
    :type: bool
    """

    use_whole_group = False
    """Use whole group at once
    (type: boolean, default False)
    
    :type: bool
    """

    userjit = 0
    """Emission locations / face (0 = automatic)
    (type: int in [0, 1000], default 0)
    
    :type: int
    """

    virtual_parents = 0.0
    """Relative amount of virtual parents
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """


class ParticleSettingsTextureSlot(TextureSlot):
    """Texture slot for textures in a Particle Settings data-block"""

    clump_factor = 0.0
    """Amount texture affects child clump
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    damp_factor = 0.0
    """Amount texture affects particle damping
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    density_factor = 0.0
    """Amount texture affects particle density
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    field_factor = 0.0
    """Amount texture affects particle force fields
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    gravity_factor = 0.0
    """Amount texture affects particle gravity
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    kink_amp_factor = 0.0
    """Amount texture affects child kink amplitude
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    kink_freq_factor = 0.0
    """Amount texture affects child kink frequency
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    length_factor = 0.0
    """Amount texture affects child hair length
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    life_factor = 0.0
    """Amount texture affects particle life time
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    mapping = 'FLAT'
    """
    * 'FLAT': Flat, Map X and Y coordinates directly.
    * 'CUBE': Cube, Map using the normal vector.
    * 'TUBE': Tube, Map with Z as central axis.
    * 'SPHERE': Sphere, Map with Z as central axis.
    (type: enum in ['FLAT', 'CUBE', 'TUBE', 'SPHERE'], default 'FLAT')
    
    :type: str
    """

    mapping_x = 'NONE'
    """(type: enum in ['NONE', 'X', 'Y', 'Z'], default 'NONE')
    
    :type: str
    """

    mapping_y = 'NONE'
    """(type: enum in ['NONE', 'X', 'Y', 'Z'], default 'NONE')
    
    :type: str
    """

    mapping_z = 'NONE'
    """(type: enum in ['NONE', 'X', 'Y', 'Z'], default 'NONE')
    
    :type: str
    """

    object = None
    """Object to use for mapping with Object texture coordinates
    (type: bpy.types.Object)
    
    :type: Object
    """

    rough_factor = 0.0
    """Amount texture affects child roughness
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    size_factor = 0.0
    """Amount texture affects physical particle size
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    texture_coords = 'GLOBAL'
    """Texture coordinates used to map the texture onto the background
    * 'GLOBAL': Global, Use global coordinates for the texture coordinates.
    * 'OBJECT': Object, Use linked object's coordinates for texture coordinates.
    * 'UV': UV, Use UV coordinates for texture coordinates.
    * 'ORCO': Generated, Use the original undeformed coordinates of the object.
    * 'STRAND': Strand / Particle, Use normalized strand texture coordinate (1D) or particle age (X) and trail position (Y).
    (type: enum in ['GLOBAL', 'OBJECT', 'UV', 'ORCO', 'STRAND'], default 'GLOBAL')
    
    :type: str
    """

    time_factor = 0.0
    """Amount texture affects particle emission time
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    use_map_clump = False
    """Affect the child clumping
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_damp = False
    """Affect the particle velocity damping
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_density = False
    """Affect the density of the particles
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_field = False
    """Affect the particle force fields
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_gravity = False
    """Affect the particle gravity
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_kink_amp = False
    """Affect the child kink amplitude
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_kink_freq = False
    """Affect the child kink frequency
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_length = False
    """Affect the child hair length
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_life = False
    """Affect the life time of the particles
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_rough = False
    """Affect the child rough
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_size = False
    """Affect the particle size
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_time = False
    """Affect the emission time of the particles
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_velocity = False
    """Affect the particle initial velocity
    (type: boolean, default False)
    
    :type: bool
    """

    uv_layer = ""
    """UV map to use for mapping with UV texture coordinates
    (type: string, default "", (never None))
    
    :type: str
    """

    velocity_factor = 0.0
    """Amount texture affects particle initial velocity
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """


class ParticleSystemModifier(Modifier):
    """Particle system simulation modifier"""

    particle_system = None
    """Particle System that this modifier controls
    (type: bpy.types.ParticleSystem, (readonly, never None))
    
    :type: ParticleSystem
    """


class PivotConstraint(Constraint):
    """Rotate around a different point"""

    head_tail = 0.0
    """Target along length of bone: Head=0, Tail=1
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    offset = (0.0, 0.0, 0.0)
    """Offset of pivot from target (when set), or from owner's location (when Fixed Position is off), or the absolute pivot point
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    rotation_range = 'NX'
    """Rotation range on which pivoting should occur
    * 'ALWAYS_ACTIVE': Always, Use the pivot point in every rotation.
    * 'NX': -X Rot, Use the pivot point in the negative rotation range around the X-axis.
    * 'NY': -Y Rot, Use the pivot point in the negative rotation range around the Y-axis.
    * 'NZ': -Z Rot, Use the pivot point in the negative rotation range around the Z-axis.
    * 'X': X Rot, Use the pivot point in the positive rotation range around the X-axis.
    * 'Y': Y Rot, Use the pivot point in the positive rotation range around the Y-axis.
    * 'Z': Z Rot, Use the pivot point in the positive rotation range around the Z-axis.
    (type: enum in ['ALWAYS_ACTIVE', 'NX', 'NY', 'NZ', 'X', 'Y', 'Z'], default 'NX')
    
    :type: str
    """

    subtarget = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    target = None
    """Target Object, defining the position of the pivot when defined
    (type: bpy.types.Object)
    
    :type: Object
    """

    use_bbone_shape = False
    """Follow shape of B-Bone segments when calculating Head/Tail position
    (type: boolean, default False)
    
    :type: bool
    """

    use_relative_location = False
    """Offset will be an absolute point in space instead of relative to the target
    (type: boolean, default False)
    
    :type: bool
    """


class PointerProperty(Property):
    """RNA pointer property to point to another RNA struct"""

    fixed_type = None
    """Fixed pointer type, empty if variable type
    (type: bpy.types.Struct, (readonly))
    
    :type: Struct
    """


class PropertyActuator(Actuator):
    """Actuator to handle properties"""

    mode = 'ASSIGN'
    """
    * 'ASSIGN': Assign.
    * 'ADD': Add.
    * 'COPY': Copy.
    * 'TOGGLE': Toggle, For bool/int/float/timer properties only.
    * 'LEVEL': Level, For bool/int/float/timer properties only.
    (type: enum in ['ASSIGN', 'ADD', 'COPY', 'TOGGLE', 'LEVEL'], default 'ASSIGN')
    
    :type: str
    """

    object = None
    """Copy from this Object
    (type: bpy.types.Object)
    
    :type: Object
    """

    object_property = ""
    """Copy this property
    (type: string, default "", (never None))
    
    :type: str
    """

    property = ""
    """The name of the property
    (type: string, default "", (never None))
    
    :type: str
    """

    value = ""
    """The name of the property or the value to use (use "" around strings)
    (type: string, default "", (never None))
    
    :type: str
    """


class PropertySensor(Sensor):
    """Sensor to detect values and changes in values of properties"""

    evaluation_type = 'PROPEQUAL'
    """Type of property evaluation
    (type: enum in ['PROPEQUAL', 'PROPNEQUAL', 'PROPINTERVAL', 'PROPCHANGED', 'PROPLESSTHAN', 'PROPGREATERTHAN'], default 'PROPEQUAL')
    
    :type: str
    """

    property = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    value = ""
    """Check for this value in types in Equal, Not Equal, Less Than and Greater Than types
    (type: string, default "", (never None))
    
    :type: str
    """

    value_max = ""
    """Maximum value in Interval type
    (type: string, default "", (never None))
    
    :type: str
    """

    value_min = ""
    """Minimum value in Interval type
    (type: string, default "", (never None))
    
    :type: str
    """


class PythonConstraint(Constraint):
    """Use Python script for constraint evaluation"""

    has_script_error = False
    """The linked Python script has thrown an error
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    idname = 'DUMMY'
    """Type of python constraint
    (type: enum in ['DUMMY'], default 'DUMMY')
    
    :type: str
    """

    recalc_object_data = False
    """Recalc object data on frame changes
    (type: boolean, default False)
    
    :type: bool
    """

    target_count = 0
    """Usually only 1-3 are needed
    (type: int in [0, 10], default 0)
    
    :type: int
    """

    targets = None
    """Target Objects
    (type: bpy.types.bpy_prop_collection of bpy.types.ConstraintTarget, (readonly))
    
    :type: bpy_prop_collection
    """

    def draw(self, context=None, object=None, layout=None):
        """Draw UI Layout
        
        :param context: Context
            (type: bpy.types.Context, (optional, never None))
        :type context: Context
        :param object: Object, Object
            (type: bpy.types.Object, (optional, never None))
        :type object: Object
        :param layout: UI Layout, UI Layout
            (type: bpy.types.UILayout, (optional, never None))
        :type layout: UILayout
        """

    def update(self):
        """Update dependency"""

    def copy_from(self, src=None):
        """Copy attributes
        
        :param src: Source Constraint, Source Constraint
            (type: bpy.types.Constraint, (optional, never None))
        :type src: Constraint
        """

    def calc_matrix(self, scene=None, ob=None, subtarget="", space='WORLD', head_tail=0.0, use_curve=False, use_curve_follow=False, use_curve_radius=False, use_fixed_location=False, use_curve_length=False, offset=0.0, offset_factor=0.0, forward_axis='FORWARD_Y', up_axis='UP_Z'):
        """Calc matrix
        
        :param scene: Scene, Scene
            (type: bpy.types.Scene, (optional, never None))
        :type scene: Scene
        :param ob: Target, Target Object
            (type: bpy.types.Object, (optional, never None))
        :type ob: Object
        :param subtarget: Subtarget, Bone or vertex group name
            (type: str, (optional, never None))
        :type subtarget: str
        :param space: Space to
            * 'WORLD': World Space, The constraint is applied relative to the world coordinate system.
            * 'POSE': Pose Space, The constraint is applied in Pose Space, the object transformation is ignored.
            * 'LOCAL_WITH_PARENT': Local With Parent, The constraint is applied relative to the local coordinate system of the object, with the parent transformation added.
            * 'LOCAL': Local Space, The constraint is applied relative to the local coordinate system of the object.
            (type: enum in ['WORLD', 'POSE', 'LOCAL_WITH_PARENT', 'LOCAL'], (optional))
        :type space: str
        :param head_tail: Head/Tail, Only pose bone
            (type: float in [0, inf], (optional))
        :type head_tail: float
        :param use_curve: Use Curve, Follow Path
            (type: boolean, (optional))
        :type use_curve: bool
        :param use_curve_follow: Follow Curve, Object will follow the heading and banking of the curve
            (type: boolean, (optional))
        :type use_curve_follow: bool
        :param use_curve_radius: Curve Radius, Object is scaled by the curve radius
            (type: boolean, (optional))
        :type use_curve_radius: bool
        :param use_fixed_location: Fixed Position, Object will stay locked to a single point somewhere along the length of the curve
            (type: boolean, (optional))
        :type use_fixed_location: bool
        :param use_curve_length: Curve Lengeth, Consider offset as Blender Unit
            (type: boolean, (optional))
        :type use_curve_length: bool
        :param forward_axis: Forward Axis, Foward
            (type: enum in ['FORWARD_X', 'FORWARD_Y', 'FORWARD_Z', 'TRACK_NEGATIVE_X', 'TRACK_NEGATIVE_Y', 'TRACK_NEGATIVE_Z'], (optional))
        :type forward_axis: str
        :param up_axis: Up Axis, Up
            (type: enum in ['UP_X', 'UP_Y', 'UP_Z'], (optional))
        :type up_axis: str
        :return: Matrix
        :param : (type: float array of 16 items in [-inf, inf])
        :rtype: mathutils.Matrix
        """


class PythonController(Controller):
    """Controller executing a python script"""

    mode = 'SCRIPT'
    """Python script type (textblock or module - faster)
    (type: enum in ['SCRIPT', 'MODULE'], default 'SCRIPT')
    
    :type: str
    """

    module = ""
    """Module name and function to run, e.g. "someModule.main" (internal texts and external python files can be used)
    (type: string, default "", (never None))
    
    :type: str
    """

    text = None
    """Text data-block with the python script
    (type: bpy.types.Text)
    
    :type: Text
    """

    use_debug = False
    """Continuously reload the module from disk for editing external modules without restarting
    (type: boolean, default False)
    
    :type: bool
    """


class RENDERLAYER_UL_linesets(UIList):
    """"""

    def draw_item(self, context, layout, data, item, icon, active_data, active_propname, index):
        """"""


class RENDERLAYER_UL_renderlayers(UIList):
    """"""

    def draw_item(self, context, layout, data, item, icon, active_data, active_propname, index):
        """"""


class RENDERLAYER_UL_renderviews(UIList):
    """"""

    def draw_item(self, context, layout, data, item, icon, active_data, active_propname, index):
        """"""


class RadarSensor(Sensor):
    """Sensor to detect objects in a cone shaped radar emanating from the current object"""

    angle = 0.0
    """Opening angle of the radar cone
    (type: float in [0, 3.13985], default 0.0)
    
    :type: float
    """

    axis = 'XAXIS'
    """Along which axis the radar cone is cast
    (type: enum in ['XAXIS', 'YAXIS', 'ZAXIS', 'NEGXAXIS', 'NEGYAXIS', 'NEGZAXIS'], default 'XAXIS')
    
    :type: str
    """

    distance = 0.0
    """Depth of the radar cone
    (type: float in [0, 10000], default 0.0)
    
    :type: float
    """

    property = ""
    """Only look for objects with this property (blank = all objects)
    (type: string, default "", (never None))
    
    :type: str
    """


class RandomActuator(Actuator):
    """"""

    chance = 0.0
    """Pick a number between 0 and 1, success if it's below this value
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    distribution = 'BOOL_CONSTANT'
    """Choose the type of distribution
    (type: enum in ['BOOL_CONSTANT', 'BOOL_UNIFORM', 'BOOL_BERNOUILLI', 'INT_CONSTANT', 'INT_UNIFORM', 'INT_POISSON', 'FLOAT_CONSTANT', 'FLOAT_UNIFORM', 'FLOAT_NORMAL', 'FLOAT_NEGATIVE_EXPONENTIAL'], default 'BOOL_CONSTANT')
    
    :type: str
    """

    float_max = 0.0
    """Choose a number from a range: upper boundary of the range
    (type: float in [-1000, 1000], default 0.0)
    
    :type: float
    """

    float_mean = 0.0
    """A normal distribution: mean of the distribution
    (type: float in [-1000, 1000], default 0.0)
    
    :type: float
    """

    float_min = 0.0
    """Choose a number from a range: lower boundary of the range
    (type: float in [-1000, 1000], default 0.0)
    
    :type: float
    """

    float_value = 0.0
    """Always return this number
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    half_life_time = 0.0
    """Negative exponential dropoff
    (type: float in [-1000, 1000], default 0.0)
    
    :type: float
    """

    int_max = 0
    """Choose a number from a range: upper boundary of the range
    (type: int in [-1000, 1000], default 0)
    
    :type: int
    """

    int_mean = 0.0
    """Expected mean value of the distribution
    (type: float in [0.01, 100], default 0.0)
    
    :type: float
    """

    int_min = 0
    """Choose a number from a range: lower boundary of the range
    (type: int in [-1000, 1000], default 0)
    
    :type: int
    """

    int_value = 0
    """Always return this number
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    property = ""
    """Assign the random value to this property
    (type: string, default "", (never None))
    
    :type: str
    """

    seed = 0
    """Initial seed of the random generator, use Python for more freedom (choose 0 for not random)
    (type: int in [0, 500000], default 0)
    
    :type: int
    """

    standard_derivation = 0.0
    """A normal distribution: standard deviation of the distribution
    (type: float in [-1000, 1000], default 0.0)
    
    :type: float
    """

    use_always_true = False
    """Always false or always true
    (type: boolean, default False)
    
    :type: bool
    """


class RandomSensor(Sensor):
    """Sensor to send random events"""

    seed = 0
    """Initial seed of the generator (choose 0 for not random)
    (type: int in [0, 1000], default 0)
    
    :type: int
    """


class RaySensor(Sensor):
    """Sensor to detect intersections with a ray emanating from the current object"""

    axis = 'YAXIS'
    """Along which axis the ray is cast
    (type: enum in ['XAXIS', 'YAXIS', 'ZAXIS', 'NEGXAXIS', 'NEGYAXIS', 'NEGZAXIS'], default 'YAXIS')
    
    :type: str
    """

    material = ""
    """Only look for objects with this material (blank = all objects)
    (type: string, default "", (never None))
    
    :type: str
    """

    property = ""
    """Only look for objects with this property (blank = all objects)
    (type: string, default "", (never None))
    
    :type: str
    """

    range = 0.0
    """Sense objects no farther than this distance
    (type: float in [0.01, 10000], default 0.0)
    
    :type: float
    """

    ray_type = 'PROPERTY'
    """Toggle collision on material or property
    * 'PROPERTY': Property, Use a property for ray intersections.
    * 'MATERIAL': Material, Use a material for ray intersections.
    (type: enum in ['PROPERTY', 'MATERIAL'], default 'PROPERTY')
    
    :type: str
    """

    use_x_ray = False
    """Toggle X-Ray option (see through objects that don't have the property)
    (type: boolean, default False)
    
    :type: bool
    """


class RemeshModifier(Modifier):
    """Generate a new surface with regular topology that follows the shape of the input mesh"""

    mode = 'BLOCKS'
    """
    * 'BLOCKS': Blocks, Output a blocky surface with no smoothing.
    * 'SMOOTH': Smooth, Output a smooth surface with no sharp-features detection.
    * 'SHARP': Sharp, Output a surface that reproduces sharp edges and corners from the input mesh.
    (type: enum in ['BLOCKS', 'SMOOTH', 'SHARP'], default 'BLOCKS')
    
    :type: str
    """

    octree_depth = 0
    """Resolution of the octree; higher values give finer details
    (type: int in [1, 12], default 0)
    
    :type: int
    """

    scale = 0.0
    """The ratio of the largest dimension of the model over the size of the grid
    (type: float in [0, 0.99], default 0.0)
    
    :type: float
    """

    sharpness = 0.0
    """Tolerance for outliers; lower values filter noise while higher values will reproduce edges closer to the input
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    threshold = 0.0
    """If removing disconnected pieces, minimum size of components to preserve as a ratio of the number of polygons in the largest component
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    use_remove_disconnected = False
    """(type: boolean, default False)
    
    :type: bool
    """

    use_smooth_shade = False
    """Output faces with smooth shading rather than flat shaded
    (type: boolean, default False)
    
    :type: bool
    """


class RigidBodyJointConstraint(Constraint):
    """For use with the Game Engine"""

    axis_x = 0.0
    """Rotate pivot on X axis
    (type: float in [-6.28319, 6.28319], default 0.0)
    
    :type: float
    """

    axis_y = 0.0
    """Rotate pivot on Y axis
    (type: float in [-6.28319, 6.28319], default 0.0)
    
    :type: float
    """

    axis_z = 0.0
    """Rotate pivot on Z axis
    (type: float in [-6.28319, 6.28319], default 0.0)
    
    :type: float
    """

    child = None
    """Child object
    (type: bpy.types.Object)
    
    :type: Object
    """

    limit_angle_max_x = 0.0
    """(type: float in [-6.28319, 6.28319], default 0.0)
    
    :type: float
    """

    limit_angle_max_y = 0.0
    """(type: float in [-6.28319, 6.28319], default 0.0)
    
    :type: float
    """

    limit_angle_max_z = 0.0
    """(type: float in [-6.28319, 6.28319], default 0.0)
    
    :type: float
    """

    limit_angle_min_x = 0.0
    """(type: float in [-6.28319, 6.28319], default 0.0)
    
    :type: float
    """

    limit_angle_min_y = 0.0
    """(type: float in [-6.28319, 6.28319], default 0.0)
    
    :type: float
    """

    limit_angle_min_z = 0.0
    """(type: float in [-6.28319, 6.28319], default 0.0)
    
    :type: float
    """

    limit_max_x = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    limit_max_y = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    limit_max_z = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    limit_min_x = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    limit_min_y = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    limit_min_z = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    pivot_type = 'BALL'
    """
    * 'BALL': Ball, Allow rotations around all axes.
    * 'HINGE': Hinge, Work in one plane, allow rotations around one axis only.
    * 'CONE_TWIST': Cone Twist, Allow rotations around all axes with limits for the cone and twist axes.
    * 'GENERIC_6_DOF': Generic 6 DoF, No constraints by default, limits can be set individually.
    (type: enum in ['BALL', 'HINGE', 'CONE_TWIST', 'GENERIC_6_DOF'], default 'BALL')
    
    :type: str
    """

    pivot_x = 0.0
    """Offset pivot on X
    (type: float in [-1000, 1000], default 0.0)
    
    :type: float
    """

    pivot_y = 0.0
    """Offset pivot on Y
    (type: float in [-1000, 1000], default 0.0)
    
    :type: float
    """

    pivot_z = 0.0
    """Offset pivot on Z
    (type: float in [-1000, 1000], default 0.0)
    
    :type: float
    """

    show_pivot = False
    """Display the pivot point and rotation in 3D view
    (type: boolean, default False)
    
    :type: bool
    """

    target = None
    """Target Object
    (type: bpy.types.Object)
    
    :type: Object
    """

    use_angular_limit_x = False
    """Use minimum/maximum X angular limit
    (type: boolean, default False)
    
    :type: bool
    """

    use_angular_limit_y = False
    """Use minimum/maximum Y angular limit
    (type: boolean, default False)
    
    :type: bool
    """

    use_angular_limit_z = False
    """Use minimum/maximum Z angular limit
    (type: boolean, default False)
    
    :type: bool
    """

    use_limit_x = False
    """Use minimum/maximum X limit
    (type: boolean, default False)
    
    :type: bool
    """

    use_limit_y = False
    """Use minimum/maximum y limit
    (type: boolean, default False)
    
    :type: bool
    """

    use_limit_z = False
    """Use minimum/maximum z limit
    (type: boolean, default False)
    
    :type: bool
    """

    use_linked_collision = False
    """Disable collision between linked bodies
    (type: boolean, default False)
    
    :type: bool
    """


class Rotation(KeyingSetInfo):
    """"""

    def generate(self, ksi, context, ks, data):
        """"""

    def iterator(self, ksi, context, ks):
        """"""

    def poll(self, ksi, context):
        """"""


class SCENE_UL_keying_set_paths(UIList):
    """"""

    def draw_item(self, context, layout, data, item, icon, active_data, active_propname, index):
        """"""


class Scaling(KeyingSetInfo):
    """"""

    def generate(self, ksi, context, ks, data):
        """"""

    def iterator(self, ksi, context, ks):
        """"""

    def poll(self, ksi, context):
        """"""


class Scene(ID):
    """Scene data-block, consisting in objects and defining time and render related settings"""

    active_clip = None
    """Active movie clip used for constraints and viewport drawing
    (type: bpy.types.MovieClip)
    
    :type: MovieClip
    """

    active_layer = 0
    """Active scene layer index
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    animation_data = None
    """Animation data for this data-block
    (type: bpy.types.AnimData, (readonly))
    
    :type: AnimData
    """

    audio_distance_model = 'NONE'
    """Distance model for distance attenuation calculation
    * 'NONE': None, No distance attenuation.
    * 'INVERSE': Inverse, Inverse distance model.
    * 'INVERSE_CLAMPED': Inverse Clamped, Inverse distance model with clamping.
    * 'LINEAR': Linear, Linear distance model.
    * 'LINEAR_CLAMPED': Linear Clamped, Linear distance model with clamping.
    * 'EXPONENT': Exponent, Exponent distance model.
    * 'EXPONENT_CLAMPED': Exponent Clamped, Exponent distance model with clamping.
    (type: enum in ['NONE', 'INVERSE', 'INVERSE_CLAMPED', 'LINEAR', 'LINEAR_CLAMPED', 'EXPONENT', 'EXPONENT_CLAMPED'], default 'NONE')
    
    :type: str
    """

    audio_doppler_factor = 0.0
    """Pitch factor for Doppler effect calculation
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    audio_doppler_speed = 0.0
    """Speed of sound for Doppler effect calculation
    (type: float in [0.01, inf], default 0.0)
    
    :type: float
    """

    audio_volume = 0.0
    """Audio volume
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    background_set = None
    """Background set scene
    (type: bpy.types.Scene)
    
    :type: Scene
    """

    camera = None
    """Active camera, used for rendering the scene
    (type: bpy.types.Object)
    
    :type: Object
    """

    cursor_location = (0.0, 0.0, 0.0)
    """3D cursor location
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    depsgraph = None
    """Dependencies in the scene data
    (type: bpy.types.Depsgraph, (readonly))
    
    :type: Depsgraph
    """

    display_settings = None
    """Settings of device saved image would be displayed on
    (type: bpy.types.ColorManagedDisplaySettings, (readonly))
    
    :type: ColorManagedDisplaySettings
    """

    frame_current = 0
    """Current Frame, to update animation data from python frame_set() instead
    (type: int in [-500000, 500000], default 0)
    
    :type: int
    """

    frame_current_final = 0.0
    """Current frame with subframe and time remapping applied
    (type: float in [-500000, 500000], default 0.0, (readonly))
    
    :type: float
    """

    frame_end = 0
    """Final frame of the playback/rendering range
    (type: int in [0, 500000], default 0)
    
    :type: int
    """

    frame_float = 0.0
    """(type: float in [-500000, 500000], default 0.0)
    
    :type: float
    """

    frame_preview_end = 0
    """Alternative end frame for UI playback
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    frame_preview_start = 0
    """Alternative start frame for UI playback
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    frame_start = 0
    """First frame of the playback/rendering range
    (type: int in [0, 500000], default 0)
    
    :type: int
    """

    frame_step = 0
    """Number of frames to skip forward while rendering/playing back each frame
    (type: int in [0, 500000], default 0)
    
    :type: int
    """

    frame_subframe = 0.0
    """(type: float in [0, 1], default 0.0)
    
    :type: float
    """

    game_settings = None
    """(type: bpy.types.SceneGameData, (readonly, never None))
    
    :type: SceneGameData
    """

    gravity = (0.0, 0.0, 0.0)
    """Constant acceleration in a given direction
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    grease_pencil = None
    """Grease Pencil data-block
    (type: bpy.types.GreasePencil)
    
    :type: GreasePencil
    """

    is_nla_tweakmode = False
    """Whether there is any action referenced by NLA being edited (strictly read-only)
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    keying_sets = None
    """Absolute Keying Sets for this Scene
    (type: bpy.types.KeyingSets bpy.types.bpy_prop_collection of bpy.types.KeyingSet, (readonly))
    
    :type: KeyingSets
    """

    keying_sets_all = None
    """All Keying Sets available for use (Builtins and Absolute Keying Sets for this Scene)
    (type: bpy.types.KeyingSetsAll bpy.types.bpy_prop_collection of bpy.types.KeyingSet, (readonly))
    
    :type: KeyingSetsAll
    """

    layers = (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
    """Visible layers - Shift-Click/Drag to select multiple layers
    (type: boolean array of 20 items, default (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False))
    
    :type: collections.Sequence[bool]
    """

    lock_frame_selection_to_range = False
    """Don't allow frame to be selected with mouse outside of frame range
    (type: boolean, default False)
    
    :type: bool
    """

    node_tree = None
    """Compositing node tree
    (type: bpy.types.NodeTree, (readonly))
    
    :type: NodeTree
    """

    object_bases = None
    """(type: bpy.types.SceneBases bpy.types.bpy_prop_collection of bpy.types.ObjectBase, (readonly))
    
    :type: SceneBases
    """

    objects = None
    """(type: bpy.types.SceneObjects bpy.types.bpy_prop_collection of bpy.types.Object, (readonly))
    
    :type: SceneObjects
    """

    orientations = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.TransformOrientation, (readonly))
    
    :type: bpy_prop_collection
    """

    render = None
    """(type: bpy.types.RenderSettings, (readonly, never None))
    
    :type: RenderSettings
    """

    rigidbody_world = None
    """(type: bpy.types.RigidBodyWorld, (readonly))
    
    :type: RigidBodyWorld
    """

    safe_areas = None
    """(type: bpy.types.DisplaySafeAreas, (readonly, never None))
    
    :type: DisplaySafeAreas
    """

    sequence_editor = None
    """(type: bpy.types.SequenceEditor, (readonly))
    
    :type: SequenceEditor
    """

    sequencer_colorspace_settings = None
    """Settings of color space sequencer is working in
    (type: bpy.types.ColorManagedSequencerColorspaceSettings, (readonly))
    
    :type: ColorManagedSequencerColorspaceSettings
    """

    show_keys_from_selected_only = False
    """Consider keyframes for active Object and/or its selected bones only (in timeline and when jumping between keyframes)
    (type: boolean, default False)
    
    :type: bool
    """

    show_subframe = False
    """Show current scene subframe and allow set it using interface tools
    (type: boolean, default False)
    
    :type: bool
    """

    sync_mode = 'NONE'
    """How to sync playback
    * 'NONE': No Sync, Do not sync, play every frame.
    * 'FRAME_DROP': Frame Dropping, Drop frames if playback is too slow.
    * 'AUDIO_SYNC': AV-sync, Sync to audio playback, dropping frames.
    (type: enum in ['NONE', 'FRAME_DROP', 'AUDIO_SYNC'], default 'NONE')
    
    :type: str
    """

    timeline_markers = None
    """Markers used in all timelines for the current scene
    (type: bpy.types.TimelineMarkers bpy.types.bpy_prop_collection of bpy.types.TimelineMarker, (readonly))
    
    :type: TimelineMarkers
    """

    tool_settings = None
    """(type: bpy.types.ToolSettings, (readonly, never None))
    
    :type: ToolSettings
    """

    unit_settings = None
    """Unit editing settings
    (type: bpy.types.UnitSettings, (readonly, never None))
    
    :type: UnitSettings
    """

    use_audio = False
    """Play back of audio from Sequence Editor will be muted
    (type: boolean, default False)
    
    :type: bool
    """

    use_audio_scrub = False
    """Play audio from Sequence Editor while scrubbing
    (type: boolean, default False)
    
    :type: bool
    """

    use_audio_sync = False
    """Play back and sync with audio clock, dropping frames if frame display is too slow
    (type: boolean, default False)
    
    :type: bool
    """

    use_frame_drop = False
    """Play back dropping frames if frame display is too slow
    (type: boolean, default False)
    
    :type: bool
    """

    use_gravity = False
    """Use global gravity for all dynamics
    (type: boolean, default False)
    
    :type: bool
    """

    use_nodes = False
    """Enable the compositing node tree
    (type: boolean, default False)
    
    :type: bool
    """

    use_preview_range = False
    """Use an alternative start/end frame range for animation playback and OpenGL renders instead of the Render properties start/end frame range
    (type: boolean, default False)
    
    :type: bool
    """

    use_stamp_note = ""
    """User defined note for the render stamping
    (type: string, default "", (never None))
    
    :type: str
    """

    view_settings = None
    """Color management settings applied on image before saving
    (type: bpy.types.ColorManagedViewSettings, (readonly))
    
    :type: ColorManagedViewSettings
    """

    world = None
    """World used for rendering the scene
    (type: bpy.types.World)
    
    :type: World
    """

    def sequence_editor_create(self):
        """Ensure sequence editor is valid in this scene
        
        :return: New sequence editor data or NULL
        :param : (type: bpy.types.SequenceEditor)
        :rtype: SequenceEditor
        """

    def sequence_editor_clear(self):
        """Clear sequence editor in this scene"""

    def statistics(self):
        """statistics
        
        :return: Statistics
        :param : (type: string, (never None))
        :rtype: str
        """

    def frame_set(self, frame, subframe=0.0):
        """Set scene frame updating all objects immediately
        
        :param frame: Frame number to set
            (type: int in [-500000, 500000])
        :type frame: int
        :param subframe: Sub-frame time, between 0.0 and 1.0
            (type: float in [0, 1], (optional))
        :type subframe: float
        """

    def update(self):
        """Update data tagged to be updated from previous access to data or operators"""

    def uvedit_aspect(self, object):
        """Get uv aspect for current object
        
        :param object: Object
            (type: bpy.types.Object, (never None))
        :type object: Object
        :return: aspect
        :param : (type: float array of 2 items in [0, inf])
        :rtype: mathutils.Vector
        """

    def ray_cast(self, origin, direction, distance=1.70141e+38):
        """Cast a ray onto in object space
        
        :param distance: Maximum distance
            (type: float in [0, inf], (optional))
        :type distance: float
        :return: (result, location, normal, index, object, matrix)
            result, boolean
            location, The hit location of this ray cast, float array of 3 items in [-inf, inf]
            normal, The face normal at the ray cast hit location, float array of 3 items in [-inf, inf]
            index, The face index, -1 when original data isn't available, int in [-inf, inf]
            object, Ray cast object, bpy.types.Object
            matrix, Matrix, float array of 16 items in [-inf, inf]
        :rtype: tuple
        """


class SceneActuator(Actuator):
    """"""

    camera = None
    """Set this Camera (leave empty to refer to self object)
    (type: bpy.types.Object)
    
    :type: Object
    """

    mode = 'RESTART'
    """(type: enum in ['RESTART', 'SET', 'CAMERA', 'ADDFRONT', 'ADDBACK', 'REMOVE', 'SUSPEND', 'RESUME'], default 'RESTART')
    
    :type: str
    """

    scene = None
    """Scene to be added/removed/paused/resumed
    (type: bpy.types.Scene)
    
    :type: Scene
    """


class SceneSequence(Sequence):
    """Sequence strip to used the rendered image of a scene"""

    alpha_mode = 'STRAIGHT'
    """Representation of alpha information in the RGBA pixels
    * 'STRAIGHT': Straight, RGB channels in transparent pixels are unaffected by the alpha channel.
    * 'PREMUL': Premultiplied, RGB channels in transparent pixels are multiplied by the alpha channel.
    (type: enum in ['STRAIGHT', 'PREMUL'], default 'STRAIGHT')
    
    :type: str
    """

    animation_offset_end = 0
    """Animation end offset (trim end)
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    animation_offset_start = 0
    """Animation start offset (trim start)
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    color_multiply = 1.0
    """(type: float in [0, 20], default 1.0)
    
    :type: float
    """

    color_saturation = 1.0
    """(type: float in [0, 20], default 1.0)
    
    :type: float
    """

    crop = None
    """(type: bpy.types.SequenceCrop, (readonly))
    
    :type: SequenceCrop
    """

    proxy = None
    """(type: bpy.types.SequenceProxy, (readonly))
    
    :type: SequenceProxy
    """

    scene = None
    """Scene that this sequence uses
    (type: bpy.types.Scene)
    
    :type: Scene
    """

    scene_camera = None
    """Override the scenes active camera
    (type: bpy.types.Object)
    
    :type: Object
    """

    strobe = 0.0
    """Only display every nth frame
    (type: float in [1, 30], default 0.0)
    
    :type: float
    """

    transform = None
    """(type: bpy.types.SequenceTransform, (readonly))
    
    :type: SequenceTransform
    """

    use_crop = False
    """Crop image before processing
    (type: boolean, default False)
    
    :type: bool
    """

    use_deinterlace = False
    """Remove fields from video movies
    (type: boolean, default False)
    
    :type: bool
    """

    use_flip_x = False
    """Flip on the X axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_flip_y = False
    """Flip on the Y axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_float = False
    """Convert input to float data
    (type: boolean, default False)
    
    :type: bool
    """

    use_grease_pencil = False
    """Show Grease Pencil strokes in OpenGL previews
    (type: boolean, default False)
    
    :type: bool
    """

    use_proxy = False
    """Use a preview proxy and/or timecode index for this strip
    (type: boolean, default False)
    
    :type: bool
    """

    use_reverse_frames = False
    """Reverse frame order
    (type: boolean, default False)
    
    :type: bool
    """

    use_sequence = False
    """Use scenes sequence strips directly, instead of rendering
    (type: boolean, default False)
    
    :type: bool
    """

    use_translation = False
    """Translate image before processing
    (type: boolean, default False)
    
    :type: bool
    """


class Screen(ID):
    """Screen data-block, defining the layout of areas in a window"""

    areas = None
    """Areas the screen is subdivided into
    (type: bpy.types.bpy_prop_collection of bpy.types.Area, (readonly))
    
    :type: bpy_prop_collection
    """

    is_animation_playing = False
    """Animation playback is active
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    scene = None
    """Active scene to be edited in the screen
    (type: bpy.types.Scene, (never None))
    
    :type: Scene
    """

    show_fullscreen = False
    """An area is maximized, filling this screen
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_follow = False
    """Follow current frame in editors
    (type: boolean, default False)
    
    :type: bool
    """

    use_play_3d_editors = False
    """(type: boolean, default False)
    
    :type: bool
    """

    use_play_animation_editors = False
    """(type: boolean, default False)
    
    :type: bool
    """

    use_play_clip_editors = False
    """(type: boolean, default False)
    
    :type: bool
    """

    use_play_image_editors = False
    """(type: boolean, default False)
    
    :type: bool
    """

    use_play_node_editors = False
    """(type: boolean, default False)
    
    :type: bool
    """

    use_play_properties_editors = False
    """(type: boolean, default False)
    
    :type: bool
    """

    use_play_sequence_editors = False
    """(type: boolean, default False)
    
    :type: bool
    """

    use_play_top_left_3d_editor = False
    """(type: boolean, default False)
    
    :type: bool
    """


class ScrewModifier(Modifier):
    """Revolve edges"""

    angle = 0.0
    """Angle of revolution
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    axis = 'X'
    """Screw axis
    (type: enum in ['X', 'Y', 'Z'], default 'X')
    
    :type: str
    """

    iterations = 0
    """Number of times to apply the screw operation
    (type: int in [1, 10000], default 0)
    
    :type: int
    """

    object = None
    """Object to define the screw axis
    (type: bpy.types.Object)
    
    :type: Object
    """

    render_steps = 0
    """Number of steps in the revolution
    (type: int in [2, 10000], default 0)
    
    :type: int
    """

    screw_offset = 0.0
    """Offset the revolution along its axis
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    steps = 0
    """Number of steps in the revolution
    (type: int in [2, 10000], default 0)
    
    :type: int
    """

    use_normal_calculate = False
    """Calculate the order of edges (needed for meshes, but not curves)
    (type: boolean, default False)
    
    :type: bool
    """

    use_normal_flip = False
    """Flip normals of lathed faces
    (type: boolean, default False)
    
    :type: bool
    """

    use_object_screw_offset = False
    """Use the distance between the objects to make a screw
    (type: boolean, default False)
    
    :type: bool
    """

    use_smooth_shade = False
    """Output faces with smooth shading rather than flat shaded
    (type: boolean, default False)
    
    :type: bool
    """

    use_stretch_u = False
    """Stretch the U coordinates between 0-1 when UV's are present
    (type: boolean, default False)
    
    :type: bool
    """

    use_stretch_v = False
    """Stretch the V coordinates between 0-1 when UV's are present
    (type: boolean, default False)
    
    :type: bool
    """


class Sculpt(Paint):
    """"""

    constant_detail_resolution = 0.0
    """Maximum edge length for dynamic topology sculpting (as divisor of blender unit - higher value means smaller edge length)
    (type: float in [0.0001, inf], default 0.0)
    
    :type: float
    """

    detail_percent = 0.0
    """Maximum edge length for dynamic topology sculpting (in brush percenage)
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    detail_refine_method = 'SUBDIVIDE'
    """In dynamic-topology mode, how to add or remove mesh detail
    * 'SUBDIVIDE': Subdivide Edges, Subdivide long edges to add mesh detail where needed.
    * 'COLLAPSE': Collapse Edges, Collapse short edges to remove mesh detail where possible.
    * 'SUBDIVIDE_COLLAPSE': Subdivide Collapse, Both subdivide long edges and collapse short edges to refine mesh detail.
    (type: enum in ['SUBDIVIDE', 'COLLAPSE', 'SUBDIVIDE_COLLAPSE'], default 'SUBDIVIDE')
    
    :type: str
    """

    detail_size = 0.0
    """Maximum edge length for dynamic topology sculpting (in pixels)
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    detail_type_method = 'RELATIVE'
    """In dynamic-topology mode, how mesh detail size is calculated
    * 'RELATIVE': Relative Detail, Mesh detail is relative to the brush size and detail size.
    * 'CONSTANT': Constant Detail, Mesh detail is constant in object space according to detail size.
    * 'BRUSH': Brush Detail, Mesh detail is relative to brush radius.
    (type: enum in ['RELATIVE', 'CONSTANT', 'BRUSH'], default 'RELATIVE')
    
    :type: str
    """

    gravity = 0.0
    """Amount of gravity after each dab
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    gravity_object = None
    """Object whose Z axis defines orientation of gravity
    (type: bpy.types.Object)
    
    :type: Object
    """

    lock_x = False
    """Disallow changes to the X axis of vertices
    (type: boolean, default False)
    
    :type: bool
    """

    lock_y = False
    """Disallow changes to the Y axis of vertices
    (type: boolean, default False)
    
    :type: bool
    """

    lock_z = False
    """Disallow changes to the Z axis of vertices
    (type: boolean, default False)
    
    :type: bool
    """

    radial_symmetry = (1, 1, 1)
    """Number of times to copy strokes across the surface
    (type: int array of 3 items in [1, 64], default (1, 1, 1))
    
    :type: collections.Sequence[int]
    """

    show_diffuse_color = False
    """Show diffuse color of object and overlay sculpt mask on top of it
    (type: boolean, default False)
    
    :type: bool
    """

    symmetrize_direction = 'NEGATIVE_X'
    """Source and destination for symmetrize operator
    (type: enum in ['NEGATIVE_X', 'POSITIVE_X', 'NEGATIVE_Y', 'POSITIVE_Y', 'NEGATIVE_Z', 'POSITIVE_Z'], default 'NEGATIVE_X')
    
    :type: str
    """

    use_deform_only = False
    """Use only deformation modifiers (temporary disable all constructive modifiers except multi-resolution)
    (type: boolean, default False)
    
    :type: bool
    """

    use_smooth_shading = False
    """Show faces in dynamic-topology mode with smooth shading rather than flat shaded
    (type: boolean, default False)
    
    :type: bool
    """

    use_threaded = False
    """Take advantage of multiple CPU cores to improve sculpting performance
    (type: boolean, default False)
    
    :type: bool
    """


class SelectedUvElement(PropertyGroup):
    """"""

    element_index = 0
    """(type: int in [0, inf], default 0)
    
    :type: int
    """

    face_index = 0
    """(type: int in [0, inf], default 0)
    
    :type: int
    """


class SequenceColorBalance(SequenceColorBalanceData):
    """Color balance parameters for a sequence strip"""


class SequencerTonemapModifierData(SequenceModifier):
    """Tone mapping modifier"""

    adaptation = 0.0
    """If 0, global; if 1, based on pixel intensity
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    contrast = 0.0
    """Set to 0 to use estimate from input image
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    correction = 0.0
    """If 0, same for all channels; if 1, each independent
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    gamma = 0.0
    """If not used, set to 1
    (type: float in [0.001, 3], default 0.0)
    
    :type: float
    """

    intensity = 0.0
    """If less than zero, darkens image; otherwise, makes it brighter
    (type: float in [-8, 8], default 0.0)
    
    :type: float
    """

    key = 0.0
    """The value the average luminance is mapped to
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    offset = 0.0
    """Normally always 1, but can be used as an extra control to alter the brightness curve
    (type: float in [0.001, 10], default 0.0)
    
    :type: float
    """

    tonemap_type = 'RH_SIMPLE'
    """(type: enum in ['RD_PHOTORECEPTOR', 'RH_SIMPLE'], default 'RH_SIMPLE')
    
    :type: str
    """


class ShrinkwrapConstraint(Constraint):
    """Create constraint-based shrinkwrap relationship"""

    distance = 0.0
    """Distance to Target
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    project_axis = 'POS_X'
    """Axis constrain to
    (type: enum in ['POS_X', 'POS_Y', 'POS_Z', 'NEG_X', 'NEG_Y', 'NEG_Z'], default 'POS_X')
    
    :type: str
    """

    project_axis_space = 'WORLD'
    """Space for the projection axis
    * 'WORLD': World Space, The constraint is applied relative to the world coordinate system.
    * 'POSE': Pose Space, The constraint is applied in Pose Space, the object transformation is ignored.
    * 'LOCAL_WITH_PARENT': Local With Parent, The constraint is applied relative to the local coordinate system of the object, with the parent transformation added.
    * 'LOCAL': Local Space, The constraint is applied relative to the local coordinate system of the object.
    (type: enum in ['WORLD', 'POSE', 'LOCAL_WITH_PARENT', 'LOCAL'], default 'WORLD')
    
    :type: str
    """

    project_limit = 0.0
    """Limit the distance used for projection (zero disables)
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    shrinkwrap_type = 'NEAREST_SURFACE'
    """Select type of shrinkwrap algorithm for target position
    * 'NEAREST_SURFACE': Nearest Surface Point, Shrink the location to the nearest target surface.
    * 'PROJECT': Project, Shrink the location to the nearest target surface along a given axis.
    * 'NEAREST_VERTEX': Nearest Vertex, Shrink the location to the nearest target vertex.
    (type: enum in ['NEAREST_SURFACE', 'PROJECT', 'NEAREST_VERTEX'], default 'NEAREST_SURFACE')
    
    :type: str
    """

    target = None
    """Target Object
    (type: bpy.types.Object)
    
    :type: Object
    """


class ShrinkwrapModifier(Modifier):
    """Shrink wrapping modifier to shrink wrap and object to a target"""

    auxiliary_target = None
    """Additional mesh target to shrink to
    (type: bpy.types.Object)
    
    :type: Object
    """

    cull_face = 'OFF'
    """Stop vertices from projecting to a face on the target when facing towards/away
    * 'OFF': Off, No culling.
    * 'FRONT': Front, No projection when in front of the face.
    * 'BACK': Back, No projection when behind the face.
    (type: enum in ['OFF', 'FRONT', 'BACK'], default 'OFF')
    
    :type: str
    """

    invert_vertex_group = False
    """Invert vertex group influence
    (type: boolean, default False)
    
    :type: bool
    """

    offset = 0.0
    """Distance to keep from the target
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    project_limit = 0.0
    """Limit the distance used for projection (zero disables)
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    subsurf_levels = 0
    """Number of subdivisions that must be performed before extracting vertices' positions and normals
    (type: int in [0, 6], default 0)
    
    :type: int
    """

    target = None
    """Mesh target to shrink to
    (type: bpy.types.Object)
    
    :type: Object
    """

    use_keep_above_surface = False
    """(type: boolean, default False)
    
    :type: bool
    """

    use_negative_direction = False
    """Allow vertices to move in the negative direction of axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_positive_direction = False
    """Allow vertices to move in the positive direction of axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_project_x = False
    """(type: boolean, default False)
    
    :type: bool
    """

    use_project_y = False
    """(type: boolean, default False)
    
    :type: bool
    """

    use_project_z = False
    """(type: boolean, default False)
    
    :type: bool
    """

    vertex_group = ""
    """Vertex group name
    (type: string, default "", (never None))
    
    :type: str
    """

    wrap_method = 'NEAREST_SURFACEPOINT'
    """
    * 'NEAREST_SURFACEPOINT': Nearest Surface Point, Shrink the mesh to the nearest target surface.
    * 'PROJECT': Project, Shrink the mesh to the nearest target surface along a given axis.
    * 'NEAREST_VERTEX': Nearest Vertex, Shrink the mesh to the nearest target vertex.
    (type: enum in ['NEAREST_SURFACEPOINT', 'PROJECT', 'NEAREST_VERTEX'], default 'NEAREST_SURFACEPOINT')
    
    :type: str
    """


class SimpleDeformModifier(Modifier):
    """Simple deformation modifier to apply effects such as twisting and bending"""

    angle = 0.785398
    """Angle of deformation
    (type: float in [-inf, inf], default 0.785398)
    
    :type: float
    """

    deform_method = 'TWIST'
    """
    * 'TWIST': Twist, Rotate around the Z axis of the modifier space.
    * 'BEND': Bend, Bend the mesh over the Z axis of the modifier space.
    * 'TAPER': Taper, Linearly scale along Z axis of the modifier space.
    * 'STRETCH': Stretch, Stretch the object along the Z axis of the modifier space.
    (type: enum in ['TWIST', 'BEND', 'TAPER', 'STRETCH'], default 'TWIST')
    
    :type: str
    """

    factor = 0.0
    """Amount to deform object
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    invert_vertex_group = False
    """Invert vertex group influence
    (type: boolean, default False)
    
    :type: bool
    """

    limits = (0.0, 0.0)
    """Lower/Upper limits for deform
    (type: float array of 2 items in [0, 1], default (0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    lock_x = False
    """Do not allow deformation along the X axis
    (type: boolean, default False)
    
    :type: bool
    """

    lock_y = False
    """Do not allow deformation along the Y axis
    (type: boolean, default False)
    
    :type: bool
    """

    origin = None
    """Offset the origin and orientation of the deformation
    (type: bpy.types.Object)
    
    :type: Object
    """

    vertex_group = ""
    """Vertex group name
    (type: string, default "", (never None))
    
    :type: str
    """


class SkinModifier(Modifier):
    """Generate Skin"""

    branch_smoothing = 0.0
    """Smooth complex geometry around branches
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    use_smooth_shade = False
    """Output faces with smooth shading rather than flat shaded
    (type: boolean, default False)
    
    :type: bool
    """

    use_x_symmetry = False
    """Avoid making unsymmetrical quads across the X axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_y_symmetry = False
    """Avoid making unsymmetrical quads across the Y axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_z_symmetry = False
    """Avoid making unsymmetrical quads across the Z axis
    (type: boolean, default False)
    
    :type: bool
    """


class SmokeModifier(Modifier):
    """Smoke simulation modifier"""

    coll_settings = None
    """(type: bpy.types.SmokeCollSettings, (readonly))
    
    :type: SmokeCollSettings
    """

    domain_settings = None
    """(type: bpy.types.SmokeDomainSettings, (readonly))
    
    :type: SmokeDomainSettings
    """

    flow_settings = None
    """(type: bpy.types.SmokeFlowSettings, (readonly))
    
    :type: SmokeFlowSettings
    """

    smoke_type = 'NONE'
    """
    * 'NONE': None.
    * 'DOMAIN': Domain.
    * 'FLOW': Flow, Inflow/Outflow.
    * 'COLLISION': Collision.
    (type: enum in ['NONE', 'DOMAIN', 'FLOW', 'COLLISION'], default 'NONE')
    
    :type: str
    """


class SmoothModifier(Modifier):
    """Smoothing effect modifier"""

    factor = 0.0
    """Strength of modifier effect
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    iterations = 0
    """(type: int in [-32768, 32767], default 0)
    
    :type: int
    """

    use_x = False
    """Smooth object along X axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_y = False
    """Smooth object along Y axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_z = False
    """Smooth object along Z axis
    (type: boolean, default False)
    
    :type: bool
    """

    vertex_group = ""
    """Name of Vertex Group which determines influence of modifier per point
    (type: string, default "", (never None))
    
    :type: str
    """


class SoftBodyModifier(Modifier):
    """Soft body simulation modifier"""

    point_cache = None
    """(type: bpy.types.PointCache, (readonly, never None))
    
    :type: PointCache
    """

    settings = None
    """(type: bpy.types.SoftBodySettings, (readonly, never None))
    
    :type: SoftBodySettings
    """


class SolidifyModifier(Modifier):
    """Create a solid skin by extruding, compensating for sharp angles"""

    edge_crease_inner = 0.0
    """Assign a crease to inner edges
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    edge_crease_outer = 0.0
    """Assign a crease to outer edges
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    edge_crease_rim = 0.0
    """Assign a crease to the edges making up the rim
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    invert_vertex_group = False
    """Invert the vertex group influence
    (type: boolean, default False)
    
    :type: bool
    """

    material_offset = 0
    """Offset material index of generated faces
    (type: int in [-32768, 32767], default 0)
    
    :type: int
    """

    material_offset_rim = 0
    """Offset material index of generated rim faces
    (type: int in [-32768, 32767], default 0)
    
    :type: int
    """

    offset = 0.0
    """Offset the thickness from the center
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    thickness = 0.0
    """Thickness of the shell
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    thickness_clamp = 0.0
    """Offset clamp based on geometry scale
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    thickness_vertex_group = 0.0
    """Thickness factor to use for zero vertex group influence
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    use_even_offset = False
    """Maintain thickness by adjusting for sharp corners (slow, disable when not needed)
    (type: boolean, default False)
    
    :type: bool
    """

    use_flip_normals = False
    """Invert the face direction
    (type: boolean, default False)
    
    :type: bool
    """

    use_quality_normals = False
    """Calculate normals which result in more even thickness (slow, disable when not needed)
    (type: boolean, default False)
    
    :type: bool
    """

    use_rim = False
    """Create edge loops between the inner and outer surfaces on face edges (slow, disable when not needed)
    (type: boolean, default False)
    
    :type: bool
    """

    use_rim_only = False
    """Only add the rim to the original data
    (type: boolean, default False)
    
    :type: bool
    """

    vertex_group = ""
    """Vertex group name
    (type: string, default "", (never None))
    
    :type: str
    """


class Sound(ID):
    """Sound data-block referencing an external or packed sound file"""

    filepath = ""
    """Sound sample file used by this Sound data-block
    (type: string, default "", (never None))
    
    :type: str
    """

    packed_file = None
    """(type: bpy.types.PackedFile, (readonly))
    
    :type: PackedFile
    """

    use_memory_cache = False
    """The sound file is decoded and loaded into RAM
    (type: boolean, default False)
    
    :type: bool
    """

    use_mono = False
    """If the file contains multiple audio channels they are rendered to a single one
    (type: boolean, default False)
    
    :type: bool
    """

    factory = None
    """The aud.Factory object of the sound.
                                (readonly)
    """

    def pack(self):
        """Pack the sound into the current blend file"""

    def unpack(self, method='USE_LOCAL'):
        """Unpack the sound to the samples filename
        
        :param method: method, How to unpack
            (type: enum in ['USE_LOCAL', 'WRITE_LOCAL', 'USE_ORIGINAL', 'WRITE_ORIGINAL'], (optional))
        :type method: str
        """


class SoundActuator(Actuator):
    """Sound file"""

    cone_inner_angle_3d = 0.0
    """The angle of the inner cone
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    cone_outer_angle_3d = 0.0
    """The angle of the outer cone
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    cone_outer_gain_3d = 0.0
    """The gain outside the outer cone (the gain in the outer cone will be interpolated between this value and the normal gain in the inner cone)
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    distance_3d_max = 0.0
    """The maximum distance at which you can hear the sound
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    distance_3d_reference = 0.0
    """The distance where the sound has a gain of 1.0
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    gain_3d_max = 0.0
    """The maximum gain of the sound, no matter how near it is
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    gain_3d_min = 0.0
    """The minimum gain of the sound, no matter how far it is away
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    mode = 'PLAYSTOP'
    """(type: enum in ['PLAYSTOP', 'PLAYEND', 'LOOPSTOP', 'LOOPEND', 'LOOPBIDIRECTIONAL', 'LOOPBIDIRECTIONALSTOP'], default 'PLAYSTOP')
    
    :type: str
    """

    pitch = 0.0
    """Pitch of the sound
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    rolloff_factor_3d = 0.0
    """The influence factor on volume depending on distance
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    sound = None
    """(type: bpy.types.Sound)
    
    :type: Sound
    """

    use_sound_3d = False
    """Enable/Disable 3D Sound
    (type: boolean, default False)
    
    :type: bool
    """

    volume = 0.0
    """Initial volume of the sound
    (type: float in [0, 2], default 0.0)
    
    :type: float
    """


class SoundSequence(Sequence):
    """Sequence strip defining a sound to be played over a period of time"""

    animation_offset_end = 0
    """Animation end offset (trim end)
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    animation_offset_start = 0
    """Animation start offset (trim start)
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    pan = 0.0
    """Playback panning of the sound (only for Mono sources)
    (type: float in [-2, 2], default 0.0)
    
    :type: float
    """

    pitch = 0.0
    """Playback pitch of the sound
    (type: float in [0.1, 10], default 0.0)
    
    :type: float
    """

    show_waveform = False
    """Whether to draw the sound's waveform
    (type: boolean, default False)
    
    :type: bool
    """

    sound = None
    """Sound data-block used by this sequence
    (type: bpy.types.Sound)
    
    :type: Sound
    """

    volume = 0.0
    """Playback volume of the sound
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """


class SpaceClipEditor(Space):
    """Clip editor space data"""

    clip = None
    """Movie clip displayed and edited in this space
    (type: bpy.types.MovieClip)
    
    :type: MovieClip
    """

    clip_user = None
    """Parameters defining which frame of the movie clip is displayed
    (type: bpy.types.MovieClipUser, (readonly, never None))
    
    :type: MovieClipUser
    """

    grease_pencil_source = 'CLIP'
    """Where the grease pencil comes from
    * 'CLIP': Clip, Show grease pencil data-block which belongs to movie clip.
    * 'TRACK': Track, Show grease pencil data-block which belongs to active track.
    (type: enum in ['CLIP', 'TRACK'], default 'CLIP')
    
    :type: str
    """

    lock_selection = False
    """Lock viewport to selected markers during playback
    (type: boolean, default False)
    
    :type: bool
    """

    lock_time_cursor = False
    """Lock curves view to time cursor during playback and tracking
    (type: boolean, default False)
    
    :type: bool
    """

    mask = None
    """Mask displayed and edited in this space
    (type: bpy.types.Mask)
    
    :type: Mask
    """

    mask_draw_type = 'OUTLINE'
    """Draw type for mask splines
    * 'OUTLINE': Outline, Draw white edges with black outline.
    * 'DASH': Dash, Draw dashed black-white edges.
    * 'BLACK': Black, Draw black edges.
    * 'WHITE': White, Draw white edges.
    (type: enum in ['OUTLINE', 'DASH', 'BLACK', 'WHITE'], default 'OUTLINE')
    
    :type: str
    """

    mask_overlay_mode = 'ALPHACHANNEL'
    """Overlay mode of rasterized mask
    * 'ALPHACHANNEL': Alpha Channel, Show alpha channel of the mask.
    * 'COMBINED': Combined, Combine space background image with the mask.
    (type: enum in ['ALPHACHANNEL', 'COMBINED'], default 'ALPHACHANNEL')
    
    :type: str
    """

    mode = 'TRACKING'
    """Editing context being displayed
    * 'TRACKING': Tracking, Show tracking and solving tools.
    * 'MASK': Mask, Show mask editing tools.
    (type: enum in ['TRACKING', 'MASK'], default 'TRACKING')
    
    :type: str
    """

    path_length = 0
    """Length of displaying path, in frames
    (type: int in [0, 50], default 0)
    
    :type: int
    """

    pivot_point = 'BOUNDING_BOX_CENTER'
    """Pivot center for rotation/scaling
    * 'BOUNDING_BOX_CENTER': Bounding Box Center, Pivot around bounding box center of selected object(s).
    * 'CURSOR': 2D Cursor, Pivot around the 2D cursor.
    * 'INDIVIDUAL_ORIGINS': Individual Origins, Pivot around each object's own origin.
    * 'MEDIAN_POINT': Median Point, Pivot around the median point of selected objects.
    (type: enum in ['BOUNDING_BOX_CENTER', 'CURSOR', 'INDIVIDUAL_ORIGINS', 'MEDIAN_POINT'], default 'BOUNDING_BOX_CENTER')
    
    :type: str
    """

    scopes = None
    """Scopes to visualize movie clip statistics
    (type: bpy.types.MovieClipScopes, (readonly))
    
    :type: MovieClipScopes
    """

    show_blue_channel = False
    """Show blue channel in the frame
    (type: boolean, default False)
    
    :type: bool
    """

    show_bundles = False
    """Show projection of 3D markers into footage
    (type: boolean, default False)
    
    :type: bool
    """

    show_disabled = False
    """Show disabled tracks from the footage
    (type: boolean, default False)
    
    :type: bool
    """

    show_filters = False
    """Show filters for graph editor
    (type: boolean, default False)
    
    :type: bool
    """

    show_graph_frames = False
    """Show curve for per-frame average error (camera motion should be solved first)
    (type: boolean, default False)
    
    :type: bool
    """

    show_graph_hidden = False
    """Include channels from objects/bone that aren't visible
    (type: boolean, default False)
    
    :type: bool
    """

    show_graph_only_selected = False
    """Only include channels relating to selected objects and data
    (type: boolean, default False)
    
    :type: bool
    """

    show_graph_tracks_error = False
    """Display the reprojection error curve for selected tracks
    (type: boolean, default False)
    
    :type: bool
    """

    show_graph_tracks_motion = False
    """Display the speed curves (in "x" direction red, in "y" direction green) for the selected tracks
    (type: boolean, default False)
    
    :type: bool
    """

    show_grease_pencil = False
    """Show grease pencil for this view
    (type: boolean, default False)
    
    :type: bool
    """

    show_green_channel = False
    """Show green channel in the frame
    (type: boolean, default False)
    
    :type: bool
    """

    show_grid = False
    """Show grid showing lens distortion
    (type: boolean, default False)
    
    :type: bool
    """

    show_marker_pattern = False
    """Show pattern boundbox for markers
    (type: boolean, default False)
    
    :type: bool
    """

    show_marker_search = False
    """Show search boundbox for markers
    (type: boolean, default False)
    
    :type: bool
    """

    show_mask_overlay = False
    """(type: boolean, default False)
    
    :type: bool
    """

    show_mask_smooth = False
    """(type: boolean, default False)
    
    :type: bool
    """

    show_metadata = False
    """Show metadata of clip
    (type: boolean, default False)
    
    :type: bool
    """

    show_names = False
    """Show track names and status
    (type: boolean, default False)
    
    :type: bool
    """

    show_red_channel = False
    """Show red channel in the frame
    (type: boolean, default False)
    
    :type: bool
    """

    show_seconds = False
    """Show timing in seconds not frames
    (type: boolean, default False)
    
    :type: bool
    """

    show_stable = False
    """Show stable footage in editor (if stabilization is enabled)
    (type: boolean, default False)
    
    :type: bool
    """

    show_tiny_markers = False
    """Show markers in a more compact manner
    (type: boolean, default False)
    
    :type: bool
    """

    show_track_path = False
    """Show path of how track moves
    (type: boolean, default False)
    
    :type: bool
    """

    use_grayscale_preview = False
    """Display frame in grayscale mode
    (type: boolean, default False)
    
    :type: bool
    """

    use_manual_calibration = False
    """Use manual calibration helpers
    (type: boolean, default False)
    
    :type: bool
    """

    use_mute_footage = False
    """Mute footage and show black background instead
    (type: boolean, default False)
    
    :type: bool
    """

    view = 'CLIP'
    """Type of the clip editor view
    * 'CLIP': Clip, Show editing clip preview.
    * 'GRAPH': Graph, Show graph view for active element.
    * 'DOPESHEET': Dopesheet, Dopesheet view for tracking data.
    (type: enum in ['CLIP', 'GRAPH', 'DOPESHEET'], default 'CLIP')
    
    :type: str
    """

    @classmethod
    def draw_handler_add(cls, func, args, region_type, draw_mode):
        """Undocumented
        
        :param func: Draw function
        :type func: collections.Callable
        :param args: function arguments
        :type args: hupre
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        :param draw_mode: enum in ['POST_PIXEL', 'POST_VIEW', 'PRE_VIEW']
        :type draw_mode: str
        :return: handle object
        :rtype: PyCapsule
        """

    @classmethod
    def draw_handler_remove(cls, handle, region_type):
        """Undocumented
        
        :param handle: handle object
        :type handle: PyCapsule
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        """


class SpaceConsole(Space):
    """Interactive python console"""

    font_size = 0
    """Font size to use for displaying the text
    (type: int in [8, 32], default 0)
    
    :type: int
    """

    history = None
    """Command history
    (type: bpy.types.bpy_prop_collection of bpy.types.ConsoleLine, (readonly))
    
    :type: bpy_prop_collection
    """

    language = ""
    """Command line prompt language
    (type: string, default "", (never None))
    
    :type: str
    """

    prompt = ""
    """Command line prompt
    (type: string, default "", (never None))
    
    :type: str
    """

    scrollback = None
    """Command output
    (type: bpy.types.bpy_prop_collection of bpy.types.ConsoleLine, (readonly))
    
    :type: bpy_prop_collection
    """

    select_end = 0
    """(type: int in [0, inf], default 0)
    
    :type: int
    """

    select_start = 0
    """(type: int in [0, inf], default 0)
    
    :type: int
    """

    @classmethod
    def draw_handler_add(cls, func, args, region_type, draw_mode):
        """Undocumented
        
        :param func: Draw function
        :type func: collections.Callable
        :param args: function arguments
        :type args: hupre
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        :param draw_mode: enum in ['POST_PIXEL', 'POST_VIEW', 'PRE_VIEW']
        :type draw_mode: str
        :return: handle object
        :rtype: PyCapsule
        """

    @classmethod
    def draw_handler_remove(cls, handle, region_type):
        """Undocumented
        
        :param handle: handle object
        :type handle: PyCapsule
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        """


class SpaceDopeSheetEditor(Space):
    """Dope Sheet space data"""

    action = None
    """Action displayed and edited in this space
    (type: bpy.types.Action)
    
    :type: Action
    """

    auto_snap = 'NONE'
    """Automatic time snapping settings for transformations
    * 'NONE': No Auto-Snap.
    * 'STEP': Frame Step, Snap to 1.0 frame intervals.
    * 'TIME_STEP': Second Step, Snap to 1.0 second intervals.
    * 'FRAME': Nearest Frame, Snap to actual frames (nla-action time).
    * 'SECOND': Nearest Second, Snap to actual seconds (nla-action time).
    * 'MARKER': Nearest Marker, Snap to nearest marker.
    (type: enum in ['NONE', 'STEP', 'TIME_STEP', 'FRAME', 'SECOND', 'MARKER'], default 'NONE')
    
    :type: str
    """

    dopesheet = None
    """Settings for filtering animation data
    (type: bpy.types.DopeSheet, (readonly))
    
    :type: DopeSheet
    """

    mode = 'ACTION'
    """Editing context being displayed
    * 'DOPESHEET': Dope Sheet, Edit all keyframes in scene.
    * 'ACTION': Action Editor, Edit keyframes in active object's Object-level action.
    * 'SHAPEKEY': Shape Key Editor, Edit keyframes in active object's Shape Keys action.
    * 'GPENCIL': Grease Pencil, Edit timings for all Grease Pencil sketches in file.
    * 'MASK': Mask, Edit timings for Mask Editor splines.
    * 'CACHEFILE': Cache File, Edit timings for Cache File data-blocks.
    (type: enum in ['DOPESHEET', 'ACTION', 'SHAPEKEY', 'GPENCIL', 'MASK', 'CACHEFILE'], default 'ACTION')
    
    :type: str
    """

    show_frame_indicator = False
    """Show frame number beside the current frame indicator line
    (type: boolean, default False)
    
    :type: bool
    """

    show_group_colors = False
    """Draw groups and channels with colors matching their corresponding groups (pose bones only currently)
    (type: boolean, default False)
    
    :type: bool
    """

    show_pose_markers = False
    """Show markers belonging to the active action instead of Scene markers (Action and Shape Key Editors only)
    (type: boolean, default False)
    
    :type: bool
    """

    show_seconds = False
    """Show timing in seconds not frames
    (type: boolean, default False)
    
    :type: bool
    """

    show_sliders = False
    """Show sliders beside F-Curve channels
    (type: boolean, default False)
    
    :type: bool
    """

    use_auto_merge_keyframes = False
    """Automatically merge nearby keyframes
    (type: boolean, default False)
    
    :type: bool
    """

    use_marker_sync = False
    """Sync Markers with keyframe edits
    (type: boolean, default False)
    
    :type: bool
    """

    use_realtime_update = False
    """When transforming keyframes, changes to the animation data are flushed to other views
    (type: boolean, default False)
    
    :type: bool
    """

    @classmethod
    def draw_handler_add(cls, func, args, region_type, draw_mode):
        """Undocumented
        
        :param func: Draw function
        :type func: collections.Callable
        :param args: function arguments
        :type args: hupre
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        :param draw_mode: enum in ['POST_PIXEL', 'POST_VIEW', 'PRE_VIEW']
        :type draw_mode: str
        :return: handle object
        :rtype: PyCapsule
        """

    @classmethod
    def draw_handler_remove(cls, handle, region_type):
        """Undocumented
        
        :param handle: handle object
        :type handle: PyCapsule
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        """


class SpaceFileBrowser(Space):
    """File browser space data"""

    active_operator = None
    """(type: bpy.types.Operator, (readonly))
    
    :type: Operator
    """

    bookmarks = None
    """User's bookmarks
    (type: bpy.types.bpy_prop_collection of bpy.types.FileBrowserFSMenuEntry, (readonly))
    
    :type: bpy_prop_collection
    """

    bookmarks_active = -1
    """Index of active bookmark (-1 if none)
    (type: int in [-32768, 32767], default -1)
    
    :type: int
    """

    operator = None
    """(type: bpy.types.Operator, (readonly))
    
    :type: Operator
    """

    params = None
    """Parameters and Settings for the Filebrowser
    (type: bpy.types.FileSelectParams, (readonly))
    
    :type: FileSelectParams
    """

    recent_folders = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.FileBrowserFSMenuEntry, (readonly))
    
    :type: bpy_prop_collection
    """

    recent_folders_active = -1
    """Index of active recent folder (-1 if none)
    (type: int in [-32768, 32767], default -1)
    
    :type: int
    """

    system_bookmarks = None
    """System's bookmarks
    (type: bpy.types.bpy_prop_collection of bpy.types.FileBrowserFSMenuEntry, (readonly))
    
    :type: bpy_prop_collection
    """

    system_bookmarks_active = -1
    """Index of active system bookmark (-1 if none)
    (type: int in [-32768, 32767], default -1)
    
    :type: int
    """

    system_folders = None
    """System's folders (usually root, available hard drives, etc)
    (type: bpy.types.bpy_prop_collection of bpy.types.FileBrowserFSMenuEntry, (readonly))
    
    :type: bpy_prop_collection
    """

    system_folders_active = -1
    """Index of active system folder (-1 if none)
    (type: int in [-32768, 32767], default -1)
    
    :type: int
    """

    @classmethod
    def draw_handler_add(cls, func, args, region_type, draw_mode):
        """Undocumented
        
        :param func: Draw function
        :type func: collections.Callable
        :param args: function arguments
        :type args: hupre
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        :param draw_mode: enum in ['POST_PIXEL', 'POST_VIEW', 'PRE_VIEW']
        :type draw_mode: str
        :return: handle object
        :rtype: PyCapsule
        """

    @classmethod
    def draw_handler_remove(cls, handle, region_type):
        """Undocumented
        
        :param handle: handle object
        :type handle: PyCapsule
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        """


class SpaceGraphEditor(Space):
    """Graph Editor space data"""

    auto_snap = 'NONE'
    """Automatic time snapping settings for transformations
    * 'NONE': No Auto-Snap.
    * 'STEP': Frame Step, Snap to 1.0 frame intervals.
    * 'TIME_STEP': Second Step, Snap to 1.0 second intervals.
    * 'FRAME': Nearest Frame, Snap to actual frames (nla-action time).
    * 'SECOND': Nearest Second, Snap to actual seconds (nla-action time).
    * 'MARKER': Nearest Marker, Snap to nearest marker.
    (type: enum in ['NONE', 'STEP', 'TIME_STEP', 'FRAME', 'SECOND', 'MARKER'], default 'NONE')
    
    :type: str
    """

    cursor_position_x = 0.0
    """Graph Editor 2D-Value cursor - X-Value component
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    cursor_position_y = 0.0
    """Graph Editor 2D-Value cursor - Y-Value component
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    dopesheet = None
    """Settings for filtering animation data
    (type: bpy.types.DopeSheet, (readonly))
    
    :type: DopeSheet
    """

    has_ghost_curves = False
    """Graph Editor instance has some ghost curves stored
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    mode = 'FCURVES'
    """Editing context being displayed
    * 'FCURVES': F-Curve, Edit animation/keyframes displayed as 2D curves.
    * 'DRIVERS': Drivers, Edit drivers.
    (type: enum in ['FCURVES', 'DRIVERS'], default 'FCURVES')
    
    :type: str
    """

    pivot_point = 'BOUNDING_BOX_CENTER'
    """Pivot center for rotation/scaling
    (type: enum in ['BOUNDING_BOX_CENTER', 'CURSOR', 'INDIVIDUAL_ORIGINS'], default 'BOUNDING_BOX_CENTER')
    
    :type: str
    """

    show_cursor = False
    """Show 2D cursor
    (type: boolean, default False)
    
    :type: bool
    """

    show_frame_indicator = False
    """Show frame number beside the current frame indicator line
    (type: boolean, default False)
    
    :type: bool
    """

    show_group_colors = False
    """Draw groups and channels with colors matching their corresponding groups
    (type: boolean, default False)
    
    :type: bool
    """

    show_handles = False
    """Show handles of Bezier control points
    (type: boolean, default False)
    
    :type: bool
    """

    show_seconds = False
    """Show timing in seconds not frames
    (type: boolean, default False)
    
    :type: bool
    """

    show_sliders = False
    """Show sliders beside F-Curve channels
    (type: boolean, default False)
    
    :type: bool
    """

    use_auto_merge_keyframes = False
    """Automatically merge nearby keyframes
    (type: boolean, default False)
    
    :type: bool
    """

    use_auto_normalization = False
    """Automatically recalculate curve normalization on every curve edit
    (type: boolean, default False)
    
    :type: bool
    """

    use_beauty_drawing = False
    """Draw F-Curves using Anti-Aliasing and other fancy effects (disable for better performance)
    (type: boolean, default False)
    
    :type: bool
    """

    use_normalization = False
    """Display curves in normalized to -1..1 range, for easier editing of multiple curves with different ranges
    (type: boolean, default False)
    
    :type: bool
    """

    use_only_selected_curves_handles = False
    """Only keyframes of selected F-Curves are visible and editable
    (type: boolean, default False)
    
    :type: bool
    """

    use_only_selected_keyframe_handles = False
    """Only show and edit handles of selected keyframes
    (type: boolean, default False)
    
    :type: bool
    """

    use_realtime_update = False
    """When transforming keyframes, changes to the animation data are flushed to other views
    (type: boolean, default False)
    
    :type: bool
    """

    @classmethod
    def draw_handler_add(cls, func, args, region_type, draw_mode):
        """Undocumented
        
        :param func: Draw function
        :type func: collections.Callable
        :param args: function arguments
        :type args: hupre
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        :param draw_mode: enum in ['POST_PIXEL', 'POST_VIEW', 'PRE_VIEW']
        :type draw_mode: str
        :return: handle object
        :rtype: PyCapsule
        """

    @classmethod
    def draw_handler_remove(cls, handle, region_type):
        """Undocumented
        
        :param handle: handle object
        :type handle: PyCapsule
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        """


class SpaceImageEditor(Space):
    """Image and UV editor space data"""

    cursor_location = (0.0, 0.0)
    """2D cursor location for this view
    (type: float array of 2 items in [-inf, inf], default (0.0, 0.0))
    
    :type: mathutils.Vector
    """

    draw_channels = 'COLOR'
    """Channels of the image to draw
    * 'COLOR_ALPHA': Color and Alpha, Draw image with RGB colors and alpha transparency.
    * 'COLOR': Color, Draw image with RGB colors.
    * 'ALPHA': Alpha, Draw alpha transparency channel.
    * 'Z_BUFFER': Z-Buffer, Draw Z-buffer associated with image (mapped from camera clip start to end).
    * 'RED': Red.
    * 'GREEN': Green.
    * 'BLUE': Blue.
    (type: enum in ['COLOR_ALPHA', 'COLOR', 'ALPHA', 'Z_BUFFER', 'RED', 'GREEN', 'BLUE'], default 'COLOR')
    
    :type: str
    """

    grease_pencil = None
    """Grease pencil data for this space
    (type: bpy.types.GreasePencil)
    
    :type: GreasePencil
    """

    image = None
    """Image displayed and edited in this space
    (type: bpy.types.Image)
    
    :type: Image
    """

    image_user = None
    """Parameters defining which layer, pass and frame of the image is displayed
    (type: bpy.types.ImageUser, (readonly, never None))
    
    :type: ImageUser
    """

    mask = None
    """Mask displayed and edited in this space
    (type: bpy.types.Mask)
    
    :type: Mask
    """

    mask_draw_type = 'OUTLINE'
    """Draw type for mask splines
    * 'OUTLINE': Outline, Draw white edges with black outline.
    * 'DASH': Dash, Draw dashed black-white edges.
    * 'BLACK': Black, Draw black edges.
    * 'WHITE': White, Draw white edges.
    (type: enum in ['OUTLINE', 'DASH', 'BLACK', 'WHITE'], default 'OUTLINE')
    
    :type: str
    """

    mask_overlay_mode = 'ALPHACHANNEL'
    """Overlay mode of rasterized mask
    * 'ALPHACHANNEL': Alpha Channel, Show alpha channel of the mask.
    * 'COMBINED': Combined, Combine space background image with the mask.
    (type: enum in ['ALPHACHANNEL', 'COMBINED'], default 'ALPHACHANNEL')
    
    :type: str
    """

    mode = 'VIEW'
    """Editing context being displayed
    * 'VIEW': View, View the image and UV edit in mesh editmode.
    * 'PAINT': Paint, 2D image painting mode.
    * 'MASK': Mask, Mask editing.
    (type: enum in ['VIEW', 'PAINT', 'MASK'], default 'VIEW')
    
    :type: str
    """

    pivot_point = 'BOUNDING_BOX_CENTER'
    """Rotation/Scaling Pivot
    * 'BOUNDING_BOX_CENTER': Bounding Box Center, Pivot around bounding box center of selected object(s).
    * 'CURSOR': 3D Cursor, Pivot around the 3D cursor.
    * 'INDIVIDUAL_ORIGINS': Individual Origins, Pivot around each object's own origin.
    * 'MEDIAN_POINT': Median Point, Pivot around the median point of selected objects.
    * 'ACTIVE_ELEMENT': Active Element, Pivot around active object.
    (type: enum in ['BOUNDING_BOX_CENTER', 'CURSOR', 'INDIVIDUAL_ORIGINS', 'MEDIAN_POINT', 'ACTIVE_ELEMENT'], default 'BOUNDING_BOX_CENTER')
    
    :type: str
    """

    sample_histogram = None
    """Sampled colors along line
    (type: bpy.types.Histogram, (readonly))
    
    :type: Histogram
    """

    scopes = None
    """Scopes to visualize image statistics
    (type: bpy.types.Scopes, (readonly))
    
    :type: Scopes
    """

    show_grease_pencil = False
    """Show grease pencil for this view
    (type: boolean, default False)
    
    :type: bool
    """

    show_mask_overlay = False
    """(type: boolean, default False)
    
    :type: bool
    """

    show_mask_smooth = False
    """(type: boolean, default False)
    
    :type: bool
    """

    show_maskedit = False
    """Show Mask editing related properties
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    show_paint = False
    """Show paint related properties
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    show_render = False
    """Show render related properties
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    show_repeat = False
    """Draw the image repeated outside of the main view
    (type: boolean, default False)
    
    :type: bool
    """

    show_stereo_3d = False
    """Display the image in Stereo 3D
    (type: boolean, default False)
    
    :type: bool
    """

    show_uvedit = False
    """Show UV editing related properties
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    use_image_pin = False
    """Display current image regardless of object selection
    (type: boolean, default False)
    
    :type: bool
    """

    use_realtime_update = False
    """Update other affected window spaces automatically to reflect changes during interactive operations such as transform
    (type: boolean, default False)
    
    :type: bool
    """

    uv_editor = None
    """UV editor settings
    (type: bpy.types.SpaceUVEditor, (readonly, never None))
    
    :type: SpaceUVEditor
    """

    zoom = (0.0, 0.0)
    """Zoom factor
    (type: float array of 2 items in [-inf, inf], default (0.0, 0.0), (readonly))
    
    :type: collections.Sequence[float]
    """

    @classmethod
    def draw_handler_add(cls, func, args, region_type, draw_mode):
        """Undocumented
        
        :param func: Draw function
        :type func: collections.Callable
        :param args: function arguments
        :type args: hupre
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        :param draw_mode: enum in ['POST_PIXEL', 'POST_VIEW', 'PRE_VIEW']
        :type draw_mode: str
        :return: handle object
        :rtype: PyCapsule
        """

    @classmethod
    def draw_handler_remove(cls, handle, region_type):
        """Undocumented
        
        :param handle: handle object
        :type handle: PyCapsule
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        """


class SpaceInfo(Space):
    """Info space data"""

    show_report_debug = False
    """Display debug reporting info
    (type: boolean, default False)
    
    :type: bool
    """

    show_report_error = False
    """Display error text
    (type: boolean, default False)
    
    :type: bool
    """

    show_report_info = False
    """Display general information
    (type: boolean, default False)
    
    :type: bool
    """

    show_report_operator = False
    """Display the operator log
    (type: boolean, default False)
    
    :type: bool
    """

    show_report_warning = False
    """Display warnings
    (type: boolean, default False)
    
    :type: bool
    """

    @classmethod
    def draw_handler_add(cls, func, args, region_type, draw_mode):
        """Undocumented
        
        :param func: Draw function
        :type func: collections.Callable
        :param args: function arguments
        :type args: hupre
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        :param draw_mode: enum in ['POST_PIXEL', 'POST_VIEW', 'PRE_VIEW']
        :type draw_mode: str
        :return: handle object
        :rtype: PyCapsule
        """

    @classmethod
    def draw_handler_remove(cls, handle, region_type):
        """Undocumented
        
        :param handle: handle object
        :type handle: PyCapsule
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        """


class SpaceLogicEditor(Space):
    """Logic editor space data"""

    show_actuators_active_object = False
    """Show actuators of active object
    (type: boolean, default False)
    
    :type: bool
    """

    show_actuators_active_states = False
    """Show only actuators connected to active states
    (type: boolean, default False)
    
    :type: bool
    """

    show_actuators_linked_controller = False
    """Show linked objects to the actuator
    (type: boolean, default False)
    
    :type: bool
    """

    show_actuators_selected_objects = False
    """Show actuators of all selected objects
    (type: boolean, default False)
    
    :type: bool
    """

    show_controllers_active_object = False
    """Show controllers of active object
    (type: boolean, default False)
    
    :type: bool
    """

    show_controllers_linked_controller = False
    """Show linked objects to sensor/actuator
    (type: boolean, default False)
    
    :type: bool
    """

    show_controllers_selected_objects = False
    """Show controllers of all selected objects
    (type: boolean, default False)
    
    :type: bool
    """

    show_sensors_active_object = False
    """Show sensors of active object
    (type: boolean, default False)
    
    :type: bool
    """

    show_sensors_active_states = False
    """Show only sensors connected to active states
    (type: boolean, default False)
    
    :type: bool
    """

    show_sensors_linked_controller = False
    """Show linked objects to the controller
    (type: boolean, default False)
    
    :type: bool
    """

    show_sensors_selected_objects = False
    """Show sensors of all selected objects
    (type: boolean, default False)
    
    :type: bool
    """

    @classmethod
    def draw_handler_add(cls, func, args, region_type, draw_mode):
        """Undocumented
        
        :param func: Draw function
        :type func: collections.Callable
        :param args: function arguments
        :type args: hupre
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        :param draw_mode: enum in ['POST_PIXEL', 'POST_VIEW', 'PRE_VIEW']
        :type draw_mode: str
        :return: handle object
        :rtype: PyCapsule
        """

    @classmethod
    def draw_handler_remove(cls, handle, region_type):
        """Undocumented
        
        :param handle: handle object
        :type handle: PyCapsule
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        """


class SpaceNLA(Space):
    """NLA editor space data"""

    auto_snap = 'NONE'
    """Automatic time snapping settings for transformations
    * 'NONE': No Auto-Snap.
    * 'STEP': Frame Step, Snap to 1.0 frame intervals.
    * 'TIME_STEP': Second Step, Snap to 1.0 second intervals.
    * 'FRAME': Nearest Frame, Snap to actual frames (nla-action time).
    * 'SECOND': Nearest Second, Snap to actual seconds (nla-action time).
    * 'MARKER': Nearest Marker, Snap to nearest marker.
    (type: enum in ['NONE', 'STEP', 'TIME_STEP', 'FRAME', 'SECOND', 'MARKER'], default 'NONE')
    
    :type: str
    """

    dopesheet = None
    """Settings for filtering animation data
    (type: bpy.types.DopeSheet, (readonly))
    
    :type: DopeSheet
    """

    show_frame_indicator = False
    """Show frame number beside the current frame indicator line
    (type: boolean, default False)
    
    :type: bool
    """

    show_local_markers = False
    """Show action-local markers on the strips, useful when synchronizing timing across strips
    (type: boolean, default False)
    
    :type: bool
    """

    show_seconds = False
    """Show timing in seconds not frames
    (type: boolean, default False)
    
    :type: bool
    """

    show_strip_curves = False
    """Show influence F-Curves on strips
    (type: boolean, default False)
    
    :type: bool
    """

    use_realtime_update = False
    """When transforming strips, changes to the animation data are flushed to other views
    (type: boolean, default False)
    
    :type: bool
    """

    @classmethod
    def draw_handler_add(cls, func, args, region_type, draw_mode):
        """Undocumented
        
        :param func: Draw function
        :type func: collections.Callable
        :param args: function arguments
        :type args: hupre
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        :param draw_mode: enum in ['POST_PIXEL', 'POST_VIEW', 'PRE_VIEW']
        :type draw_mode: str
        :return: handle object
        :rtype: PyCapsule
        """

    @classmethod
    def draw_handler_remove(cls, handle, region_type):
        """Undocumented
        
        :param handle: handle object
        :type handle: PyCapsule
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        """


class SpaceNodeEditor(Space):
    """Node editor space data"""

    backdrop_channels = 'COLOR'
    """Channels of the image to draw
    * 'COLOR_ALPHA': Color and Alpha, Draw image with RGB colors and alpha transparency.
    * 'COLOR': Color, Draw image with RGB colors.
    * 'ALPHA': Alpha, Draw alpha transparency channel.
    * 'RED': Red.
    * 'GREEN': Green.
    * 'BLUE': Blue.
    (type: enum in ['COLOR_ALPHA', 'COLOR', 'ALPHA', 'RED', 'GREEN', 'BLUE'], default 'COLOR')
    
    :type: str
    """

    backdrop_x = 0.0
    """Backdrop X offset
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    backdrop_y = 0.0
    """Backdrop Y offset
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    backdrop_zoom = 1.0
    """Backdrop zoom factor
    (type: float in [0.01, inf], default 1.0)
    
    :type: float
    """

    cursor_location = (0.0, 0.0)
    """Location for adding new nodes
    (type: float array of 2 items in [-inf, inf], default (0.0, 0.0))
    
    :type: mathutils.Vector
    """

    edit_tree = None
    """Node tree being displayed and edited
    (type: bpy.types.NodeTree, (readonly))
    
    :type: NodeTree
    """

    id = None
    """Data-block whose nodes are being edited
    (type: bpy.types.ID, (readonly))
    
    :type: ID
    """

    id_from = None
    """Data-block from which the edited data-block is linked
    (type: bpy.types.ID, (readonly))
    
    :type: ID
    """

    insert_offset_direction = 'RIGHT'
    """Direction to offset nodes on insertion
    (type: enum in ['RIGHT', 'LEFT'], default 'RIGHT')
    
    :type: str
    """

    node_tree = None
    """Base node tree from context
    (type: bpy.types.NodeTree)
    
    :type: NodeTree
    """

    path = None
    """Path from the data-block to the currently edited node tree
    (type: bpy.types.SpaceNodeEditorPath bpy.types.bpy_prop_collection of bpy.types.NodeTreePath, (readonly))
    
    :type: SpaceNodeEditorPath
    """

    pin = False
    """Use the pinned node tree
    (type: boolean, default False)
    
    :type: bool
    """

    shader_type = 'OBJECT'
    """Type of data to take shader from
    * 'OBJECT': Object, Edit shader nodes from Object.
    * 'WORLD': World, Edit shader nodes from World.
    * 'LINESTYLE': Line Style, Edit shader nodes from Line Style.
    (type: enum in ['OBJECT', 'WORLD', 'LINESTYLE'], default 'OBJECT')
    
    :type: str
    """

    show_backdrop = False
    """Use active Viewer Node output as backdrop for compositing nodes
    (type: boolean, default False)
    
    :type: bool
    """

    show_grease_pencil = False
    """Show grease pencil for this view
    (type: boolean, default False)
    
    :type: bool
    """

    show_highlight = False
    """Highlight nodes that are being calculated
    (type: boolean, default False)
    
    :type: bool
    """

    texture_type = 'OBJECT'
    """Type of data to take texture from
    * 'OBJECT': Object, Edit texture nodes from Object.
    * 'WORLD': World, Edit texture nodes from World.
    * 'BRUSH': Brush, Edit texture nodes from Brush.
    * 'LINESTYLE': Line Style, Edit texture nodes from Line Style.
    (type: enum in ['OBJECT', 'WORLD', 'BRUSH', 'LINESTYLE'], default 'OBJECT')
    
    :type: str
    """

    tree_type = 'DUMMY'
    """Node tree type to display and edit
    (type: enum in ['DUMMY'], default 'DUMMY')
    
    :type: str
    """

    use_auto_render = False
    """Re-render and composite changed layers on 3D edits
    (type: boolean, default False)
    
    :type: bool
    """

    use_insert_offset = False
    """Automatically offset the following or previous nodes in a chain when inserting a new node
    (type: boolean, default False)
    
    :type: bool
    """

    def cursor_location_from_region(self, x, y):
        """Set the cursor location using region coordinates
        
        :param x: x, Region x coordinate
            (type: int in [-inf, inf])
        :type x: int
        :param y: y, Region y coordinate
            (type: int in [-inf, inf])
        :type y: int
        """

    @classmethod
    def draw_handler_add(cls, func, args, region_type, draw_mode):
        """Undocumented
        
        :param func: Draw function
        :type func: collections.Callable
        :param args: function arguments
        :type args: hupre
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        :param draw_mode: enum in ['POST_PIXEL', 'POST_VIEW', 'PRE_VIEW']
        :type draw_mode: str
        :return: handle object
        :rtype: PyCapsule
        """

    @classmethod
    def draw_handler_remove(cls, handle, region_type):
        """Undocumented
        
        :param handle: handle object
        :type handle: PyCapsule
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        """


class SpaceOutliner(Space):
    """Outliner space data"""

    display_mode = 'ALL_SCENES'
    """Type of information to display
    * 'ALL_SCENES': All Scenes, Display data-blocks in all scenes.
    * 'CURRENT_SCENE': Current Scene, Display data-blocks in current scene.
    * 'VISIBLE_LAYERS': Visible Layers, Display data-blocks in visible layers.
    * 'SELECTED': Selected, Display data-blocks of selected, visible objects.
    * 'ACTIVE': Active, Display data-blocks of active object.
    * 'SAME_TYPES': Same Types, Display data-blocks of all objects of same type as selected object.
    * 'GROUPS': Groups, Display groups and their data-blocks.
    * 'SEQUENCE': Sequence, Display sequence data-blocks.
    * 'LIBRARIES': Blender File, Display data of current file and linked libraries.
    * 'DATABLOCKS': Data-Blocks, Display all raw data-blocks.
    * 'USER_PREFERENCES': User Preferences, Display user preference data.
    * 'ORPHAN_DATA': Orphan Data, Display data-blocks which are unused and/or will be lost when the file is reloaded.
    (type: enum in ['ALL_SCENES', 'CURRENT_SCENE', 'VISIBLE_LAYERS', 'SELECTED', 'ACTIVE', 'SAME_TYPES', 'GROUPS', 'SEQUENCE', 'LIBRARIES', 'DATABLOCKS', 'USER_PREFERENCES', 'ORPHAN_DATA'], default 'ALL_SCENES')
    
    :type: str
    """

    filter_text = ""
    """Live search filtering string
    (type: string, default "", (never None))
    
    :type: str
    """

    show_restrict_columns = False
    """Show column
    (type: boolean, default False)
    
    :type: bool
    """

    use_filter_case_sensitive = False
    """Only use case sensitive matches of search string
    (type: boolean, default False)
    
    :type: bool
    """

    use_filter_complete = False
    """Only use complete matches of search string
    (type: boolean, default False)
    
    :type: bool
    """

    use_sort_alpha = False
    """(type: boolean, default False)
    
    :type: bool
    """

    @classmethod
    def draw_handler_add(cls, func, args, region_type, draw_mode):
        """Undocumented
        
        :param func: Draw function
        :type func: collections.Callable
        :param args: function arguments
        :type args: hupre
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        :param draw_mode: enum in ['POST_PIXEL', 'POST_VIEW', 'PRE_VIEW']
        :type draw_mode: str
        :return: handle object
        :rtype: PyCapsule
        """

    @classmethod
    def draw_handler_remove(cls, handle, region_type):
        """Undocumented
        
        :param handle: handle object
        :type handle: PyCapsule
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        """


class SpaceProperties(Space):
    """Properties space data"""

    align = 'HORIZONTAL'
    """Arrangement of the panels
    (type: enum in ['HORIZONTAL', 'VERTICAL'], default 'HORIZONTAL')
    
    :type: str
    """

    context = 'RENDER'
    """Type of active data to display and edit
    * 'SCENE': Scene, Scene.
    * 'RENDER': Render, Render.
    * 'RENDER_LAYER': Render Layers, Render layers.
    * 'WORLD': World, World.
    * 'OBJECT': Object, Object.
    * 'CONSTRAINT': Constraints, Object constraints.
    * 'MODIFIER': Modifiers, Object modifiers.
    * 'DATA': Data, Object data.
    * 'BONE': Bone, Bone.
    * 'BONE_CONSTRAINT': Bone Constraints, Bone constraints.
    * 'MATERIAL': Material, Material.
    * 'TEXTURE': Texture, Texture.
    * 'PARTICLES': Particles, Particle.
    * 'PHYSICS': Physics, Physics.
    (type: enum in ['SCENE', 'RENDER', 'RENDER_LAYER', 'WORLD', 'OBJECT', 'CONSTRAINT', 'MODIFIER', 'DATA', 'BONE', 'BONE_CONSTRAINT', 'MATERIAL', 'TEXTURE', 'PARTICLES', 'PHYSICS'], default 'RENDER')
    
    :type: str
    """

    pin_id = None
    """(type: bpy.types.ID)
    
    :type: ID
    """

    texture_context = 'MATERIAL'
    """Type of texture data to display and edit
    * 'MATERIAL': Show material textures.
    * 'WORLD': Show world textures.
    * 'LAMP': Show lamp textures.
    * 'PARTICLES': Show particles textures.
    * 'LINESTYLE': Show linestyle textures.
    * 'OTHER': Show other data textures.
    (type: enum in ['MATERIAL', 'WORLD', 'LAMP', 'PARTICLES', 'LINESTYLE', 'OTHER'], default 'MATERIAL')
    
    :type: str
    """

    use_limited_texture_context = False
    """Use the limited version of texture user (for 'old shading' mode)
    (type: boolean, default False)
    
    :type: bool
    """

    use_pin_id = False
    """Use the pinned context
    (type: boolean, default False)
    
    :type: bool
    """

    @classmethod
    def draw_handler_add(cls, func, args, region_type, draw_mode):
        """Undocumented
        
        :param func: Draw function
        :type func: collections.Callable
        :param args: function arguments
        :type args: hupre
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        :param draw_mode: enum in ['POST_PIXEL', 'POST_VIEW', 'PRE_VIEW']
        :type draw_mode: str
        :return: handle object
        :rtype: PyCapsule
        """

    @classmethod
    def draw_handler_remove(cls, handle, region_type):
        """Undocumented
        
        :param handle: handle object
        :type handle: PyCapsule
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        """


class SpaceSequenceEditor(Space):
    """Sequence editor space data"""

    display_channel = 0
    """The channel number shown in the image preview. 0 is the result of all strips combined
    (type: int in [-5, 32], default 0)
    
    :type: int
    """

    display_mode = 'IMAGE'
    """View mode to use for displaying sequencer output
    (type: enum in ['IMAGE', 'WAVEFORM', 'VECTOR_SCOPE', 'HISTOGRAM'], default 'IMAGE')
    
    :type: str
    """

    draw_overexposed = 0
    """Show overexposed areas with zebra stripes
    (type: int in [0, 110], default 0)
    
    :type: int
    """

    grease_pencil = None
    """Grease pencil data for this space
    (type: bpy.types.GreasePencil)
    
    :type: GreasePencil
    """

    overlay_type = 'RECTANGLE'
    """Overlay draw type
    * 'RECTANGLE': Rectangle, Show rectangle area overlay.
    * 'REFERENCE': Reference, Show reference frame only.
    * 'CURRENT': Current, Show current frame only.
    (type: enum in ['RECTANGLE', 'REFERENCE', 'CURRENT'], default 'RECTANGLE')
    
    :type: str
    """

    preview_channels = 'COLOR'
    """Channels of the preview to draw
    * 'COLOR_ALPHA': Color and Alpha, Draw image with RGB colors and alpha transparency.
    * 'COLOR': Color, Draw image with RGB colors.
    (type: enum in ['COLOR_ALPHA', 'COLOR'], default 'COLOR')
    
    :type: str
    """

    proxy_render_size = 'SCENE'
    """Draw preview using full resolution or different proxy resolutions
    (type: enum in ['NONE', 'SCENE', 'PROXY_25', 'PROXY_50', 'PROXY_75', 'PROXY_100', 'FULL'], default 'SCENE')
    
    :type: str
    """

    show_backdrop = False
    """Display result under strips
    (type: boolean, default False)
    
    :type: bool
    """

    show_frame_indicator = False
    """Show frame number beside the current frame indicator line
    (type: boolean, default False)
    
    :type: bool
    """

    show_frames = False
    """Draw frames rather than seconds
    (type: boolean, default False)
    
    :type: bool
    """

    show_grease_pencil = False
    """Show grease pencil for this view
    (type: boolean, default False)
    
    :type: bool
    """

    show_metadata = False
    """Show metadata of first visible strip
    (type: boolean, default False)
    
    :type: bool
    """

    show_safe_areas = False
    """Show TV title safe and action safe areas in preview
    (type: boolean, default False)
    
    :type: bool
    """

    show_safe_center = False
    """Show safe areas to fit content in a different aspect ratio
    (type: boolean, default False)
    
    :type: bool
    """

    show_seconds = False
    """Show timing in seconds not frames
    (type: boolean, default False)
    
    :type: bool
    """

    show_separate_color = False
    """Separate color channels in preview
    (type: boolean, default False)
    
    :type: bool
    """

    show_strip_offset = False
    """Display strip in/out offsets
    (type: boolean, default False)
    
    :type: bool
    """

    use_marker_sync = False
    """Transform markers as well as strips
    (type: boolean, default False)
    
    :type: bool
    """

    view_type = 'SEQUENCER'
    """Type of the Sequencer view (sequencer, preview or both)
    (type: enum in ['SEQUENCER', 'PREVIEW', 'SEQUENCER_PREVIEW'], default 'SEQUENCER')
    
    :type: str
    """

    waveform_draw_type = 'DEFAULT_WAVEFORMS'
    """How Waveforms are drawn
    * 'NO_WAVEFORMS': Waveforms Off, No waveforms drawn for any sound strips.
    * 'ALL_WAVEFORMS': Waveforms On, Waveforms drawn for all sound strips.
    * 'DEFAULT_WAVEFORMS': Use Strip Option, Waveforms drawn according to strip setting.
    (type: enum in ['NO_WAVEFORMS', 'ALL_WAVEFORMS', 'DEFAULT_WAVEFORMS'], default 'DEFAULT_WAVEFORMS')
    
    :type: str
    """

    @classmethod
    def draw_handler_add(cls, func, args, region_type, draw_mode):
        """Undocumented
        
        :param func: Draw function
        :type func: collections.Callable
        :param args: function arguments
        :type args: hupre
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        :param draw_mode: enum in ['POST_PIXEL', 'POST_VIEW', 'PRE_VIEW']
        :type draw_mode: str
        :return: handle object
        :rtype: PyCapsule
        """

    @classmethod
    def draw_handler_remove(cls, handle, region_type):
        """Undocumented
        
        :param handle: handle object
        :type handle: PyCapsule
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        """


class SpaceTextEditor(Space):
    """Text editor space data"""

    find_text = ""
    """Text to search for with the find tool
    (type: string, default "", (never None))
    
    :type: str
    """

    font_size = 0
    """Font size to use for displaying the text
    (type: int in [8, 32], default 0)
    
    :type: int
    """

    margin_column = 0
    """Column number to show right margin at
    (type: int in [0, 1024], default 0)
    
    :type: int
    """

    replace_text = ""
    """Text to replace selected text with using the replace tool
    (type: string, default "", (never None))
    
    :type: str
    """

    show_line_highlight = False
    """Highlight the current line
    (type: boolean, default False)
    
    :type: bool
    """

    show_line_numbers = False
    """Show line numbers next to the text
    (type: boolean, default False)
    
    :type: bool
    """

    show_margin = False
    """Show right margin
    (type: boolean, default False)
    
    :type: bool
    """

    show_syntax_highlight = False
    """Syntax highlight for scripting
    (type: boolean, default False)
    
    :type: bool
    """

    show_word_wrap = False
    """Wrap words if there is not enough horizontal space
    (type: boolean, default False)
    
    :type: bool
    """

    tab_width = 0
    """Number of spaces to display tabs with
    (type: int in [2, 8], default 0)
    
    :type: int
    """

    text = None
    """Text displayed and edited in this space
    (type: bpy.types.Text)
    
    :type: Text
    """

    top = 0
    """Top line visible
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    use_find_all = False
    """Search in all text data-blocks, instead of only the active one
    (type: boolean, default False)
    
    :type: bool
    """

    use_find_wrap = False
    """Search again from the start of the file when reaching the end
    (type: boolean, default False)
    
    :type: bool
    """

    use_live_edit = False
    """Run python while editing
    (type: boolean, default False)
    
    :type: bool
    """

    use_match_case = False
    """Search string is sensitive to uppercase and lowercase letters
    (type: boolean, default False)
    
    :type: bool
    """

    use_overwrite = False
    """Overwrite characters when typing rather than inserting them
    (type: boolean, default False)
    
    :type: bool
    """

    visible_lines = 0
    """Amount of lines that can be visible in current editor
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    def region_location_from_cursor(self, line, column):
        """Retrieve the region position from the given line and character position
        
        :param line: Line, Line index
            (type: int in [-inf, inf])
        :type line: int
        :param column: Column, Column index
            (type: int in [-inf, inf])
        :type column: int
        :return: Region coordinates
        :param : (type: int array of 2 items in [-1, inf])
        :rtype: collections.Sequence[int]
        """

    @classmethod
    def draw_handler_add(cls, func, args, region_type, draw_mode):
        """Undocumented
        
        :param func: Draw function
        :type func: collections.Callable
        :param args: function arguments
        :type args: hupre
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        :param draw_mode: enum in ['POST_PIXEL', 'POST_VIEW', 'PRE_VIEW']
        :type draw_mode: str
        :return: handle object
        :rtype: PyCapsule
        """

    @classmethod
    def draw_handler_remove(cls, handle, region_type):
        """Undocumented
        
        :param handle: handle object
        :type handle: PyCapsule
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        """


class SpaceTimeline(Space):
    """Timeline editor space data"""

    cache_cloth = False
    """Show the active object's cloth point cache
    (type: boolean, default False)
    
    :type: bool
    """

    cache_dynamicpaint = False
    """Show the active object's Dynamic Paint cache
    (type: boolean, default False)
    
    :type: bool
    """

    cache_particles = False
    """Show the active object's particle point cache
    (type: boolean, default False)
    
    :type: bool
    """

    cache_rigidbody = False
    """Show the active object's Rigid Body cache
    (type: boolean, default False)
    
    :type: bool
    """

    cache_smoke = False
    """Show the active object's smoke cache
    (type: boolean, default False)
    
    :type: bool
    """

    cache_softbody = False
    """Show the active object's softbody point cache
    (type: boolean, default False)
    
    :type: bool
    """

    show_cache = False
    """Show the status of cached frames in the timeline
    (type: boolean, default False)
    
    :type: bool
    """

    show_frame_indicator = False
    """Show frame number beside the current frame indicator line
    (type: boolean, default False)
    
    :type: bool
    """

    show_seconds = False
    """Show timing in seconds not frames
    (type: boolean, default False)
    
    :type: bool
    """

    @classmethod
    def draw_handler_add(cls, func, args, region_type, draw_mode):
        """Undocumented
        
        :param func: Draw function
        :type func: collections.Callable
        :param args: function arguments
        :type args: hupre
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        :param draw_mode: enum in ['POST_PIXEL', 'POST_VIEW', 'PRE_VIEW']
        :type draw_mode: str
        :return: handle object
        :rtype: PyCapsule
        """

    @classmethod
    def draw_handler_remove(cls, handle, region_type):
        """Undocumented
        
        :param handle: handle object
        :type handle: PyCapsule
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        """


class SpaceUserPreferences(Space):
    """User preferences space data"""

    filter_text = ""
    """Search term for filtering in the UI
    (type: string, default "", (never None))
    
    :type: str
    """

    filter_type = 'NAME'
    """Filter method
    * 'NAME': Name, Filter based on the operator name.
    * 'KEY': Key-Binding, Filter based on key bindings.
    (type: enum in ['NAME', 'KEY'], default 'NAME')
    
    :type: str
    """

    @classmethod
    def draw_handler_add(cls, func, args, region_type, draw_mode):
        """Undocumented
        
        :param func: Draw function
        :type func: collections.Callable
        :param args: function arguments
        :type args: hupre
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        :param draw_mode: enum in ['POST_PIXEL', 'POST_VIEW', 'PRE_VIEW']
        :type draw_mode: str
        :return: handle object
        :rtype: PyCapsule
        """

    @classmethod
    def draw_handler_remove(cls, handle, region_type):
        """Undocumented
        
        :param handle: handle object
        :type handle: PyCapsule
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        """


class SpaceView3D(Space):
    """3D View space data"""

    active_layer = 0
    """Active 3D view layer index
    (type: int in [-inf, inf], default 0, (readonly))
    
    :type: int
    """

    background_images = None
    """List of background images
    (type: bpy.types.BackgroundImages bpy.types.bpy_prop_collection of bpy.types.BackgroundImage, (readonly))
    
    :type: BackgroundImages
    """

    camera = None
    """Active camera used in this view (when unlocked from the scene's active camera)
    (type: bpy.types.Object)
    
    :type: Object
    """

    clip_end = 1000.0
    """3D View far clipping distance
    (type: float in [1e-06, inf], default 1000.0)
    
    :type: float
    """

    clip_start = 0.1
    """3D View near clipping distance (perspective view only)
    (type: float in [1e-06, inf], default 0.1)
    
    :type: float
    """

    current_orientation = None
    """Current transformation orientation
    (type: bpy.types.TransformOrientation, (readonly))
    
    :type: TransformOrientation
    """

    cursor_location = (0.0, 0.0, 0.0)
    """3D cursor location for this view (dependent on local view setting)
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    fx_settings = None
    """Options used for real time compositing
    (type: bpy.types.GPUFXSettings, (readonly))
    
    :type: GPUFXSettings
    """

    grid_lines = 16
    """Number of grid lines to display in perspective view
    (type: int in [0, 1024], default 16)
    
    :type: int
    """

    grid_scale = 1.0
    """Distance between 3D View grid lines
    (type: float in [0, inf], default 1.0)
    
    :type: float
    """

    grid_scale_unit = 0.0
    """Grid cell size scaled by scene unit system settings
    (type: float in [-inf, inf], default 0.0, (readonly))
    
    :type: float
    """

    grid_subdivisions = 10
    """Number of subdivisions between grid lines
    (type: int in [1, 1024], default 10)
    
    :type: int
    """

    layers = (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
    """Layers visible in this 3D View
    (type: boolean array of 20 items, default (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False))
    
    :type: collections.Sequence[bool]
    """

    layers_local_view = (False, False, False, False, False, False, False, False)
    """Local view layers visible in this 3D View
    (type: boolean array of 8 items, default (False, False, False, False, False, False, False, False), (readonly))
    
    :type: collections.Sequence[bool]
    """

    layers_used = (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
    """Layers that contain something
    (type: boolean array of 20 items, default (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False), (readonly))
    
    :type: collections.Sequence[bool]
    """

    lens = 0.0
    """Viewport lens angle
    (type: float in [1, 250], default 0.0)
    
    :type: float
    """

    local_grid_location = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    local_grid_rotation = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Quaternion
    """

    local_view = None
    """Display an isolated sub-set of objects, apart from the scene visibility
    (type: bpy.types.SpaceView3D, (readonly))
    
    :type: SpaceView3D
    """

    lock_bone = ""
    """3D View center is locked to this bone's position
    (type: string, default "", (never None))
    
    :type: str
    """

    lock_camera = False
    """Enable view navigation within the camera view
    (type: boolean, default False)
    
    :type: bool
    """

    lock_camera_and_layers = False
    """Use the scene's active camera and layers in this view, rather than local layers
    (type: boolean, default False)
    
    :type: bool
    """

    lock_cursor = False
    """3D View center is locked to the cursor's position
    (type: boolean, default False)
    
    :type: bool
    """

    lock_object = None
    """3D View center is locked to this object's position
    (type: bpy.types.Object)
    
    :type: Object
    """

    matcap_icon = '01'
    """Image to use for Material Capture, active objects only
    (type: enum in ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24'], default '01')
    
    :type: str
    """

    pivot_point = 'BOUNDING_BOX_CENTER'
    """Pivot center for rotation/scaling
    * 'BOUNDING_BOX_CENTER': Bounding Box Center, Pivot around bounding box center of selected object(s).
    * 'CURSOR': 3D Cursor, Pivot around the 3D cursor.
    * 'INDIVIDUAL_ORIGINS': Individual Origins, Pivot around each object's own origin.
    * 'MEDIAN_POINT': Median Point, Pivot around the median point of selected objects.
    * 'ACTIVE_ELEMENT': Active Element, Pivot around active object.
    (type: enum in ['BOUNDING_BOX_CENTER', 'CURSOR', 'INDIVIDUAL_ORIGINS', 'MEDIAN_POINT', 'ACTIVE_ELEMENT'], default 'BOUNDING_BOX_CENTER')
    
    :type: str
    """

    region_3d = None
    """3D region in this space, in case of quad view the camera region
    (type: bpy.types.RegionView3D, (readonly))
    
    :type: RegionView3D
    """

    region_quadviews = None
    """3D regions (the third one defines quad view settings, the fourth one is same as 'region_3d')
    (type: bpy.types.bpy_prop_collection of bpy.types.RegionView3D, (readonly))
    
    :type: bpy_prop_collection
    """

    render_border_max_x = 0.0
    """Maximum X value for the render border
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    render_border_max_y = 0.0
    """Maximum Y value for the render border
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    render_border_min_x = 0.0
    """Minimum X value for the render border
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    render_border_min_y = 0.0
    """Minimum Y value for the render border
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    show_all_objects_origin = False
    """Show the object origin center dot for all (selected and unselected) objects
    (type: boolean, default False)
    
    :type: bool
    """

    show_axis_x = False
    """Show the X axis line in perspective view
    (type: boolean, default False)
    
    :type: bool
    """

    show_axis_y = False
    """Show the Y axis line in perspective view
    (type: boolean, default False)
    
    :type: bool
    """

    show_axis_z = False
    """Show the Z axis line in perspective view
    (type: boolean, default False)
    
    :type: bool
    """

    show_backface_culling = False
    """Use back face culling to hide the back side of faces
    (type: boolean, default False)
    
    :type: bool
    """

    show_background_images = False
    """Display reference images behind objects in the 3D View
    (type: boolean, default False)
    
    :type: bool
    """

    show_bundle_names = False
    """Show names for reconstructed tracks objects
    (type: boolean, default False)
    
    :type: bool
    """

    show_camera_path = False
    """Show reconstructed camera path
    (type: boolean, default False)
    
    :type: bool
    """

    show_floor = False
    """Show the ground plane grid in perspective view
    (type: boolean, default False)
    
    :type: bool
    """

    show_grease_pencil = False
    """Show grease pencil for this view
    (type: boolean, default False)
    
    :type: bool
    """

    show_manipulator = False
    """Use a 3D manipulator widget for controlling transforms
    (type: boolean, default False)
    
    :type: bool
    """

    show_occlude_wire = False
    """Use hidden wireframe display
    (type: boolean, default False)
    
    :type: bool
    """

    show_only_render = False
    """Display only objects which will be rendered
    (type: boolean, default False)
    
    :type: bool
    """

    show_outline_selected = False
    """Show an outline highlight around selected objects in non-wireframe views
    (type: boolean, default False)
    
    :type: bool
    """

    show_reconstruction = False
    """Display reconstruction data from active movie clip
    (type: boolean, default False)
    
    :type: bool
    """

    show_relationship_lines = False
    """Show dashed lines indicating parent or constraint relationships
    (type: boolean, default False)
    
    :type: bool
    """

    show_stereo_3d_cameras = False
    """Show the left and right cameras
    (type: boolean, default False)
    
    :type: bool
    """

    show_stereo_3d_convergence_plane = False
    """Show the stereo 3d convergence plane
    (type: boolean, default False)
    
    :type: bool
    """

    show_stereo_3d_volume = False
    """Show the stereo 3d frustum volume
    (type: boolean, default False)
    
    :type: bool
    """

    show_textured_shadeless = False
    """Show shadeless texture without lighting in textured draw mode
    (type: boolean, default False)
    
    :type: bool
    """

    show_textured_solid = False
    """Display face-assigned textures in solid view
    (type: boolean, default False)
    
    :type: bool
    """

    show_world = False
    """Display world colors in the background
    (type: boolean, default False)
    
    :type: bool
    """

    stereo_3d_camera = 'LEFT'
    """(type: enum in ['LEFT', 'RIGHT', 'S3D'], default 'LEFT')
    
    :type: str
    """

    stereo_3d_convergence_plane_alpha = 0.0
    """Opacity (alpha) of the convergence plane
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    stereo_3d_eye = 'LEFT_EYE'
    """Current stereo eye being drawn
    (type: enum in ['LEFT_EYE', 'RIGHT_EYE'], default 'LEFT_EYE', (readonly))
    
    :type: str
    """

    stereo_3d_volume_alpha = 0.0
    """Opacity (alpha) of the cameras' frustum volume
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    tracks_draw_size = 0.0
    """Display size of tracks from reconstructed data
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    tracks_draw_type = 'PLAIN_AXES'
    """Viewport display style for tracks
    (type: enum in ['PLAIN_AXES', 'ARROWS', 'SINGLE_ARROW', 'CIRCLE', 'CUBE', 'SPHERE', 'CONE'], default 'PLAIN_AXES')
    
    :type: str
    """

    transform_manipulators = {'TRANSLATE'}
    """Transformation manipulators
    * 'TRANSLATE': Translate, Use the manipulator for movement transformations.
    * 'ROTATE': Rotate, Use the manipulator for rotation transformations.
    * 'SCALE': Scale, Use the manipulator for scale transformations.
    (type: enum set in {'TRANSLATE', 'ROTATE', 'SCALE'}, default {'TRANSLATE'})
    
    :type: enum set in {'TRANSLATE', 'ROTATE', 'SCALE'}
    """

    transform_orientation = 'GLOBAL'
    """Transformation orientation
    * 'GLOBAL': Global, Align the transformation axes to world space.
    * 'LOCAL': Local, Align the transformation axes to the selected objects' local space.
    * 'NORMAL': Normal, Align the transformation axes to average normal of selected elements (bone Y axis for pose mode).
    * 'GIMBAL': Gimbal, Align each axis to the Euler rotation axis as used for input.
    * 'VIEW': View, Align the transformation axes to the window.
    * 'GRID': Grid, Align the transformation axes to grid.
    (type: enum in ['GLOBAL', 'LOCAL', 'NORMAL', 'GIMBAL', 'VIEW', 'GRID'], default 'GLOBAL')
    
    :type: str
    """

    use_color_wire = False
    """Use color wire
    (type: boolean, default False)
    
    :type: bool
    """

    use_color_wire_solid = False
    """Available color wire when v3d->drawtype >= OB_SOLID
    (type: boolean, default False)
    
    :type: bool
    """

    use_local_grid = False
    """(type: boolean, default False)
    
    :type: bool
    """

    use_matcap = False
    """Active Objects draw images mapped on normals, enhancing Solid Draw Mode
    (type: boolean, default False)
    
    :type: bool
    """

    use_occlude_geometry = False
    """Limit selection to visible (clipped with depth buffer)
    (type: boolean, default False)
    
    :type: bool
    """

    use_pivot_point_align = False
    """Manipulate center points (object, pose and weight paint mode only)
    (type: boolean, default False)
    
    :type: bool
    """

    use_render_border = False
    """Use a region within the frame size for rendered viewport (when not viewing through the camera)
    (type: boolean, default False)
    
    :type: bool
    """

    viewport_shade = 'BOUNDBOX'
    """Method to display/shade objects in the 3D View
    * 'BOUNDBOX': Bounding Box, Display the object's local bounding boxes only.
    * 'WIREFRAME': Wireframe, Display the object as wire edges.
    * 'SOLID': Solid, Display the object solid, lit with default OpenGL lights.
    * 'TEXTURED': Texture, Display the object solid, with a texture.
    * 'MATERIAL': Material, Display objects solid, with GLSL material.
    * 'RENDERED': Rendered, Display render preview.
    (type: enum in ['BOUNDBOX', 'WIREFRAME', 'SOLID', 'TEXTURED', 'MATERIAL', 'RENDERED'], default 'BOUNDBOX')
    
    :type: str
    """

    @classmethod
    def draw_handler_add(cls, func, args, region_type, draw_mode):
        """Undocumented
        
        :param func: Draw function
        :type func: collections.Callable
        :param args: function arguments
        :type args: hupre
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        :param draw_mode: enum in ['POST_PIXEL', 'POST_VIEW', 'PRE_VIEW']
        :type draw_mode: str
        :return: handle object
        :rtype: PyCapsule
        """

    @classmethod
    def draw_handler_remove(cls, handle, region_type):
        """Undocumented
        
        :param handle: handle object
        :type handle: PyCapsule
        :param region_type: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW']
        :type region_type: str
        """


class Speaker(ID):
    """Speaker data-block for 3D audio speaker objects"""

    animation_data = None
    """Animation data for this data-block
    (type: bpy.types.AnimData, (readonly))
    
    :type: AnimData
    """

    attenuation = 0.0
    """How strong the distance affects volume, depending on distance model
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    cone_angle_inner = 0.0
    """Angle of the inner cone, in degrees, inside the cone the volume is 100 %
    (type: float in [0, 360], default 0.0)
    
    :type: float
    """

    cone_angle_outer = 0.0
    """Angle of the outer cone, in degrees, outside this cone the volume is the outer cone volume, between inner and outer cone the volume is interpolated
    (type: float in [0, 360], default 0.0)
    
    :type: float
    """

    cone_volume_outer = 0.0
    """Volume outside the outer cone
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    distance_max = 0.0
    """Maximum distance for volume calculation, no matter how far away the object is
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    distance_reference = 0.0
    """Reference distance at which volume is 100 %
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    muted = False
    """Mute the speaker
    (type: boolean, default False)
    
    :type: bool
    """

    pitch = 0.0
    """Playback pitch of the sound
    (type: float in [0.1, 10], default 0.0)
    
    :type: float
    """

    relative = False
    """Whether the source is relative to the camera or not
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    sound = None
    """Sound data-block used by this speaker
    (type: bpy.types.Sound)
    
    :type: Sound
    """

    volume = 0.0
    """How loud the sound is
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    volume_max = 0.0
    """Maximum volume, no matter how near the object is
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    volume_min = 0.0
    """Minimum volume, no matter how far away the object is
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """


class SplineIKConstraint(Constraint):
    """Align 'n' bones along a curve"""

    bulge = 0.0
    """Factor between volume variation and stretching
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    bulge_max = 0.0
    """Maximum volume stretching factor
    (type: float in [1, 100], default 0.0)
    
    :type: float
    """

    bulge_min = 0.0
    """Minimum volume stretching factor
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    bulge_smooth = 0.0
    """Strength of volume stretching clamping
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    chain_count = 0
    """How many bones are included in the chain
    (type: int in [1, 255], default 0)
    
    :type: int
    """

    joint_bindings = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
    """(EXPERIENCED USERS ONLY) The relative positions of the joints along the chain, as percentages
    (type: float array of 32 items in [0, 1], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    offset = 0.0
    """Offset
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    target = None
    """Curve that controls this relationship
    (type: bpy.types.Object)
    
    :type: Object
    """

    use_bulge_max = False
    """Use upper limit for volume variation
    (type: boolean, default False)
    
    :type: bool
    """

    use_bulge_min = False
    """Use lower limit for volume variation
    (type: boolean, default False)
    
    :type: bool
    """

    use_chain_offset = False
    """Offset the entire chain relative to the root joint
    (type: boolean, default False)
    
    :type: bool
    """

    use_curve_radius = False
    """Average radius of the endpoints is used to tweak the X and Z Scaling of the bones, on top of XZ Scale mode
    (type: boolean, default False)
    
    :type: bool
    """

    use_even_divisions = False
    """Ignore the relative lengths of the bones when fitting to the curve
    (type: boolean, default False)
    
    :type: bool
    """

    use_y_stretch = False
    """Stretch the Y axis of the bones to fit the curve
    (type: boolean, default False)
    
    :type: bool
    """

    xz_scale_mode = 'NONE'
    """Method used for determining the scaling of the X and Z axes of the bones
    * 'NONE': None, Don't scale the X and Z axes (Default).
    * 'BONE_ORIGINAL': Bone Original, Use the original scaling of the bones.
    * 'INVERSE_PRESERVE': Inverse Scale, Scale of the X and Z axes is the inverse of the Y-Scale.
    * 'VOLUME_PRESERVE': Volume Preservation, Scale of the X and Z axes are adjusted to preserve the volume of the bones.
    (type: enum in ['NONE', 'BONE_ORIGINAL', 'INVERSE_PRESERVE', 'VOLUME_PRESERVE'], default 'NONE')
    
    :type: str
    """


class StateActuator(Actuator):
    """Actuator to handle states"""

    operation = 'SET'
    """Select the bit operation on object state mask
    (type: enum in ['SET', 'ADD', 'REMOVE', 'CHANGE'], default 'SET')
    
    :type: str
    """

    states = (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
    """(type: boolean array of 30 items, default (False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False))
    
    :type: collections.Sequence[bool]
    """


class SteeringActuator(Actuator):
    """"""

    acceleration = 0.0
    """Max acceleration
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """

    distance = 0.0
    """Relax distance
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """

    facing = False
    """Enable automatic facing
    (type: boolean, default False)
    
    :type: bool
    """

    facing_axis = 'X'
    """Axis for automatic facing
    (type: enum in ['X', 'Y', 'Z', 'NEG_X', 'NEG_Y', 'NEG_Z'], default 'X')
    
    :type: str
    """

    lock_z_velocity = False
    """Disable simulation of linear motion along Z axis
    (type: boolean, default False)
    
    :type: bool
    """

    mode = 'SEEK'
    """(type: enum in ['SEEK', 'FLEE', 'PATHFOLLOWING'], default 'SEEK')
    
    :type: str
    """

    navmesh = None
    """Navigation mesh
    (type: bpy.types.Object)
    
    :type: Object
    """

    normal_up = False
    """Use normal of the navmesh to set "UP" vector
    (type: boolean, default False)
    
    :type: bool
    """

    self_terminated = False
    """Terminate when target is reached
    (type: boolean, default False)
    
    :type: bool
    """

    show_visualization = False
    """Enable debug visualization for 'Path following'
    (type: boolean, default False)
    
    :type: bool
    """

    target = None
    """Target object
    (type: bpy.types.Object)
    
    :type: Object
    """

    turn_speed = 0.0
    """Max turn speed
    (type: float in [0, 720], default 0.0)
    
    :type: float
    """

    update_period = 0
    """Path update period
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    velocity = 0.0
    """Velocity magnitude
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """


class StretchToConstraint(Constraint):
    """Stretch to meet the target object"""

    bulge = 0.0
    """Factor between volume variation and stretching
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    bulge_max = 0.0
    """Maximum volume stretching factor
    (type: float in [1, 100], default 0.0)
    
    :type: float
    """

    bulge_min = 0.0
    """Minimum volume stretching factor
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    bulge_smooth = 0.0
    """Strength of volume stretching clamping
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    head_tail = 0.0
    """Target along length of bone: Head=0, Tail=1
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    keep_axis = 'PLANE_X'
    """Axis to maintain during stretch
    * 'PLANE_X': X, Keep X Axis.
    * 'PLANE_Z': Z, Keep Z Axis.
    (type: enum in ['PLANE_X', 'PLANE_Z'], default 'PLANE_X')
    
    :type: str
    """

    rest_length = 0.0
    """Length at rest position
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """

    subtarget = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    target = None
    """Target Object
    (type: bpy.types.Object)
    
    :type: Object
    """

    use_bbone_shape = False
    """Follow shape of B-Bone segments when calculating Head/Tail position
    (type: boolean, default False)
    
    :type: bool
    """

    use_bulge_max = False
    """Use upper limit for volume variation
    (type: boolean, default False)
    
    :type: bool
    """

    use_bulge_min = False
    """Use lower limit for volume variation
    (type: boolean, default False)
    
    :type: bool
    """

    volume = 'VOLUME_XZX'
    """Maintain the object's volume as it stretches
    (type: enum in ['VOLUME_XZX', 'VOLUME_X', 'VOLUME_Z', 'NO_VOLUME'], default 'VOLUME_XZX')
    
    :type: str
    """


class StringProperty(Property):
    """RNA text string property definition"""

    default = ""
    """string default value
    (type: string, default "", (readonly, never None))
    
    :type: str
    """

    length_max = 0
    """Maximum length of the string, 0 means unlimited
    (type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """


class SubsurfModifier(Modifier):
    """Subdivision surface modifier"""

    levels = 0
    """Number of subdivisions to perform
    (type: int in [0, 11], default 0)
    
    :type: int
    """

    render_levels = 0
    """Number of subdivisions to perform when rendering
    (type: int in [0, 11], default 0)
    
    :type: int
    """

    show_only_control_edges = False
    """Skip drawing/rendering of interior subdivided edges
    (type: boolean, default False)
    
    :type: bool
    """

    subdivision_type = 'CATMULL_CLARK'
    """Select type of subdivision algorithm
    (type: enum in ['CATMULL_CLARK', 'SIMPLE'], default 'CATMULL_CLARK')
    
    :type: str
    """

    use_opensubdiv = False
    """Use OpenSubdiv for the subdivisions (viewport only)
    (type: boolean, default False)
    
    :type: bool
    """

    use_subsurf_uv = False
    """Use subsurf to subdivide UVs
    (type: boolean, default False)
    
    :type: bool
    """


class SurfaceDeformModifier(Modifier):
    """"""

    falloff = 0.0
    """Controls how much nearby polygons influence deformation
    (type: float in [2, 16], default 0.0)
    
    :type: float
    """

    is_bound = False
    """Whether geometry has been bound to target mesh
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    target = None
    """Mesh object to deform with
    (type: bpy.types.Object)
    
    :type: Object
    """


class SurfaceModifier(Modifier):
    """Surface modifier defining modifier stack position used for surface fields"""


class TEXTURE_UL_texpaintslots(UIList):
    """"""

    def draw_item(self, context, layout, data, item, icon, active_data, active_propname, index):
        """"""


class TEXTURE_UL_texslots(UIList):
    """"""

    def draw_item(self, context, layout, data, item, icon, active_data, active_propname, index):
        """"""


class Text(ID):
    """Text data-block referencing an external or packed text file"""

    current_character = 0
    """Index of current character in current line, and also start index of character in selection if one exists
    (type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """

    current_line = None
    """Current line, and start line of selection if one exists
    (type: bpy.types.TextLine, (readonly, never None))
    
    :type: TextLine
    """

    current_line_index = 0
    """Index of current TextLine in TextLine collection
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    filepath = ""
    """Filename of the text file
    (type: string, default "", (never None))
    
    :type: str
    """

    is_dirty = False
    """Text file has been edited since last save
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_in_memory = False
    """Text file is in memory, without a corresponding file on disk
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    is_modified = False
    """Text file on disk is different than the one in memory
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    lines = None
    """Lines of text
    (type: bpy.types.bpy_prop_collection of bpy.types.TextLine, (readonly))
    
    :type: bpy_prop_collection
    """

    select_end_character = 0
    """Index of character after end of selection in the selection end line
    (type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """

    select_end_line = None
    """End line of selection
    (type: bpy.types.TextLine, (readonly, never None))
    
    :type: TextLine
    """

    use_module = False
    """Register this text as a module on loading, Text name must end with ".py"
    (type: boolean, default False)
    
    :type: bool
    """

    use_tabs_as_spaces = False
    """Automatically converts all new tabs into spaces
    (type: boolean, default False)
    
    :type: bool
    """

    users_logic = None
    """Logic bricks that use this text
                                (readonly)
    """

    def clear(self):
        """clear the text block"""

    def write(self, text):
        """write text at the cursor location and advance to the end of the text block
        
        :param text: New text for this data-block
            (type: str, (never None))
        :type text: str
        """

    def as_string(self):
        """Return the text as a string."""

    def from_string(self, string):
        """Replace text with this string."""


class Texture(ID):
    """Texture data-block used by materials, lamps, worlds and brushes"""

    animation_data = None
    """Animation data for this data-block
    (type: bpy.types.AnimData, (readonly))
    
    :type: AnimData
    """

    color_ramp = None
    """(type: bpy.types.ColorRamp, (readonly))
    
    :type: ColorRamp
    """

    contrast = 0.0
    """Adjust the contrast of the texture
    (type: float in [0, 5], default 0.0)
    
    :type: float
    """

    factor_blue = 0.0
    """(type: float in [0, 2], default 0.0)
    
    :type: float
    """

    factor_green = 0.0
    """(type: float in [0, 2], default 0.0)
    
    :type: float
    """

    factor_red = 0.0
    """(type: float in [0, 2], default 0.0)
    
    :type: float
    """

    intensity = 0.0
    """Adjust the brightness of the texture
    (type: float in [0, 2], default 0.0)
    
    :type: float
    """

    node_tree = None
    """Node tree for node-based textures
    (type: bpy.types.NodeTree, (readonly))
    
    :type: NodeTree
    """

    saturation = 0.0
    """Adjust the saturation of colors in the texture
    (type: float in [0, 2], default 0.0)
    
    :type: float
    """

    type = 'NONE'
    """
    * 'NONE': None.
    * 'BLEND': Blend, Procedural - create a ramp texture.
    * 'CLOUDS': Clouds, Procedural - create a cloud-like fractal noise texture.
    * 'DISTORTED_NOISE': Distorted Noise, Procedural - noise texture distorted by two noise algorithms.
    * 'ENVIRONMENT_MAP': Environment Map, Create a render of the environment mapped to a texture.
    * 'IMAGE': Image or Movie, Allow for images or movies to be used as textures.
    * 'MAGIC': Magic, Procedural - color texture based on trigonometric functions.
    * 'MARBLE': Marble, Procedural - marble-like noise texture with wave generated bands.
    * 'MUSGRAVE': Musgrave, Procedural - highly flexible fractal noise texture.
    * 'NOISE': Noise, Procedural - random noise, gives a different result every time, for every frame, for every pixel.
    * 'OCEAN': Ocean, Use a texture generated by an Ocean modifier.
    * 'POINT_DENSITY': Point Density.
    * 'STUCCI': Stucci, Procedural - create a fractal noise texture.
    * 'VORONOI': Voronoi, Procedural - create cell-like patterns based on Worley noise.
    * 'VOXEL_DATA': Voxel Data, Create a 3D texture based on volumetric data.
    * 'WOOD': Wood, Procedural - wave generated bands or rings, with optional noise.
    (type: enum in ['NONE', 'BLEND', 'CLOUDS', 'DISTORTED_NOISE', 'ENVIRONMENT_MAP', 'IMAGE', 'MAGIC', 'MARBLE', 'MUSGRAVE', 'NOISE', 'OCEAN', 'POINT_DENSITY', 'STUCCI', 'VORONOI', 'VOXEL_DATA', 'WOOD'], default 'NONE')
    
    :type: str
    """

    use_clamp = False
    """Set negative texture RGB and intensity values to zero, for some uses like displacement this option can be disabled to get the full range
    (type: boolean, default False)
    
    :type: bool
    """

    use_color_ramp = False
    """Toggle color ramp operations
    (type: boolean, default False)
    
    :type: bool
    """

    use_nodes = False
    """Make this a node-based texture
    (type: boolean, default False)
    
    :type: bool
    """

    use_preview_alpha = False
    """Show Alpha in Preview Render
    (type: boolean, default False)
    
    :type: bool
    """

    users_material = None
    """Materials that use this texture
                                (readonly)
    """

    users_object_modifier = None
    """Object modifiers that use this texture
                                (readonly)
    """

    def evaluate(self, value):
        """Evaluate the texture at the coordinates given
        
        :return: Result
        :param : (type: float array of 4 items in [-inf, inf])
        :rtype: mathutils.Vector
        """


class TrackToConstraint(Constraint):
    """Aim the constrained object toward the target"""

    head_tail = 0.0
    """Target along length of bone: Head=0, Tail=1
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    subtarget = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    target = None
    """Target Object
    (type: bpy.types.Object)
    
    :type: Object
    """

    track_axis = 'TRACK_X'
    """Axis that points to the target object
    (type: enum in ['TRACK_X', 'TRACK_Y', 'TRACK_Z', 'TRACK_NEGATIVE_X', 'TRACK_NEGATIVE_Y', 'TRACK_NEGATIVE_Z'], default 'TRACK_X')
    
    :type: str
    """

    up_axis = 'UP_X'
    """Axis that points upward
    (type: enum in ['UP_X', 'UP_Y', 'UP_Z'], default 'UP_X')
    
    :type: str
    """

    use_bbone_shape = False
    """Follow shape of B-Bone segments when calculating Head/Tail position
    (type: boolean, default False)
    
    :type: bool
    """

    use_target_z = False
    """Target's Z axis, not World Z axis, will constraint the Up direction
    (type: boolean, default False)
    
    :type: bool
    """


class TransformCacheConstraint(Constraint):
    """Look up transformation from an external file"""

    cache_file = None
    """(type: bpy.types.CacheFile)
    
    :type: CacheFile
    """

    object_path = ""
    """Path to the object in the Alembic archive used to lookup the transform matrix
    (type: string, default "", (never None))
    
    :type: str
    """


class TransformConstraint(Constraint):
    """Map transformations of the target to the object"""

    from_max_x = 0.0
    """Top range of X axis source motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    from_max_x_rot = 0.0
    """Top range of X axis source motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    from_max_x_scale = 0.0
    """Top range of X axis source motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    from_max_y = 0.0
    """Top range of Y axis source motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    from_max_y_rot = 0.0
    """Top range of Y axis source motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    from_max_y_scale = 0.0
    """Top range of Y axis source motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    from_max_z = 0.0
    """Top range of Z axis source motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    from_max_z_rot = 0.0
    """Top range of Z axis source motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    from_max_z_scale = 0.0
    """Top range of Z axis source motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    from_min_x = 0.0
    """Bottom range of X axis source motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    from_min_x_rot = 0.0
    """Bottom range of X axis source motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    from_min_x_scale = 0.0
    """Bottom range of X axis source motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    from_min_y = 0.0
    """Bottom range of Y axis source motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    from_min_y_rot = 0.0
    """Bottom range of Y axis source motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    from_min_y_scale = 0.0
    """Bottom range of Y axis source motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    from_min_z = 0.0
    """Bottom range of Z axis source motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    from_min_z_rot = 0.0
    """Bottom range of Z axis source motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    from_min_z_scale = 0.0
    """Bottom range of Z axis source motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    map_from = 'LOCATION'
    """The transformation type to use from the target
    (type: enum in ['LOCATION', 'ROTATION', 'SCALE'], default 'LOCATION')
    
    :type: str
    """

    map_to = 'LOCATION'
    """The transformation type to affect of the constrained object
    (type: enum in ['LOCATION', 'ROTATION', 'SCALE'], default 'LOCATION')
    
    :type: str
    """

    map_to_x_from = 'X'
    """The source axis constrained object's X axis uses
    (type: enum in ['X', 'Y', 'Z'], default 'X')
    
    :type: str
    """

    map_to_y_from = 'X'
    """The source axis constrained object's Y axis uses
    (type: enum in ['X', 'Y', 'Z'], default 'X')
    
    :type: str
    """

    map_to_z_from = 'X'
    """The source axis constrained object's Z axis uses
    (type: enum in ['X', 'Y', 'Z'], default 'X')
    
    :type: str
    """

    subtarget = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    target = None
    """Target Object
    (type: bpy.types.Object)
    
    :type: Object
    """

    to_max_x = 0.0
    """Top range of X axis destination motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    to_max_x_rot = 0.0
    """Top range of X axis destination motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    to_max_x_scale = 0.0
    """Top range of X axis destination motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    to_max_y = 0.0
    """Top range of Y axis destination motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    to_max_y_rot = 0.0
    """Top range of Y axis destination motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    to_max_y_scale = 0.0
    """Top range of Y axis destination motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    to_max_z = 0.0
    """Top range of Z axis destination motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    to_max_z_rot = 0.0
    """Top range of Z axis destination motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    to_max_z_scale = 0.0
    """Top range of Z axis destination motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    to_min_x = 0.0
    """Bottom range of X axis destination motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    to_min_x_rot = 0.0
    """Bottom range of X axis destination motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    to_min_x_scale = 0.0
    """Bottom range of X axis destination motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    to_min_y = 0.0
    """Bottom range of Y axis destination motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    to_min_y_rot = 0.0
    """Bottom range of Y axis destination motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    to_min_y_scale = 0.0
    """Bottom range of Y axis destination motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    to_min_z = 0.0
    """Bottom range of Z axis destination motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    to_min_z_rot = 0.0
    """Bottom range of Z axis destination motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    to_min_z_scale = 0.0
    """Bottom range of Z axis destination motion
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    use_motion_extrapolate = False
    """Extrapolate ranges
    (type: boolean, default False)
    
    :type: bool
    """


class TriangulateModifier(Modifier):
    """Triangulate Mesh"""

    ngon_method = 'BEAUTY'
    """Method for splitting the polygons into triangles
    * 'BEAUTY': Beauty, Arrange the new triangles evenly (slow).
    * 'CLIP': Clip, Split the polygons with an ear clipping algorithm.
    (type: enum in ['BEAUTY', 'CLIP'], default 'BEAUTY')
    
    :type: str
    """

    quad_method = 'BEAUTY'
    """Method for splitting the quads into triangles
    * 'BEAUTY': Beauty , Split the quads in nice triangles, slower method.
    * 'FIXED': Fixed, Split the quads on the first and third vertices.
    * 'FIXED_ALTERNATE': Fixed Alternate, Split the quads on the 2nd and 4th vertices.
    * 'SHORTEST_DIAGONAL': Shortest Diagonal, Split the quads based on the distance between the vertices.
    (type: enum in ['BEAUTY', 'FIXED', 'FIXED_ALTERNATE', 'SHORTEST_DIAGONAL'], default 'BEAUTY')
    
    :type: str
    """


class UI_UL_list(UIList):
    """"""

    def filter_items_by_name(self, pattern, bitflag, items, propname='name', flags=None, reverse=False):
        """Set FILTER_ITEM for items which name matches filter_name one (case-insensitive).
                                    pattern is the filtering pattern.
                                    propname is the name of the string property to use for filtering.
                                    flags must be a list of integers the same length as items, or None!
                                    return a list of flags (based on given flags if not None),
                                    or an empty list if no flags were given and no filtering has been done.
        """

    def sort_items_helper(self, sort_data, key, reverse=False):
        """Common sorting utility. Returns a neworder list mapping org_idx -> new_idx.
                                    sort_data must be an (unordered) list of tuples [(org_idx, ...), (org_idx, ...), ...].
                                    key must be the same kind of callable you would use for sorted() builtin function.
                                    reverse will reverse the sorting!
        """


class UVProjectModifier(Modifier):
    """UV projection modifier to set UVs from a projector"""

    aspect_x = 0.0
    """(type: float in [1, inf], default 0.0)
    
    :type: float
    """

    aspect_y = 0.0
    """(type: float in [1, inf], default 0.0)
    
    :type: float
    """

    image = None
    """(type: bpy.types.Image)
    
    :type: Image
    """

    projector_count = 0
    """Number of projectors to use
    (type: int in [1, 10], default 0)
    
    :type: int
    """

    projectors = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.UVProjector, (readonly))
    
    :type: bpy_prop_collection
    """

    scale_x = 0.0
    """(type: float in [0, inf], default 0.0)
    
    :type: float
    """

    scale_y = 0.0
    """(type: float in [0, inf], default 0.0)
    
    :type: float
    """

    use_image_override = False
    """Override faces' current images with the given image
    (type: boolean, default False)
    
    :type: bool
    """

    uv_layer = ""
    """UV map name
    (type: string, default "", (never None))
    
    :type: str
    """


class UVWarpModifier(Modifier):
    """Add target position to uv coordinates"""

    axis_u = 'X'
    """Pole axis for rotation
    (type: enum in ['X', 'Y', 'Z'], default 'X')
    
    :type: str
    """

    axis_v = 'X'
    """Pole axis for rotation
    (type: enum in ['X', 'Y', 'Z'], default 'X')
    
    :type: str
    """

    bone_from = ""
    """Bone defining offset
    (type: string, default "", (never None))
    
    :type: str
    """

    bone_to = ""
    """Bone defining offset
    (type: string, default "", (never None))
    
    :type: str
    """

    center = (0.0, 0.0)
    """Center point for rotate/scale
    (type: float array of 2 items in [-inf, inf], default (0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    object_from = None
    """Object defining offset
    (type: bpy.types.Object)
    
    :type: Object
    """

    object_to = None
    """Object defining offset
    (type: bpy.types.Object)
    
    :type: Object
    """

    uv_layer = ""
    """UV Layer name
    (type: string, default "", (never None))
    
    :type: str
    """

    vertex_group = ""
    """Vertex group name
    (type: string, default "", (never None))
    
    :type: str
    """


class UvSculpt(Paint):
    """"""


class VectorFont(ID):
    """Vector font for Text objects"""

    filepath = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    packed_file = None
    """(type: bpy.types.PackedFile, (readonly))
    
    :type: PackedFile
    """

    def pack(self):
        """Pack the font into the current blend file"""

    def unpack(self, method='USE_LOCAL'):
        """Unpack the font to the samples filename
        
        :param method: method, How to unpack
            (type: enum in ['USE_LOCAL', 'WRITE_LOCAL', 'USE_ORIGINAL', 'WRITE_ORIGINAL'], (optional))
        :type method: str
        """


class VertexPaint(Paint):
    """Properties of vertex and weight paint mode"""

    use_group_restrict = False
    """Restrict painting to vertices in the group
    (type: boolean, default False)
    
    :type: bool
    """

    use_normal = False
    """Apply the vertex normal before painting
    (type: boolean, default False)
    
    :type: bool
    """

    use_spray = False
    """Keep applying paint effect while holding mouse
    (type: boolean, default False)
    
    :type: bool
    """


class VertexWeightEditModifier(Modifier):
    """Edit the weights of vertices in a group"""

    add_threshold = 0.0
    """Lower bound for a vertex's weight to be added to the vgroup
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    default_weight = 0.0
    """Default weight a vertex will have if it is not in the vgroup
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    falloff_type = 'LINEAR'
    """How weights are mapped to their new values
    * 'LINEAR': Linear, Null action.
    * 'CURVE': Custom Curve.
    * 'SHARP': Sharp.
    * 'SMOOTH': Smooth.
    * 'ROOT': Root.
    * 'ICON_SPHERECURVE': Sphere.
    * 'RANDOM': Random.
    * 'STEP': Median Step, Map all values below 0.5 to 0.0, and all others to 1.0.
    (type: enum in ['LINEAR', 'CURVE', 'SHARP', 'SMOOTH', 'ROOT', 'ICON_SPHERECURVE', 'RANDOM', 'STEP'], default 'LINEAR')
    
    :type: str
    """

    map_curve = None
    """Custom mapping curve
    (type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    mask_constant = 0.0
    """Global influence of current modifications on vgroup
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    mask_tex_map_object = None
    """Which object to take texture coordinates from
    (type: bpy.types.Object)
    
    :type: Object
    """

    mask_tex_mapping = 'LOCAL'
    """Which texture coordinates to use for mapping
    * 'LOCAL': Local, Use local generated coordinates.
    * 'GLOBAL': Global, Use global coordinates.
    * 'OBJECT': Object, Use local generated coordinates of another object.
    * 'UV': UV, Use coordinates from an UV layer.
    (type: enum in ['LOCAL', 'GLOBAL', 'OBJECT', 'UV'], default 'LOCAL')
    
    :type: str
    """

    mask_tex_use_channel = 'INT'
    """Which texture channel to use for masking
    (type: enum in ['INT', 'RED', 'GREEN', 'BLUE', 'HUE', 'SAT', 'VAL', 'ALPHA'], default 'INT')
    
    :type: str
    """

    mask_tex_uv_layer = ""
    """UV map name
    (type: string, default "", (never None))
    
    :type: str
    """

    mask_texture = None
    """Masking texture
    (type: bpy.types.Texture)
    
    :type: Texture
    """

    mask_vertex_group = ""
    """Masking vertex group name
    (type: string, default "", (never None))
    
    :type: str
    """

    remove_threshold = 0.0
    """Upper bound for a vertex's weight to be removed from the vgroup
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    use_add = False
    """Add vertices with weight over threshold to vgroup
    (type: boolean, default False)
    
    :type: bool
    """

    use_remove = False
    """Remove vertices with weight below threshold from vgroup
    (type: boolean, default False)
    
    :type: bool
    """

    vertex_group = ""
    """Vertex group name
    (type: string, default "", (never None))
    
    :type: str
    """


class VertexWeightMixModifier(Modifier):
    """Mix the weights of two vertex groups"""

    default_weight_a = 0.0
    """Default weight a vertex will have if it is not in the first A vgroup
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    default_weight_b = 0.0
    """Default weight a vertex will have if it is not in the second B vgroup
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    mask_constant = 0.0
    """Global influence of current modifications on vgroup
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    mask_tex_map_object = None
    """Which object to take texture coordinates from
    (type: bpy.types.Object)
    
    :type: Object
    """

    mask_tex_mapping = 'LOCAL'
    """Which texture coordinates to use for mapping
    * 'LOCAL': Local, Use local generated coordinates.
    * 'GLOBAL': Global, Use global coordinates.
    * 'OBJECT': Object, Use local generated coordinates of another object.
    * 'UV': UV, Use coordinates from an UV layer.
    (type: enum in ['LOCAL', 'GLOBAL', 'OBJECT', 'UV'], default 'LOCAL')
    
    :type: str
    """

    mask_tex_use_channel = 'INT'
    """Which texture channel to use for masking
    (type: enum in ['INT', 'RED', 'GREEN', 'BLUE', 'HUE', 'SAT', 'VAL', 'ALPHA'], default 'INT')
    
    :type: str
    """

    mask_tex_uv_layer = ""
    """UV map name
    (type: string, default "", (never None))
    
    :type: str
    """

    mask_texture = None
    """Masking texture
    (type: bpy.types.Texture)
    
    :type: Texture
    """

    mask_vertex_group = ""
    """Masking vertex group name
    (type: string, default "", (never None))
    
    :type: str
    """

    mix_mode = 'SET'
    """How weights from vgroup B affect weights of vgroup A
    * 'SET': Replace, Replace VGroup A's weights by VGroup B's ones.
    * 'ADD': Add, Add VGroup B's weights to VGroup A's ones.
    * 'SUB': Subtract, Subtract VGroup B's weights from VGroup A's ones.
    * 'MUL': Multiply, Multiply VGroup A's weights by VGroup B's ones.
    * 'DIV': Divide, Divide VGroup A's weights by VGroup B's ones.
    * 'DIF': Difference, Difference between VGroup A's and VGroup B's weights.
    * 'AVG': Average, Average value of VGroup A's and VGroup B's weights.
    (type: enum in ['SET', 'ADD', 'SUB', 'MUL', 'DIV', 'DIF', 'AVG'], default 'SET')
    
    :type: str
    """

    mix_set = 'ALL'
    """Which vertices should be affected
    * 'ALL': All, Affect all vertices (might add some to VGroup A).
    * 'A': VGroup A, Affect vertices in VGroup A.
    * 'B': VGroup B, Affect vertices in VGroup B (might add some to VGroup A).
    * 'OR': VGroup A or B, Affect vertices in at least one of both VGroups (might add some to VGroup A).
    * 'AND': VGroup A and B, Affect vertices in both groups.
    (type: enum in ['ALL', 'A', 'B', 'OR', 'AND'], default 'ALL')
    
    :type: str
    """

    vertex_group_a = ""
    """First vertex group name
    (type: string, default "", (never None))
    
    :type: str
    """

    vertex_group_b = ""
    """Second vertex group name
    (type: string, default "", (never None))
    
    :type: str
    """


class VertexWeightProximityModifier(Modifier):
    """Set the weights of vertices in a group from a target object's distance"""

    falloff_type = 'LINEAR'
    """How weights are mapped to their new values
    * 'LINEAR': Linear, Null action.
    * 'SHARP': Sharp.
    * 'SMOOTH': Smooth.
    * 'ROOT': Root.
    * 'ICON_SPHERECURVE': Sphere.
    * 'RANDOM': Random.
    * 'STEP': Median Step, Map all values below 0.5 to 0.0, and all others to 1.0.
    (type: enum in ['LINEAR', 'SHARP', 'SMOOTH', 'ROOT', 'ICON_SPHERECURVE', 'RANDOM', 'STEP'], default 'LINEAR')
    
    :type: str
    """

    mask_constant = 0.0
    """Global influence of current modifications on vgroup
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    mask_tex_map_object = None
    """Which object to take texture coordinates from
    (type: bpy.types.Object)
    
    :type: Object
    """

    mask_tex_mapping = 'LOCAL'
    """Which texture coordinates to use for mapping
    * 'LOCAL': Local, Use local generated coordinates.
    * 'GLOBAL': Global, Use global coordinates.
    * 'OBJECT': Object, Use local generated coordinates of another object.
    * 'UV': UV, Use coordinates from an UV layer.
    (type: enum in ['LOCAL', 'GLOBAL', 'OBJECT', 'UV'], default 'LOCAL')
    
    :type: str
    """

    mask_tex_use_channel = 'INT'
    """Which texture channel to use for masking
    (type: enum in ['INT', 'RED', 'GREEN', 'BLUE', 'HUE', 'SAT', 'VAL', 'ALPHA'], default 'INT')
    
    :type: str
    """

    mask_tex_uv_layer = ""
    """UV map name
    (type: string, default "", (never None))
    
    :type: str
    """

    mask_texture = None
    """Masking texture
    (type: bpy.types.Texture)
    
    :type: Texture
    """

    mask_vertex_group = ""
    """Masking vertex group name
    (type: string, default "", (never None))
    
    :type: str
    """

    max_dist = 0.0
    """Distance mapping to weight 1.0
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    min_dist = 0.0
    """Distance mapping to weight 0.0
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    proximity_geometry = {'FACE'}
    """Use the shortest computed distance to target object's geometry as weight
    * 'VERTEX': Vertex, Compute distance to nearest vertex.
    * 'EDGE': Edge, Compute distance to nearest edge.
    * 'FACE': Face, Compute distance to nearest face.
    (type: enum set in {'VERTEX', 'EDGE', 'FACE'}, default {'FACE'})
    
    :type: enum set in {'VERTEX', 'EDGE', 'FACE'}
    """

    proximity_mode = 'GEOMETRY'
    """Which distances to target object to use
    * 'OBJECT': Object, Use distance between affected and target objects.
    * 'GEOMETRY': Geometry, Use distance between affected object's vertices and target object, or target object's geometry.
    (type: enum in ['OBJECT', 'GEOMETRY'], default 'GEOMETRY')
    
    :type: str
    """

    target = None
    """Object to calculate vertices distances from
    (type: bpy.types.Object)
    
    :type: Object
    """

    vertex_group = ""
    """Vertex group name
    (type: string, default "", (never None))
    
    :type: str
    """


class VisibilityActuator(Actuator):
    """Actuator to set visibility and occlusion of the object"""

    apply_to_children = False
    """Set all the children of this object to the same visibility/occlusion recursively
    (type: boolean, default False)
    
    :type: bool
    """

    use_occlusion = False
    """Set the object to occlude objects behind it (initialized from the object type in physics button)
    (type: boolean, default False)
    
    :type: bool
    """

    use_visible = False
    """Set the objects visible (initialized from the object render restriction toggle in physics button)
    (type: boolean, default False)
    
    :type: bool
    """


class WarpModifier(Modifier):
    """Warp modifier"""

    falloff_curve = None
    """Custom Lamp Falloff Curve
    (type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    falloff_radius = 0.0
    """Radius to apply
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    falloff_type = 'NONE'
    """(type: enum in ['NONE', 'CURVE', 'SMOOTH', 'SPHERE', 'ROOT', 'INVERSE_SQUARE', 'SHARP', 'LINEAR', 'CONSTANT'], default 'NONE')
    
    :type: str
    """

    object_from = None
    """Object to transform from
    (type: bpy.types.Object)
    
    :type: Object
    """

    object_to = None
    """Object to transform to
    (type: bpy.types.Object)
    
    :type: Object
    """

    strength = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    texture = None
    """(type: bpy.types.Texture)
    
    :type: Texture
    """

    texture_coords = 'LOCAL'
    """
    * 'LOCAL': Local, Use the local coordinate system for the texture coordinates.
    * 'GLOBAL': Global, Use the global coordinate system for the texture coordinates.
    * 'OBJECT': Object, Use the linked object's local coordinate system for the texture coordinates.
    * 'UV': UV, Use UV coordinates for the texture coordinates.
    (type: enum in ['LOCAL', 'GLOBAL', 'OBJECT', 'UV'], default 'LOCAL')
    
    :type: str
    """

    texture_coords_object = None
    """Object to set the texture coordinates
    (type: bpy.types.Object)
    
    :type: Object
    """

    use_volume_preserve = False
    """Preserve volume when rotations are used
    (type: boolean, default False)
    
    :type: bool
    """

    uv_layer = ""
    """UV map name
    (type: string, default "", (never None))
    
    :type: str
    """

    vertex_group = ""
    """Vertex group name for modulating the deform
    (type: string, default "", (never None))
    
    :type: str
    """


class WaveModifier(Modifier):
    """Wave effect modifier"""

    damping_time = 0.0
    """Number of frames in which the wave damps out after it dies
    (type: float in [-500000, 500000], default 0.0)
    
    :type: float
    """

    falloff_radius = 0.0
    """Distance after which it fades out
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    height = 0.0
    """Height of the wave
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    lifetime = 0.0
    """Lifetime of the wave in frames, zero means infinite
    (type: float in [-500000, 500000], default 0.0)
    
    :type: float
    """

    narrowness = 0.0
    """Distance between the top and the base of a wave, the higher the value, the more narrow the wave
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    speed = 0.0
    """Speed of the wave, towards the starting point when negative
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    start_position_object = None
    """Object which defines the wave center
    (type: bpy.types.Object)
    
    :type: Object
    """

    start_position_x = 0.0
    """X coordinate of the start position
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    start_position_y = 0.0
    """Y coordinate of the start position
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    texture = None
    """(type: bpy.types.Texture)
    
    :type: Texture
    """

    texture_coords = 'LOCAL'
    """
    * 'LOCAL': Local, Use the local coordinate system for the texture coordinates.
    * 'GLOBAL': Global, Use the global coordinate system for the texture coordinates.
    * 'OBJECT': Object, Use the linked object's local coordinate system for the texture coordinates.
    * 'UV': UV, Use UV coordinates for the texture coordinates.
    (type: enum in ['LOCAL', 'GLOBAL', 'OBJECT', 'UV'], default 'LOCAL')
    
    :type: str
    """

    texture_coords_object = None
    """Object to set the texture coordinates
    (type: bpy.types.Object)
    
    :type: Object
    """

    time_offset = 0.0
    """Either the starting frame (for positive speed) or ending frame (for negative speed.)
    (type: float in [-500000, 500000], default 0.0)
    
    :type: float
    """

    use_cyclic = False
    """Cyclic wave effect
    (type: boolean, default False)
    
    :type: bool
    """

    use_normal = False
    """Displace along normals
    (type: boolean, default False)
    
    :type: bool
    """

    use_normal_x = False
    """Enable displacement along the X normal
    (type: boolean, default False)
    
    :type: bool
    """

    use_normal_y = False
    """Enable displacement along the Y normal
    (type: boolean, default False)
    
    :type: bool
    """

    use_normal_z = False
    """Enable displacement along the Z normal
    (type: boolean, default False)
    
    :type: bool
    """

    use_x = False
    """X axis motion
    (type: boolean, default False)
    
    :type: bool
    """

    use_y = False
    """Y axis motion
    (type: boolean, default False)
    
    :type: bool
    """

    uv_layer = ""
    """UV map name
    (type: string, default "", (never None))
    
    :type: str
    """

    vertex_group = ""
    """Vertex group name for modulating the wave
    (type: string, default "", (never None))
    
    :type: str
    """

    width = 0.0
    """Distance between the waves
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """


class WhiteBalanceModifier(SequenceModifier):
    """White balance modifier for sequence strip"""

    white_value = (0.0, 0.0, 0.0)
    """This color defines white in the strip
    (type: float array of 3 items in [0, 1], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """


class WholeCharacter(KeyingSetInfo):
    """"""

    def addProp(self, ksi, ks, bone, prop, index=-1, use_groups=True):
        """"""

    def doBBone(self, ksi, context, ks, pchan):
        """"""

    def doCustomProps(self, ksi, ks, bone):
        """"""

    def doLoc(self, ksi, ks, bone):
        """"""

    def doRot3d(self, ksi, ks, bone):
        """"""

    def doRot4d(self, ksi, ks, bone):
        """"""

    def doScale(self, ksi, ks, bone):
        """"""

    def generate(self, ksi, context, ks, bone):
        """"""

    def iterator(self, ksi, context, ks):
        """"""

    def poll(self, ksi, context):
        """"""


class WholeCharacterSelected(KeyingSetInfo):
    """"""

    def addProp(self, ksi, ks, bone, prop, index=-1, use_groups=True):
        """"""

    def doBBone(self, ksi, context, ks, pchan):
        """"""

    def doCustomProps(self, ksi, ks, bone):
        """"""

    def doLoc(self, ksi, ks, bone):
        """"""

    def doRot3d(self, ksi, ks, bone):
        """"""

    def doRot4d(self, ksi, ks, bone):
        """"""

    def doScale(self, ksi, ks, bone):
        """"""

    def generate(self, ksi, context, ks, bone):
        """"""

    def iterator(self, ksi, context, ks):
        """"""

    def poll(self, ksi, context):
        """"""


class WindowManager(ID):
    """Window manager data-block defining open windows and other user interface data"""

    addon_filter = ''
    """Filter add-ons by category
    (type: enum in [], default '')
    
    :type: str
    """

    addon_search = ""
    """Search within the selected filter
    (type: string, default "", (never None))
    
    :type: str
    """

    addon_support = {'COMMUNITY', 'OFFICIAL'}
    """Display support level
    * 'OFFICIAL': Official, Officially supported.
    * 'COMMUNITY': Community, Maintained by community developers.
    * 'TESTING': Testing, Newly contributed scripts (excluded from release builds).
    (type: enum set in {'OFFICIAL', 'COMMUNITY', 'TESTING'}, default {'COMMUNITY', 'OFFICIAL'})
    
    :type: enum set in {'OFFICIAL', 'COMMUNITY', 'TESTING'}
    """

    clipboard = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    keyconfigs = None
    """Registered key configurations
    (type: bpy.types.KeyConfigurations bpy.types.bpy_prop_collection of bpy.types.KeyConfig, (readonly))
    
    :type: KeyConfigurations
    """

    operators = None
    """Operator registry
    (type: bpy.types.bpy_prop_collection of bpy.types.Operator, (readonly))
    
    :type: bpy_prop_collection
    """

    windows = None
    """Open windows
    (type: bpy.types.bpy_prop_collection of bpy.types.Window, (readonly))
    
    :type: bpy_prop_collection
    """

    def fileselect_add(self, operator):
        """Opens a file selector with an operator. The string properties 'filepath', 'filename', 'directory' and a 'files' collection are assigned when present in the operator
        
        :param operator: Operator to call
            (type: bpy.types.Operator)
        :type operator: Operator
        """

    def modal_handler_add(self, operator):
        """Add a modal handler to the window manager, for the given modal operator (called by invoke() with self, just before returning {'RUNNING_MODAL'})
        
        :param operator: Operator to call
            (type: bpy.types.Operator)
        :type operator: Operator
        :return: Whether adding the handler was successful
        :rtype: bool
        """

    def event_timer_add(self, time_step, window=None):
        """Add a timer to the given window, to generate periodic 'TIMER' events
        
        :param time_step: Time Step, Interval in seconds between timer events
            (type: float in [0, inf])
        :type time_step: float
        :param window: Window to attach the timer to, or None
            (type: bpy.types.Window, (optional))
        :type window: Window
        :param : (type: bpy.types.Timer)
        :rtype: Timer
        """

    def event_timer_remove(self, timer):
        """event_timer_remove"""

    def progress_begin(self, min, max):
        """Start progress report
        
        :param min: min, any value in range [0,9999]
            (type: float in [-inf, inf])
        :type min: float
        :param max: max, any value in range [min+1,9998]
            (type: float in [-inf, inf])
        :type max: float
        """

    def progress_update(self, value):
        """Update the progress feedback
        
        :param value: value, Any value between min and max as set in progress_begin()
            (type: float in [-inf, inf])
        :type value: float
        """

    def progress_end(self):
        """Terminate progress report"""

    def invoke_props_popup(self, operator, event):
        """Operator popup invoke (show operator properties and execute it automatically on changes)
        
        :param operator: Operator to call
            (type: bpy.types.Operator)
        :type operator: Operator
        :param event: Event
            (type: bpy.types.Event)
        :type event: Event
        :return: result
            * 'RUNNING_MODAL': Running Modal, Keep the operator running with blender.
            * 'CANCELLED': Cancelled, When no action has been taken, operator exits.
            * 'FINISHED': Finished, When the operator is complete, operator exits.
            * 'PASS_THROUGH': Pass Through, Do nothing and pass the event on.
            * 'INTERFACE': Interface, Handled but not executed (popup menus).
        :rtype: enum set in {'RUNNING_MODAL', 'CANCELLED', 'FINISHED', 'PASS_THROUGH', 'INTERFACE'}
        """

    def invoke_props_dialog(self, operator, width=300, height=20):
        """Operator dialog (non-autoexec popup) invoke (show operator properties and only execute it on click on OK button)
        
        :param operator: Operator to call
            (type: bpy.types.Operator)
        :type operator: Operator
        :param width: Width of the popup
            (type: int in [0, inf], (optional))
        :type width: int
        :param height: Height of the popup
            (type: int in [0, inf], (optional))
        :type height: int
        :return: result
            * 'RUNNING_MODAL': Running Modal, Keep the operator running with blender.
            * 'CANCELLED': Cancelled, When no action has been taken, operator exits.
            * 'FINISHED': Finished, When the operator is complete, operator exits.
            * 'PASS_THROUGH': Pass Through, Do nothing and pass the event on.
            * 'INTERFACE': Interface, Handled but not executed (popup menus).
        :rtype: enum set in {'RUNNING_MODAL', 'CANCELLED', 'FINISHED', 'PASS_THROUGH', 'INTERFACE'}
        """

    def invoke_search_popup(self, operator):
        """Operator search popup invoke (search in values of operator's type 'prop' EnumProperty, and execute it on confirmation)
        
        :param operator: Operator to call
            (type: bpy.types.Operator)
        :type operator: Operator
        """

    def invoke_popup(self, operator, width=300, height=20):
        """Operator popup invoke (only shows operator's properties, without executing it)
        
        :param operator: Operator to call
            (type: bpy.types.Operator)
        :type operator: Operator
        :param width: Width of the popup
            (type: int in [0, inf], (optional))
        :type width: int
        :param height: Height of the popup
            (type: int in [0, inf], (optional))
        :type height: int
        :return: result
            * 'RUNNING_MODAL': Running Modal, Keep the operator running with blender.
            * 'CANCELLED': Cancelled, When no action has been taken, operator exits.
            * 'FINISHED': Finished, When the operator is complete, operator exits.
            * 'PASS_THROUGH': Pass Through, Do nothing and pass the event on.
            * 'INTERFACE': Interface, Handled but not executed (popup menus).
        :rtype: enum set in {'RUNNING_MODAL', 'CANCELLED', 'FINISHED', 'PASS_THROUGH', 'INTERFACE'}
        """

    def invoke_confirm(self, operator, event):
        """Operator confirmation popup (only to let user confirm the execution, no operator properties shown)
        
        :param operator: Operator to call
            (type: bpy.types.Operator)
        :type operator: Operator
        :param event: Event
            (type: bpy.types.Event)
        :type event: Event
        :return: result
            * 'RUNNING_MODAL': Running Modal, Keep the operator running with blender.
            * 'CANCELLED': Cancelled, When no action has been taken, operator exits.
            * 'FINISHED': Finished, When the operator is complete, operator exits.
            * 'PASS_THROUGH': Pass Through, Do nothing and pass the event on.
            * 'INTERFACE': Interface, Handled but not executed (popup menus).
        :rtype: enum set in {'RUNNING_MODAL', 'CANCELLED', 'FINISHED', 'PASS_THROUGH', 'INTERFACE'}
        """

    def pupmenu_begin__internal(self, title, icon='NONE'):
        """pupmenu_begin__internal
        
        :param icon: icon
            (type: enum in ['NONE', 'QUESTION', 'ERROR', 'CANCEL', 'TRIA_RIGHT', 'TRIA_DOWN', 'TRIA_LEFT', 'TRIA_UP', 'ARROW_LEFTRIGHT', 'PLUS', 'DISCLOSURE_TRI_DOWN', 'DISCLOSURE_TRI_RIGHT', 'RADIOBUT_OFF', 'RADIOBUT_ON', 'MENU_PANEL', 'BLENDER', 'GRIP', 'DOT', 'COLLAPSEMENU', 'X', 'GO_LEFT', 'PLUG', 'UI', 'NODE', 'NODE_SEL', 'FULLSCREEN', 'SPLITSCREEN', 'RIGHTARROW_THIN', 'BORDERMOVE', 'VIEWZOOM', 'ZOOMIN', 'ZOOMOUT', 'PANEL_CLOSE', 'COPY_ID', 'EYEDROPPER', 'LINK_AREA', 'AUTO', 'CHECKBOX_DEHLT', 'CHECKBOX_HLT', 'UNLOCKED', 'LOCKED', 'UNPINNED', 'PINNED', 'SCREEN_BACK', 'RIGHTARROW', 'DOWNARROW_HLT', 'DOTSUP', 'DOTSDOWN', 'LINK', 'INLINK', 'PLUGIN', 'HELP', 'GHOST_ENABLED', 'COLOR', 'LINKED', 'UNLINKED', 'HAND', 'ZOOM_ALL', 'ZOOM_SELECTED', 'ZOOM_PREVIOUS', 'ZOOM_IN', 'ZOOM_OUT', 'RENDER_REGION', 'BORDER_RECT', 'BORDER_LASSO', 'FREEZE', 'STYLUS_PRESSURE', 'GHOST_DISABLED', 'NEW', 'FILE_TICK', 'QUIT', 'URL', 'RECOVER_LAST', 'FULLSCREEN_ENTER', 'FULLSCREEN_EXIT', 'BLANK1', 'LAMP', 'MATERIAL', 'TEXTURE', 'ANIM', 'WORLD', 'SCENE', 'EDIT', 'GAME', 'RADIO', 'SCRIPT', 'PARTICLES', 'PHYSICS', 'SPEAKER', 'TEXTURE_SHADED', 'VIEW3D', 'IPO', 'OOPS', 'BUTS', 'FILESEL', 'IMAGE_COL', 'INFO', 'SEQUENCE', 'TEXT', 'IMASEL', 'SOUND', 'ACTION', 'NLA', 'SCRIPTWIN', 'TIME', 'NODETREE', 'LOGIC', 'CONSOLE', 'PREFERENCES', 'CLIP', 'ASSET_MANAGER', 'OBJECT_DATAMODE', 'EDITMODE_HLT', 'FACESEL_HLT', 'VPAINT_HLT', 'TPAINT_HLT', 'WPAINT_HLT', 'SCULPTMODE_HLT', 'POSE_HLT', 'PARTICLEMODE', 'LIGHTPAINT', 'SCENE_DATA', 'RENDERLAYERS', 'WORLD_DATA', 'OBJECT_DATA', 'MESH_DATA', 'CURVE_DATA', 'META_DATA', 'LATTICE_DATA', 'LAMP_DATA', 'MATERIAL_DATA', 'TEXTURE_DATA', 'ANIM_DATA', 'CAMERA_DATA', 'PARTICLE_DATA', 'LIBRARY_DATA_DIRECT', 'GROUP', 'ARMATURE_DATA', 'POSE_DATA', 'BONE_DATA', 'CONSTRAINT', 'SHAPEKEY_DATA', 'CONSTRAINT_BONE', 'CAMERA_STEREO', 'PACKAGE', 'UGLYPACKAGE', 'BRUSH_DATA', 'IMAGE_DATA', 'FILE', 'FCURVE', 'FONT_DATA', 'RENDER_RESULT', 'SURFACE_DATA', 'EMPTY_DATA', 'SETTINGS', 'RENDER_ANIMATION', 'RENDER_STILL', 'LIBRARY_DATA_BROKEN', 'BOIDS', 'STRANDS', 'LIBRARY_DATA_INDIRECT', 'GREASEPENCIL', 'LINE_DATA', 'GROUP_BONE', 'GROUP_VERTEX', 'GROUP_VCOL', 'GROUP_UVS', 'RNA', 'RNA_ADD', 'OUTLINER_OB_EMPTY', 'OUTLINER_OB_MESH', 'OUTLINER_OB_CURVE', 'OUTLINER_OB_LATTICE', 'OUTLINER_OB_META', 'OUTLINER_OB_LAMP', 'OUTLINER_OB_CAMERA', 'OUTLINER_OB_ARMATURE', 'OUTLINER_OB_FONT', 'OUTLINER_OB_SURFACE', 'OUTLINER_OB_SPEAKER', 'RESTRICT_COLOR_OFF', 'RESTRICT_COLOR_ON', 'RESTRICT_VIEW_OFF', 'RESTRICT_VIEW_ON', 'RESTRICT_SELECT_OFF', 'RESTRICT_SELECT_ON', 'RESTRICT_RENDER_OFF', 'RESTRICT_RENDER_ON', 'OUTLINER_DATA_EMPTY', 'OUTLINER_DATA_MESH', 'OUTLINER_DATA_CURVE', 'OUTLINER_DATA_LATTICE', 'OUTLINER_DATA_META', 'OUTLINER_DATA_LAMP', 'OUTLINER_DATA_CAMERA', 'OUTLINER_DATA_ARMATURE', 'OUTLINER_DATA_FONT', 'OUTLINER_DATA_SURFACE', 'OUTLINER_DATA_SPEAKER', 'OUTLINER_DATA_POSE', 'MESH_PLANE', 'MESH_CUBE', 'MESH_CIRCLE', 'MESH_UVSPHERE', 'MESH_ICOSPHERE', 'MESH_GRID', 'MESH_MONKEY', 'MESH_CYLINDER', 'MESH_TORUS', 'MESH_CONE', 'MESH_CAPSULE', 'LAMP_POINT', 'LAMP_SUN', 'LAMP_SPOT', 'LAMP_HEMI', 'LAMP_AREA', 'META_EMPTY', 'META_PLANE', 'META_CUBE', 'META_BALL', 'META_ELLIPSOID', 'META_CAPSULE', 'SURFACE_NCURVE', 'SURFACE_NCIRCLE', 'SURFACE_NSURFACE', 'SURFACE_NCYLINDER', 'SURFACE_NSPHERE', 'SURFACE_NTORUS', 'CURVE_BEZCURVE', 'CURVE_BEZCIRCLE', 'CURVE_NCURVE', 'CURVE_NCIRCLE', 'CURVE_PATH', 'COLOR_RED', 'COLOR_GREEN', 'COLOR_BLUE', 'TRIA_RIGHT_BAR', 'TRIA_DOWN_BAR', 'TRIA_LEFT_BAR', 'TRIA_UP_BAR', 'FORCE_FORCE', 'FORCE_WIND', 'FORCE_VORTEX', 'FORCE_MAGNETIC', 'FORCE_HARMONIC', 'FORCE_CHARGE', 'FORCE_LENNARDJONES', 'FORCE_TEXTURE', 'FORCE_CURVE', 'FORCE_BOID', 'FORCE_TURBULENCE', 'FORCE_DRAG', 'FORCE_SMOKEFLOW', 'NODE_INSERT_ON', 'NODE_INSERT_OFF', 'MODIFIER', 'MOD_WAVE', 'MOD_BUILD', 'MOD_DECIM', 'MOD_MIRROR', 'MOD_SOFT', 'MOD_SUBSURF', 'HOOK', 'MOD_PHYSICS', 'MOD_PARTICLES', 'MOD_BOOLEAN', 'MOD_EDGESPLIT', 'MOD_ARRAY', 'MOD_UVPROJECT', 'MOD_DISPLACE', 'MOD_CURVE', 'MOD_LATTICE', 'CONSTRAINT_DATA', 'MOD_ARMATURE', 'MOD_SHRINKWRAP', 'MOD_CAST', 'MOD_MESHDEFORM', 'MOD_BEVEL', 'MOD_SMOOTH', 'MOD_SIMPLEDEFORM', 'MOD_MASK', 'MOD_CLOTH', 'MOD_EXPLODE', 'MOD_FLUIDSIM', 'MOD_MULTIRES', 'MOD_SMOKE', 'MOD_SOLIDIFY', 'MOD_SCREW', 'MOD_VERTEX_WEIGHT', 'MOD_DYNAMICPAINT', 'MOD_REMESH', 'MOD_OCEAN', 'MOD_WARP', 'MOD_SKIN', 'MOD_TRIANGULATE', 'MOD_WIREFRAME', 'MOD_DATA_TRANSFER', 'MOD_NORMALEDIT', 'REC', 'PLAY', 'FF', 'REW', 'PAUSE', 'PREV_KEYFRAME', 'NEXT_KEYFRAME', 'PLAY_AUDIO', 'PLAY_REVERSE', 'PREVIEW_RANGE', 'ACTION_TWEAK', 'PMARKER_ACT', 'PMARKER_SEL', 'PMARKER', 'MARKER_HLT', 'MARKER', 'SPACE2', 'SPACE3', 'KEYINGSET', 'KEY_DEHLT', 'KEY_HLT', 'MUTE_IPO_OFF', 'MUTE_IPO_ON', 'VISIBLE_IPO_OFF', 'VISIBLE_IPO_ON', 'DRIVER', 'SOLO_OFF', 'SOLO_ON', 'FRAME_PREV', 'FRAME_NEXT', 'NLA_PUSHDOWN', 'IPO_CONSTANT', 'IPO_LINEAR', 'IPO_BEZIER', 'IPO_SINE', 'IPO_QUAD', 'IPO_CUBIC', 'IPO_QUART', 'IPO_QUINT', 'IPO_EXPO', 'IPO_CIRC', 'IPO_BOUNCE', 'IPO_ELASTIC', 'IPO_BACK', 'IPO_EASE_IN', 'IPO_EASE_OUT', 'IPO_EASE_IN_OUT', 'NORMALIZE_FCURVES', 'VERTEXSEL', 'EDGESEL', 'FACESEL', 'LOOPSEL', 'ROTATE', 'CURSOR', 'ROTATECOLLECTION', 'ROTATECENTER', 'ROTACTIVE', 'ALIGN', 'SMOOTHCURVE', 'SPHERECURVE', 'ROOTCURVE', 'SHARPCURVE', 'LINCURVE', 'NOCURVE', 'RNDCURVE', 'PROP_OFF', 'PROP_ON', 'PROP_CON', 'SCULPT_DYNTOPO', 'PARTICLE_POINT', 'PARTICLE_TIP', 'PARTICLE_PATH', 'MAN_TRANS', 'MAN_ROT', 'MAN_SCALE', 'MANIPUL', 'SNAP_OFF', 'SNAP_ON', 'SNAP_NORMAL', 'SNAP_GRID', 'SNAP_VERTEX', 'SNAP_EDGE', 'SNAP_FACE', 'SNAP_VOLUME', 'SNAP_INCREMENT', 'STICKY_UVS_LOC', 'STICKY_UVS_DISABLE', 'STICKY_UVS_VERT', 'CLIPUV_DEHLT', 'CLIPUV_HLT', 'SNAP_PEEL_OBJECT', 'GRID', 'PASTEDOWN', 'COPYDOWN', 'PASTEFLIPUP', 'PASTEFLIPDOWN', 'SNAP_SURFACE', 'AUTOMERGE_ON', 'AUTOMERGE_OFF', 'RETOPO', 'UV_VERTEXSEL', 'UV_EDGESEL', 'UV_FACESEL', 'UV_ISLANDSEL', 'UV_SYNC_SELECT', 'BBOX', 'WIRE', 'SOLID', 'SMOOTH', 'POTATO', 'ORTHO', 'LOCKVIEW_OFF', 'LOCKVIEW_ON', 'AXIS_SIDE', 'AXIS_FRONT', 'AXIS_TOP', 'NDOF_DOM', 'NDOF_TURN', 'NDOF_FLY', 'NDOF_TRANS', 'LAYER_USED', 'LAYER_ACTIVE', 'SORTALPHA', 'SORTBYEXT', 'SORTTIME', 'SORTSIZE', 'LONGDISPLAY', 'SHORTDISPLAY', 'GHOST', 'IMGDISPLAY', 'SAVE_AS', 'SAVE_COPY', 'BOOKMARKS', 'FONTPREVIEW', 'FILTER', 'NEWFOLDER', 'OPEN_RECENT', 'FILE_PARENT', 'FILE_REFRESH', 'FILE_FOLDER', 'FILE_BLANK', 'FILE_BLEND', 'FILE_IMAGE', 'FILE_MOVIE', 'FILE_SCRIPT', 'FILE_SOUND', 'FILE_FONT', 'FILE_TEXT', 'RECOVER_AUTO', 'SAVE_PREFS', 'LINK_BLEND', 'APPEND_BLEND', 'IMPORT', 'EXPORT', 'EXTERNAL_DATA', 'LOAD_FACTORY', 'LOOP_BACK', 'LOOP_FORWARDS', 'BACK', 'FORWARD', 'FILE_HIDDEN', 'FILE_BACKUP', 'DISK_DRIVE', 'MATPLANE', 'MATSPHERE', 'MATCUBE', 'MONKEY', 'HAIR', 'ALIASED', 'ANTIALIASED', 'MAT_SPHERE_SKY', 'WORDWRAP_OFF', 'WORDWRAP_ON', 'SYNTAX_OFF', 'SYNTAX_ON', 'LINENUMBERS_OFF', 'LINENUMBERS_ON', 'SCRIPTPLUGINS', 'SEQ_SEQUENCER', 'SEQ_PREVIEW', 'SEQ_LUMA_WAVEFORM', 'SEQ_CHROMA_SCOPE', 'SEQ_HISTOGRAM', 'SEQ_SPLITVIEW', 'IMAGE_RGB', 'IMAGE_RGB_ALPHA', 'IMAGE_ALPHA', 'IMAGE_ZDEPTH', 'IMAGEFILE', 'BRUSH_ADD', 'BRUSH_BLOB', 'BRUSH_BLUR', 'BRUSH_CLAY', 'BRUSH_CLAY_STRIPS', 'BRUSH_CLONE', 'BRUSH_CREASE', 'BRUSH_DARKEN', 'BRUSH_FILL', 'BRUSH_FLATTEN', 'BRUSH_GRAB', 'BRUSH_INFLATE', 'BRUSH_LAYER', 'BRUSH_LIGHTEN', 'BRUSH_MASK', 'BRUSH_MIX', 'BRUSH_MULTIPLY', 'BRUSH_NUDGE', 'BRUSH_PINCH', 'BRUSH_SCRAPE', 'BRUSH_SCULPT_DRAW', 'BRUSH_SMEAR', 'BRUSH_SMOOTH', 'BRUSH_SNAKE_HOOK', 'BRUSH_SOFTEN', 'BRUSH_SUBTRACT', 'BRUSH_TEXDRAW', 'BRUSH_TEXFILL', 'BRUSH_TEXMASK', 'BRUSH_THUMB', 'BRUSH_ROTATE', 'BRUSH_VERTEXDRAW', 'MATCAP_01', 'MATCAP_02', 'MATCAP_03', 'MATCAP_04', 'MATCAP_05', 'MATCAP_06', 'MATCAP_07', 'MATCAP_08', 'MATCAP_09', 'MATCAP_10', 'MATCAP_11', 'MATCAP_12', 'MATCAP_13', 'MATCAP_14', 'MATCAP_15', 'MATCAP_16', 'MATCAP_17', 'MATCAP_18', 'MATCAP_19', 'MATCAP_20', 'MATCAP_21', 'MATCAP_22', 'MATCAP_23', 'MATCAP_24', 'SMALL_TRI_RIGHT_VEC', 'KEYTYPE_KEYFRAME_VEC', 'KEYTYPE_BREAKDOWN_VEC', 'KEYTYPE_EXTREME_VEC', 'KEYTYPE_JITTER_VEC', 'KEYTYPE_MOVING_HOLD_VEC', 'COLORSET_01_VEC', 'COLORSET_02_VEC', 'COLORSET_03_VEC', 'COLORSET_04_VEC', 'COLORSET_05_VEC', 'COLORSET_06_VEC', 'COLORSET_07_VEC', 'COLORSET_08_VEC', 'COLORSET_09_VEC', 'COLORSET_10_VEC', 'COLORSET_11_VEC', 'COLORSET_12_VEC', 'COLORSET_13_VEC', 'COLORSET_14_VEC', 'COLORSET_15_VEC', 'COLORSET_16_VEC', 'COLORSET_17_VEC', 'COLORSET_18_VEC', 'COLORSET_19_VEC', 'COLORSET_20_VEC'], (optional))
        :type icon: str
        :param : (type: bpy.types.UIPopupMenu, (never None))
        :rtype: UIPopupMenu
        """

    def pupmenu_end__internal(self, menu=None):
        """pupmenu_end__internal"""

    def piemenu_begin__internal(self, title, icon='NONE', event=None):
        """piemenu_begin__internal
        
        :param icon: icon
            (type: enum in ['NONE', 'QUESTION', 'ERROR', 'CANCEL', 'TRIA_RIGHT', 'TRIA_DOWN', 'TRIA_LEFT', 'TRIA_UP', 'ARROW_LEFTRIGHT', 'PLUS', 'DISCLOSURE_TRI_DOWN', 'DISCLOSURE_TRI_RIGHT', 'RADIOBUT_OFF', 'RADIOBUT_ON', 'MENU_PANEL', 'BLENDER', 'GRIP', 'DOT', 'COLLAPSEMENU', 'X', 'GO_LEFT', 'PLUG', 'UI', 'NODE', 'NODE_SEL', 'FULLSCREEN', 'SPLITSCREEN', 'RIGHTARROW_THIN', 'BORDERMOVE', 'VIEWZOOM', 'ZOOMIN', 'ZOOMOUT', 'PANEL_CLOSE', 'COPY_ID', 'EYEDROPPER', 'LINK_AREA', 'AUTO', 'CHECKBOX_DEHLT', 'CHECKBOX_HLT', 'UNLOCKED', 'LOCKED', 'UNPINNED', 'PINNED', 'SCREEN_BACK', 'RIGHTARROW', 'DOWNARROW_HLT', 'DOTSUP', 'DOTSDOWN', 'LINK', 'INLINK', 'PLUGIN', 'HELP', 'GHOST_ENABLED', 'COLOR', 'LINKED', 'UNLINKED', 'HAND', 'ZOOM_ALL', 'ZOOM_SELECTED', 'ZOOM_PREVIOUS', 'ZOOM_IN', 'ZOOM_OUT', 'RENDER_REGION', 'BORDER_RECT', 'BORDER_LASSO', 'FREEZE', 'STYLUS_PRESSURE', 'GHOST_DISABLED', 'NEW', 'FILE_TICK', 'QUIT', 'URL', 'RECOVER_LAST', 'FULLSCREEN_ENTER', 'FULLSCREEN_EXIT', 'BLANK1', 'LAMP', 'MATERIAL', 'TEXTURE', 'ANIM', 'WORLD', 'SCENE', 'EDIT', 'GAME', 'RADIO', 'SCRIPT', 'PARTICLES', 'PHYSICS', 'SPEAKER', 'TEXTURE_SHADED', 'VIEW3D', 'IPO', 'OOPS', 'BUTS', 'FILESEL', 'IMAGE_COL', 'INFO', 'SEQUENCE', 'TEXT', 'IMASEL', 'SOUND', 'ACTION', 'NLA', 'SCRIPTWIN', 'TIME', 'NODETREE', 'LOGIC', 'CONSOLE', 'PREFERENCES', 'CLIP', 'ASSET_MANAGER', 'OBJECT_DATAMODE', 'EDITMODE_HLT', 'FACESEL_HLT', 'VPAINT_HLT', 'TPAINT_HLT', 'WPAINT_HLT', 'SCULPTMODE_HLT', 'POSE_HLT', 'PARTICLEMODE', 'LIGHTPAINT', 'SCENE_DATA', 'RENDERLAYERS', 'WORLD_DATA', 'OBJECT_DATA', 'MESH_DATA', 'CURVE_DATA', 'META_DATA', 'LATTICE_DATA', 'LAMP_DATA', 'MATERIAL_DATA', 'TEXTURE_DATA', 'ANIM_DATA', 'CAMERA_DATA', 'PARTICLE_DATA', 'LIBRARY_DATA_DIRECT', 'GROUP', 'ARMATURE_DATA', 'POSE_DATA', 'BONE_DATA', 'CONSTRAINT', 'SHAPEKEY_DATA', 'CONSTRAINT_BONE', 'CAMERA_STEREO', 'PACKAGE', 'UGLYPACKAGE', 'BRUSH_DATA', 'IMAGE_DATA', 'FILE', 'FCURVE', 'FONT_DATA', 'RENDER_RESULT', 'SURFACE_DATA', 'EMPTY_DATA', 'SETTINGS', 'RENDER_ANIMATION', 'RENDER_STILL', 'LIBRARY_DATA_BROKEN', 'BOIDS', 'STRANDS', 'LIBRARY_DATA_INDIRECT', 'GREASEPENCIL', 'LINE_DATA', 'GROUP_BONE', 'GROUP_VERTEX', 'GROUP_VCOL', 'GROUP_UVS', 'RNA', 'RNA_ADD', 'OUTLINER_OB_EMPTY', 'OUTLINER_OB_MESH', 'OUTLINER_OB_CURVE', 'OUTLINER_OB_LATTICE', 'OUTLINER_OB_META', 'OUTLINER_OB_LAMP', 'OUTLINER_OB_CAMERA', 'OUTLINER_OB_ARMATURE', 'OUTLINER_OB_FONT', 'OUTLINER_OB_SURFACE', 'OUTLINER_OB_SPEAKER', 'RESTRICT_COLOR_OFF', 'RESTRICT_COLOR_ON', 'RESTRICT_VIEW_OFF', 'RESTRICT_VIEW_ON', 'RESTRICT_SELECT_OFF', 'RESTRICT_SELECT_ON', 'RESTRICT_RENDER_OFF', 'RESTRICT_RENDER_ON', 'OUTLINER_DATA_EMPTY', 'OUTLINER_DATA_MESH', 'OUTLINER_DATA_CURVE', 'OUTLINER_DATA_LATTICE', 'OUTLINER_DATA_META', 'OUTLINER_DATA_LAMP', 'OUTLINER_DATA_CAMERA', 'OUTLINER_DATA_ARMATURE', 'OUTLINER_DATA_FONT', 'OUTLINER_DATA_SURFACE', 'OUTLINER_DATA_SPEAKER', 'OUTLINER_DATA_POSE', 'MESH_PLANE', 'MESH_CUBE', 'MESH_CIRCLE', 'MESH_UVSPHERE', 'MESH_ICOSPHERE', 'MESH_GRID', 'MESH_MONKEY', 'MESH_CYLINDER', 'MESH_TORUS', 'MESH_CONE', 'MESH_CAPSULE', 'LAMP_POINT', 'LAMP_SUN', 'LAMP_SPOT', 'LAMP_HEMI', 'LAMP_AREA', 'META_EMPTY', 'META_PLANE', 'META_CUBE', 'META_BALL', 'META_ELLIPSOID', 'META_CAPSULE', 'SURFACE_NCURVE', 'SURFACE_NCIRCLE', 'SURFACE_NSURFACE', 'SURFACE_NCYLINDER', 'SURFACE_NSPHERE', 'SURFACE_NTORUS', 'CURVE_BEZCURVE', 'CURVE_BEZCIRCLE', 'CURVE_NCURVE', 'CURVE_NCIRCLE', 'CURVE_PATH', 'COLOR_RED', 'COLOR_GREEN', 'COLOR_BLUE', 'TRIA_RIGHT_BAR', 'TRIA_DOWN_BAR', 'TRIA_LEFT_BAR', 'TRIA_UP_BAR', 'FORCE_FORCE', 'FORCE_WIND', 'FORCE_VORTEX', 'FORCE_MAGNETIC', 'FORCE_HARMONIC', 'FORCE_CHARGE', 'FORCE_LENNARDJONES', 'FORCE_TEXTURE', 'FORCE_CURVE', 'FORCE_BOID', 'FORCE_TURBULENCE', 'FORCE_DRAG', 'FORCE_SMOKEFLOW', 'NODE_INSERT_ON', 'NODE_INSERT_OFF', 'MODIFIER', 'MOD_WAVE', 'MOD_BUILD', 'MOD_DECIM', 'MOD_MIRROR', 'MOD_SOFT', 'MOD_SUBSURF', 'HOOK', 'MOD_PHYSICS', 'MOD_PARTICLES', 'MOD_BOOLEAN', 'MOD_EDGESPLIT', 'MOD_ARRAY', 'MOD_UVPROJECT', 'MOD_DISPLACE', 'MOD_CURVE', 'MOD_LATTICE', 'CONSTRAINT_DATA', 'MOD_ARMATURE', 'MOD_SHRINKWRAP', 'MOD_CAST', 'MOD_MESHDEFORM', 'MOD_BEVEL', 'MOD_SMOOTH', 'MOD_SIMPLEDEFORM', 'MOD_MASK', 'MOD_CLOTH', 'MOD_EXPLODE', 'MOD_FLUIDSIM', 'MOD_MULTIRES', 'MOD_SMOKE', 'MOD_SOLIDIFY', 'MOD_SCREW', 'MOD_VERTEX_WEIGHT', 'MOD_DYNAMICPAINT', 'MOD_REMESH', 'MOD_OCEAN', 'MOD_WARP', 'MOD_SKIN', 'MOD_TRIANGULATE', 'MOD_WIREFRAME', 'MOD_DATA_TRANSFER', 'MOD_NORMALEDIT', 'REC', 'PLAY', 'FF', 'REW', 'PAUSE', 'PREV_KEYFRAME', 'NEXT_KEYFRAME', 'PLAY_AUDIO', 'PLAY_REVERSE', 'PREVIEW_RANGE', 'ACTION_TWEAK', 'PMARKER_ACT', 'PMARKER_SEL', 'PMARKER', 'MARKER_HLT', 'MARKER', 'SPACE2', 'SPACE3', 'KEYINGSET', 'KEY_DEHLT', 'KEY_HLT', 'MUTE_IPO_OFF', 'MUTE_IPO_ON', 'VISIBLE_IPO_OFF', 'VISIBLE_IPO_ON', 'DRIVER', 'SOLO_OFF', 'SOLO_ON', 'FRAME_PREV', 'FRAME_NEXT', 'NLA_PUSHDOWN', 'IPO_CONSTANT', 'IPO_LINEAR', 'IPO_BEZIER', 'IPO_SINE', 'IPO_QUAD', 'IPO_CUBIC', 'IPO_QUART', 'IPO_QUINT', 'IPO_EXPO', 'IPO_CIRC', 'IPO_BOUNCE', 'IPO_ELASTIC', 'IPO_BACK', 'IPO_EASE_IN', 'IPO_EASE_OUT', 'IPO_EASE_IN_OUT', 'NORMALIZE_FCURVES', 'VERTEXSEL', 'EDGESEL', 'FACESEL', 'LOOPSEL', 'ROTATE', 'CURSOR', 'ROTATECOLLECTION', 'ROTATECENTER', 'ROTACTIVE', 'ALIGN', 'SMOOTHCURVE', 'SPHERECURVE', 'ROOTCURVE', 'SHARPCURVE', 'LINCURVE', 'NOCURVE', 'RNDCURVE', 'PROP_OFF', 'PROP_ON', 'PROP_CON', 'SCULPT_DYNTOPO', 'PARTICLE_POINT', 'PARTICLE_TIP', 'PARTICLE_PATH', 'MAN_TRANS', 'MAN_ROT', 'MAN_SCALE', 'MANIPUL', 'SNAP_OFF', 'SNAP_ON', 'SNAP_NORMAL', 'SNAP_GRID', 'SNAP_VERTEX', 'SNAP_EDGE', 'SNAP_FACE', 'SNAP_VOLUME', 'SNAP_INCREMENT', 'STICKY_UVS_LOC', 'STICKY_UVS_DISABLE', 'STICKY_UVS_VERT', 'CLIPUV_DEHLT', 'CLIPUV_HLT', 'SNAP_PEEL_OBJECT', 'GRID', 'PASTEDOWN', 'COPYDOWN', 'PASTEFLIPUP', 'PASTEFLIPDOWN', 'SNAP_SURFACE', 'AUTOMERGE_ON', 'AUTOMERGE_OFF', 'RETOPO', 'UV_VERTEXSEL', 'UV_EDGESEL', 'UV_FACESEL', 'UV_ISLANDSEL', 'UV_SYNC_SELECT', 'BBOX', 'WIRE', 'SOLID', 'SMOOTH', 'POTATO', 'ORTHO', 'LOCKVIEW_OFF', 'LOCKVIEW_ON', 'AXIS_SIDE', 'AXIS_FRONT', 'AXIS_TOP', 'NDOF_DOM', 'NDOF_TURN', 'NDOF_FLY', 'NDOF_TRANS', 'LAYER_USED', 'LAYER_ACTIVE', 'SORTALPHA', 'SORTBYEXT', 'SORTTIME', 'SORTSIZE', 'LONGDISPLAY', 'SHORTDISPLAY', 'GHOST', 'IMGDISPLAY', 'SAVE_AS', 'SAVE_COPY', 'BOOKMARKS', 'FONTPREVIEW', 'FILTER', 'NEWFOLDER', 'OPEN_RECENT', 'FILE_PARENT', 'FILE_REFRESH', 'FILE_FOLDER', 'FILE_BLANK', 'FILE_BLEND', 'FILE_IMAGE', 'FILE_MOVIE', 'FILE_SCRIPT', 'FILE_SOUND', 'FILE_FONT', 'FILE_TEXT', 'RECOVER_AUTO', 'SAVE_PREFS', 'LINK_BLEND', 'APPEND_BLEND', 'IMPORT', 'EXPORT', 'EXTERNAL_DATA', 'LOAD_FACTORY', 'LOOP_BACK', 'LOOP_FORWARDS', 'BACK', 'FORWARD', 'FILE_HIDDEN', 'FILE_BACKUP', 'DISK_DRIVE', 'MATPLANE', 'MATSPHERE', 'MATCUBE', 'MONKEY', 'HAIR', 'ALIASED', 'ANTIALIASED', 'MAT_SPHERE_SKY', 'WORDWRAP_OFF', 'WORDWRAP_ON', 'SYNTAX_OFF', 'SYNTAX_ON', 'LINENUMBERS_OFF', 'LINENUMBERS_ON', 'SCRIPTPLUGINS', 'SEQ_SEQUENCER', 'SEQ_PREVIEW', 'SEQ_LUMA_WAVEFORM', 'SEQ_CHROMA_SCOPE', 'SEQ_HISTOGRAM', 'SEQ_SPLITVIEW', 'IMAGE_RGB', 'IMAGE_RGB_ALPHA', 'IMAGE_ALPHA', 'IMAGE_ZDEPTH', 'IMAGEFILE', 'BRUSH_ADD', 'BRUSH_BLOB', 'BRUSH_BLUR', 'BRUSH_CLAY', 'BRUSH_CLAY_STRIPS', 'BRUSH_CLONE', 'BRUSH_CREASE', 'BRUSH_DARKEN', 'BRUSH_FILL', 'BRUSH_FLATTEN', 'BRUSH_GRAB', 'BRUSH_INFLATE', 'BRUSH_LAYER', 'BRUSH_LIGHTEN', 'BRUSH_MASK', 'BRUSH_MIX', 'BRUSH_MULTIPLY', 'BRUSH_NUDGE', 'BRUSH_PINCH', 'BRUSH_SCRAPE', 'BRUSH_SCULPT_DRAW', 'BRUSH_SMEAR', 'BRUSH_SMOOTH', 'BRUSH_SNAKE_HOOK', 'BRUSH_SOFTEN', 'BRUSH_SUBTRACT', 'BRUSH_TEXDRAW', 'BRUSH_TEXFILL', 'BRUSH_TEXMASK', 'BRUSH_THUMB', 'BRUSH_ROTATE', 'BRUSH_VERTEXDRAW', 'MATCAP_01', 'MATCAP_02', 'MATCAP_03', 'MATCAP_04', 'MATCAP_05', 'MATCAP_06', 'MATCAP_07', 'MATCAP_08', 'MATCAP_09', 'MATCAP_10', 'MATCAP_11', 'MATCAP_12', 'MATCAP_13', 'MATCAP_14', 'MATCAP_15', 'MATCAP_16', 'MATCAP_17', 'MATCAP_18', 'MATCAP_19', 'MATCAP_20', 'MATCAP_21', 'MATCAP_22', 'MATCAP_23', 'MATCAP_24', 'SMALL_TRI_RIGHT_VEC', 'KEYTYPE_KEYFRAME_VEC', 'KEYTYPE_BREAKDOWN_VEC', 'KEYTYPE_EXTREME_VEC', 'KEYTYPE_JITTER_VEC', 'KEYTYPE_MOVING_HOLD_VEC', 'COLORSET_01_VEC', 'COLORSET_02_VEC', 'COLORSET_03_VEC', 'COLORSET_04_VEC', 'COLORSET_05_VEC', 'COLORSET_06_VEC', 'COLORSET_07_VEC', 'COLORSET_08_VEC', 'COLORSET_09_VEC', 'COLORSET_10_VEC', 'COLORSET_11_VEC', 'COLORSET_12_VEC', 'COLORSET_13_VEC', 'COLORSET_14_VEC', 'COLORSET_15_VEC', 'COLORSET_16_VEC', 'COLORSET_17_VEC', 'COLORSET_18_VEC', 'COLORSET_19_VEC', 'COLORSET_20_VEC'], (optional))
        :type icon: str
        :param : (type: bpy.types.UIPieMenu, (never None))
        :rtype: UIPieMenu
        """

    def piemenu_end__internal(self, menu=None):
        """piemenu_end__internal"""

    def popup_menu(self, draw_func, title='', icon='NONE'):
        """Popup menus can be useful for creating menus without having to register menu classes.
        Note that they will not block the scripts execution, so the caller can't wait for user input.
        """

    def popup_menu_pie(self, event, draw_func, title='', icon='NONE'):
        """"""


class WireframeModifier(Modifier):
    """Wireframe effect modifier"""

    crease_weight = 0.0
    """Crease weight (if active)
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    invert_vertex_group = False
    """Invert vertex group influence
    (type: boolean, default False)
    
    :type: bool
    """

    material_offset = 0
    """Offset material index of generated faces
    (type: int in [-32768, 32767], default 0)
    
    :type: int
    """

    offset = 0.0
    """Offset the thickness from the center
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    thickness = 0.0
    """Thickness factor
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    thickness_vertex_group = 0.0
    """Thickness factor to use for zero vertex group influence
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    use_boundary = False
    """Support face boundaries
    (type: boolean, default False)
    
    :type: bool
    """

    use_crease = False
    """Crease hub edges for improved subsurf
    (type: boolean, default False)
    
    :type: bool
    """

    use_even_offset = False
    """Scale the offset to give more even thickness
    (type: boolean, default False)
    
    :type: bool
    """

    use_relative_offset = False
    """Scale the offset by surrounding geometry
    (type: boolean, default False)
    
    :type: bool
    """

    use_replace = False
    """Remove original geometry
    (type: boolean, default False)
    
    :type: bool
    """

    vertex_group = ""
    """Vertex group name for selecting the affected areas
    (type: string, default "", (never None))
    
    :type: str
    """


class World(ID):
    """World data-block describing the environment and ambient lighting of a scene"""

    active_texture = None
    """Active texture slot being displayed
    (type: bpy.types.Texture)
    
    :type: Texture
    """

    active_texture_index = 0
    """Index of active texture slot
    (type: int in [0, 17], default 0)
    
    :type: int
    """

    ambient_color = (0.0, 0.0, 0.0)
    """Ambient color of the world
    (type: float array of 3 items in [0, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    animation_data = None
    """Animation data for this data-block
    (type: bpy.types.AnimData, (readonly))
    
    :type: AnimData
    """

    color_range = 0.0
    """The color range that will be mapped to 0-1
    (type: float in [0.2, 5], default 0.0)
    
    :type: float
    """

    exposure = 0.0
    """Amount of exponential color correction for light
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    horizon_color = (0.0, 0.0, 0.0)
    """Color at the horizon
    (type: float array of 3 items in [0, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    light_settings = None
    """World lighting settings
    (type: bpy.types.WorldLighting, (readonly, never None))
    
    :type: WorldLighting
    """

    mist_settings = None
    """World mist settings
    (type: bpy.types.WorldMistSettings, (readonly, never None))
    
    :type: WorldMistSettings
    """

    node_tree = None
    """Node tree for node based worlds
    (type: bpy.types.NodeTree, (readonly))
    
    :type: NodeTree
    """

    texture_slots = None
    """Texture slots defining the mapping and influence of textures
    (type: bpy.types.WorldTextureSlots bpy.types.bpy_prop_collection of bpy.types.WorldTextureSlot, (readonly))
    
    :type: WorldTextureSlots
    """

    use_nodes = False
    """Use shader nodes to render the world
    (type: boolean, default False)
    
    :type: bool
    """

    use_sky_blend = False
    """Render background with natural progression from horizon to zenith
    (type: boolean, default False)
    
    :type: bool
    """

    use_sky_paper = False
    """Flatten blend or texture coordinates
    (type: boolean, default False)
    
    :type: bool
    """

    use_sky_real = False
    """Render background with a real horizon, relative to the camera angle
    (type: boolean, default False)
    
    :type: bool
    """

    zenith_color = (0.0, 0.0, 0.0)
    """Color at the zenith
    (type: float array of 3 items in [0, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """


class WorldTextureSlot(TextureSlot):
    """Texture slot for textures in a World data-block"""

    blend_factor = 0.0
    """Amount texture affects color progression of the background
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    horizon_factor = 0.0
    """Amount texture affects color of the horizon
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    object = None
    """Object to use for mapping with Object texture coordinates
    (type: bpy.types.Object)
    
    :type: Object
    """

    texture_coords = 'VIEW'
    """Texture coordinates used to map the texture onto the background
    * 'VIEW': View, Use view vector for the texture coordinates.
    * 'GLOBAL': Global, Use global coordinates for the texture coordinates (interior mist).
    * 'ANGMAP': AngMap, Use 360 degree angular coordinates, e.g. for spherical light probes.
    * 'SPHERE': Sphere, For 360 degree panorama sky, spherical mapped, only top half.
    * 'EQUIRECT': Equirectangular, For 360 degree panorama sky, equirectangular mapping.
    * 'TUBE': Tube, For 360 degree panorama sky, cylindrical mapped, only top half.
    * 'OBJECT': Object, Use linked object's coordinates for texture coordinates.
    (type: enum in ['VIEW', 'GLOBAL', 'ANGMAP', 'SPHERE', 'EQUIRECT', 'TUBE', 'OBJECT'], default 'VIEW')
    
    :type: str
    """

    use_map_blend = False
    """Affect the color progression of the background
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_horizon = False
    """Affect the color of the horizon
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_zenith_down = False
    """Affect the color of the zenith below
    (type: boolean, default False)
    
    :type: bool
    """

    use_map_zenith_up = False
    """Affect the color of the zenith above
    (type: boolean, default False)
    
    :type: bool
    """

    zenith_down_factor = 0.0
    """Amount texture affects color of the zenith below
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    zenith_up_factor = 0.0
    """Amount texture affects color of the zenith above
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """


class XnorController(Controller):
    """Controller passing on events based on a logical XNOR operation"""


class XorController(Controller):
    """Controller passing on events based on a logical XOR operation"""


class AddSequence(EffectSequence):
    """Add Sequence"""

    input_1 = None
    """First input for the effect strip
    (type: bpy.types.Sequence, (never None))
    
    :type: Sequence
    """

    input_2 = None
    """Second input for the effect strip
    (type: bpy.types.Sequence, (never None))
    
    :type: Sequence
    """

    input_count = 0
    """(type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """


class AdjustmentSequence(EffectSequence):
    """Sequence strip to perform filter adjustments to layers below"""

    animation_offset_end = 0
    """Animation end offset (trim end)
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    animation_offset_start = 0
    """Animation start offset (trim start)
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    input_count = 0
    """(type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """


class AlphaOverSequence(EffectSequence):
    """Alpha Over Sequence"""

    input_1 = None
    """First input for the effect strip
    (type: bpy.types.Sequence, (never None))
    
    :type: Sequence
    """

    input_2 = None
    """Second input for the effect strip
    (type: bpy.types.Sequence, (never None))
    
    :type: Sequence
    """

    input_count = 0
    """(type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """


class AlphaUnderSequence(EffectSequence):
    """Alpha Under Sequence"""

    input_1 = None
    """First input for the effect strip
    (type: bpy.types.Sequence, (never None))
    
    :type: Sequence
    """

    input_2 = None
    """Second input for the effect strip
    (type: bpy.types.Sequence, (never None))
    
    :type: Sequence
    """

    input_count = 0
    """(type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """


class AreaLamp(Lamp):
    """Directional area lamp"""

    compression_threshold = 0.0
    """Deep shadow map compression threshold
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    gamma = 0.0
    """Light gamma correction value
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    ge_shadow_buffer_type = 'SIMPLE'
    """The shadow mapping algorithm used
    * 'SIMPLE': Simple, Simple shadow maps.
    * 'VARIANCE': Variance, Variance shadow maps.
    (type: enum in ['SIMPLE', 'VARIANCE'], default 'SIMPLE')
    
    :type: str
    """

    shadow_adaptive_threshold = 0.0
    """Threshold for Adaptive Sampling (Raytraced shadows)
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    shadow_buffer_bias = 0.0
    """Shadow buffer sampling bias
    (type: float in [0.001, 5], default 0.0)
    
    :type: float
    """

    shadow_buffer_bleed_bias = 0.0
    """Bias for reducing light-bleed on variance shadow maps
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    shadow_buffer_clip_end = 0.0
    """Shadow map clip end, beyond which objects will not generate shadows
    (type: float in [0, 9999], default 0.0)
    
    :type: float
    """

    shadow_buffer_clip_start = 0.0
    """Shadow map clip start, below which objects will not generate shadows
    (type: float in [0, 9999], default 0.0)
    
    :type: float
    """

    shadow_buffer_samples = 0
    """Number of shadow buffer samples
    (type: int in [1, 16], default 0)
    
    :type: int
    """

    shadow_buffer_size = 0
    """Resolution of the shadow buffer, higher values give crisper shadows but use more memory
    (type: int in [128, 10240], default 0)
    
    :type: int
    """

    shadow_buffer_soft = 0.0
    """Size of shadow buffer sampling area
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    shadow_buffer_type = 'REGULAR'
    """Type of shadow buffer
    * 'REGULAR': Classical, Classic shadow buffer.
    * 'HALFWAY': Classic-Halfway, Regular buffer, averaging the closest and 2nd closest Z value to reducing bias artifacts.
    * 'IRREGULAR': Irregular, Irregular buffer produces sharp shadow always, but it doesn't show up for raytracing.
    * 'DEEP': Deep, Deep shadow buffer supports transparency and better filtering, at the cost of more memory usage and processing time.
    (type: enum in ['REGULAR', 'HALFWAY', 'IRREGULAR', 'DEEP'], default 'REGULAR')
    
    :type: str
    """

    shadow_color = (0.0, 0.0, 0.0)
    """Color of shadows cast by the lamp
    (type: float array of 3 items in [0, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    shadow_filter_type = 'BOX'
    """Type of shadow filter (Buffer Shadows)
    * 'BOX': Box, Apply the Box filter to shadow buffer samples.
    * 'TENT': Tent, Apply the Tent Filter to shadow buffer samples.
    * 'GAUSS': Gauss, Apply the Gauss filter to shadow buffer samples.
    (type: enum in ['BOX', 'TENT', 'GAUSS'], default 'BOX')
    
    :type: str
    """

    shadow_method = 'NOSHADOW'
    """
    * 'NOSHADOW': No Shadow.
    * 'RAY_SHADOW': Ray Shadow, Use ray tracing for shadow.
    (type: enum in ['NOSHADOW', 'RAY_SHADOW'], default 'NOSHADOW')
    
    :type: str
    """

    shadow_ray_sample_method = 'CONSTANT_JITTERED'
    """Method for generating shadow samples: Adaptive QMC is fastest, Constant QMC is less noisy but slower
    (type: enum in ['ADAPTIVE_QMC', 'CONSTANT_QMC', 'CONSTANT_JITTERED'], default 'CONSTANT_JITTERED')
    
    :type: str
    """

    shadow_ray_samples_x = 0
    """Number of samples taken extra (samples x samples)
    (type: int in [1, 64], default 0)
    
    :type: int
    """

    shadow_ray_samples_y = 0
    """Number of samples taken extra (samples x samples)
    (type: int in [1, 64], default 0)
    
    :type: int
    """

    shadow_sample_buffers = 'BUFFERS_1'
    """Number of shadow buffers to render for better AA, this increases memory usage
    * 'BUFFERS_1': 1, Only one buffer rendered.
    * 'BUFFERS_4': 4, Render 4 buffers for better AA, this quadruples memory usage.
    * 'BUFFERS_9': 9, Render 9 buffers for better AA, this uses nine times more memory.
    (type: enum in ['BUFFERS_1', 'BUFFERS_4', 'BUFFERS_9'], default 'BUFFERS_1')
    
    :type: str
    """

    shadow_soft_size = 0.0
    """Light size for ray shadow sampling (Raytraced shadows)
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    shape = 'SQUARE'
    """Shape of the area lamp
    (type: enum in ['SQUARE', 'RECTANGLE'], default 'SQUARE')
    
    :type: str
    """

    size = 0.0
    """Size of the area of the area Lamp, X direction size for Rectangle shapes
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    size_y = 0.0
    """Size of the area of the area Lamp in the Y direction for Rectangle shapes
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    use_auto_clip_end = False
    """Automatic calculation of clipping-end, based on visible vertices
    (type: boolean, default False)
    
    :type: bool
    """

    use_auto_clip_start = False
    """Automatic calculation of clipping-start, based on visible vertices
    (type: boolean, default False)
    
    :type: bool
    """

    use_dither = False
    """Use 2x2 dithering for sampling  (Constant Jittered sampling)
    (type: boolean, default False)
    
    :type: bool
    """

    use_jitter = False
    """Use noise for sampling  (Constant Jittered sampling)
    (type: boolean, default False)
    
    :type: bool
    """

    use_only_shadow = False
    """Cast shadows only, without illuminating objects
    (type: boolean, default False)
    
    :type: bool
    """

    use_shadow = False
    """(type: boolean, default False)
    
    :type: bool
    """

    use_shadow_layer = False
    """Objects on the same layers only cast shadows
    (type: boolean, default False)
    
    :type: bool
    """

    use_umbra = False
    """Emphasize parts that are fully shadowed (Constant Jittered sampling)
    (type: boolean, default False)
    
    :type: bool
    """


class BlendTexture(Texture):
    """Procedural color blending texture"""

    progression = 'LINEAR'
    """Style of the color blending
    * 'LINEAR': Linear, Create a linear progression.
    * 'QUADRATIC': Quadratic, Create a quadratic progression.
    * 'EASING': Easing, Create a progression easing from one step to the next.
    * 'DIAGONAL': Diagonal, Create a diagonal progression.
    * 'SPHERICAL': Spherical, Create a spherical progression.
    * 'QUADRATIC_SPHERE': Quadratic sphere, Create a quadratic progression in the shape of a sphere.
    * 'RADIAL': Radial, Create a radial progression.
    (type: enum in ['LINEAR', 'QUADRATIC', 'EASING', 'DIAGONAL', 'SPHERICAL', 'QUADRATIC_SPHERE', 'RADIAL'], default 'LINEAR')
    
    :type: str
    """

    use_flip_axis = 'HORIZONTAL'
    """Flip the texture's X and Y axis
    * 'HORIZONTAL': Horizontal, No flipping.
    * 'VERTICAL': Vertical, Flip the texture's X and Y axis.
    (type: enum in ['HORIZONTAL', 'VERTICAL'], default 'HORIZONTAL')
    
    :type: str
    """

    users_material = None
    """Materials that use this texture
                                (readonly)
    """

    users_object_modifier = None
    """Object modifiers that use this texture
                                (readonly)
    """


class CloudsTexture(Texture):
    """Procedural noise texture"""

    cloud_type = 'GRAYSCALE'
    """Determine whether Noise returns grayscale or RGB values
    (type: enum in ['GRAYSCALE', 'COLOR'], default 'GRAYSCALE')
    
    :type: str
    """

    nabla = 0.0
    """Size of derivative offset used for calculating normal
    (type: float in [0.001, 0.1], default 0.0)
    
    :type: float
    """

    noise_basis = 'BLENDER_ORIGINAL'
    """Noise basis used for turbulence
    * 'BLENDER_ORIGINAL': Blender Original, Noise algorithm - Blender original: Smooth interpolated noise.
    * 'ORIGINAL_PERLIN': Original Perlin, Noise algorithm - Original Perlin: Smooth interpolated noise.
    * 'IMPROVED_PERLIN': Improved Perlin, Noise algorithm - Improved Perlin: Smooth interpolated noise.
    * 'VORONOI_F1': Voronoi F1, Noise algorithm - Voronoi F1: Returns distance to the closest feature point.
    * 'VORONOI_F2': Voronoi F2, Noise algorithm - Voronoi F2: Returns distance to the 2nd closest feature point.
    * 'VORONOI_F3': Voronoi F3, Noise algorithm - Voronoi F3: Returns distance to the 3rd closest feature point.
    * 'VORONOI_F4': Voronoi F4, Noise algorithm - Voronoi F4: Returns distance to the 4th closest feature point.
    * 'VORONOI_F2_F1': Voronoi F2-F1, Noise algorithm - Voronoi F1-F2.
    * 'VORONOI_CRACKLE': Voronoi Crackle, Noise algorithm - Voronoi Crackle: Voronoi tessellation with sharp edges.
    * 'CELL_NOISE': Cell Noise, Noise algorithm - Cell Noise: Square cell tessellation.
    (type: enum in ['BLENDER_ORIGINAL', 'ORIGINAL_PERLIN', 'IMPROVED_PERLIN', 'VORONOI_F1', 'VORONOI_F2', 'VORONOI_F3', 'VORONOI_F4', 'VORONOI_F2_F1', 'VORONOI_CRACKLE', 'CELL_NOISE'], default 'BLENDER_ORIGINAL')
    
    :type: str
    """

    noise_depth = 0
    """Depth of the cloud calculation
    (type: int in [0, 30], default 0)
    
    :type: int
    """

    noise_scale = 0.0
    """Scaling for noise input
    (type: float in [0.0001, inf], default 0.0)
    
    :type: float
    """

    noise_type = 'SOFT_NOISE'
    """
    * 'SOFT_NOISE': Soft, Generate soft noise (smooth transitions).
    * 'HARD_NOISE': Hard, Generate hard noise (sharp transitions).
    (type: enum in ['SOFT_NOISE', 'HARD_NOISE'], default 'SOFT_NOISE')
    
    :type: str
    """

    users_material = None
    """Materials that use this texture
                                (readonly)
    """

    users_object_modifier = None
    """Object modifiers that use this texture
                                (readonly)
    """


class ColorSequence(EffectSequence):
    """Sequence strip creating an image filled with a single color"""

    color = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [0, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    input_count = 0
    """(type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """


class CompositorNode(NodeInternal):
    """"""

    def tag_need_exec(self):
        """Tag the node for compositor update"""

    def update(self):
        """"""


class CompositorNodeTree(NodeTree):
    """Node tree consisting of linked nodes used for compositing"""

    chunk_size = '32'
    """Max size of a tile (smaller values gives better distribution of multiple threads, but more overhead)
    * '32': 32x32, Chunksize of 32x32.
    * '64': 64x64, Chunksize of 64x64.
    * '128': 128x128, Chunksize of 128x128.
    * '256': 256x256, Chunksize of 256x256.
    * '512': 512x512, Chunksize of 512x512.
    * '1024': 1024x1024, Chunksize of 1024x1024.
    (type: enum in ['32', '64', '128', '256', '512', '1024'], default '32')
    
    :type: str
    """

    edit_quality = 'HIGH'
    """Quality when editing
    * 'HIGH': High, High quality.
    * 'MEDIUM': Medium, Medium quality.
    * 'LOW': Low, Low quality.
    (type: enum in ['HIGH', 'MEDIUM', 'LOW'], default 'HIGH')
    
    :type: str
    """

    render_quality = 'HIGH'
    """Quality when rendering
    * 'HIGH': High, High quality.
    * 'MEDIUM': Medium, Medium quality.
    * 'LOW': Low, Low quality.
    (type: enum in ['HIGH', 'MEDIUM', 'LOW'], default 'HIGH')
    
    :type: str
    """

    use_groupnode_buffer = False
    """Enable buffering of group nodes
    (type: boolean, default False)
    
    :type: bool
    """

    use_opencl = False
    """Enable GPU calculations
    (type: boolean, default False)
    
    :type: bool
    """

    use_two_pass = False
    """Use two pass execution during editing: first calculate fast nodes, second pass calculate all nodes
    (type: boolean, default False)
    
    :type: bool
    """

    use_viewer_border = False
    """Use boundaries for viewer nodes and composite backdrop
    (type: boolean, default False)
    
    :type: bool
    """


class CrossSequence(EffectSequence):
    """Cross Sequence"""

    input_1 = None
    """First input for the effect strip
    (type: bpy.types.Sequence, (never None))
    
    :type: Sequence
    """

    input_2 = None
    """Second input for the effect strip
    (type: bpy.types.Sequence, (never None))
    
    :type: Sequence
    """

    input_count = 0
    """(type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """


class DistortedNoiseTexture(Texture):
    """Procedural distorted noise texture"""

    distortion = 0.0
    """Amount of distortion
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    nabla = 0.0
    """Size of derivative offset used for calculating normal
    (type: float in [0.001, 0.1], default 0.0)
    
    :type: float
    """

    noise_basis = 'BLENDER_ORIGINAL'
    """Noise basis used for turbulence
    * 'BLENDER_ORIGINAL': Blender Original, Noise algorithm - Blender original: Smooth interpolated noise.
    * 'ORIGINAL_PERLIN': Original Perlin, Noise algorithm - Original Perlin: Smooth interpolated noise.
    * 'IMPROVED_PERLIN': Improved Perlin, Noise algorithm - Improved Perlin: Smooth interpolated noise.
    * 'VORONOI_F1': Voronoi F1, Noise algorithm - Voronoi F1: Returns distance to the closest feature point.
    * 'VORONOI_F2': Voronoi F2, Noise algorithm - Voronoi F2: Returns distance to the 2nd closest feature point.
    * 'VORONOI_F3': Voronoi F3, Noise algorithm - Voronoi F3: Returns distance to the 3rd closest feature point.
    * 'VORONOI_F4': Voronoi F4, Noise algorithm - Voronoi F4: Returns distance to the 4th closest feature point.
    * 'VORONOI_F2_F1': Voronoi F2-F1, Noise algorithm - Voronoi F1-F2.
    * 'VORONOI_CRACKLE': Voronoi Crackle, Noise algorithm - Voronoi Crackle: Voronoi tessellation with sharp edges.
    * 'CELL_NOISE': Cell Noise, Noise algorithm - Cell Noise: Square cell tessellation.
    (type: enum in ['BLENDER_ORIGINAL', 'ORIGINAL_PERLIN', 'IMPROVED_PERLIN', 'VORONOI_F1', 'VORONOI_F2', 'VORONOI_F3', 'VORONOI_F4', 'VORONOI_F2_F1', 'VORONOI_CRACKLE', 'CELL_NOISE'], default 'BLENDER_ORIGINAL')
    
    :type: str
    """

    noise_distortion = 'BLENDER_ORIGINAL'
    """Noise basis for the distortion
    * 'BLENDER_ORIGINAL': Blender Original, Noise algorithm - Blender original: Smooth interpolated noise.
    * 'ORIGINAL_PERLIN': Original Perlin, Noise algorithm - Original Perlin: Smooth interpolated noise.
    * 'IMPROVED_PERLIN': Improved Perlin, Noise algorithm - Improved Perlin: Smooth interpolated noise.
    * 'VORONOI_F1': Voronoi F1, Noise algorithm - Voronoi F1: Returns distance to the closest feature point.
    * 'VORONOI_F2': Voronoi F2, Noise algorithm - Voronoi F2: Returns distance to the 2nd closest feature point.
    * 'VORONOI_F3': Voronoi F3, Noise algorithm - Voronoi F3: Returns distance to the 3rd closest feature point.
    * 'VORONOI_F4': Voronoi F4, Noise algorithm - Voronoi F4: Returns distance to the 4th closest feature point.
    * 'VORONOI_F2_F1': Voronoi F2-F1, Noise algorithm - Voronoi F1-F2.
    * 'VORONOI_CRACKLE': Voronoi Crackle, Noise algorithm - Voronoi Crackle: Voronoi tessellation with sharp edges.
    * 'CELL_NOISE': Cell Noise, Noise algorithm - Cell Noise: Square cell tessellation.
    (type: enum in ['BLENDER_ORIGINAL', 'ORIGINAL_PERLIN', 'IMPROVED_PERLIN', 'VORONOI_F1', 'VORONOI_F2', 'VORONOI_F3', 'VORONOI_F4', 'VORONOI_F2_F1', 'VORONOI_CRACKLE', 'CELL_NOISE'], default 'BLENDER_ORIGINAL')
    
    :type: str
    """

    noise_scale = 0.0
    """Scaling for noise input
    (type: float in [0.0001, inf], default 0.0)
    
    :type: float
    """

    users_material = None
    """Materials that use this texture
                                (readonly)
    """

    users_object_modifier = None
    """Object modifiers that use this texture
                                (readonly)
    """


class EnvironmentMapTexture(Texture):
    """Environment map texture"""

    environment_map = None
    """Get the environment map associated with this texture
    (type: bpy.types.EnvironmentMap, (readonly))
    
    :type: EnvironmentMap
    """

    filter_eccentricity = 0
    """Maximum eccentricity (higher gives less blur at distant/oblique angles, but is also slower)
    (type: int in [1, 256], default 0)
    
    :type: int
    """

    filter_probes = 0
    """Maximum number of samples (higher gives less blur at distant/oblique angles, but is also slower)
    (type: int in [1, 256], default 0)
    
    :type: int
    """

    filter_size = 0.0
    """Multiply the filter size used by MIP Map and Interpolation
    (type: float in [0.1, 50], default 0.0)
    
    :type: float
    """

    filter_type = 'BOX'
    """Texture filter to use for sampling image
    (type: enum in ['BOX', 'EWA', 'FELINE', 'AREA'], default 'BOX')
    
    :type: str
    """

    image = None
    """Source image file to read the environment map from
    (type: bpy.types.Image)
    
    :type: Image
    """

    image_user = None
    """Parameters defining which layer, pass and frame of the image is displayed
    (type: bpy.types.ImageUser, (readonly))
    
    :type: ImageUser
    """

    use_filter_size_min = False
    """Use Filter Size as a minimal filter value in pixels
    (type: boolean, default False)
    
    :type: bool
    """

    use_mipmap = False
    """Use auto-generated MIP maps for the image
    (type: boolean, default False)
    
    :type: bool
    """

    use_mipmap_gauss = False
    """Use Gauss filter to sample down MIP maps
    (type: boolean, default False)
    
    :type: bool
    """

    users_material = None
    """Materials that use this texture
                                (readonly)
    """

    users_object_modifier = None
    """Object modifiers that use this texture
                                (readonly)
    """


class GammaCrossSequence(EffectSequence):
    """Gamma Cross Sequence"""

    input_1 = None
    """First input for the effect strip
    (type: bpy.types.Sequence, (never None))
    
    :type: Sequence
    """

    input_2 = None
    """Second input for the effect strip
    (type: bpy.types.Sequence, (never None))
    
    :type: Sequence
    """

    input_count = 0
    """(type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """


class GaussianBlurSequence(EffectSequence):
    """Sequence strip creating a gaussian blur"""

    input_1 = None
    """First input for the effect strip
    (type: bpy.types.Sequence, (never None))
    
    :type: Sequence
    """

    input_count = 0
    """(type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """

    size_x = 0.0
    """Size of the blur along X axis
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    size_y = 0.0
    """Size of the blur along Y axis
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """


class GlowSequence(EffectSequence):
    """Sequence strip creating a glow effect"""

    blur_radius = 0.0
    """Radius of glow effect
    (type: float in [0.5, 20], default 0.0)
    
    :type: float
    """

    boost_factor = 0.0
    """Brightness multiplier
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    clamp = 0.0
    """Brightness limit of intensity
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    input_1 = None
    """First input for the effect strip
    (type: bpy.types.Sequence, (never None))
    
    :type: Sequence
    """

    input_count = 0
    """(type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """

    quality = 0
    """Accuracy of the blur effect
    (type: int in [1, 5], default 0)
    
    :type: int
    """

    threshold = 0.0
    """Minimum intensity to trigger a glow
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    use_only_boost = False
    """Show the glow buffer only
    (type: boolean, default False)
    
    :type: bool
    """


class HemiLamp(Lamp):
    """180 degree constant lamp"""


class ImageTexture(Texture):
    """"""

    checker_distance = 0.0
    """Distance between checker tiles
    (type: float in [0, 0.99], default 0.0)
    
    :type: float
    """

    crop_max_x = 0.0
    """Maximum X value to crop the image
    (type: float in [-10, 10], default 0.0)
    
    :type: float
    """

    crop_max_y = 0.0
    """Maximum Y value to crop the image
    (type: float in [-10, 10], default 0.0)
    
    :type: float
    """

    crop_min_x = 0.0
    """Minimum X value to crop the image
    (type: float in [-10, 10], default 0.0)
    
    :type: float
    """

    crop_min_y = 0.0
    """Minimum Y value to crop the image
    (type: float in [-10, 10], default 0.0)
    
    :type: float
    """

    extension = 'EXTEND'
    """How the image is extrapolated past its original bounds
    * 'EXTEND': Extend, Extend by repeating edge pixels of the image.
    * 'CLIP': Clip, Clip to image size and set exterior pixels as transparent.
    * 'CLIP_CUBE': Clip Cube, Clip to cubic-shaped area around the image and set exterior pixels as transparent.
    * 'REPEAT': Repeat, Cause the image to repeat horizontally and vertically.
    * 'CHECKER': Checker, Cause the image to repeat in checker board pattern.
    (type: enum in ['EXTEND', 'CLIP', 'CLIP_CUBE', 'REPEAT', 'CHECKER'], default 'EXTEND')
    
    :type: str
    """

    filter_eccentricity = 0
    """Maximum eccentricity (higher gives less blur at distant/oblique angles, but is also slower)
    (type: int in [1, 256], default 0)
    
    :type: int
    """

    filter_probes = 0
    """Maximum number of samples (higher gives less blur at distant/oblique angles, but is also slower)
    (type: int in [1, 256], default 0)
    
    :type: int
    """

    filter_size = 0.0
    """Multiply the filter size used by MIP Map and Interpolation
    (type: float in [0.1, 50], default 0.0)
    
    :type: float
    """

    filter_type = 'BOX'
    """Texture filter to use for sampling image
    (type: enum in ['BOX', 'EWA', 'FELINE', 'AREA'], default 'BOX')
    
    :type: str
    """

    image = None
    """(type: bpy.types.Image)
    
    :type: Image
    """

    image_user = None
    """Parameters defining which layer, pass and frame of the image is displayed
    (type: bpy.types.ImageUser, (readonly))
    
    :type: ImageUser
    """

    invert_alpha = False
    """Invert all the alpha values in the image
    (type: boolean, default False)
    
    :type: bool
    """

    repeat_x = 0
    """Repetition multiplier in the X direction
    (type: int in [1, 512], default 0)
    
    :type: int
    """

    repeat_y = 0
    """Repetition multiplier in the Y direction
    (type: int in [1, 512], default 0)
    
    :type: int
    """

    use_alpha = False
    """Use the alpha channel information in the image
    (type: boolean, default False)
    
    :type: bool
    """

    use_calculate_alpha = False
    """Calculate an alpha channel based on RGB values in the image
    (type: boolean, default False)
    
    :type: bool
    """

    use_checker_even = False
    """Even checker tiles
    (type: boolean, default False)
    
    :type: bool
    """

    use_checker_odd = False
    """Odd checker tiles
    (type: boolean, default False)
    
    :type: bool
    """

    use_derivative_map = False
    """Use red and green as derivative values
    (type: boolean, default False)
    
    :type: bool
    """

    use_filter_size_min = False
    """Use Filter Size as a minimal filter value in pixels
    (type: boolean, default False)
    
    :type: bool
    """

    use_flip_axis = False
    """Flip the texture's X and Y axis
    (type: boolean, default False)
    
    :type: bool
    """

    use_interpolation = False
    """Interpolate pixels using selected filter
    (type: boolean, default False)
    
    :type: bool
    """

    use_mipmap = False
    """Use auto-generated MIP maps for the image
    (type: boolean, default False)
    
    :type: bool
    """

    use_mipmap_gauss = False
    """Use Gauss filter to sample down MIP maps
    (type: boolean, default False)
    
    :type: bool
    """

    use_mirror_x = False
    """Mirror the image repetition on the X direction
    (type: boolean, default False)
    
    :type: bool
    """

    use_mirror_y = False
    """Mirror the image repetition on the Y direction
    (type: boolean, default False)
    
    :type: bool
    """

    use_normal_map = False
    """Use image RGB values for normal mapping
    (type: boolean, default False)
    
    :type: bool
    """

    users_material = None
    """Materials that use this texture
                                (readonly)
    """

    users_object_modifier = None
    """Object modifiers that use this texture
                                (readonly)
    """


class LineStyleAlphaModifier_AlongStroke(LineStyleAlphaModifier):
    """Change alpha transparency along stroke"""

    blend = 'MIX'
    """Specify how the modifier value is blended into the base value
    (type: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'DIFFERENCE', 'MININUM', 'MAXIMUM'], default 'MIX')
    
    :type: str
    """

    curve = None
    """Curve used for the curve mapping
    (type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    influence = 0.0
    """Influence factor by which the modifier changes the property
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    invert = False
    """Invert the fade-out direction of the linear mapping
    (type: boolean, default False)
    
    :type: bool
    """

    mapping = 'LINEAR'
    """Select the mapping type
    * 'LINEAR': Linear, Use linear mapping.
    * 'CURVE': Curve, Use curve mapping.
    (type: enum in ['LINEAR', 'CURVE'], default 'LINEAR')
    
    :type: str
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    type = 'ALONG_STROKE'
    """Type of the modifier
    (type: enum in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT'], default 'ALONG_STROKE', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """


class LineStyleAlphaModifier_CreaseAngle(LineStyleAlphaModifier):
    """Alpha transparency based on the angle between two adjacent faces"""

    angle_max = 0.0
    """Maximum angle to modify thickness
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    angle_min = 0.0
    """Minimum angle to modify thickness
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    blend = 'MIX'
    """Specify how the modifier value is blended into the base value
    (type: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'DIFFERENCE', 'MININUM', 'MAXIMUM'], default 'MIX')
    
    :type: str
    """

    curve = None
    """Curve used for the curve mapping
    (type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    influence = 0.0
    """Influence factor by which the modifier changes the property
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    invert = False
    """Invert the fade-out direction of the linear mapping
    (type: boolean, default False)
    
    :type: bool
    """

    mapping = 'LINEAR'
    """Select the mapping type
    * 'LINEAR': Linear, Use linear mapping.
    * 'CURVE': Curve, Use curve mapping.
    (type: enum in ['LINEAR', 'CURVE'], default 'LINEAR')
    
    :type: str
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    type = 'ALONG_STROKE'
    """Type of the modifier
    (type: enum in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT'], default 'ALONG_STROKE', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """


class LineStyleAlphaModifier_Curvature_3D(LineStyleAlphaModifier):
    """Alpha transparency based on the radial curvature of 3D mesh surfaces"""

    blend = 'MIX'
    """Specify how the modifier value is blended into the base value
    (type: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'DIFFERENCE', 'MININUM', 'MAXIMUM'], default 'MIX')
    
    :type: str
    """

    curvature_max = 0.0
    """Maximum Curvature
    (type: float in [0, 10000], default 0.0)
    
    :type: float
    """

    curvature_min = 0.0
    """Minimum Curvature
    (type: float in [0, 10000], default 0.0)
    
    :type: float
    """

    curve = None
    """Curve used for the curve mapping
    (type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    influence = 0.0
    """Influence factor by which the modifier changes the property
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    invert = False
    """Invert the fade-out direction of the linear mapping
    (type: boolean, default False)
    
    :type: bool
    """

    mapping = 'LINEAR'
    """Select the mapping type
    * 'LINEAR': Linear, Use linear mapping.
    * 'CURVE': Curve, Use curve mapping.
    (type: enum in ['LINEAR', 'CURVE'], default 'LINEAR')
    
    :type: str
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    type = 'ALONG_STROKE'
    """Type of the modifier
    (type: enum in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT'], default 'ALONG_STROKE', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """


class LineStyleAlphaModifier_DistanceFromCamera(LineStyleAlphaModifier):
    """Change alpha transparency based on the distance from the camera"""

    blend = 'MIX'
    """Specify how the modifier value is blended into the base value
    (type: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'DIFFERENCE', 'MININUM', 'MAXIMUM'], default 'MIX')
    
    :type: str
    """

    curve = None
    """Curve used for the curve mapping
    (type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    influence = 0.0
    """Influence factor by which the modifier changes the property
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    invert = False
    """Invert the fade-out direction of the linear mapping
    (type: boolean, default False)
    
    :type: bool
    """

    mapping = 'LINEAR'
    """Select the mapping type
    * 'LINEAR': Linear, Use linear mapping.
    * 'CURVE': Curve, Use curve mapping.
    (type: enum in ['LINEAR', 'CURVE'], default 'LINEAR')
    
    :type: str
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    range_max = 0.0
    """Upper bound of the input range the mapping is applied
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    range_min = 0.0
    """Lower bound of the input range the mapping is applied
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    type = 'ALONG_STROKE'
    """Type of the modifier
    (type: enum in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT'], default 'ALONG_STROKE', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """


class LineStyleAlphaModifier_DistanceFromObject(LineStyleAlphaModifier):
    """Change alpha transparency based on the distance from an object"""

    blend = 'MIX'
    """Specify how the modifier value is blended into the base value
    (type: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'DIFFERENCE', 'MININUM', 'MAXIMUM'], default 'MIX')
    
    :type: str
    """

    curve = None
    """Curve used for the curve mapping
    (type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    influence = 0.0
    """Influence factor by which the modifier changes the property
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    invert = False
    """Invert the fade-out direction of the linear mapping
    (type: boolean, default False)
    
    :type: bool
    """

    mapping = 'LINEAR'
    """Select the mapping type
    * 'LINEAR': Linear, Use linear mapping.
    * 'CURVE': Curve, Use curve mapping.
    (type: enum in ['LINEAR', 'CURVE'], default 'LINEAR')
    
    :type: str
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    range_max = 0.0
    """Upper bound of the input range the mapping is applied
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    range_min = 0.0
    """Lower bound of the input range the mapping is applied
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    target = None
    """Target object from which the distance is measured
    (type: bpy.types.Object)
    
    :type: Object
    """

    type = 'ALONG_STROKE'
    """Type of the modifier
    (type: enum in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT'], default 'ALONG_STROKE', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """


class LineStyleAlphaModifier_Material(LineStyleAlphaModifier):
    """Change alpha transparency based on a material attribute"""

    blend = 'MIX'
    """Specify how the modifier value is blended into the base value
    (type: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'DIFFERENCE', 'MININUM', 'MAXIMUM'], default 'MIX')
    
    :type: str
    """

    curve = None
    """Curve used for the curve mapping
    (type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    influence = 0.0
    """Influence factor by which the modifier changes the property
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    invert = False
    """Invert the fade-out direction of the linear mapping
    (type: boolean, default False)
    
    :type: bool
    """

    mapping = 'LINEAR'
    """Select the mapping type
    * 'LINEAR': Linear, Use linear mapping.
    * 'CURVE': Curve, Use curve mapping.
    (type: enum in ['LINEAR', 'CURVE'], default 'LINEAR')
    
    :type: str
    """

    material_attribute = 'LINE'
    """Specify which material attribute is used
    (type: enum in ['LINE', 'LINE_R', 'LINE_G', 'LINE_B', 'LINE_A', 'DIFF', 'DIFF_R', 'DIFF_G', 'DIFF_B', 'SPEC', 'SPEC_R', 'SPEC_G', 'SPEC_B', 'SPEC_HARD', 'ALPHA'], default 'LINE')
    
    :type: str
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    type = 'ALONG_STROKE'
    """Type of the modifier
    (type: enum in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT'], default 'ALONG_STROKE', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """


class LineStyleAlphaModifier_Noise(LineStyleAlphaModifier):
    """Alpha transparency based on random noise"""

    amplitude = 0.0
    """Amplitude of the noise
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    blend = 'MIX'
    """Specify how the modifier value is blended into the base value
    (type: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'DIFFERENCE', 'MININUM', 'MAXIMUM'], default 'MIX')
    
    :type: str
    """

    curve = None
    """Curve used for the curve mapping
    (type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    influence = 0.0
    """Influence factor by which the modifier changes the property
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    invert = False
    """Invert the fade-out direction of the linear mapping
    (type: boolean, default False)
    
    :type: bool
    """

    mapping = 'LINEAR'
    """Select the mapping type
    * 'LINEAR': Linear, Use linear mapping.
    * 'CURVE': Curve, Use curve mapping.
    (type: enum in ['LINEAR', 'CURVE'], default 'LINEAR')
    
    :type: str
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    period = 0.0
    """Period of the noise
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    seed = 0
    """Seed for the noise generation
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    type = 'ALONG_STROKE'
    """Type of the modifier
    (type: enum in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT'], default 'ALONG_STROKE', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """


class LineStyleAlphaModifier_Tangent(LineStyleAlphaModifier):
    """Alpha transparency based on the direction of the stroke"""

    blend = 'MIX'
    """Specify how the modifier value is blended into the base value
    (type: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'DIFFERENCE', 'MININUM', 'MAXIMUM'], default 'MIX')
    
    :type: str
    """

    curve = None
    """Curve used for the curve mapping
    (type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    influence = 0.0
    """Influence factor by which the modifier changes the property
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    invert = False
    """Invert the fade-out direction of the linear mapping
    (type: boolean, default False)
    
    :type: bool
    """

    mapping = 'LINEAR'
    """Select the mapping type
    * 'LINEAR': Linear, Use linear mapping.
    * 'CURVE': Curve, Use curve mapping.
    (type: enum in ['LINEAR', 'CURVE'], default 'LINEAR')
    
    :type: str
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    type = 'ALONG_STROKE'
    """Type of the modifier
    (type: enum in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT'], default 'ALONG_STROKE', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """


class LineStyleColorModifier_AlongStroke(LineStyleColorModifier):
    """Change line color along stroke"""

    blend = 'MIX'
    """Specify how the modifier value is blended into the base value
    (type: enum in ['MIX', 'ADD', 'MULTIPLY', 'SUBTRACT', 'SCREEN', 'DIVIDE', 'DIFFERENCE', 'DARKEN', 'LIGHTEN', 'OVERLAY', 'DODGE', 'BURN', 'HUE', 'SATURATION', 'VALUE', 'COLOR', 'SOFT_LIGHT', 'LINEAR_LIGHT'], default 'MIX')
    
    :type: str
    """

    color_ramp = None
    """Color ramp used to change line color
    (type: bpy.types.ColorRamp, (readonly))
    
    :type: ColorRamp
    """

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    influence = 0.0
    """Influence factor by which the modifier changes the property
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    type = 'ALONG_STROKE'
    """Type of the modifier
    (type: enum in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT'], default 'ALONG_STROKE', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """


class LineStyleColorModifier_CreaseAngle(LineStyleColorModifier):
    """Change line color based on the underlying crease angle"""

    angle_max = 0.0
    """Maximum angle to modify thickness
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    angle_min = 0.0
    """Minimum angle to modify thickness
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    blend = 'MIX'
    """Specify how the modifier value is blended into the base value
    (type: enum in ['MIX', 'ADD', 'MULTIPLY', 'SUBTRACT', 'SCREEN', 'DIVIDE', 'DIFFERENCE', 'DARKEN', 'LIGHTEN', 'OVERLAY', 'DODGE', 'BURN', 'HUE', 'SATURATION', 'VALUE', 'COLOR', 'SOFT_LIGHT', 'LINEAR_LIGHT'], default 'MIX')
    
    :type: str
    """

    color_ramp = None
    """Color ramp used to change line color
    (type: bpy.types.ColorRamp, (readonly))
    
    :type: ColorRamp
    """

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    influence = 0.0
    """Influence factor by which the modifier changes the property
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    type = 'ALONG_STROKE'
    """Type of the modifier
    (type: enum in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT'], default 'ALONG_STROKE', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """


class LineStyleColorModifier_Curvature_3D(LineStyleColorModifier):
    """Change line color based on the radial curvature of 3D mesh surfaces"""

    blend = 'MIX'
    """Specify how the modifier value is blended into the base value
    (type: enum in ['MIX', 'ADD', 'MULTIPLY', 'SUBTRACT', 'SCREEN', 'DIVIDE', 'DIFFERENCE', 'DARKEN', 'LIGHTEN', 'OVERLAY', 'DODGE', 'BURN', 'HUE', 'SATURATION', 'VALUE', 'COLOR', 'SOFT_LIGHT', 'LINEAR_LIGHT'], default 'MIX')
    
    :type: str
    """

    color_ramp = None
    """Color ramp used to change line color
    (type: bpy.types.ColorRamp, (readonly))
    
    :type: ColorRamp
    """

    curvature_max = 0.0
    """Maximum Curvature
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    curvature_min = 0.0
    """Minimum Curvature
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    influence = 0.0
    """Influence factor by which the modifier changes the property
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    type = 'ALONG_STROKE'
    """Type of the modifier
    (type: enum in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT'], default 'ALONG_STROKE', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """


class LineStyleColorModifier_DistanceFromCamera(LineStyleColorModifier):
    """Change line color based on the distance from the camera"""

    blend = 'MIX'
    """Specify how the modifier value is blended into the base value
    (type: enum in ['MIX', 'ADD', 'MULTIPLY', 'SUBTRACT', 'SCREEN', 'DIVIDE', 'DIFFERENCE', 'DARKEN', 'LIGHTEN', 'OVERLAY', 'DODGE', 'BURN', 'HUE', 'SATURATION', 'VALUE', 'COLOR', 'SOFT_LIGHT', 'LINEAR_LIGHT'], default 'MIX')
    
    :type: str
    """

    color_ramp = None
    """Color ramp used to change line color
    (type: bpy.types.ColorRamp, (readonly))
    
    :type: ColorRamp
    """

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    influence = 0.0
    """Influence factor by which the modifier changes the property
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    range_max = 0.0
    """Upper bound of the input range the mapping is applied
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    range_min = 0.0
    """Lower bound of the input range the mapping is applied
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    type = 'ALONG_STROKE'
    """Type of the modifier
    (type: enum in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT'], default 'ALONG_STROKE', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """


class LineStyleColorModifier_DistanceFromObject(LineStyleColorModifier):
    """Change line color based on the distance from an object"""

    blend = 'MIX'
    """Specify how the modifier value is blended into the base value
    (type: enum in ['MIX', 'ADD', 'MULTIPLY', 'SUBTRACT', 'SCREEN', 'DIVIDE', 'DIFFERENCE', 'DARKEN', 'LIGHTEN', 'OVERLAY', 'DODGE', 'BURN', 'HUE', 'SATURATION', 'VALUE', 'COLOR', 'SOFT_LIGHT', 'LINEAR_LIGHT'], default 'MIX')
    
    :type: str
    """

    color_ramp = None
    """Color ramp used to change line color
    (type: bpy.types.ColorRamp, (readonly))
    
    :type: ColorRamp
    """

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    influence = 0.0
    """Influence factor by which the modifier changes the property
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    range_max = 0.0
    """Upper bound of the input range the mapping is applied
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    range_min = 0.0
    """Lower bound of the input range the mapping is applied
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    target = None
    """Target object from which the distance is measured
    (type: bpy.types.Object)
    
    :type: Object
    """

    type = 'ALONG_STROKE'
    """Type of the modifier
    (type: enum in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT'], default 'ALONG_STROKE', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """


class LineStyleColorModifier_Material(LineStyleColorModifier):
    """Change line color based on a material attribute"""

    blend = 'MIX'
    """Specify how the modifier value is blended into the base value
    (type: enum in ['MIX', 'ADD', 'MULTIPLY', 'SUBTRACT', 'SCREEN', 'DIVIDE', 'DIFFERENCE', 'DARKEN', 'LIGHTEN', 'OVERLAY', 'DODGE', 'BURN', 'HUE', 'SATURATION', 'VALUE', 'COLOR', 'SOFT_LIGHT', 'LINEAR_LIGHT'], default 'MIX')
    
    :type: str
    """

    color_ramp = None
    """Color ramp used to change line color
    (type: bpy.types.ColorRamp, (readonly))
    
    :type: ColorRamp
    """

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    influence = 0.0
    """Influence factor by which the modifier changes the property
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    material_attribute = 'LINE'
    """Specify which material attribute is used
    (type: enum in ['LINE', 'LINE_R', 'LINE_G', 'LINE_B', 'LINE_A', 'DIFF', 'DIFF_R', 'DIFF_G', 'DIFF_B', 'SPEC', 'SPEC_R', 'SPEC_G', 'SPEC_B', 'SPEC_HARD', 'ALPHA'], default 'LINE')
    
    :type: str
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    type = 'ALONG_STROKE'
    """Type of the modifier
    (type: enum in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT'], default 'ALONG_STROKE', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """

    use_ramp = False
    """Use color ramp to map the BW average into an RGB color
    (type: boolean, default False)
    
    :type: bool
    """


class LineStyleColorModifier_Noise(LineStyleColorModifier):
    """Change line color based on random noise"""

    amplitude = 0.0
    """Amplitude of the noise
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    blend = 'MIX'
    """Specify how the modifier value is blended into the base value
    (type: enum in ['MIX', 'ADD', 'MULTIPLY', 'SUBTRACT', 'SCREEN', 'DIVIDE', 'DIFFERENCE', 'DARKEN', 'LIGHTEN', 'OVERLAY', 'DODGE', 'BURN', 'HUE', 'SATURATION', 'VALUE', 'COLOR', 'SOFT_LIGHT', 'LINEAR_LIGHT'], default 'MIX')
    
    :type: str
    """

    color_ramp = None
    """Color ramp used to change line color
    (type: bpy.types.ColorRamp, (readonly))
    
    :type: ColorRamp
    """

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    influence = 0.0
    """Influence factor by which the modifier changes the property
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    period = 0.0
    """Period of the noise
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    seed = 0
    """Seed for the noise generation
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    type = 'ALONG_STROKE'
    """Type of the modifier
    (type: enum in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT'], default 'ALONG_STROKE', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """


class LineStyleColorModifier_Tangent(LineStyleColorModifier):
    """Change line color based on the direction of a stroke"""

    blend = 'MIX'
    """Specify how the modifier value is blended into the base value
    (type: enum in ['MIX', 'ADD', 'MULTIPLY', 'SUBTRACT', 'SCREEN', 'DIVIDE', 'DIFFERENCE', 'DARKEN', 'LIGHTEN', 'OVERLAY', 'DODGE', 'BURN', 'HUE', 'SATURATION', 'VALUE', 'COLOR', 'SOFT_LIGHT', 'LINEAR_LIGHT'], default 'MIX')
    
    :type: str
    """

    color_ramp = None
    """Color ramp used to change line color
    (type: bpy.types.ColorRamp, (readonly))
    
    :type: ColorRamp
    """

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    influence = 0.0
    """Influence factor by which the modifier changes the property
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    type = 'ALONG_STROKE'
    """Type of the modifier
    (type: enum in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT'], default 'ALONG_STROKE', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """


class LineStyleGeometryModifier_2DOffset(LineStyleGeometryModifier):
    """Add two-dimensional offsets to stroke backbone geometry"""

    end = 0.0
    """Displacement that is applied from the end of the stroke
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    start = 0.0
    """Displacement that is applied from the beginning of the stroke
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    type = '2D_OFFSET'
    """Type of the modifier
    (type: enum in ['2D_OFFSET', '2D_TRANSFORM', 'BACKBONE_STRETCHER', 'BEZIER_CURVE', 'BLUEPRINT', 'GUIDING_LINES', 'PERLIN_NOISE_1D', 'PERLIN_NOISE_2D', 'POLYGONIZATION', 'SAMPLING', 'SIMPLIFICATION', 'SINUS_DISPLACEMENT', 'SPATIAL_NOISE', 'TIP_REMOVER'], default '2D_OFFSET', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """

    x = 0.0
    """Displacement that is applied to the X coordinates of stroke vertices
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    y = 0.0
    """Displacement that is applied to the Y coordinates of stroke vertices
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """


class LineStyleGeometryModifier_2DTransform(LineStyleGeometryModifier):
    """Apply two-dimensional scaling and rotation to stroke backbone geometry"""

    angle = 0.0
    """Rotation angle
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    pivot = 'CENTER'
    """Pivot of scaling and rotation operations
    (type: enum in ['CENTER', 'START', 'END', 'PARAM', 'ABSOLUTE'], default 'CENTER')
    
    :type: str
    """

    pivot_u = 0.0
    """Pivot in terms of the stroke point parameter u (0 <= u <= 1)
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    pivot_x = 0.0
    """2D X coordinate of the absolute pivot
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    pivot_y = 0.0
    """2D Y coordinate of the absolute pivot
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    scale_x = 0.0
    """Scaling factor that is applied along the X axis
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    scale_y = 0.0
    """Scaling factor that is applied along the Y axis
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    type = '2D_OFFSET'
    """Type of the modifier
    (type: enum in ['2D_OFFSET', '2D_TRANSFORM', 'BACKBONE_STRETCHER', 'BEZIER_CURVE', 'BLUEPRINT', 'GUIDING_LINES', 'PERLIN_NOISE_1D', 'PERLIN_NOISE_2D', 'POLYGONIZATION', 'SAMPLING', 'SIMPLIFICATION', 'SINUS_DISPLACEMENT', 'SPATIAL_NOISE', 'TIP_REMOVER'], default '2D_OFFSET', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """


class LineStyleGeometryModifier_BackboneStretcher(LineStyleGeometryModifier):
    """Stretch the beginning and the end of stroke backbone"""

    backbone_length = 0.0
    """Amount of backbone stretching
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    type = '2D_OFFSET'
    """Type of the modifier
    (type: enum in ['2D_OFFSET', '2D_TRANSFORM', 'BACKBONE_STRETCHER', 'BEZIER_CURVE', 'BLUEPRINT', 'GUIDING_LINES', 'PERLIN_NOISE_1D', 'PERLIN_NOISE_2D', 'POLYGONIZATION', 'SAMPLING', 'SIMPLIFICATION', 'SINUS_DISPLACEMENT', 'SPATIAL_NOISE', 'TIP_REMOVER'], default '2D_OFFSET', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """


class LineStyleGeometryModifier_BezierCurve(LineStyleGeometryModifier):
    """Replace stroke backbone geometry by a Bezier curve approximation of the original backbone geometry"""

    error = 0.0
    """Maximum distance allowed between the new Bezier curve and the original backbone geometry
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    type = '2D_OFFSET'
    """Type of the modifier
    (type: enum in ['2D_OFFSET', '2D_TRANSFORM', 'BACKBONE_STRETCHER', 'BEZIER_CURVE', 'BLUEPRINT', 'GUIDING_LINES', 'PERLIN_NOISE_1D', 'PERLIN_NOISE_2D', 'POLYGONIZATION', 'SAMPLING', 'SIMPLIFICATION', 'SINUS_DISPLACEMENT', 'SPATIAL_NOISE', 'TIP_REMOVER'], default '2D_OFFSET', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """


class LineStyleGeometryModifier_Blueprint(LineStyleGeometryModifier):
    """Produce a blueprint using circular, elliptic, and square contour strokes"""

    backbone_length = 0.0
    """Amount of backbone stretching
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    random_backbone = 0
    """Randomness of the backbone stretching
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    random_center = 0
    """Randomness of the center
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    random_radius = 0
    """Randomness of the radius
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    rounds = 0
    """Number of rounds in contour strokes
    (type: int in [1, 1000], default 0)
    
    :type: int
    """

    shape = 'CIRCLES'
    """Select the shape of blueprint contour strokes
    * 'CIRCLES': Circles, Draw a blueprint using circular contour strokes.
    * 'ELLIPSES': Ellipses, Draw a blueprint using elliptic contour strokes.
    * 'SQUARES': Squares, Draw a blueprint using square contour strokes.
    (type: enum in ['CIRCLES', 'ELLIPSES', 'SQUARES'], default 'CIRCLES')
    
    :type: str
    """

    type = '2D_OFFSET'
    """Type of the modifier
    (type: enum in ['2D_OFFSET', '2D_TRANSFORM', 'BACKBONE_STRETCHER', 'BEZIER_CURVE', 'BLUEPRINT', 'GUIDING_LINES', 'PERLIN_NOISE_1D', 'PERLIN_NOISE_2D', 'POLYGONIZATION', 'SAMPLING', 'SIMPLIFICATION', 'SINUS_DISPLACEMENT', 'SPATIAL_NOISE', 'TIP_REMOVER'], default '2D_OFFSET', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """


class LineStyleGeometryModifier_GuidingLines(LineStyleGeometryModifier):
    """Modify the stroke geometry so that it corresponds to its main direction line"""

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    offset = 0.0
    """Displacement that is applied to the main direction line along its normal
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    type = '2D_OFFSET'
    """Type of the modifier
    (type: enum in ['2D_OFFSET', '2D_TRANSFORM', 'BACKBONE_STRETCHER', 'BEZIER_CURVE', 'BLUEPRINT', 'GUIDING_LINES', 'PERLIN_NOISE_1D', 'PERLIN_NOISE_2D', 'POLYGONIZATION', 'SAMPLING', 'SIMPLIFICATION', 'SINUS_DISPLACEMENT', 'SPATIAL_NOISE', 'TIP_REMOVER'], default '2D_OFFSET', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """


class LineStyleGeometryModifier_PerlinNoise1D(LineStyleGeometryModifier):
    """Add one-dimensional Perlin noise to stroke backbone geometry"""

    amplitude = 0.0
    """Amplitude of the Perlin noise
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    angle = 0.0
    """Displacement direction
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    frequency = 0.0
    """Frequency of the Perlin noise
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    octaves = 0
    """Number of octaves (i.e., the amount of detail of the Perlin noise)
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    seed = 0
    """Seed for random number generation (if negative, time is used as a seed instead)
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    type = '2D_OFFSET'
    """Type of the modifier
    (type: enum in ['2D_OFFSET', '2D_TRANSFORM', 'BACKBONE_STRETCHER', 'BEZIER_CURVE', 'BLUEPRINT', 'GUIDING_LINES', 'PERLIN_NOISE_1D', 'PERLIN_NOISE_2D', 'POLYGONIZATION', 'SAMPLING', 'SIMPLIFICATION', 'SINUS_DISPLACEMENT', 'SPATIAL_NOISE', 'TIP_REMOVER'], default '2D_OFFSET', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """


class LineStyleGeometryModifier_PerlinNoise2D(LineStyleGeometryModifier):
    """Add two-dimensional Perlin noise to stroke backbone geometry"""

    amplitude = 0.0
    """Amplitude of the Perlin noise
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    angle = 0.0
    """Displacement direction
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    frequency = 0.0
    """Frequency of the Perlin noise
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    octaves = 0
    """Number of octaves (i.e., the amount of detail of the Perlin noise)
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    seed = 0
    """Seed for random number generation (if negative, time is used as a seed instead)
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    type = '2D_OFFSET'
    """Type of the modifier
    (type: enum in ['2D_OFFSET', '2D_TRANSFORM', 'BACKBONE_STRETCHER', 'BEZIER_CURVE', 'BLUEPRINT', 'GUIDING_LINES', 'PERLIN_NOISE_1D', 'PERLIN_NOISE_2D', 'POLYGONIZATION', 'SAMPLING', 'SIMPLIFICATION', 'SINUS_DISPLACEMENT', 'SPATIAL_NOISE', 'TIP_REMOVER'], default '2D_OFFSET', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """


class LineStyleGeometryModifier_Polygonalization(LineStyleGeometryModifier):
    """Modify the stroke geometry so that it looks more 'polygonal'"""

    error = 0.0
    """Maximum distance between the original stroke and its polygonal approximation
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    type = '2D_OFFSET'
    """Type of the modifier
    (type: enum in ['2D_OFFSET', '2D_TRANSFORM', 'BACKBONE_STRETCHER', 'BEZIER_CURVE', 'BLUEPRINT', 'GUIDING_LINES', 'PERLIN_NOISE_1D', 'PERLIN_NOISE_2D', 'POLYGONIZATION', 'SAMPLING', 'SIMPLIFICATION', 'SINUS_DISPLACEMENT', 'SPATIAL_NOISE', 'TIP_REMOVER'], default '2D_OFFSET', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """


class LineStyleGeometryModifier_Sampling(LineStyleGeometryModifier):
    """Specify a new sampling value that determines the resolution of stroke polylines"""

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    sampling = 0.0
    """New sampling value to be used for subsequent modifiers
    (type: float in [0, 10000], default 0.0)
    
    :type: float
    """

    type = '2D_OFFSET'
    """Type of the modifier
    (type: enum in ['2D_OFFSET', '2D_TRANSFORM', 'BACKBONE_STRETCHER', 'BEZIER_CURVE', 'BLUEPRINT', 'GUIDING_LINES', 'PERLIN_NOISE_1D', 'PERLIN_NOISE_2D', 'POLYGONIZATION', 'SAMPLING', 'SIMPLIFICATION', 'SINUS_DISPLACEMENT', 'SPATIAL_NOISE', 'TIP_REMOVER'], default '2D_OFFSET', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """


class LineStyleGeometryModifier_Simplification(LineStyleGeometryModifier):
    """Simplify the stroke set"""

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    tolerance = 0.0
    """Distance below which segments will be merged
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    type = '2D_OFFSET'
    """Type of the modifier
    (type: enum in ['2D_OFFSET', '2D_TRANSFORM', 'BACKBONE_STRETCHER', 'BEZIER_CURVE', 'BLUEPRINT', 'GUIDING_LINES', 'PERLIN_NOISE_1D', 'PERLIN_NOISE_2D', 'POLYGONIZATION', 'SAMPLING', 'SIMPLIFICATION', 'SINUS_DISPLACEMENT', 'SPATIAL_NOISE', 'TIP_REMOVER'], default '2D_OFFSET', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """


class LineStyleGeometryModifier_SinusDisplacement(LineStyleGeometryModifier):
    """Add sinus displacement to stroke backbone geometry"""

    amplitude = 0.0
    """Amplitude of the sinus displacement
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    phase = 0.0
    """Phase of the sinus displacement
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    type = '2D_OFFSET'
    """Type of the modifier
    (type: enum in ['2D_OFFSET', '2D_TRANSFORM', 'BACKBONE_STRETCHER', 'BEZIER_CURVE', 'BLUEPRINT', 'GUIDING_LINES', 'PERLIN_NOISE_1D', 'PERLIN_NOISE_2D', 'POLYGONIZATION', 'SAMPLING', 'SIMPLIFICATION', 'SINUS_DISPLACEMENT', 'SPATIAL_NOISE', 'TIP_REMOVER'], default '2D_OFFSET', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """

    wavelength = 0.0
    """Wavelength of the sinus displacement
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """


class LineStyleGeometryModifier_SpatialNoise(LineStyleGeometryModifier):
    """Add spatial noise to stroke backbone geometry"""

    amplitude = 0.0
    """Amplitude of the spatial noise
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    octaves = 0
    """Number of octaves (i.e., the amount of detail of the spatial noise)
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    scale = 0.0
    """Scale of the spatial noise
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    smooth = False
    """If true, the spatial noise is smooth
    (type: boolean, default False)
    
    :type: bool
    """

    type = '2D_OFFSET'
    """Type of the modifier
    (type: enum in ['2D_OFFSET', '2D_TRANSFORM', 'BACKBONE_STRETCHER', 'BEZIER_CURVE', 'BLUEPRINT', 'GUIDING_LINES', 'PERLIN_NOISE_1D', 'PERLIN_NOISE_2D', 'POLYGONIZATION', 'SAMPLING', 'SIMPLIFICATION', 'SINUS_DISPLACEMENT', 'SPATIAL_NOISE', 'TIP_REMOVER'], default '2D_OFFSET', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """

    use_pure_random = False
    """If true, the spatial noise does not show any coherence
    (type: boolean, default False)
    
    :type: bool
    """


class LineStyleGeometryModifier_TipRemover(LineStyleGeometryModifier):
    """Remove a piece of stroke at the beginning and the end of stroke backbone"""

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    tip_length = 0.0
    """Length of tips to be removed
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    type = '2D_OFFSET'
    """Type of the modifier
    (type: enum in ['2D_OFFSET', '2D_TRANSFORM', 'BACKBONE_STRETCHER', 'BEZIER_CURVE', 'BLUEPRINT', 'GUIDING_LINES', 'PERLIN_NOISE_1D', 'PERLIN_NOISE_2D', 'POLYGONIZATION', 'SAMPLING', 'SIMPLIFICATION', 'SINUS_DISPLACEMENT', 'SPATIAL_NOISE', 'TIP_REMOVER'], default '2D_OFFSET', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """


class LineStyleThicknessModifier_AlongStroke(LineStyleThicknessModifier):
    """Change line thickness along stroke"""

    blend = 'MIX'
    """Specify how the modifier value is blended into the base value
    (type: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'DIFFERENCE', 'MININUM', 'MAXIMUM'], default 'MIX')
    
    :type: str
    """

    curve = None
    """Curve used for the curve mapping
    (type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    influence = 0.0
    """Influence factor by which the modifier changes the property
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    invert = False
    """Invert the fade-out direction of the linear mapping
    (type: boolean, default False)
    
    :type: bool
    """

    mapping = 'LINEAR'
    """Select the mapping type
    * 'LINEAR': Linear, Use linear mapping.
    * 'CURVE': Curve, Use curve mapping.
    (type: enum in ['LINEAR', 'CURVE'], default 'LINEAR')
    
    :type: str
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    type = 'ALONG_STROKE'
    """Type of the modifier
    (type: enum in ['ALONG_STROKE', 'CALLIGRAPHY', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT'], default 'ALONG_STROKE', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """

    value_max = 0.0
    """Maximum output value of the mapping
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    value_min = 0.0
    """Minimum output value of the mapping
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """


class LineStyleThicknessModifier_Calligraphy(LineStyleThicknessModifier):
    """Change line thickness so that stroke looks like made with a calligraphic pen"""

    blend = 'MIX'
    """Specify how the modifier value is blended into the base value
    (type: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'DIFFERENCE', 'MININUM', 'MAXIMUM'], default 'MIX')
    
    :type: str
    """

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    influence = 0.0
    """Influence factor by which the modifier changes the property
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    orientation = 0.0
    """Angle of the main direction
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    thickness_max = 0.0
    """Maximum thickness in the main direction
    (type: float in [0, 10000], default 0.0)
    
    :type: float
    """

    thickness_min = 0.0
    """Minimum thickness in the direction perpendicular to the main direction
    (type: float in [0, 10000], default 0.0)
    
    :type: float
    """

    type = 'ALONG_STROKE'
    """Type of the modifier
    (type: enum in ['ALONG_STROKE', 'CALLIGRAPHY', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT'], default 'ALONG_STROKE', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """


class LineStyleThicknessModifier_CreaseAngle(LineStyleThicknessModifier):
    """Line thickness based on the angle between two adjacent faces"""

    angle_max = 0.0
    """Maximum angle to modify thickness
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    angle_min = 0.0
    """Minimum angle to modify thickness
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    blend = 'MIX'
    """Specify how the modifier value is blended into the base value
    (type: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'DIFFERENCE', 'MININUM', 'MAXIMUM'], default 'MIX')
    
    :type: str
    """

    curve = None
    """Curve used for the curve mapping
    (type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    influence = 0.0
    """Influence factor by which the modifier changes the property
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    invert = False
    """Invert the fade-out direction of the linear mapping
    (type: boolean, default False)
    
    :type: bool
    """

    mapping = 'LINEAR'
    """Select the mapping type
    * 'LINEAR': Linear, Use linear mapping.
    * 'CURVE': Curve, Use curve mapping.
    (type: enum in ['LINEAR', 'CURVE'], default 'LINEAR')
    
    :type: str
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    thickness_max = 0.0
    """Maximum thickness
    (type: float in [0, 10000], default 0.0)
    
    :type: float
    """

    thickness_min = 0.0
    """Minimum thickness
    (type: float in [0, 10000], default 0.0)
    
    :type: float
    """

    type = 'ALONG_STROKE'
    """Type of the modifier
    (type: enum in ['ALONG_STROKE', 'CALLIGRAPHY', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT'], default 'ALONG_STROKE', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """


class LineStyleThicknessModifier_Curvature_3D(LineStyleThicknessModifier):
    """Line thickness based on the radial curvature of 3D mesh surfaces"""

    blend = 'MIX'
    """Specify how the modifier value is blended into the base value
    (type: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'DIFFERENCE', 'MININUM', 'MAXIMUM'], default 'MIX')
    
    :type: str
    """

    curvature_max = 0.0
    """Maximum Curvature
    (type: float in [0, 10000], default 0.0)
    
    :type: float
    """

    curvature_min = 0.0
    """Minimum Curvature
    (type: float in [0, 10000], default 0.0)
    
    :type: float
    """

    curve = None
    """Curve used for the curve mapping
    (type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    influence = 0.0
    """Influence factor by which the modifier changes the property
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    invert = False
    """Invert the fade-out direction of the linear mapping
    (type: boolean, default False)
    
    :type: bool
    """

    mapping = 'LINEAR'
    """Select the mapping type
    * 'LINEAR': Linear, Use linear mapping.
    * 'CURVE': Curve, Use curve mapping.
    (type: enum in ['LINEAR', 'CURVE'], default 'LINEAR')
    
    :type: str
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    thickness_max = 0.0
    """Maximum thickness
    (type: float in [0, 10000], default 0.0)
    
    :type: float
    """

    thickness_min = 0.0
    """Minimum thickness
    (type: float in [0, 10000], default 0.0)
    
    :type: float
    """

    type = 'ALONG_STROKE'
    """Type of the modifier
    (type: enum in ['ALONG_STROKE', 'CALLIGRAPHY', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT'], default 'ALONG_STROKE', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """


class LineStyleThicknessModifier_DistanceFromCamera(LineStyleThicknessModifier):
    """Change line thickness based on the distance from the camera"""

    blend = 'MIX'
    """Specify how the modifier value is blended into the base value
    (type: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'DIFFERENCE', 'MININUM', 'MAXIMUM'], default 'MIX')
    
    :type: str
    """

    curve = None
    """Curve used for the curve mapping
    (type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    influence = 0.0
    """Influence factor by which the modifier changes the property
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    invert = False
    """Invert the fade-out direction of the linear mapping
    (type: boolean, default False)
    
    :type: bool
    """

    mapping = 'LINEAR'
    """Select the mapping type
    * 'LINEAR': Linear, Use linear mapping.
    * 'CURVE': Curve, Use curve mapping.
    (type: enum in ['LINEAR', 'CURVE'], default 'LINEAR')
    
    :type: str
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    range_max = 0.0
    """Upper bound of the input range the mapping is applied
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    range_min = 0.0
    """Lower bound of the input range the mapping is applied
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    type = 'ALONG_STROKE'
    """Type of the modifier
    (type: enum in ['ALONG_STROKE', 'CALLIGRAPHY', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT'], default 'ALONG_STROKE', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """

    value_max = 0.0
    """Maximum output value of the mapping
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    value_min = 0.0
    """Minimum output value of the mapping
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """


class LineStyleThicknessModifier_DistanceFromObject(LineStyleThicknessModifier):
    """Change line thickness based on the distance from an object"""

    blend = 'MIX'
    """Specify how the modifier value is blended into the base value
    (type: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'DIFFERENCE', 'MININUM', 'MAXIMUM'], default 'MIX')
    
    :type: str
    """

    curve = None
    """Curve used for the curve mapping
    (type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    influence = 0.0
    """Influence factor by which the modifier changes the property
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    invert = False
    """Invert the fade-out direction of the linear mapping
    (type: boolean, default False)
    
    :type: bool
    """

    mapping = 'LINEAR'
    """Select the mapping type
    * 'LINEAR': Linear, Use linear mapping.
    * 'CURVE': Curve, Use curve mapping.
    (type: enum in ['LINEAR', 'CURVE'], default 'LINEAR')
    
    :type: str
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    range_max = 0.0
    """Upper bound of the input range the mapping is applied
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    range_min = 0.0
    """Lower bound of the input range the mapping is applied
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    target = None
    """Target object from which the distance is measured
    (type: bpy.types.Object)
    
    :type: Object
    """

    type = 'ALONG_STROKE'
    """Type of the modifier
    (type: enum in ['ALONG_STROKE', 'CALLIGRAPHY', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT'], default 'ALONG_STROKE', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """

    value_max = 0.0
    """Maximum output value of the mapping
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    value_min = 0.0
    """Minimum output value of the mapping
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """


class LineStyleThicknessModifier_Material(LineStyleThicknessModifier):
    """Change line thickness based on a material attribute"""

    blend = 'MIX'
    """Specify how the modifier value is blended into the base value
    (type: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'DIFFERENCE', 'MININUM', 'MAXIMUM'], default 'MIX')
    
    :type: str
    """

    curve = None
    """Curve used for the curve mapping
    (type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    influence = 0.0
    """Influence factor by which the modifier changes the property
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    invert = False
    """Invert the fade-out direction of the linear mapping
    (type: boolean, default False)
    
    :type: bool
    """

    mapping = 'LINEAR'
    """Select the mapping type
    * 'LINEAR': Linear, Use linear mapping.
    * 'CURVE': Curve, Use curve mapping.
    (type: enum in ['LINEAR', 'CURVE'], default 'LINEAR')
    
    :type: str
    """

    material_attribute = 'LINE'
    """Specify which material attribute is used
    (type: enum in ['LINE', 'LINE_R', 'LINE_G', 'LINE_B', 'LINE_A', 'DIFF', 'DIFF_R', 'DIFF_G', 'DIFF_B', 'SPEC', 'SPEC_R', 'SPEC_G', 'SPEC_B', 'SPEC_HARD', 'ALPHA'], default 'LINE')
    
    :type: str
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    type = 'ALONG_STROKE'
    """Type of the modifier
    (type: enum in ['ALONG_STROKE', 'CALLIGRAPHY', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT'], default 'ALONG_STROKE', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """

    value_max = 0.0
    """Maximum output value of the mapping
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    value_min = 0.0
    """Minimum output value of the mapping
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """


class LineStyleThicknessModifier_Noise(LineStyleThicknessModifier):
    """Line thickness based on random noise"""

    amplitude = 0.0
    """Amplitude of the noise
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    blend = 'MIX'
    """Specify how the modifier value is blended into the base value
    (type: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'DIFFERENCE', 'MININUM', 'MAXIMUM'], default 'MIX')
    
    :type: str
    """

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    influence = 0.0
    """Influence factor by which the modifier changes the property
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    period = 0.0
    """Period of the noise
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    seed = 0
    """Seed for the noise generation
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    type = 'ALONG_STROKE'
    """Type of the modifier
    (type: enum in ['ALONG_STROKE', 'CALLIGRAPHY', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT'], default 'ALONG_STROKE', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """

    use_asymmetric = False
    """Allow thickness to be assigned asymmetrically
    (type: boolean, default False)
    
    :type: bool
    """


class LineStyleThicknessModifier_Tangent(LineStyleThicknessModifier):
    """Thickness based on the direction of the stroke"""

    blend = 'MIX'
    """Specify how the modifier value is blended into the base value
    (type: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'DIFFERENCE', 'MININUM', 'MAXIMUM'], default 'MIX')
    
    :type: str
    """

    curve = None
    """Curve used for the curve mapping
    (type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    expanded = False
    """True if the modifier tab is expanded
    (type: boolean, default False)
    
    :type: bool
    """

    influence = 0.0
    """Influence factor by which the modifier changes the property
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    invert = False
    """Invert the fade-out direction of the linear mapping
    (type: boolean, default False)
    
    :type: bool
    """

    mapping = 'LINEAR'
    """Select the mapping type
    * 'LINEAR': Linear, Use linear mapping.
    * 'CURVE': Curve, Use curve mapping.
    (type: enum in ['LINEAR', 'CURVE'], default 'LINEAR')
    
    :type: str
    """

    name = ""
    """Name of the modifier
    (type: string, default "", (never None))
    
    :type: str
    """

    thickness_max = 0.0
    """Maximum thickness
    (type: float in [0, 10000], default 0.0)
    
    :type: float
    """

    thickness_min = 0.0
    """Minimum thickness
    (type: float in [0, 10000], default 0.0)
    
    :type: float
    """

    type = 'ALONG_STROKE'
    """Type of the modifier
    (type: enum in ['ALONG_STROKE', 'CALLIGRAPHY', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT'], default 'ALONG_STROKE', (readonly))
    
    :type: str
    """

    use = False
    """Enable or disable this modifier during stroke rendering
    (type: boolean, default False)
    
    :type: bool
    """


class MagicTexture(Texture):
    """Procedural noise texture"""

    noise_depth = 0
    """Depth of the noise
    (type: int in [0, 30], default 0)
    
    :type: int
    """

    turbulence = 0.0
    """Turbulence of the noise
    (type: float in [0.0001, inf], default 0.0)
    
    :type: float
    """

    users_material = None
    """Materials that use this texture
                                (readonly)
    """

    users_object_modifier = None
    """Object modifiers that use this texture
                                (readonly)
    """


class MarbleTexture(Texture):
    """Procedural noise texture"""

    marble_type = 'SOFT'
    """
    * 'SOFT': Soft, Use soft marble.
    * 'SHARP': Sharp, Use more clearly defined marble.
    * 'SHARPER': Sharper, Use very clearly defined marble.
    (type: enum in ['SOFT', 'SHARP', 'SHARPER'], default 'SOFT')
    
    :type: str
    """

    nabla = 0.0
    """Size of derivative offset used for calculating normal
    (type: float in [0.001, 0.1], default 0.0)
    
    :type: float
    """

    noise_basis = 'BLENDER_ORIGINAL'
    """Noise basis used for turbulence
    * 'BLENDER_ORIGINAL': Blender Original, Noise algorithm - Blender original: Smooth interpolated noise.
    * 'ORIGINAL_PERLIN': Original Perlin, Noise algorithm - Original Perlin: Smooth interpolated noise.
    * 'IMPROVED_PERLIN': Improved Perlin, Noise algorithm - Improved Perlin: Smooth interpolated noise.
    * 'VORONOI_F1': Voronoi F1, Noise algorithm - Voronoi F1: Returns distance to the closest feature point.
    * 'VORONOI_F2': Voronoi F2, Noise algorithm - Voronoi F2: Returns distance to the 2nd closest feature point.
    * 'VORONOI_F3': Voronoi F3, Noise algorithm - Voronoi F3: Returns distance to the 3rd closest feature point.
    * 'VORONOI_F4': Voronoi F4, Noise algorithm - Voronoi F4: Returns distance to the 4th closest feature point.
    * 'VORONOI_F2_F1': Voronoi F2-F1, Noise algorithm - Voronoi F1-F2.
    * 'VORONOI_CRACKLE': Voronoi Crackle, Noise algorithm - Voronoi Crackle: Voronoi tessellation with sharp edges.
    * 'CELL_NOISE': Cell Noise, Noise algorithm - Cell Noise: Square cell tessellation.
    (type: enum in ['BLENDER_ORIGINAL', 'ORIGINAL_PERLIN', 'IMPROVED_PERLIN', 'VORONOI_F1', 'VORONOI_F2', 'VORONOI_F3', 'VORONOI_F4', 'VORONOI_F2_F1', 'VORONOI_CRACKLE', 'CELL_NOISE'], default 'BLENDER_ORIGINAL')
    
    :type: str
    """

    noise_basis_2 = 'SIN'
    """
    * 'SIN': Sin, Use a sine wave to produce bands.
    * 'SAW': Saw, Use a saw wave to produce bands.
    * 'TRI': Tri, Use a triangle wave to produce bands.
    (type: enum in ['SIN', 'SAW', 'TRI'], default 'SIN')
    
    :type: str
    """

    noise_depth = 0
    """Depth of the cloud calculation
    (type: int in [0, 30], default 0)
    
    :type: int
    """

    noise_scale = 0.0
    """Scaling for noise input
    (type: float in [0.0001, inf], default 0.0)
    
    :type: float
    """

    noise_type = 'SOFT_NOISE'
    """
    * 'SOFT_NOISE': Soft, Generate soft noise (smooth transitions).
    * 'HARD_NOISE': Hard, Generate hard noise (sharp transitions).
    (type: enum in ['SOFT_NOISE', 'HARD_NOISE'], default 'SOFT_NOISE')
    
    :type: str
    """

    turbulence = 0.0
    """Turbulence of the bandnoise and ringnoise types
    (type: float in [0.0001, inf], default 0.0)
    
    :type: float
    """

    users_material = None
    """Materials that use this texture
                                (readonly)
    """

    users_object_modifier = None
    """Object modifiers that use this texture
                                (readonly)
    """


class MulticamSequence(EffectSequence):
    """Sequence strip to perform multicam editing"""

    animation_offset_end = 0
    """Animation end offset (trim end)
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    animation_offset_start = 0
    """Animation start offset (trim start)
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    input_count = 0
    """(type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """

    multicam_source = 0
    """(type: int in [0, 31], default 0)
    
    :type: int
    """


class MultiplySequence(EffectSequence):
    """Multiply Sequence"""

    input_1 = None
    """First input for the effect strip
    (type: bpy.types.Sequence, (never None))
    
    :type: Sequence
    """

    input_2 = None
    """Second input for the effect strip
    (type: bpy.types.Sequence, (never None))
    
    :type: Sequence
    """

    input_count = 0
    """(type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """


class MusgraveTexture(Texture):
    """Procedural musgrave texture"""

    dimension_max = 0.0
    """Highest fractal dimension
    (type: float in [0.0001, 2], default 0.0)
    
    :type: float
    """

    gain = 0.0
    """The gain multiplier
    (type: float in [0, 6], default 0.0)
    
    :type: float
    """

    lacunarity = 0.0
    """Gap between successive frequencies
    (type: float in [0, 6], default 0.0)
    
    :type: float
    """

    musgrave_type = 'MULTIFRACTAL'
    """Fractal noise algorithm
    * 'MULTIFRACTAL': Multifractal, Use Perlin noise as a basis.
    * 'RIDGED_MULTIFRACTAL': Ridged Multifractal, Use Perlin noise with inflection as a basis.
    * 'HYBRID_MULTIFRACTAL': Hybrid Multifractal, Use Perlin noise as a basis, with extended controls.
    * 'FBM': fBM, Fractal Brownian Motion, use Brownian noise as a basis.
    * 'HETERO_TERRAIN': Hetero Terrain, Similar to multifractal.
    (type: enum in ['MULTIFRACTAL', 'RIDGED_MULTIFRACTAL', 'HYBRID_MULTIFRACTAL', 'FBM', 'HETERO_TERRAIN'], default 'MULTIFRACTAL')
    
    :type: str
    """

    nabla = 0.0
    """Size of derivative offset used for calculating normal
    (type: float in [0.001, 0.1], default 0.0)
    
    :type: float
    """

    noise_basis = 'BLENDER_ORIGINAL'
    """Noise basis used for turbulence
    * 'BLENDER_ORIGINAL': Blender Original, Noise algorithm - Blender original: Smooth interpolated noise.
    * 'ORIGINAL_PERLIN': Original Perlin, Noise algorithm - Original Perlin: Smooth interpolated noise.
    * 'IMPROVED_PERLIN': Improved Perlin, Noise algorithm - Improved Perlin: Smooth interpolated noise.
    * 'VORONOI_F1': Voronoi F1, Noise algorithm - Voronoi F1: Returns distance to the closest feature point.
    * 'VORONOI_F2': Voronoi F2, Noise algorithm - Voronoi F2: Returns distance to the 2nd closest feature point.
    * 'VORONOI_F3': Voronoi F3, Noise algorithm - Voronoi F3: Returns distance to the 3rd closest feature point.
    * 'VORONOI_F4': Voronoi F4, Noise algorithm - Voronoi F4: Returns distance to the 4th closest feature point.
    * 'VORONOI_F2_F1': Voronoi F2-F1, Noise algorithm - Voronoi F1-F2.
    * 'VORONOI_CRACKLE': Voronoi Crackle, Noise algorithm - Voronoi Crackle: Voronoi tessellation with sharp edges.
    * 'CELL_NOISE': Cell Noise, Noise algorithm - Cell Noise: Square cell tessellation.
    (type: enum in ['BLENDER_ORIGINAL', 'ORIGINAL_PERLIN', 'IMPROVED_PERLIN', 'VORONOI_F1', 'VORONOI_F2', 'VORONOI_F3', 'VORONOI_F4', 'VORONOI_F2_F1', 'VORONOI_CRACKLE', 'CELL_NOISE'], default 'BLENDER_ORIGINAL')
    
    :type: str
    """

    noise_intensity = 0.0
    """Intensity of the noise
    (type: float in [0, 10], default 0.0)
    
    :type: float
    """

    noise_scale = 0.0
    """Scaling for noise input
    (type: float in [0.0001, inf], default 0.0)
    
    :type: float
    """

    octaves = 0.0
    """Number of frequencies used
    (type: float in [0, 8], default 0.0)
    
    :type: float
    """

    offset = 0.0
    """The fractal offset
    (type: float in [0, 6], default 0.0)
    
    :type: float
    """

    users_material = None
    """Materials that use this texture
                                (readonly)
    """

    users_object_modifier = None
    """Object modifiers that use this texture
                                (readonly)
    """


class NodeFrame(NodeInternal):
    """"""

    label_size = 0
    """Font size to use for displaying the label
    (type: int in [8, 64], default 0)
    
    :type: int
    """

    shrink = False
    """Shrink the frame to minimal bounding box
    (type: boolean, default False)
    
    :type: bool
    """

    text = None
    """(type: bpy.types.Text)
    
    :type: Text
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class NodeGroup(NodeInternal):
    """"""

    interface = None
    """Interface socket data
    (type: bpy.types.PropertyGroup, (readonly))
    
    :type: PropertyGroup
    """

    node_tree = None
    """(type: bpy.types.NodeTree)
    
    :type: NodeTree
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class NodeGroupInput(NodeInternal):
    """"""

    interface = None
    """Interface socket data
    (type: bpy.types.PropertyGroup, (readonly))
    
    :type: PropertyGroup
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class NodeGroupOutput(NodeInternal):
    """"""

    interface = None
    """Interface socket data
    (type: bpy.types.PropertyGroup, (readonly))
    
    :type: PropertyGroup
    """

    is_active_output = False
    """True if this node is used as the active group output
    (type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class NodeReroute(NodeInternal):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class NodeSocketBool(NodeSocketStandard):
    """Boolean value socket of a node"""

    default_value = False
    """Input value used for unconnected socket
    (type: boolean, default False)
    
    :type: bool
    """

    links = None
    """List of node links from or to this socket
                                (readonly)
    """


class NodeSocketColor(NodeSocketStandard):
    """RGBA color socket of a node"""

    default_value = (0.0, 0.0, 0.0, 0.0)
    """Input value used for unconnected socket
    (type: float array of 4 items in [0, inf], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    links = None
    """List of node links from or to this socket
                                (readonly)
    """


class NodeSocketFloat(NodeSocketStandard):
    """Floating point number socket of a node"""

    default_value = 0.0
    """Input value used for unconnected socket
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    links = None
    """List of node links from or to this socket
                                (readonly)
    """


class NodeSocketFloatAngle(NodeSocketStandard):
    """Floating point number socket of a node"""

    default_value = 0.0
    """Input value used for unconnected socket
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    links = None
    """List of node links from or to this socket
                                (readonly)
    """


class NodeSocketFloatFactor(NodeSocketStandard):
    """Floating point number socket of a node"""

    default_value = 0.0
    """Input value used for unconnected socket
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    links = None
    """List of node links from or to this socket
                                (readonly)
    """


class NodeSocketFloatPercentage(NodeSocketStandard):
    """Floating point number socket of a node"""

    default_value = 0.0
    """Input value used for unconnected socket
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    links = None
    """List of node links from or to this socket
                                (readonly)
    """


class NodeSocketFloatTime(NodeSocketStandard):
    """Floating point number socket of a node"""

    default_value = 0.0
    """Input value used for unconnected socket
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    links = None
    """List of node links from or to this socket
                                (readonly)
    """


class NodeSocketFloatUnsigned(NodeSocketStandard):
    """Floating point number socket of a node"""

    default_value = 0.0
    """Input value used for unconnected socket
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    links = None
    """List of node links from or to this socket
                                (readonly)
    """


class NodeSocketInt(NodeSocketStandard):
    """Integer number socket of a node"""

    default_value = 0
    """Input value used for unconnected socket
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    links = None
    """List of node links from or to this socket
                                (readonly)
    """


class NodeSocketIntFactor(NodeSocketStandard):
    """Integer number socket of a node"""

    default_value = 1
    """Input value used for unconnected socket
    (type: int in [0, inf], default 1)
    
    :type: int
    """

    links = None
    """List of node links from or to this socket
                                (readonly)
    """


class NodeSocketIntPercentage(NodeSocketStandard):
    """Integer number socket of a node"""

    default_value = 100
    """Input value used for unconnected socket
    (type: int in [0, inf], default 100)
    
    :type: int
    """

    links = None
    """List of node links from or to this socket
                                (readonly)
    """


class NodeSocketIntUnsigned(NodeSocketStandard):
    """Integer number socket of a node"""

    default_value = 0
    """Input value used for unconnected socket
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    links = None
    """List of node links from or to this socket
                                (readonly)
    """


class NodeSocketInterfaceBool(NodeSocketInterfaceStandard):
    """Boolean value socket of a node"""

    default_value = False
    """Input value used for unconnected socket
    (type: boolean, default False)
    
    :type: bool
    """


class NodeSocketInterfaceColor(NodeSocketInterfaceStandard):
    """RGBA color socket of a node"""

    default_value = (0.0, 0.0, 0.0, 0.0)
    """Input value used for unconnected socket
    (type: float array of 4 items in [0, inf], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """


class NodeSocketInterfaceFloat(NodeSocketInterfaceStandard):
    """Floating point number socket of a node"""

    default_value = 0.0
    """Input value used for unconnected socket
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    max_value = 0.0
    """Maximum value
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    min_value = 0.0
    """Minimum value
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """


class NodeSocketInterfaceFloatAngle(NodeSocketInterfaceStandard):
    """Floating point number socket of a node"""

    default_value = 0.0
    """Input value used for unconnected socket
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    max_value = 0.0
    """Maximum value
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    min_value = 0.0
    """Minimum value
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """


class NodeSocketInterfaceFloatFactor(NodeSocketInterfaceStandard):
    """Floating point number socket of a node"""

    default_value = 1.0
    """Input value used for unconnected socket
    (type: float in [0, 1], default 1.0)
    
    :type: float
    """

    max_value = 0.0
    """Maximum value
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    min_value = 0.0
    """Minimum value
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """


class NodeSocketInterfaceFloatPercentage(NodeSocketInterfaceStandard):
    """Floating point number socket of a node"""

    default_value = 100.0
    """Input value used for unconnected socket
    (type: float in [-inf, inf], default 100.0)
    
    :type: float
    """

    max_value = 0.0
    """Maximum value
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    min_value = 0.0
    """Minimum value
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """


class NodeSocketInterfaceFloatTime(NodeSocketInterfaceStandard):
    """Floating point number socket of a node"""

    default_value = 0.0
    """Input value used for unconnected socket
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    max_value = 0.0
    """Maximum value
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    min_value = 0.0
    """Minimum value
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """


class NodeSocketInterfaceFloatUnsigned(NodeSocketInterfaceStandard):
    """Floating point number socket of a node"""

    default_value = 0.0
    """Input value used for unconnected socket
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    max_value = 0.0
    """Maximum value
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    min_value = 0.0
    """Minimum value
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """


class NodeSocketInterfaceInt(NodeSocketInterfaceStandard):
    """Integer number socket of a node"""

    default_value = 0
    """Input value used for unconnected socket
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    max_value = 0
    """Maximum value
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    min_value = 0
    """Minimum value
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """


class NodeSocketInterfaceIntFactor(NodeSocketInterfaceStandard):
    """Integer number socket of a node"""

    default_value = 0
    """Input value used for unconnected socket
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    max_value = 0
    """Maximum value
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    min_value = 0
    """Minimum value
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """


class NodeSocketInterfaceIntPercentage(NodeSocketInterfaceStandard):
    """Integer number socket of a node"""

    default_value = 0
    """Input value used for unconnected socket
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    max_value = 0
    """Maximum value
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    min_value = 0
    """Minimum value
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """


class NodeSocketInterfaceIntUnsigned(NodeSocketInterfaceStandard):
    """Integer number socket of a node"""

    default_value = 0
    """Input value used for unconnected socket
    (type: int in [0, inf], default 0)
    
    :type: int
    """

    max_value = 0
    """Maximum value
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    min_value = 0
    """Minimum value
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """


class NodeSocketInterfaceShader(NodeSocketInterfaceStandard):
    """Shader socket of a node"""


class NodeSocketInterfaceString(NodeSocketInterfaceStandard):
    """String socket of a node"""

    default_value = ""
    """Input value used for unconnected socket
    (type: string, default "", (never None))
    
    :type: str
    """


class NodeSocketInterfaceVector(NodeSocketInterfaceStandard):
    """3D vector socket of a node"""

    default_value = (0.0, 0.0, 0.0)
    """Input value used for unconnected socket
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    max_value = 0.0
    """Maximum value
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    min_value = 0.0
    """Minimum value
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """


class NodeSocketInterfaceVectorAcceleration(NodeSocketInterfaceStandard):
    """3D vector socket of a node"""

    default_value = (0.0, 0.0, 0.0)
    """Input value used for unconnected socket
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    max_value = 0.0
    """Maximum value
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    min_value = 0.0
    """Minimum value
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """


class NodeSocketInterfaceVectorDirection(NodeSocketInterfaceStandard):
    """3D vector socket of a node"""

    default_value = (0.0, 0.0, 0.0)
    """Input value used for unconnected socket
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    max_value = 0.0
    """Maximum value
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    min_value = 0.0
    """Minimum value
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """


class NodeSocketInterfaceVectorEuler(NodeSocketInterfaceStandard):
    """3D vector socket of a node"""

    default_value = (0.0, 0.0, 0.0)
    """Input value used for unconnected socket
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Euler
    """

    max_value = 0.0
    """Maximum value
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    min_value = 0.0
    """Minimum value
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """


class NodeSocketInterfaceVectorTranslation(NodeSocketInterfaceStandard):
    """3D vector socket of a node"""

    default_value = (0.0, 0.0, 0.0)
    """Input value used for unconnected socket
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    max_value = 0.0
    """Maximum value
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    min_value = 0.0
    """Minimum value
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """


class NodeSocketInterfaceVectorVelocity(NodeSocketInterfaceStandard):
    """3D vector socket of a node"""

    default_value = (0.0, 0.0, 0.0)
    """Input value used for unconnected socket
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    max_value = 0.0
    """Maximum value
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    min_value = 0.0
    """Minimum value
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """


class NodeSocketInterfaceVectorXYZ(NodeSocketInterfaceStandard):
    """3D vector socket of a node"""

    default_value = (0.0, 0.0, 0.0)
    """Input value used for unconnected socket
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    max_value = 0.0
    """Maximum value
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    min_value = 0.0
    """Minimum value
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """


class NodeSocketShader(NodeSocketStandard):
    """Shader socket of a node"""

    links = None
    """List of node links from or to this socket
                                (readonly)
    """


class NodeSocketString(NodeSocketStandard):
    """String socket of a node"""

    default_value = ""
    """Input value used for unconnected socket
    (type: string, default "", (never None))
    
    :type: str
    """

    links = None
    """List of node links from or to this socket
                                (readonly)
    """


class NodeSocketVector(NodeSocketStandard):
    """3D vector socket of a node"""

    default_value = (0.0, 0.0, 0.0)
    """Input value used for unconnected socket
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    links = None
    """List of node links from or to this socket
                                (readonly)
    """


class NodeSocketVectorAcceleration(NodeSocketStandard):
    """3D vector socket of a node"""

    default_value = (0.0, 0.0, 0.0)
    """Input value used for unconnected socket
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    links = None
    """List of node links from or to this socket
                                (readonly)
    """


class NodeSocketVectorDirection(NodeSocketStandard):
    """3D vector socket of a node"""

    default_value = (0.0, 0.0, 1.0)
    """Input value used for unconnected socket
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 1.0))
    
    :type: mathutils.Vector
    """

    links = None
    """List of node links from or to this socket
                                (readonly)
    """


class NodeSocketVectorEuler(NodeSocketStandard):
    """3D vector socket of a node"""

    default_value = (0.0, 0.0, 0.0)
    """Input value used for unconnected socket
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Euler
    """

    links = None
    """List of node links from or to this socket
                                (readonly)
    """


class NodeSocketVectorTranslation(NodeSocketStandard):
    """3D vector socket of a node"""

    default_value = (0.0, 0.0, 0.0)
    """Input value used for unconnected socket
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    links = None
    """List of node links from or to this socket
                                (readonly)
    """


class NodeSocketVectorVelocity(NodeSocketStandard):
    """3D vector socket of a node"""

    default_value = (0.0, 0.0, 0.0)
    """Input value used for unconnected socket
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    links = None
    """List of node links from or to this socket
                                (readonly)
    """


class NodeSocketVectorXYZ(NodeSocketStandard):
    """3D vector socket of a node"""

    default_value = (0.0, 0.0, 0.0)
    """Input value used for unconnected socket
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    links = None
    """List of node links from or to this socket
                                (readonly)
    """


class NodeSocketVirtual(NodeSocketStandard):
    """Virtual socket of a node"""

    links = None
    """List of node links from or to this socket
                                (readonly)
    """


class NoiseTexture(Texture):
    """Procedural noise texture"""

    users_material = None
    """Materials that use this texture
                                (readonly)
    """

    users_object_modifier = None
    """Object modifiers that use this texture
                                (readonly)
    """


class OceanTexture(Texture):
    """Settings for the Ocean texture"""

    ocean = None
    """The ocean data associated with this texture
    (type: bpy.types.OceanTexData, (readonly))
    
    :type: OceanTexData
    """

    users_material = None
    """Materials that use this texture
                                (readonly)
    """

    users_object_modifier = None
    """Object modifiers that use this texture
                                (readonly)
    """


class OverDropSequence(EffectSequence):
    """Over Drop Sequence"""

    input_1 = None
    """First input for the effect strip
    (type: bpy.types.Sequence, (never None))
    
    :type: Sequence
    """

    input_2 = None
    """Second input for the effect strip
    (type: bpy.types.Sequence, (never None))
    
    :type: Sequence
    """

    input_count = 0
    """(type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """


class PointDensityTexture(Texture):
    """Settings for the Point Density texture"""

    point_density = None
    """The point density settings associated with this texture
    (type: bpy.types.PointDensity, (readonly))
    
    :type: PointDensity
    """

    users_material = None
    """Materials that use this texture
                                (readonly)
    """

    users_object_modifier = None
    """Object modifiers that use this texture
                                (readonly)
    """


class PointLamp(Lamp):
    """Omnidirectional point lamp"""

    compression_threshold = 0.0
    """Deep shadow map compression threshold
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    constant_coefficient = 0.0
    """Constant distance attenuation coefficient
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    falloff_curve = None
    """Custom Lamp Falloff Curve
    (type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    falloff_type = 'CONSTANT'
    """Intensity Decay with distance
    (type: enum in ['CONSTANT', 'INVERSE_LINEAR', 'INVERSE_SQUARE', 'INVERSE_COEFFICIENTS', 'CUSTOM_CURVE', 'LINEAR_QUADRATIC_WEIGHTED'], default 'CONSTANT')
    
    :type: str
    """

    ge_shadow_buffer_type = 'SIMPLE'
    """The shadow mapping algorithm used
    * 'SIMPLE': Simple, Simple shadow maps.
    * 'VARIANCE': Variance, Variance shadow maps.
    (type: enum in ['SIMPLE', 'VARIANCE'], default 'SIMPLE')
    
    :type: str
    """

    linear_attenuation = 0.0
    """Linear distance attenuation
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    linear_coefficient = 0.0
    """Linear distance attenuation coefficient
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    quadratic_attenuation = 0.0
    """Quadratic distance attenuation
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    quadratic_coefficient = 0.0
    """Quadratic distance attenuation coefficient
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    shadow_adaptive_threshold = 0.0
    """Threshold for Adaptive Sampling (Raytraced shadows)
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    shadow_buffer_bias = 0.0
    """Shadow buffer sampling bias
    (type: float in [0.001, 5], default 0.0)
    
    :type: float
    """

    shadow_buffer_bleed_bias = 0.0
    """Bias for reducing light-bleed on variance shadow maps
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    shadow_buffer_clip_end = 0.0
    """Shadow map clip end, beyond which objects will not generate shadows
    (type: float in [0, 9999], default 0.0)
    
    :type: float
    """

    shadow_buffer_clip_start = 0.0
    """Shadow map clip start, below which objects will not generate shadows
    (type: float in [0, 9999], default 0.0)
    
    :type: float
    """

    shadow_buffer_samples = 0
    """Number of shadow buffer samples
    (type: int in [1, 16], default 0)
    
    :type: int
    """

    shadow_buffer_size = 0
    """Resolution of the shadow buffer, higher values give crisper shadows but use more memory
    (type: int in [128, 10240], default 0)
    
    :type: int
    """

    shadow_buffer_soft = 0.0
    """Size of shadow buffer sampling area
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    shadow_buffer_type = 'REGULAR'
    """Type of shadow buffer
    * 'REGULAR': Classical, Classic shadow buffer.
    * 'HALFWAY': Classic-Halfway, Regular buffer, averaging the closest and 2nd closest Z value to reducing bias artifacts.
    * 'IRREGULAR': Irregular, Irregular buffer produces sharp shadow always, but it doesn't show up for raytracing.
    * 'DEEP': Deep, Deep shadow buffer supports transparency and better filtering, at the cost of more memory usage and processing time.
    (type: enum in ['REGULAR', 'HALFWAY', 'IRREGULAR', 'DEEP'], default 'REGULAR')
    
    :type: str
    """

    shadow_color = (0.0, 0.0, 0.0)
    """Color of shadows cast by the lamp
    (type: float array of 3 items in [0, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    shadow_filter_type = 'BOX'
    """Type of shadow filter (Buffer Shadows)
    * 'BOX': Box, Apply the Box filter to shadow buffer samples.
    * 'TENT': Tent, Apply the Tent Filter to shadow buffer samples.
    * 'GAUSS': Gauss, Apply the Gauss filter to shadow buffer samples.
    (type: enum in ['BOX', 'TENT', 'GAUSS'], default 'BOX')
    
    :type: str
    """

    shadow_method = 'NOSHADOW'
    """
    * 'NOSHADOW': No Shadow.
    * 'RAY_SHADOW': Ray Shadow, Use ray tracing for shadow.
    (type: enum in ['NOSHADOW', 'RAY_SHADOW'], default 'NOSHADOW')
    
    :type: str
    """

    shadow_ray_sample_method = 'ADAPTIVE_QMC'
    """Method for generating shadow samples: Adaptive QMC is fastest, Constant QMC is less noisy but slower
    (type: enum in ['ADAPTIVE_QMC', 'CONSTANT_QMC'], default 'ADAPTIVE_QMC')
    
    :type: str
    """

    shadow_ray_samples = 0
    """Number of samples taken extra (samples x samples)
    (type: int in [1, 64], default 0)
    
    :type: int
    """

    shadow_sample_buffers = 'BUFFERS_1'
    """Number of shadow buffers to render for better AA, this increases memory usage
    * 'BUFFERS_1': 1, Only one buffer rendered.
    * 'BUFFERS_4': 4, Render 4 buffers for better AA, this quadruples memory usage.
    * 'BUFFERS_9': 9, Render 9 buffers for better AA, this uses nine times more memory.
    (type: enum in ['BUFFERS_1', 'BUFFERS_4', 'BUFFERS_9'], default 'BUFFERS_1')
    
    :type: str
    """

    shadow_soft_size = 0.0
    """Light size for ray shadow sampling (Raytraced shadows)
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    use_auto_clip_end = False
    """Automatic calculation of clipping-end, based on visible vertices
    (type: boolean, default False)
    
    :type: bool
    """

    use_auto_clip_start = False
    """Automatic calculation of clipping-start, based on visible vertices
    (type: boolean, default False)
    
    :type: bool
    """

    use_only_shadow = False
    """Cast shadows only, without illuminating objects
    (type: boolean, default False)
    
    :type: bool
    """

    use_shadow = False
    """(type: boolean, default False)
    
    :type: bool
    """

    use_shadow_layer = False
    """Objects on the same layers only cast shadows
    (type: boolean, default False)
    
    :type: bool
    """

    use_sphere = False
    """Set light intensity to zero beyond lamp distance
    (type: boolean, default False)
    
    :type: bool
    """


class ShaderNode(NodeInternal):
    """Material shader node"""


class ShaderNodeTree(NodeTree):
    """Node tree consisting of linked nodes used for materials (and other shading data-blocks)"""


class SpeedControlSequence(EffectSequence):
    """Sequence strip to control the speed of other strips"""

    input_1 = None
    """First input for the effect strip
    (type: bpy.types.Sequence, (never None))
    
    :type: Sequence
    """

    input_count = 0
    """(type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """

    multiply_speed = 0.0
    """Multiply the resulting speed after the speed factor
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    scale_to_length = False
    """Scale values from 0.0 to 1.0 to target sequence length
    (type: boolean, default False)
    
    :type: bool
    """

    use_as_speed = False
    """Interpret the value as speed instead of a frame number
    (type: boolean, default False)
    
    :type: bool
    """


class SpotLamp(Lamp):
    """Directional cone lamp"""

    compression_threshold = 0.0
    """Deep shadow map compression threshold
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    constant_coefficient = 0.0
    """Constant distance attenuation coefficient
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    falloff_curve = None
    """Custom Lamp Falloff Curve
    (type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    falloff_type = 'CONSTANT'
    """Intensity Decay with distance
    (type: enum in ['CONSTANT', 'INVERSE_LINEAR', 'INVERSE_SQUARE', 'INVERSE_COEFFICIENTS', 'CUSTOM_CURVE', 'LINEAR_QUADRATIC_WEIGHTED'], default 'CONSTANT')
    
    :type: str
    """

    ge_shadow_buffer_type = 'SIMPLE'
    """The shadow mapping algorithm used
    * 'SIMPLE': Simple, Simple shadow maps.
    * 'VARIANCE': Variance, Variance shadow maps.
    (type: enum in ['SIMPLE', 'VARIANCE'], default 'SIMPLE')
    
    :type: str
    """

    halo_intensity = 0.0
    """Brightness of the spotlight's halo cone
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    halo_step = 0
    """Volumetric halo sampling frequency
    (type: int in [0, 12], default 0)
    
    :type: int
    """

    linear_attenuation = 0.0
    """Linear distance attenuation
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    linear_coefficient = 0.0
    """Linear distance attenuation coefficient
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    quadratic_attenuation = 0.0
    """Quadratic distance attenuation
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    quadratic_coefficient = 0.0
    """Quadratic distance attenuation coefficient
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    shadow_adaptive_threshold = 0.0
    """Threshold for Adaptive Sampling (Raytraced shadows)
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    shadow_buffer_bias = 0.0
    """Shadow buffer sampling bias
    (type: float in [0.001, 5], default 0.0)
    
    :type: float
    """

    shadow_buffer_bleed_bias = 0.0
    """Bias for reducing light-bleed on variance shadow maps
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    shadow_buffer_clip_end = 0.0
    """Shadow map clip end, beyond which objects will not generate shadows
    (type: float in [0, 9999], default 0.0)
    
    :type: float
    """

    shadow_buffer_clip_start = 0.0
    """Shadow map clip start, below which objects will not generate shadows
    (type: float in [0, 9999], default 0.0)
    
    :type: float
    """

    shadow_buffer_samples = 0
    """Number of shadow buffer samples
    (type: int in [1, 16], default 0)
    
    :type: int
    """

    shadow_buffer_size = 0
    """Resolution of the shadow buffer, higher values give crisper shadows but use more memory
    (type: int in [128, 10240], default 0)
    
    :type: int
    """

    shadow_buffer_soft = 0.0
    """Size of shadow buffer sampling area
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    shadow_buffer_type = 'REGULAR'
    """Type of shadow buffer
    * 'REGULAR': Classical, Classic shadow buffer.
    * 'HALFWAY': Classic-Halfway, Regular buffer, averaging the closest and 2nd closest Z value to reducing bias artifacts.
    * 'IRREGULAR': Irregular, Irregular buffer produces sharp shadow always, but it doesn't show up for raytracing.
    * 'DEEP': Deep, Deep shadow buffer supports transparency and better filtering, at the cost of more memory usage and processing time.
    (type: enum in ['REGULAR', 'HALFWAY', 'IRREGULAR', 'DEEP'], default 'REGULAR')
    
    :type: str
    """

    shadow_color = (0.0, 0.0, 0.0)
    """Color of shadows cast by the lamp
    (type: float array of 3 items in [0, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    shadow_filter_type = 'BOX'
    """Type of shadow filter (Buffer Shadows)
    * 'BOX': Box, Apply the Box filter to shadow buffer samples.
    * 'TENT': Tent, Apply the Tent Filter to shadow buffer samples.
    * 'GAUSS': Gauss, Apply the Gauss filter to shadow buffer samples.
    (type: enum in ['BOX', 'TENT', 'GAUSS'], default 'BOX')
    
    :type: str
    """

    shadow_method = 'NOSHADOW'
    """
    * 'NOSHADOW': No Shadow.
    * 'BUFFER_SHADOW': Buffer Shadow, Let spotlight produce shadows using shadow buffer.
    * 'RAY_SHADOW': Ray Shadow, Use ray tracing for shadow.
    (type: enum in ['NOSHADOW', 'BUFFER_SHADOW', 'RAY_SHADOW'], default 'NOSHADOW')
    
    :type: str
    """

    shadow_ray_sample_method = 'ADAPTIVE_QMC'
    """Method for generating shadow samples: Adaptive QMC is fastest, Constant QMC is less noisy but slower
    (type: enum in ['ADAPTIVE_QMC', 'CONSTANT_QMC'], default 'ADAPTIVE_QMC')
    
    :type: str
    """

    shadow_ray_samples = 0
    """Number of samples taken extra (samples x samples)
    (type: int in [1, 64], default 0)
    
    :type: int
    """

    shadow_sample_buffers = 'BUFFERS_1'
    """Number of shadow buffers to render for better AA, this increases memory usage
    * 'BUFFERS_1': 1, Only one buffer rendered.
    * 'BUFFERS_4': 4, Render 4 buffers for better AA, this quadruples memory usage.
    * 'BUFFERS_9': 9, Render 9 buffers for better AA, this uses nine times more memory.
    (type: enum in ['BUFFERS_1', 'BUFFERS_4', 'BUFFERS_9'], default 'BUFFERS_1')
    
    :type: str
    """

    shadow_soft_size = 0.0
    """Light size for ray shadow sampling (Raytraced shadows)
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    show_cone = False
    """Draw transparent cone in 3D view to visualize which objects are contained in it
    (type: boolean, default False)
    
    :type: bool
    """

    spot_blend = 0.0
    """The softness of the spotlight edge
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    spot_size = 0.0
    """Angle of the spotlight beam
    (type: float in [0.0174533, 3.14159], default 0.0)
    
    :type: float
    """

    use_auto_clip_end = False
    """Automatic calculation of clipping-end, based on visible vertices
    (type: boolean, default False)
    
    :type: bool
    """

    use_auto_clip_start = False
    """Automatic calculation of clipping-start, based on visible vertices
    (type: boolean, default False)
    
    :type: bool
    """

    use_halo = False
    """Render spotlight with a volumetric halo
    (type: boolean, default False)
    
    :type: bool
    """

    use_only_shadow = False
    """Cast shadows only, without illuminating objects
    (type: boolean, default False)
    
    :type: bool
    """

    use_shadow = False
    """(type: boolean, default False)
    
    :type: bool
    """

    use_shadow_layer = False
    """Objects on the same layers only cast shadows
    (type: boolean, default False)
    
    :type: bool
    """

    use_sphere = False
    """Set light intensity to zero beyond lamp distance
    (type: boolean, default False)
    
    :type: bool
    """

    use_square = False
    """Cast a square spot light shape
    (type: boolean, default False)
    
    :type: bool
    """


class StucciTexture(Texture):
    """Procedural noise texture"""

    noise_basis = 'BLENDER_ORIGINAL'
    """Noise basis used for turbulence
    * 'BLENDER_ORIGINAL': Blender Original, Noise algorithm - Blender original: Smooth interpolated noise.
    * 'ORIGINAL_PERLIN': Original Perlin, Noise algorithm - Original Perlin: Smooth interpolated noise.
    * 'IMPROVED_PERLIN': Improved Perlin, Noise algorithm - Improved Perlin: Smooth interpolated noise.
    * 'VORONOI_F1': Voronoi F1, Noise algorithm - Voronoi F1: Returns distance to the closest feature point.
    * 'VORONOI_F2': Voronoi F2, Noise algorithm - Voronoi F2: Returns distance to the 2nd closest feature point.
    * 'VORONOI_F3': Voronoi F3, Noise algorithm - Voronoi F3: Returns distance to the 3rd closest feature point.
    * 'VORONOI_F4': Voronoi F4, Noise algorithm - Voronoi F4: Returns distance to the 4th closest feature point.
    * 'VORONOI_F2_F1': Voronoi F2-F1, Noise algorithm - Voronoi F1-F2.
    * 'VORONOI_CRACKLE': Voronoi Crackle, Noise algorithm - Voronoi Crackle: Voronoi tessellation with sharp edges.
    * 'CELL_NOISE': Cell Noise, Noise algorithm - Cell Noise: Square cell tessellation.
    (type: enum in ['BLENDER_ORIGINAL', 'ORIGINAL_PERLIN', 'IMPROVED_PERLIN', 'VORONOI_F1', 'VORONOI_F2', 'VORONOI_F3', 'VORONOI_F4', 'VORONOI_F2_F1', 'VORONOI_CRACKLE', 'CELL_NOISE'], default 'BLENDER_ORIGINAL')
    
    :type: str
    """

    noise_scale = 0.0
    """Scaling for noise input
    (type: float in [0.0001, inf], default 0.0)
    
    :type: float
    """

    noise_type = 'SOFT_NOISE'
    """
    * 'SOFT_NOISE': Soft, Generate soft noise (smooth transitions).
    * 'HARD_NOISE': Hard, Generate hard noise (sharp transitions).
    (type: enum in ['SOFT_NOISE', 'HARD_NOISE'], default 'SOFT_NOISE')
    
    :type: str
    """

    stucci_type = 'PLASTIC'
    """
    * 'PLASTIC': Plastic, Use standard stucci.
    * 'WALL_IN': Wall in, Create Dimples.
    * 'WALL_OUT': Wall out, Create Ridges.
    (type: enum in ['PLASTIC', 'WALL_IN', 'WALL_OUT'], default 'PLASTIC')
    
    :type: str
    """

    turbulence = 0.0
    """Turbulence of the noise
    (type: float in [0.0001, inf], default 0.0)
    
    :type: float
    """

    users_material = None
    """Materials that use this texture
                                (readonly)
    """

    users_object_modifier = None
    """Object modifiers that use this texture
                                (readonly)
    """


class SubtractSequence(EffectSequence):
    """Subtract Sequence"""

    input_1 = None
    """First input for the effect strip
    (type: bpy.types.Sequence, (never None))
    
    :type: Sequence
    """

    input_2 = None
    """Second input for the effect strip
    (type: bpy.types.Sequence, (never None))
    
    :type: Sequence
    """

    input_count = 0
    """(type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """


class SunLamp(Lamp):
    """Constant direction parallel ray lamp"""

    compression_threshold = 0.0
    """Deep shadow map compression threshold
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    ge_shadow_buffer_type = 'SIMPLE'
    """The shadow mapping algorithm used
    * 'SIMPLE': Simple, Simple shadow maps.
    * 'VARIANCE': Variance, Variance shadow maps.
    (type: enum in ['SIMPLE', 'VARIANCE'], default 'SIMPLE')
    
    :type: str
    """

    shadow_adaptive_threshold = 0.0
    """Threshold for Adaptive Sampling (Raytraced shadows)
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    shadow_buffer_bias = 0.0
    """Shadow buffer sampling bias
    (type: float in [0.001, 5], default 0.0)
    
    :type: float
    """

    shadow_buffer_bleed_bias = 0.0
    """Bias for reducing light-bleed on variance shadow maps
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    shadow_buffer_clip_end = 0.0
    """Shadow map clip end, beyond which objects will not generate shadows
    (type: float in [0, 9999], default 0.0)
    
    :type: float
    """

    shadow_buffer_clip_start = 0.0
    """Shadow map clip start, below which objects will not generate shadows
    (type: float in [0, 9999], default 0.0)
    
    :type: float
    """

    shadow_buffer_samples = 0
    """Number of shadow buffer samples
    (type: int in [1, 16], default 0)
    
    :type: int
    """

    shadow_buffer_size = 0
    """Resolution of the shadow buffer, higher values give crisper shadows but use more memory
    (type: int in [128, 10240], default 0)
    
    :type: int
    """

    shadow_buffer_soft = 0.0
    """Size of shadow buffer sampling area
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    shadow_buffer_type = 'REGULAR'
    """Type of shadow buffer
    * 'REGULAR': Classical, Classic shadow buffer.
    * 'HALFWAY': Classic-Halfway, Regular buffer, averaging the closest and 2nd closest Z value to reducing bias artifacts.
    * 'IRREGULAR': Irregular, Irregular buffer produces sharp shadow always, but it doesn't show up for raytracing.
    * 'DEEP': Deep, Deep shadow buffer supports transparency and better filtering, at the cost of more memory usage and processing time.
    (type: enum in ['REGULAR', 'HALFWAY', 'IRREGULAR', 'DEEP'], default 'REGULAR')
    
    :type: str
    """

    shadow_color = (0.0, 0.0, 0.0)
    """Color of shadows cast by the lamp
    (type: float array of 3 items in [0, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    shadow_filter_type = 'BOX'
    """Type of shadow filter (Buffer Shadows)
    * 'BOX': Box, Apply the Box filter to shadow buffer samples.
    * 'TENT': Tent, Apply the Tent Filter to shadow buffer samples.
    * 'GAUSS': Gauss, Apply the Gauss filter to shadow buffer samples.
    (type: enum in ['BOX', 'TENT', 'GAUSS'], default 'BOX')
    
    :type: str
    """

    shadow_frustum_size = 0.0
    """Size of the frustum used for creating the shadow map
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    shadow_method = 'NOSHADOW'
    """
    * 'NOSHADOW': No Shadow.
    * 'RAY_SHADOW': Ray Shadow, Use ray tracing for shadow.
    (type: enum in ['NOSHADOW', 'RAY_SHADOW'], default 'NOSHADOW')
    
    :type: str
    """

    shadow_ray_sample_method = 'ADAPTIVE_QMC'
    """Method for generating shadow samples: Adaptive QMC is fastest, Constant QMC is less noisy but slower
    (type: enum in ['ADAPTIVE_QMC', 'CONSTANT_QMC'], default 'ADAPTIVE_QMC')
    
    :type: str
    """

    shadow_ray_samples = 0
    """Number of samples taken extra (samples x samples)
    (type: int in [1, 64], default 0)
    
    :type: int
    """

    shadow_sample_buffers = 'BUFFERS_1'
    """Number of shadow buffers to render for better AA, this increases memory usage
    * 'BUFFERS_1': 1, Only one buffer rendered.
    * 'BUFFERS_4': 4, Render 4 buffers for better AA, this quadruples memory usage.
    * 'BUFFERS_9': 9, Render 9 buffers for better AA, this uses nine times more memory.
    (type: enum in ['BUFFERS_1', 'BUFFERS_4', 'BUFFERS_9'], default 'BUFFERS_1')
    
    :type: str
    """

    shadow_soft_size = 0.0
    """Light size for ray shadow sampling (Raytraced shadows)
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    show_shadow_box = False
    """Draw a box in 3D view to visualize which objects are contained in it
    (type: boolean, default False)
    
    :type: bool
    """

    sky = None
    """Sky related settings for sun lamps
    (type: bpy.types.LampSkySettings, (readonly, never None))
    
    :type: LampSkySettings
    """

    use_auto_clip_end = False
    """Automatic calculation of clipping-end, based on visible vertices
    (type: boolean, default False)
    
    :type: bool
    """

    use_auto_clip_start = False
    """Automatic calculation of clipping-start, based on visible vertices
    (type: boolean, default False)
    
    :type: bool
    """

    use_only_shadow = False
    """Cast shadows only, without illuminating objects
    (type: boolean, default False)
    
    :type: bool
    """

    use_shadow = False
    """(type: boolean, default False)
    
    :type: bool
    """

    use_shadow_layer = False
    """Objects on the same layers only cast shadows
    (type: boolean, default False)
    
    :type: bool
    """


class SurfaceCurve(Curve):
    """Curve data-block used for storing surfaces"""

    use_uv_as_generated = False
    """Uses the UV values as Generated textured coordinates
    (type: boolean, default False)
    
    :type: bool
    """


class TextCurve(Curve):
    """Curve data-block used for storing text"""

    active_textbox = 0
    """(type: int in [-inf, inf], default 0)
    
    :type: int
    """

    align_x = 'LEFT'
    """Text horizontal align from the object center
    * 'LEFT': Left, Align text to the left.
    * 'CENTER': Center, Center text.
    * 'RIGHT': Right, Align text to the right.
    * 'JUSTIFY': Justify, Align to the left and the right.
    * 'FLUSH': Flush, Align to the left and the right, with equal character spacing.
    (type: enum in ['LEFT', 'CENTER', 'RIGHT', 'JUSTIFY', 'FLUSH'], default 'LEFT')
    
    :type: str
    """

    align_y = 'TOP_BASELINE'
    """Text vertical align from the object center
    * 'TOP_BASELINE': Top Base-Line, Align to top but use the base-line of the text.
    * 'TOP': Top, Align text to the top.
    * 'CENTER': Center, Align text to the middle.
    * 'BOTTOM': Bottom, Align text to the bottom.
    (type: enum in ['TOP_BASELINE', 'TOP', 'CENTER', 'BOTTOM'], default 'TOP_BASELINE')
    
    :type: str
    """

    body = ""
    """Content of this text object
    (type: string, default "", (never None))
    
    :type: str
    """

    body_format = None
    """Stores the style of each character
    (type: bpy.types.bpy_prop_collection of bpy.types.TextCharacterFormat, (readonly))
    
    :type: bpy_prop_collection
    """

    edit_format = None
    """Editing settings character formatting
    (type: bpy.types.TextCharacterFormat, (readonly))
    
    :type: TextCharacterFormat
    """

    family = ""
    """Use Objects as font characters (give font objects a common name followed by the character they represent, eg. 'family-a', 'family-b', etc, set this setting to 'family-', and turn on Vertex Duplication)
    (type: string, default "", (never None))
    
    :type: str
    """

    follow_curve = None
    """Curve deforming text object
    (type: bpy.types.Object)
    
    :type: Object
    """

    font = None
    """(type: bpy.types.VectorFont)
    
    :type: VectorFont
    """

    font_bold = None
    """(type: bpy.types.VectorFont)
    
    :type: VectorFont
    """

    font_bold_italic = None
    """(type: bpy.types.VectorFont)
    
    :type: VectorFont
    """

    font_italic = None
    """(type: bpy.types.VectorFont)
    
    :type: VectorFont
    """

    offset_x = 0.0
    """Horizontal offset from the object origin
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    offset_y = 0.0
    """Vertical offset from the object origin
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    shear = 0.0
    """Italic angle of the characters
    (type: float in [-1, 1], default 0.0)
    
    :type: float
    """

    size = 0.0
    """(type: float in [0.0001, 10000], default 0.0)
    
    :type: float
    """

    small_caps_scale = 0.0
    """Scale of small capitals
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    space_character = 0.0
    """(type: float in [0, 10], default 0.0)
    
    :type: float
    """

    space_line = 0.0
    """(type: float in [0, 10], default 0.0)
    
    :type: float
    """

    space_word = 0.0
    """(type: float in [0, 10], default 0.0)
    
    :type: float
    """

    text_boxes = None
    """(type: bpy.types.bpy_prop_collection of bpy.types.TextBox, (readonly))
    
    :type: bpy_prop_collection
    """

    underline_height = 0.0
    """(type: float in [0, 0.8], default 0.0)
    
    :type: float
    """

    underline_position = 0.0
    """Vertical position of underline
    (type: float in [-0.2, 0.8], default 0.0)
    
    :type: float
    """

    use_fast_edit = False
    """Don't fill polygons while editing
    (type: boolean, default False)
    
    :type: bool
    """

    use_uv_as_generated = False
    """Uses the UV values as Generated textured coordinates
    (type: boolean, default False)
    
    :type: bool
    """


class TextSequence(EffectSequence):
    """Sequence strip creating text"""

    align_x = 'LEFT'
    """(type: enum in ['LEFT', 'CENTER', 'RIGHT'], default 'LEFT')
    
    :type: str
    """

    align_y = 'TOP'
    """(type: enum in ['TOP', 'CENTER', 'BOTTOM'], default 'TOP')
    
    :type: str
    """

    color = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, inf], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    font_size = 0
    """Size of the text
    (type: int in [0, 2000], default 0)
    
    :type: int
    """

    input_count = 0
    """(type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """

    location = (0.0, 0.0)
    """Location of the text
    (type: float array of 2 items in [-inf, inf], default (0.0, 0.0))
    
    :type: mathutils.Vector
    """

    shadow_color = (0.0, 0.0, 0.0, 0.0)
    """(type: float array of 4 items in [0, inf], default (0.0, 0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    text = ""
    """Text that will be displayed
    (type: string, default "", (never None))
    
    :type: str
    """

    use_shadow = False
    """Draw text with shadow
    (type: boolean, default False)
    
    :type: bool
    """

    wrap_width = 0.0
    """Word wrap width as factor, zero disables
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """


class TextureNode(NodeInternal):
    """"""


class TextureNodeTree(NodeTree):
    """Node tree consisting of linked nodes used for textures"""


class TransformSequence(EffectSequence):
    """Sequence strip applying affine transformations to other strips"""

    input_1 = None
    """First input for the effect strip
    (type: bpy.types.Sequence, (never None))
    
    :type: Sequence
    """

    input_count = 0
    """(type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """

    interpolation = 'NONE'
    """
    * 'NONE': None, No interpolation.
    * 'BILINEAR': Bilinear, Bilinear interpolation.
    * 'BICUBIC': Bicubic, Bicubic interpolation.
    (type: enum in ['NONE', 'BILINEAR', 'BICUBIC'], default 'NONE')
    
    :type: str
    """

    rotation_start = 0.0
    """(type: float in [-360, 360], default 0.0)
    
    :type: float
    """

    scale_start_x = 0.0
    """(type: float in [0, inf], default 0.0)
    
    :type: float
    """

    scale_start_y = 0.0
    """(type: float in [0, inf], default 0.0)
    
    :type: float
    """

    translate_start_x = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    translate_start_y = 0.0
    """(type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    translation_unit = 'PIXELS'
    """(type: enum in ['PIXELS', 'PERCENT'], default 'PIXELS')
    
    :type: str
    """

    use_uniform_scale = False
    """Scale uniformly, preserving aspect ratio
    (type: boolean, default False)
    
    :type: bool
    """


class VoronoiTexture(Texture):
    """Procedural voronoi texture"""

    color_mode = 'INTENSITY'
    """
    * 'INTENSITY': Intensity, Only calculate intensity.
    * 'POSITION': Position, Color cells by position.
    * 'POSITION_OUTLINE': Position and Outline, Use position plus an outline based on F2-F1.
    * 'POSITION_OUTLINE_INTENSITY': Position, Outline, and Intensity, Multiply position and outline by intensity.
    (type: enum in ['INTENSITY', 'POSITION', 'POSITION_OUTLINE', 'POSITION_OUTLINE_INTENSITY'], default 'INTENSITY')
    
    :type: str
    """

    distance_metric = 'DISTANCE'
    """Algorithm used to calculate distance of sample points to feature points
    * 'DISTANCE': Actual Distance, sqrt(x*x+y*y+z*z).
    * 'DISTANCE_SQUARED': Distance Squared, (x*x+y*y+z*z).
    * 'MANHATTAN': Manhattan, The length of the distance in axial directions.
    * 'CHEBYCHEV': Chebychev, The length of the longest Axial journey.
    * 'MINKOVSKY_HALF': Minkowski 1/2, Set Minkowski variable to 0.5.
    * 'MINKOVSKY_FOUR': Minkowski 4, Set Minkowski variable to 4.
    * 'MINKOVSKY': Minkowski, Use the Minkowski function to calculate distance (exponent value determines the shape of the boundaries).
    (type: enum in ['DISTANCE', 'DISTANCE_SQUARED', 'MANHATTAN', 'CHEBYCHEV', 'MINKOVSKY_HALF', 'MINKOVSKY_FOUR', 'MINKOVSKY'], default 'DISTANCE')
    
    :type: str
    """

    minkovsky_exponent = 0.0
    """Minkowski exponent
    (type: float in [0.01, 10], default 0.0)
    
    :type: float
    """

    nabla = 0.0
    """Size of derivative offset used for calculating normal
    (type: float in [0.001, 0.1], default 0.0)
    
    :type: float
    """

    noise_intensity = 0.0
    """Scales the intensity of the noise
    (type: float in [0.01, 10], default 0.0)
    
    :type: float
    """

    noise_scale = 0.0
    """Scaling for noise input
    (type: float in [0.0001, inf], default 0.0)
    
    :type: float
    """

    weight_1 = 0.0
    """Voronoi feature weight 1
    (type: float in [-2, 2], default 0.0)
    
    :type: float
    """

    weight_2 = 0.0
    """Voronoi feature weight 2
    (type: float in [-2, 2], default 0.0)
    
    :type: float
    """

    weight_3 = 0.0
    """Voronoi feature weight 3
    (type: float in [-2, 2], default 0.0)
    
    :type: float
    """

    weight_4 = 0.0
    """Voronoi feature weight 4
    (type: float in [-2, 2], default 0.0)
    
    :type: float
    """

    users_material = None
    """Materials that use this texture
                                (readonly)
    """

    users_object_modifier = None
    """Object modifiers that use this texture
                                (readonly)
    """


class VoxelDataTexture(Texture):
    """Settings for the Voxel Data texture"""

    image = None
    """(type: bpy.types.Image)
    
    :type: Image
    """

    image_user = None
    """Parameters defining which layer, pass and frame of the image is displayed
    (type: bpy.types.ImageUser, (readonly))
    
    :type: ImageUser
    """

    voxel_data = None
    """The voxel data associated with this texture
    (type: bpy.types.VoxelData, (readonly))
    
    :type: VoxelData
    """

    users_material = None
    """Materials that use this texture
                                (readonly)
    """

    users_object_modifier = None
    """Object modifiers that use this texture
                                (readonly)
    """


class WipeSequence(EffectSequence):
    """Sequence strip creating a wipe transition"""

    angle = 0.0
    """Edge angle
    (type: float in [-1.5708, 1.5708], default 0.0)
    
    :type: float
    """

    blur_width = 0.0
    """Width of the blur edge, in percentage relative to the image size
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    direction = 'OUT'
    """Wipe direction
    (type: enum in ['OUT', 'IN'], default 'OUT')
    
    :type: str
    """

    input_1 = None
    """First input for the effect strip
    (type: bpy.types.Sequence, (never None))
    
    :type: Sequence
    """

    input_2 = None
    """Second input for the effect strip
    (type: bpy.types.Sequence, (never None))
    
    :type: Sequence
    """

    input_count = 0
    """(type: int in [0, inf], default 0, (readonly))
    
    :type: int
    """

    transition_type = 'SINGLE'
    """(type: enum in ['SINGLE', 'DOUBLE', 'IRIS', 'CLOCK'], default 'SINGLE')
    
    :type: str
    """


class WoodTexture(Texture):
    """Procedural noise texture"""

    nabla = 0.0
    """Size of derivative offset used for calculating normal
    (type: float in [0.001, 0.1], default 0.0)
    
    :type: float
    """

    noise_basis = 'BLENDER_ORIGINAL'
    """Noise basis used for turbulence
    * 'BLENDER_ORIGINAL': Blender Original, Noise algorithm - Blender original: Smooth interpolated noise.
    * 'ORIGINAL_PERLIN': Original Perlin, Noise algorithm - Original Perlin: Smooth interpolated noise.
    * 'IMPROVED_PERLIN': Improved Perlin, Noise algorithm - Improved Perlin: Smooth interpolated noise.
    * 'VORONOI_F1': Voronoi F1, Noise algorithm - Voronoi F1: Returns distance to the closest feature point.
    * 'VORONOI_F2': Voronoi F2, Noise algorithm - Voronoi F2: Returns distance to the 2nd closest feature point.
    * 'VORONOI_F3': Voronoi F3, Noise algorithm - Voronoi F3: Returns distance to the 3rd closest feature point.
    * 'VORONOI_F4': Voronoi F4, Noise algorithm - Voronoi F4: Returns distance to the 4th closest feature point.
    * 'VORONOI_F2_F1': Voronoi F2-F1, Noise algorithm - Voronoi F1-F2.
    * 'VORONOI_CRACKLE': Voronoi Crackle, Noise algorithm - Voronoi Crackle: Voronoi tessellation with sharp edges.
    * 'CELL_NOISE': Cell Noise, Noise algorithm - Cell Noise: Square cell tessellation.
    (type: enum in ['BLENDER_ORIGINAL', 'ORIGINAL_PERLIN', 'IMPROVED_PERLIN', 'VORONOI_F1', 'VORONOI_F2', 'VORONOI_F3', 'VORONOI_F4', 'VORONOI_F2_F1', 'VORONOI_CRACKLE', 'CELL_NOISE'], default 'BLENDER_ORIGINAL')
    
    :type: str
    """

    noise_basis_2 = 'SIN'
    """
    * 'SIN': Sine, Use a sine wave to produce bands.
    * 'SAW': Saw, Use a saw wave to produce bands.
    * 'TRI': Tri, Use a triangle wave to produce bands.
    (type: enum in ['SIN', 'SAW', 'TRI'], default 'SIN')
    
    :type: str
    """

    noise_scale = 0.0
    """Scaling for noise input
    (type: float in [0.0001, inf], default 0.0)
    
    :type: float
    """

    noise_type = 'SOFT_NOISE'
    """
    * 'SOFT_NOISE': Soft, Generate soft noise (smooth transitions).
    * 'HARD_NOISE': Hard, Generate hard noise (sharp transitions).
    (type: enum in ['SOFT_NOISE', 'HARD_NOISE'], default 'SOFT_NOISE')
    
    :type: str
    """

    turbulence = 0.0
    """Turbulence of the bandnoise and ringnoise types
    (type: float in [0.0001, inf], default 0.0)
    
    :type: float
    """

    wood_type = 'BANDS'
    """
    * 'BANDS': Bands, Use standard wood texture in bands.
    * 'RINGS': Rings, Use wood texture in rings.
    * 'BANDNOISE': Band Noise, Add noise to standard wood.
    * 'RINGNOISE': Ring Noise, Add noise to rings.
    (type: enum in ['BANDS', 'RINGS', 'BANDNOISE', 'RINGNOISE'], default 'BANDS')
    
    :type: str
    """

    users_material = None
    """Materials that use this texture
                                (readonly)
    """

    users_object_modifier = None
    """Object modifiers that use this texture
                                (readonly)
    """


class CompositorNodeAlphaOver(CompositorNode):
    """"""

    premul = 0.0
    """Mix Factor
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    use_premultiply = False
    """(type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeAntiAliasing(CompositorNode):
    """"""

    corner_rounding = 0
    """How much sharp corners will be rounded
    (type: int in [0, 100], default 0)
    
    :type: int
    """

    edge_detection_type = 'LUMA'
    """(type: enum in ['LUMA', 'COLOR', 'VALUE'], default 'LUMA')
    
    :type: str
    """

    enable_corner_detection = False
    """Avoid the sharp corners will be rounded
    (type: boolean, default False)
    
    :type: bool
    """

    local_contrast_adaptation_factor = 0.0
    """How much to eliminate spurious edges to avoid artifacts (the larger value makes less active; the value 2.0, for example, means discard a detected edge if there is a neighboring edge that has 2.0 times bigger contrast than the current one)
    (type: float in [1, inf], default 0.0)
    
    :type: float
    """

    threshold = 0.0
    """Threshold to detect edges (smaller threshold makes more sensitive detection)
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    value_threshold = 0.0
    """Threshold for additional value input (needs to adjust depending on the value range)
    (type: float in [0, inf], default 0.0)
    
    :type: float
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeBilateralblur(CompositorNode):
    """"""

    iterations = 0
    """(type: int in [1, 128], default 0)
    
    :type: int
    """

    sigma_color = 0.0
    """(type: float in [0.01, 3], default 0.0)
    
    :type: float
    """

    sigma_space = 0.0
    """(type: float in [0.01, 30], default 0.0)
    
    :type: float
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeBlur(CompositorNode):
    """"""

    aspect_correction = 'NONE'
    """Type of aspect correction to use
    (type: enum in ['NONE', 'Y', 'X'], default 'NONE')
    
    :type: str
    """

    factor = 0.0
    """(type: float in [0, 2], default 0.0)
    
    :type: float
    """

    factor_x = 0.0
    """(type: float in [0, 100], default 0.0)
    
    :type: float
    """

    factor_y = 0.0
    """(type: float in [0, 100], default 0.0)
    
    :type: float
    """

    filter_type = 'FLAT'
    """(type: enum in ['FLAT', 'TENT', 'QUAD', 'CUBIC', 'GAUSS', 'FAST_GAUSS', 'CATROM', 'MITCH'], default 'FLAT')
    
    :type: str
    """

    size_x = 0
    """(type: int in [0, 2048], default 0)
    
    :type: int
    """

    size_y = 0
    """(type: int in [0, 2048], default 0)
    
    :type: int
    """

    use_bokeh = False
    """Use circular filter (slower)
    (type: boolean, default False)
    
    :type: bool
    """

    use_extended_bounds = False
    """Extend bounds of the input image to fully fit blurred image
    (type: boolean, default False)
    
    :type: bool
    """

    use_gamma_correction = False
    """Apply filter on gamma corrected values
    (type: boolean, default False)
    
    :type: bool
    """

    use_relative = False
    """Use relative (percent) values to define blur radius
    (type: boolean, default False)
    
    :type: bool
    """

    use_variable_size = False
    """Support variable blur per-pixel when using an image for size input
    (type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeBokehBlur(CompositorNode):
    """"""

    blur_max = 0.0
    """Blur limit, maximum CoC radius
    (type: float in [0, 10000], default 0.0)
    
    :type: float
    """

    use_extended_bounds = False
    """Extend bounds of the input image to fully fit blurred image
    (type: boolean, default False)
    
    :type: bool
    """

    use_variable_size = False
    """Support variable blur per-pixel when using an image for size input
    (type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeBokehImage(CompositorNode):
    """"""

    angle = 0.0
    """Angle of the bokeh
    (type: float in [-12.5664, 12.5664], default 0.0)
    
    :type: float
    """

    catadioptric = 0.0
    """Level of catadioptric of the bokeh
    (type: float in [-0, 1], default 0.0)
    
    :type: float
    """

    flaps = 5
    """Number of flaps
    (type: int in [3, 24], default 5)
    
    :type: int
    """

    rounding = 0.0
    """Level of rounding of the bokeh
    (type: float in [-0, 1], default 0.0)
    
    :type: float
    """

    shift = 0.0
    """Shift of the lens components
    (type: float in [-1, 1], default 0.0)
    
    :type: float
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeBoxMask(CompositorNode):
    """"""

    height = 0.2
    """Height of the box
    (type: float in [0, 2], default 0.2)
    
    :type: float
    """

    mask_type = 'ADD'
    """(type: enum in ['ADD', 'SUBTRACT', 'MULTIPLY', 'NOT'], default 'ADD')
    
    :type: str
    """

    rotation = 0.0
    """Rotation angle of the box
    (type: float in [-31.4159, 31.4159], default 0.0)
    
    :type: float
    """

    width = 0.3
    """Width of the box
    (type: float in [0, 2], default 0.3)
    
    :type: float
    """

    x = 0.5
    """X position of the middle of the box
    (type: float in [-1, 2], default 0.5)
    
    :type: float
    """

    y = 0.5
    """Y position of the middle of the box
    (type: float in [-1, 2], default 0.5)
    
    :type: float
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeBrightContrast(CompositorNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeChannelMatte(CompositorNode):
    """"""

    color_space = 'RGB'
    """
    * 'RGB': RGB, RGB Color Space.
    * 'HSV': HSV, HSV Color Space.
    * 'YUV': YUV, YUV Color Space.
    * 'YCC': YCbCr, YCbCr Color Space.
    (type: enum in ['RGB', 'HSV', 'YUV', 'YCC'], default 'RGB')
    
    :type: str
    """

    limit_channel = 'R'
    """Limit by this channel's value
    (type: enum in ['R', 'G', 'B'], default 'R')
    
    :type: str
    """

    limit_max = 0.0
    """Values higher than this setting are 100% opaque
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    limit_method = 'SINGLE'
    """Algorithm to use to limit channel
    * 'SINGLE': Single, Limit by single channel.
    * 'MAX': Max, Limit by max of other channels .
    (type: enum in ['SINGLE', 'MAX'], default 'SINGLE')
    
    :type: str
    """

    limit_min = 0.0
    """Values lower than this setting are 100% keyed
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    matte_channel = 'R'
    """Channel used to determine matte
    (type: enum in ['R', 'G', 'B'], default 'R')
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeChromaMatte(CompositorNode):
    """"""

    gain = 0.0
    """Alpha falloff
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    lift = 0.0
    """Alpha lift
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    shadow_adjust = 0.0
    """Adjusts the brightness of any shadows captured
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    threshold = 0.0
    """Tolerance below which colors will be considered as exact matches
    (type: float in [0, 0.523599], default 0.0)
    
    :type: float
    """

    tolerance = 0.0
    """Tolerance for a color to be considered a keying color
    (type: float in [0.0174533, 1.39626], default 0.0)
    
    :type: float
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeColorBalance(CompositorNode):
    """"""

    correction_method = 'LIFT_GAMMA_GAIN'
    """
    * 'LIFT_GAMMA_GAIN': Lift/Gamma/Gain.
    * 'OFFSET_POWER_SLOPE': Offset/Power/Slope (ASC-CDL), ASC-CDL standard color correction.
    (type: enum in ['LIFT_GAMMA_GAIN', 'OFFSET_POWER_SLOPE'], default 'LIFT_GAMMA_GAIN')
    
    :type: str
    """

    gain = (1.0, 1.0, 1.0)
    """Correction for Highlights
    (type: float array of 3 items in [0, inf], default (1.0, 1.0, 1.0))
    
    :type: mathutils.Color
    """

    gamma = (1.0, 1.0, 1.0)
    """Correction for Midtones
    (type: float array of 3 items in [0, inf], default (1.0, 1.0, 1.0))
    
    :type: mathutils.Color
    """

    lift = (1.0, 1.0, 1.0)
    """Correction for Shadows
    (type: float array of 3 items in [0, inf], default (1.0, 1.0, 1.0))
    
    :type: mathutils.Color
    """

    offset = (0.0, 0.0, 0.0)
    """Correction for Shadows
    (type: float array of 3 items in [0, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Color
    """

    offset_basis = 0.0
    """Support negative color by using this as the RGB basis
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    power = (1.0, 1.0, 1.0)
    """Correction for Midtones
    (type: float array of 3 items in [0, inf], default (1.0, 1.0, 1.0))
    
    :type: mathutils.Color
    """

    slope = (1.0, 1.0, 1.0)
    """Correction for Highlights
    (type: float array of 3 items in [0, inf], default (1.0, 1.0, 1.0))
    
    :type: mathutils.Color
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeColorCorrection(CompositorNode):
    """"""

    blue = True
    """Blue channel active
    (type: boolean, default True)
    
    :type: bool
    """

    green = True
    """Green channel active
    (type: boolean, default True)
    
    :type: bool
    """

    highlights_contrast = 1.0
    """Highlights contrast
    (type: float in [0, 4], default 1.0)
    
    :type: float
    """

    highlights_gain = 1.0
    """Highlights gain
    (type: float in [0, 4], default 1.0)
    
    :type: float
    """

    highlights_gamma = 1.0
    """Highlights gamma
    (type: float in [0, 4], default 1.0)
    
    :type: float
    """

    highlights_lift = 0.0
    """Highlights lift
    (type: float in [-1, 1], default 0.0)
    
    :type: float
    """

    highlights_saturation = 1.0
    """Highlights saturation
    (type: float in [0, 4], default 1.0)
    
    :type: float
    """

    master_contrast = 1.0
    """Master contrast
    (type: float in [0, 4], default 1.0)
    
    :type: float
    """

    master_gain = 1.0
    """Master gain
    (type: float in [0, 4], default 1.0)
    
    :type: float
    """

    master_gamma = 1.0
    """Master gamma
    (type: float in [0, 4], default 1.0)
    
    :type: float
    """

    master_lift = 0.0
    """Master lift
    (type: float in [-1, 1], default 0.0)
    
    :type: float
    """

    master_saturation = 1.0
    """Master saturation
    (type: float in [0, 4], default 1.0)
    
    :type: float
    """

    midtones_contrast = 1.0
    """Midtones contrast
    (type: float in [0, 4], default 1.0)
    
    :type: float
    """

    midtones_end = 0.7
    """End of midtones
    (type: float in [0, 1], default 0.7)
    
    :type: float
    """

    midtones_gain = 1.0
    """Midtones gain
    (type: float in [0, 4], default 1.0)
    
    :type: float
    """

    midtones_gamma = 1.0
    """Midtones gamma
    (type: float in [0, 4], default 1.0)
    
    :type: float
    """

    midtones_lift = 0.0
    """Midtones lift
    (type: float in [-1, 1], default 0.0)
    
    :type: float
    """

    midtones_saturation = 1.0
    """Midtones saturation
    (type: float in [0, 4], default 1.0)
    
    :type: float
    """

    midtones_start = 0.2
    """Start of midtones
    (type: float in [0, 1], default 0.2)
    
    :type: float
    """

    red = True
    """Red channel active
    (type: boolean, default True)
    
    :type: bool
    """

    shadows_contrast = 1.0
    """Shadows contrast
    (type: float in [0, 4], default 1.0)
    
    :type: float
    """

    shadows_gain = 1.0
    """Shadows gain
    (type: float in [0, 4], default 1.0)
    
    :type: float
    """

    shadows_gamma = 1.0
    """Shadows gamma
    (type: float in [0, 4], default 1.0)
    
    :type: float
    """

    shadows_lift = 0.0
    """Shadows lift
    (type: float in [-1, 1], default 0.0)
    
    :type: float
    """

    shadows_saturation = 1.0
    """Shadows saturation
    (type: float in [0, 4], default 1.0)
    
    :type: float
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeColorMatte(CompositorNode):
    """"""

    color_hue = 0.0
    """Hue tolerance for colors to be considered a keying color
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    color_saturation = 0.0
    """Saturation Tolerance for the color
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    color_value = 0.0
    """Value Tolerance for the color
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeColorSpill(CompositorNode):
    """"""

    channel = 'R'
    """
    * 'R': R, Red Spill Suppression.
    * 'G': G, Green Spill Suppression.
    * 'B': B, Blue Spill Suppression.
    (type: enum in ['R', 'G', 'B'], default 'R')
    
    :type: str
    """

    limit_channel = 'R'
    """
    * 'R': R, Limit by Red.
    * 'G': G, Limit by Green.
    * 'B': B, Limit by Blue.
    (type: enum in ['R', 'G', 'B'], default 'R')
    
    :type: str
    """

    limit_method = 'SIMPLE'
    """
    * 'SIMPLE': Simple, Simple Limit Algorithm.
    * 'AVERAGE': Average, Average Limit Algorithm.
    (type: enum in ['SIMPLE', 'AVERAGE'], default 'SIMPLE')
    
    :type: str
    """

    ratio = 0.0
    """Scale limit by value
    (type: float in [0.5, 1.5], default 0.0)
    
    :type: float
    """

    unspill_blue = 0.0
    """Blue spillmap scale
    (type: float in [0, 1.5], default 0.0)
    
    :type: float
    """

    unspill_green = 0.0
    """Green spillmap scale
    (type: float in [0, 1.5], default 0.0)
    
    :type: float
    """

    unspill_red = 0.0
    """Red spillmap scale
    (type: float in [0, 1.5], default 0.0)
    
    :type: float
    """

    use_unspill = False
    """Compensate all channels (differently) by hand
    (type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeCombHSVA(CompositorNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeCombRGBA(CompositorNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeCombYCCA(CompositorNode):
    """"""

    mode = 'ITUBT601'
    """(type: enum in ['ITUBT601', 'ITUBT709', 'JFIF'], default 'ITUBT601')
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeCombYUVA(CompositorNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeComposite(CompositorNode):
    """"""

    use_alpha = False
    """Colors are treated alpha premultiplied, or colors output straight (alpha gets set to 1)
    (type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeCornerPin(CompositorNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeCrop(CompositorNode):
    """"""

    max_x = 0
    """(type: int in [0, 10000], default 0)
    
    :type: int
    """

    max_y = 0
    """(type: int in [0, 10000], default 0)
    
    :type: int
    """

    min_x = 0
    """(type: int in [0, 10000], default 0)
    
    :type: int
    """

    min_y = 0
    """(type: int in [0, 10000], default 0)
    
    :type: int
    """

    rel_max_x = 0.0
    """(type: float in [0, 1], default 0.0)
    
    :type: float
    """

    rel_max_y = 0.0
    """(type: float in [0, 1], default 0.0)
    
    :type: float
    """

    rel_min_x = 0.0
    """(type: float in [0, 1], default 0.0)
    
    :type: float
    """

    rel_min_y = 0.0
    """(type: float in [0, 1], default 0.0)
    
    :type: float
    """

    relative = False
    """Use relative values to crop image
    (type: boolean, default False)
    
    :type: bool
    """

    use_crop_size = False
    """Whether to crop the size of the input image
    (type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeCurveRGB(CompositorNode):
    """"""

    mapping = None
    """(type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeCurveVec(CompositorNode):
    """"""

    mapping = None
    """(type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeDBlur(CompositorNode):
    """"""

    angle = 0.0
    """(type: float in [0, 6.28319], default 0.0)
    
    :type: float
    """

    center_x = 0.0
    """(type: float in [0, 1], default 0.0)
    
    :type: float
    """

    center_y = 0.0
    """(type: float in [0, 1], default 0.0)
    
    :type: float
    """

    distance = 0.0
    """(type: float in [-1, 1], default 0.0)
    
    :type: float
    """

    iterations = 0
    """(type: int in [1, 32], default 0)
    
    :type: int
    """

    spin = 0.0
    """(type: float in [-6.28319, 6.28319], default 0.0)
    
    :type: float
    """

    use_wrap = False
    """(type: boolean, default False)
    
    :type: bool
    """

    zoom = 0.0
    """(type: float in [0, 100], default 0.0)
    
    :type: float
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeDefocus(CompositorNode):
    """"""

    angle = 0.0
    """Bokeh shape rotation offset
    (type: float in [0, 1.5708], default 0.0)
    
    :type: float
    """

    blur_max = 0.0
    """Blur limit, maximum CoC radius
    (type: float in [0, 10000], default 0.0)
    
    :type: float
    """

    bokeh = 'CIRCLE'
    """
    * 'OCTAGON': Octagonal, 8 sides.
    * 'HEPTAGON': Heptagonal, 7 sides.
    * 'HEXAGON': Hexagonal, 6 sides.
    * 'PENTAGON': Pentagonal, 5 sides.
    * 'SQUARE': Square, 4 sides.
    * 'TRIANGLE': Triangular, 3 sides.
    * 'CIRCLE': Circular.
    (type: enum in ['OCTAGON', 'HEPTAGON', 'HEXAGON', 'PENTAGON', 'SQUARE', 'TRIANGLE', 'CIRCLE'], default 'CIRCLE')
    
    :type: str
    """

    f_stop = 0.0
    """Amount of focal blur, 128=infinity=perfect focus, half the value doubles the blur radius
    (type: float in [0, 128], default 0.0)
    
    :type: float
    """

    scene = None
    """Scene from which to select the active camera (render scene if undefined)
    (type: bpy.types.Scene)
    
    :type: Scene
    """

    threshold = 0.0
    """CoC radius threshold, prevents background bleed on in-focus midground, 0=off
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    use_gamma_correction = False
    """Enable gamma correction before and after main process
    (type: boolean, default False)
    
    :type: bool
    """

    use_preview = False
    """Enable low quality mode, useful for preview
    (type: boolean, default False)
    
    :type: bool
    """

    use_zbuffer = False
    """Disable when using an image as input instead of actual z-buffer (auto enabled if node not image based, eg. time node)
    (type: boolean, default False)
    
    :type: bool
    """

    z_scale = 0.0
    """Scale the Z input when not using a z-buffer, controls maximum blur designated by the color white or input value 1
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeDespeckle(CompositorNode):
    """"""

    threshold = 0.0
    """Threshold for detecting pixels to despeckle
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    threshold_neighbor = 0.0
    """Threshold for the number of neighbor pixels that must match
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeDiffMatte(CompositorNode):
    """"""

    falloff = 0.0
    """Color distances below this additional threshold are partially keyed
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    tolerance = 0.0
    """Color distances below this threshold are keyed
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeDilateErode(CompositorNode):
    """"""

    distance = 0
    """Distance to grow/shrink (number of iterations)
    (type: int in [-5000, 5000], default 0)
    
    :type: int
    """

    edge = 0.0
    """Edge to inset
    (type: float in [-100, 100], default 0.0)
    
    :type: float
    """

    falloff = 'SMOOTH'
    """Falloff type the feather
    * 'SMOOTH': Smooth, Smooth falloff.
    * 'SPHERE': Sphere, Spherical falloff.
    * 'ROOT': Root, Root falloff.
    * 'INVERSE_SQUARE': Inverse Square, Inverse Square falloff.
    * 'SHARP': Sharp, Sharp falloff.
    * 'LINEAR': Linear, Linear falloff.
    (type: enum in ['SMOOTH', 'SPHERE', 'ROOT', 'INVERSE_SQUARE', 'SHARP', 'LINEAR'], default 'SMOOTH')
    
    :type: str
    """

    mode = 'STEP'
    """Growing/shrinking mode
    (type: enum in ['STEP', 'THRESHOLD', 'DISTANCE', 'FEATHER'], default 'STEP')
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeDisplace(CompositorNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeDistanceMatte(CompositorNode):
    """"""

    channel = 'RGB'
    """
    * 'RGB': RGB, RGB color space.
    * 'YCC': YCC, YCbCr Suppression.
    (type: enum in ['RGB', 'YCC'], default 'RGB')
    
    :type: str
    """

    falloff = 0.0
    """Color distances below this additional threshold are partially keyed
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    tolerance = 0.0
    """Color distances below this threshold are keyed
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeDoubleEdgeMask(CompositorNode):
    """"""

    edge_mode = 'BLEED_OUT'
    """
    * 'BLEED_OUT': Bleed Out, Allow mask pixels to bleed along edges.
    * 'KEEP_IN': Keep In, Restrict mask pixels from touching edges.
    (type: enum in ['BLEED_OUT', 'KEEP_IN'], default 'BLEED_OUT')
    
    :type: str
    """

    inner_mode = 'ALL'
    """
    * 'ALL': All, All pixels on inner mask edge are considered during mask calculation.
    * 'ADJACENT_ONLY': Adjacent Only, Only inner mask pixels adjacent to outer mask pixels are considered during mask calculation.
    (type: enum in ['ALL', 'ADJACENT_ONLY'], default 'ALL')
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeEllipseMask(CompositorNode):
    """"""

    height = 0.2
    """Height of the ellipse
    (type: float in [0, 2], default 0.2)
    
    :type: float
    """

    mask_type = 'ADD'
    """(type: enum in ['ADD', 'SUBTRACT', 'MULTIPLY', 'NOT'], default 'ADD')
    
    :type: str
    """

    rotation = 0.0
    """Rotation angle of the ellipse
    (type: float in [-31.4159, 31.4159], default 0.0)
    
    :type: float
    """

    width = 0.3
    """Width of the ellipse
    (type: float in [0, 2], default 0.3)
    
    :type: float
    """

    x = 0.5
    """X position of the middle of the ellipse
    (type: float in [-1, 2], default 0.5)
    
    :type: float
    """

    y = 0.5
    """Y position of the middle of the ellipse
    (type: float in [-1, 2], default 0.5)
    
    :type: float
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeFilter(CompositorNode):
    """"""

    filter_type = 'SOFTEN'
    """(type: enum in ['SOFTEN', 'SHARPEN', 'LAPLACE', 'SOBEL', 'PREWITT', 'KIRSCH', 'SHADOW'], default 'SOFTEN')
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeFlip(CompositorNode):
    """"""

    axis = 'X'
    """(type: enum in ['X', 'Y', 'XY'], default 'X')
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeGamma(CompositorNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeGlare(CompositorNode):
    """"""

    angle_offset = 0.0
    """Streak angle offset
    (type: float in [0, 3.14159], default 0.0)
    
    :type: float
    """

    color_modulation = 0.0
    """Amount of Color Modulation, modulates colors of streaks and ghosts for a spectral dispersion effect
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    fade = 0.0
    """Streak fade-out factor
    (type: float in [0.75, 1], default 0.0)
    
    :type: float
    """

    glare_type = 'SIMPLE_STAR'
    """(type: enum in ['GHOSTS', 'STREAKS', 'FOG_GLOW', 'SIMPLE_STAR'], default 'SIMPLE_STAR')
    
    :type: str
    """

    iterations = 0
    """(type: int in [2, 5], default 0)
    
    :type: int
    """

    mix = 0.0
    """-1 is original image only, 0 is exact 50/50 mix, 1 is processed image only
    (type: float in [-1, 1], default 0.0)
    
    :type: float
    """

    quality = 'HIGH'
    """If not set to high quality, the effect will be applied to a low-res copy of the source image
    (type: enum in ['HIGH', 'MEDIUM', 'LOW'], default 'HIGH')
    
    :type: str
    """

    size = 0
    """Glow/glare size (not actual size; relative to initial size of bright area of pixels)
    (type: int in [6, 9], default 0)
    
    :type: int
    """

    streaks = 0
    """Total number of streaks
    (type: int in [1, 16], default 0)
    
    :type: int
    """

    threshold = 0.0
    """The glare filter will only be applied to pixels brighter than this value
    (type: float in [0, 1000], default 0.0)
    
    :type: float
    """

    use_rotate_45 = False
    """Simple star filter: add 45 degree rotation offset
    (type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeGroup(CompositorNode):
    """"""

    interface = None
    """Interface socket data
    (type: bpy.types.PropertyGroup, (readonly))
    
    :type: PropertyGroup
    """

    node_tree = None
    """(type: bpy.types.NodeTree)
    
    :type: NodeTree
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeHueCorrect(CompositorNode):
    """"""

    mapping = None
    """(type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeHueSat(CompositorNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeIDMask(CompositorNode):
    """"""

    index = 0
    """Pass index number to convert to alpha
    (type: int in [0, 32767], default 0)
    
    :type: int
    """

    use_antialiasing = False
    """Apply an anti-aliasing filter to the mask
    (type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeImage(CompositorNode):
    """"""

    frame_duration = 0
    """Number of images of a movie to use
    (type: int in [0, 500000], default 0)
    
    :type: int
    """

    frame_offset = 0
    """Offset the number of the frame to use in the animation
    (type: int in [-500000, 500000], default 0)
    
    :type: int
    """

    frame_start = 0
    """Global starting frame of the movie/sequence, assuming first picture has a #1
    (type: int in [-500000, 500000], default 0)
    
    :type: int
    """

    has_layers = False
    """True if this image has any named layer
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    has_views = False
    """True if this image has multiple views
    (type: boolean, default False, (readonly))
    
    :type: bool
    """

    image = None
    """(type: bpy.types.Image)
    
    :type: Image
    """

    layer = 'PLACEHOLDER'
    """(type: enum in ['PLACEHOLDER'], default 'PLACEHOLDER')
    
    :type: str
    """

    use_auto_refresh = False
    """Always refresh image on frame changes
    (type: boolean, default False)
    
    :type: bool
    """

    use_cyclic = False
    """Cycle the images in the movie
    (type: boolean, default False)
    
    :type: bool
    """

    use_straight_alpha_output = False
    """Put Node output buffer to straight alpha instead of premultiplied
    (type: boolean, default False)
    
    :type: bool
    """

    view = 'ALL'
    """(type: enum in ['ALL'], default 'ALL')
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeInpaint(CompositorNode):
    """"""

    distance = 0
    """Distance to inpaint (number of iterations)
    (type: int in [1, 10000], default 0)
    
    :type: int
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeInvert(CompositorNode):
    """"""

    invert_alpha = False
    """(type: boolean, default False)
    
    :type: bool
    """

    invert_rgb = False
    """(type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeKeying(CompositorNode):
    """"""

    blur_post = 0
    """Matte blur size which applies after clipping and dilate/eroding
    (type: int in [0, 2048], default 0)
    
    :type: int
    """

    blur_pre = 0
    """Chroma pre-blur size which applies before running keyer
    (type: int in [0, 2048], default 0)
    
    :type: int
    """

    clip_black = 0.0
    """Value of non-scaled matte pixel which considers as fully background pixel
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    clip_white = 0.0
    """Value of non-scaled matte pixel which considers as fully foreground pixel
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    despill_balance = 0.0
    """Balance between non-key colors used to detect amount of key color to be removed
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    despill_factor = 0.0
    """Factor of despilling screen color from image
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    dilate_distance = 0
    """Matte dilate/erode side
    (type: int in [-100, 100], default 0)
    
    :type: int
    """

    edge_kernel_radius = 0
    """Radius of kernel used to detect whether pixel belongs to edge
    (type: int in [0, 100], default 0)
    
    :type: int
    """

    edge_kernel_tolerance = 0.0
    """Tolerance to pixels inside kernel which are treating as belonging to the same plane
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    feather_distance = 0
    """Distance to grow/shrink the feather
    (type: int in [-100, 100], default 0)
    
    :type: int
    """

    feather_falloff = 'SMOOTH'
    """Falloff type the feather
    * 'SMOOTH': Smooth, Smooth falloff.
    * 'SPHERE': Sphere, Spherical falloff.
    * 'ROOT': Root, Root falloff.
    * 'INVERSE_SQUARE': Inverse Square, Inverse Square falloff.
    * 'SHARP': Sharp, Sharp falloff.
    * 'LINEAR': Linear, Linear falloff.
    (type: enum in ['SMOOTH', 'SPHERE', 'ROOT', 'INVERSE_SQUARE', 'SHARP', 'LINEAR'], default 'SMOOTH')
    
    :type: str
    """

    screen_balance = 0.0
    """Balance between two non-primary channels primary channel is comparing against
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeKeyingScreen(CompositorNode):
    """"""

    clip = None
    """(type: bpy.types.MovieClip)
    
    :type: MovieClip
    """

    tracking_object = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeLensdist(CompositorNode):
    """"""

    use_fit = False
    """For positive distortion factor only: scale image such that black areas are not visible
    (type: boolean, default False)
    
    :type: bool
    """

    use_jitter = False
    """Enable/disable jittering (faster, but also noisier)
    (type: boolean, default False)
    
    :type: bool
    """

    use_projector = False
    """Enable/disable projector mode (the effect is applied in horizontal direction only)
    (type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeLevels(CompositorNode):
    """"""

    channel = 'COMBINED_RGB'
    """
    * 'COMBINED_RGB': C, Combined RGB.
    * 'RED': R, Red Channel.
    * 'GREEN': G, Green Channel.
    * 'BLUE': B, Blue Channel.
    * 'LUMINANCE': L, Luminance Channel.
    (type: enum in ['COMBINED_RGB', 'RED', 'GREEN', 'BLUE', 'LUMINANCE'], default 'COMBINED_RGB')
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeLumaMatte(CompositorNode):
    """"""

    limit_max = 0.0
    """Values higher than this setting are 100% opaque
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    limit_min = 0.0
    """Values lower than this setting are 100% keyed
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeMapRange(CompositorNode):
    """"""

    use_clamp = False
    """Clamp result of the node to 0..1 range
    (type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeMapUV(CompositorNode):
    """"""

    alpha = 0
    """(type: int in [0, 100], default 0)
    
    :type: int
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeMapValue(CompositorNode):
    """"""

    max = (0.0)
    """(type: float array of 1 items in [-1000, 1000], default (0.0))
    
    :type: collections.Sequence[float]
    """

    min = (0.0)
    """(type: float array of 1 items in [-1000, 1000], default (0.0))
    
    :type: collections.Sequence[float]
    """

    offset = (0.0)
    """(type: float array of 1 items in [-1000, 1000], default (0.0))
    
    :type: collections.Sequence[float]
    """

    size = (0.0)
    """(type: float array of 1 items in [-1000, 1000], default (0.0))
    
    :type: collections.Sequence[float]
    """

    use_max = False
    """(type: boolean, default False)
    
    :type: bool
    """

    use_min = False
    """(type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeMask(CompositorNode):
    """"""

    mask = None
    """(type: bpy.types.Mask)
    
    :type: Mask
    """

    motion_blur_samples = 0
    """Number of motion blur samples
    (type: int in [1, 64], default 0)
    
    :type: int
    """

    motion_blur_shutter = 0.0
    """Exposure for motion blur as a factor of FPS
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    size_source = 'SCENE'
    """Where to get the mask size from for aspect/size information
    * 'SCENE': Scene Size.
    * 'FIXED': Fixed, Use pixel size for the buffer.
    * 'FIXED_SCENE': Fixed/Scene, Pixel size scaled by scene percentage.
    (type: enum in ['SCENE', 'FIXED', 'FIXED_SCENE'], default 'SCENE')
    
    :type: str
    """

    size_x = 0
    """(type: int in [1, 10000], default 0)
    
    :type: int
    """

    size_y = 0
    """(type: int in [1, 10000], default 0)
    
    :type: int
    """

    use_antialiasing = False
    """Apply an anti-aliasing filter to the mask
    (type: boolean, default False)
    
    :type: bool
    """

    use_feather = False
    """Use feather information from the mask
    (type: boolean, default False)
    
    :type: bool
    """

    use_motion_blur = False
    """Use multi-sampled motion blur of the mask
    (type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeMath(CompositorNode):
    """"""

    operation = 'ADD'
    """(type: enum in ['ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'SINE', 'COSINE', 'TANGENT', 'ARCSINE', 'ARCCOSINE', 'ARCTANGENT', 'POWER', 'LOGARITHM', 'MINIMUM', 'MAXIMUM', 'ROUND', 'LESS_THAN', 'GREATER_THAN', 'MODULO', 'ABSOLUTE'], default 'ADD')
    
    :type: str
    """

    use_clamp = False
    """Clamp result of the node to 0..1 range
    (type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeMixRGB(CompositorNode):
    """"""

    blend_type = 'MIX'
    """(type: enum in ['MIX', 'ADD', 'MULTIPLY', 'SUBTRACT', 'SCREEN', 'DIVIDE', 'DIFFERENCE', 'DARKEN', 'LIGHTEN', 'OVERLAY', 'DODGE', 'BURN', 'HUE', 'SATURATION', 'VALUE', 'COLOR', 'SOFT_LIGHT', 'LINEAR_LIGHT'], default 'MIX')
    
    :type: str
    """

    use_alpha = False
    """Include alpha of second input in this operation
    (type: boolean, default False)
    
    :type: bool
    """

    use_clamp = False
    """Clamp result of the node to 0..1 range
    (type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeMovieClip(CompositorNode):
    """"""

    clip = None
    """(type: bpy.types.MovieClip)
    
    :type: MovieClip
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeMovieDistortion(CompositorNode):
    """"""

    clip = None
    """(type: bpy.types.MovieClip)
    
    :type: MovieClip
    """

    distortion_type = 'UNDISTORT'
    """Distortion to use to filter image
    (type: enum in ['UNDISTORT', 'DISTORT'], default 'UNDISTORT')
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeNormal(CompositorNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeNormalize(CompositorNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeOutputFile(CompositorNode):
    """"""

    active_input_index = 0
    """Active input index in details view list
    (type: int in [-inf, inf], default 0)
    
    :type: int
    """

    base_path = ""
    """Base output path for the image
    (type: string, default "", (never None))
    
    :type: str
    """

    file_slots = None
    """(type: bpy.types.CompositorNodeOutputFileFileSlots bpy.types.bpy_prop_collection of bpy.types.NodeOutputFileSlotFile, (readonly))
    
    :type: CompositorNodeOutputFileFileSlots
    """

    format = None
    """(type: bpy.types.ImageFormatSettings, (readonly))
    
    :type: ImageFormatSettings
    """

    layer_slots = None
    """(type: bpy.types.CompositorNodeOutputFileLayerSlots bpy.types.bpy_prop_collection of bpy.types.NodeOutputFileSlotLayer, (readonly))
    
    :type: CompositorNodeOutputFileLayerSlots
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodePixelate(CompositorNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodePlaneTrackDeform(CompositorNode):
    """"""

    clip = None
    """(type: bpy.types.MovieClip)
    
    :type: MovieClip
    """

    motion_blur_samples = 0
    """Number of motion blur samples
    (type: int in [1, 64], default 0)
    
    :type: int
    """

    motion_blur_shutter = 0.0
    """Exposure for motion blur as a factor of FPS
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    plane_track_name = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    tracking_object = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    use_motion_blur = False
    """Use multi-sampled motion blur of the mask
    (type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodePremulKey(CompositorNode):
    """"""

    mapping = 'STRAIGHT_TO_PREMUL'
    """Conversion between premultiplied alpha and key alpha
    (type: enum in ['STRAIGHT_TO_PREMUL', 'PREMUL_TO_STRAIGHT'], default 'STRAIGHT_TO_PREMUL')
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeRGB(CompositorNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeRGBToBW(CompositorNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeRLayers(CompositorNode):
    """"""

    layer = 'PLACEHOLDER'
    """(type: enum in ['PLACEHOLDER'], default 'PLACEHOLDER')
    
    :type: str
    """

    scene = None
    """(type: bpy.types.Scene)
    
    :type: Scene
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeRotate(CompositorNode):
    """"""

    filter_type = 'NEAREST'
    """Method to use to filter rotation
    (type: enum in ['NEAREST', 'BILINEAR', 'BICUBIC'], default 'NEAREST')
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeScale(CompositorNode):
    """"""

    frame_method = 'STRETCH'
    """How the image fits in the camera frame
    (type: enum in ['STRETCH', 'FIT', 'CROP'], default 'STRETCH')
    
    :type: str
    """

    offset_x = 0.0
    """Offset image horizontally (factor of image size)
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    offset_y = 0.0
    """Offset image vertically (factor of image size)
    (type: float in [-inf, inf], default 0.0)
    
    :type: float
    """

    space = 'RELATIVE'
    """Coordinate space to scale relative to
    (type: enum in ['RELATIVE', 'ABSOLUTE', 'SCENE_SIZE', 'RENDER_SIZE'], default 'RELATIVE')
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeSepHSVA(CompositorNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeSepRGBA(CompositorNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeSepYCCA(CompositorNode):
    """"""

    mode = 'ITUBT601'
    """(type: enum in ['ITUBT601', 'ITUBT709', 'JFIF'], default 'ITUBT601')
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeSepYUVA(CompositorNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeSetAlpha(CompositorNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeSplitViewer(CompositorNode):
    """"""

    axis = 'X'
    """(type: enum in ['X', 'Y'], default 'X')
    
    :type: str
    """

    factor = 0
    """(type: int in [0, 100], default 0)
    
    :type: int
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeStabilize(CompositorNode):
    """"""

    clip = None
    """(type: bpy.types.MovieClip)
    
    :type: MovieClip
    """

    filter_type = 'NEAREST'
    """Method to use to filter stabilization
    (type: enum in ['NEAREST', 'BILINEAR', 'BICUBIC'], default 'NEAREST')
    
    :type: str
    """

    invert = False
    """Invert stabilization to re-introduce motion to the frame
    (type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeSunBeams(CompositorNode):
    """"""

    ray_length = 0.0
    """Length of rays as a factor of the image size
    (type: float in [0, 100], default 0.0)
    
    :type: float
    """

    source = (0.0, 0.0)
    """Source point of rays as a factor of the image width & height
    (type: float array of 2 items in [-100, 100], default (0.0, 0.0))
    
    :type: collections.Sequence[float]
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeSwitch(CompositorNode):
    """"""

    check = False
    """Off: first socket, On: second socket
    (type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeSwitchView(CompositorNode):
    """"""

    check = False
    """Off: first socket, On: second socket
    (type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeTexture(CompositorNode):
    """"""

    node_output = 0
    """For node-based textures, which output node to use
    (type: int in [-32768, 32767], default 0)
    
    :type: int
    """

    texture = None
    """(type: bpy.types.Texture)
    
    :type: Texture
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeTime(CompositorNode):
    """"""

    curve = None
    """(type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    frame_end = 0
    """(type: int in [-32768, 32767], default 0)
    
    :type: int
    """

    frame_start = 0
    """(type: int in [-32768, 32767], default 0)
    
    :type: int
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeTonemap(CompositorNode):
    """"""

    adaptation = 0.0
    """If 0, global; if 1, based on pixel intensity
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    contrast = 0.0
    """Set to 0 to use estimate from input image
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    correction = 0.0
    """If 0, same for all channels; if 1, each independent
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    gamma = 0.0
    """If not used, set to 1
    (type: float in [0.001, 3], default 0.0)
    
    :type: float
    """

    intensity = 0.0
    """If less than zero, darkens image; otherwise, makes it brighter
    (type: float in [-8, 8], default 0.0)
    
    :type: float
    """

    key = 0.0
    """The value the average luminance is mapped to
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    offset = 0.0
    """Normally always 1, but can be used as an extra control to alter the brightness curve
    (type: float in [0.001, 10], default 0.0)
    
    :type: float
    """

    tonemap_type = 'RH_SIMPLE'
    """(type: enum in ['RD_PHOTORECEPTOR', 'RH_SIMPLE'], default 'RH_SIMPLE')
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeTrackPos(CompositorNode):
    """"""

    clip = None
    """(type: bpy.types.MovieClip)
    
    :type: MovieClip
    """

    frame_relative = 0
    """Frame to be used for relative position
    (type: int in [-32768, 32767], default 0)
    
    :type: int
    """

    position = 'ABSOLUTE'
    """Which marker position to use for output
    * 'ABSOLUTE': Absolute, Output absolute position of a marker.
    * 'RELATIVE_START': Relative Start, Output position of a marker relative to first marker of a track.
    * 'RELATIVE_FRAME': Relative Frame, Output position of a marker relative to marker at given frame number.
    * 'ABSOLUTE_FRAME': Absolute Frame, Output absolute position of a marker at given frame number.
    (type: enum in ['ABSOLUTE', 'RELATIVE_START', 'RELATIVE_FRAME', 'ABSOLUTE_FRAME'], default 'ABSOLUTE')
    
    :type: str
    """

    track_name = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    tracking_object = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeTransform(CompositorNode):
    """"""

    filter_type = 'NEAREST'
    """Method to use to filter transform
    (type: enum in ['NEAREST', 'BILINEAR', 'BICUBIC'], default 'NEAREST')
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeTranslate(CompositorNode):
    """"""

    use_relative = False
    """Use relative (fraction of input image size) values to define translation
    (type: boolean, default False)
    
    :type: bool
    """

    wrap_axis = 'NONE'
    """Wrap image on a specific axis
    * 'NONE': None, No wrapping on X and Y.
    * 'XAXIS': X Axis, Wrap all pixels on the X axis.
    * 'YAXIS': Y Axis, Wrap all pixels on the Y axis.
    * 'BOTH': Both Axes, Wrap all pixels on both axes.
    (type: enum in ['NONE', 'XAXIS', 'YAXIS', 'BOTH'], default 'NONE')
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeValToRGB(CompositorNode):
    """"""

    color_ramp = None
    """(type: bpy.types.ColorRamp, (readonly))
    
    :type: ColorRamp
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeValue(CompositorNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeVecBlur(CompositorNode):
    """"""

    factor = 0.0
    """Scaling factor for motion vectors (actually, 'shutter speed', in frames)
    (type: float in [0, 20], default 0.0)
    
    :type: float
    """

    samples = 0
    """(type: int in [1, 256], default 0)
    
    :type: int
    """

    speed_max = 0
    """Maximum speed, or zero for none
    (type: int in [0, 1024], default 0)
    
    :type: int
    """

    speed_min = 0
    """Minimum speed for a pixel to be blurred (used to separate background from foreground)
    (type: int in [0, 1024], default 0)
    
    :type: int
    """

    use_curved = False
    """Interpolate between frames in a Bezier curve, rather than linearly
    (type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeViewer(CompositorNode):
    """"""

    center_x = 0.5
    """(type: float in [0, 1], default 0.5)
    
    :type: float
    """

    center_y = 0.5
    """(type: float in [0, 1], default 0.5)
    
    :type: float
    """

    tile_order = 'CENTEROUT'
    """Tile order
    * 'CENTEROUT': Center, Expand from center.
    * 'RANDOM': Random, Random tiles.
    * 'BOTTOMUP': Bottom up, Expand from bottom.
    * 'RULE_OF_THIRDS': Rule of thirds, Expand from 9 places.
    (type: enum in ['CENTEROUT', 'RANDOM', 'BOTTOMUP', 'RULE_OF_THIRDS'], default 'CENTEROUT')
    
    :type: str
    """

    use_alpha = False
    """Colors are treated alpha premultiplied, or colors output straight (alpha gets set to 1)
    (type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class CompositorNodeZcombine(CompositorNode):
    """"""

    use_alpha = False
    """Take Alpha channel into account when doing the Z operation
    (type: boolean, default False)
    
    :type: bool
    """

    use_antialias_z = False
    """Anti-alias the z-buffer to try to avoid artifacts, mostly useful for Blender renders
    (type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def update(self):
        """"""


class ShaderNodeAddShader(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeAmbientOcclusion(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeAttribute(ShaderNode):
    """"""

    attribute_name = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeBackground(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeBlackbody(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeBrightContrast(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeBsdfAnisotropic(ShaderNode):
    """"""

    distribution = 'BECKMANN'
    """(type: enum in ['BECKMANN', 'GGX', 'MULTI_GGX', 'ASHIKHMIN_SHIRLEY'], default 'BECKMANN')
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeBsdfDiffuse(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeBsdfGlass(ShaderNode):
    """"""

    distribution = 'BECKMANN'
    """(type: enum in ['SHARP', 'BECKMANN', 'GGX', 'MULTI_GGX'], default 'BECKMANN')
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeBsdfGlossy(ShaderNode):
    """"""

    distribution = 'BECKMANN'
    """(type: enum in ['SHARP', 'BECKMANN', 'GGX', 'ASHIKHMIN_SHIRLEY', 'MULTI_GGX'], default 'BECKMANN')
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeBsdfHair(ShaderNode):
    """"""

    component = 'Reflection'
    """(type: enum in ['Reflection', 'Transmission'], default 'Reflection')
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeBsdfRefraction(ShaderNode):
    """"""

    distribution = 'BECKMANN'
    """(type: enum in ['SHARP', 'BECKMANN', 'GGX'], default 'BECKMANN')
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeBsdfToon(ShaderNode):
    """"""

    component = 'DIFFUSE'
    """(type: enum in ['DIFFUSE', 'GLOSSY'], default 'DIFFUSE')
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeBsdfTranslucent(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeBsdfTransparent(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeBsdfVelvet(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeBump(ShaderNode):
    """"""

    invert = False
    """Invert the bump mapping direction to push into the surface instead of out
    (type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeCameraData(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeCombineHSV(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeCombineRGB(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeCombineXYZ(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeEmission(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeExtendedMaterial(ShaderNode):
    """"""

    invert_normal = False
    """Material Node uses inverted normal
    (type: boolean, default False)
    
    :type: bool
    """

    material = None
    """(type: bpy.types.Material)
    
    :type: Material
    """

    use_diffuse = False
    """Material Node outputs Diffuse
    (type: boolean, default False)
    
    :type: bool
    """

    use_specular = False
    """Material Node outputs Specular
    (type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeFresnel(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeGamma(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeGeometry(ShaderNode):
    """"""

    color_layer = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    uv_layer = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeGroup(ShaderNode):
    """"""

    interface = None
    """Interface socket data
    (type: bpy.types.PropertyGroup, (readonly))
    
    :type: PropertyGroup
    """

    node_tree = None
    """(type: bpy.types.NodeTree)
    
    :type: NodeTree
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeHairInfo(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeHoldout(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeHueSaturation(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeInvert(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeLampData(ShaderNode):
    """"""

    lamp_object = None
    """(type: bpy.types.Object)
    
    :type: Object
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeLayerWeight(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeLightFalloff(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeLightPath(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeMapping(ShaderNode):
    """"""

    max = (1.0, 1.0, 1.0)
    """Maximum value for clipping
    (type: float array of 3 items in [-inf, inf], default (1.0, 1.0, 1.0))
    
    :type: mathutils.Vector
    """

    min = (0.0, 0.0, 0.0)
    """Minimum value for clipping
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    rotation = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Euler
    """

    scale = (1.0, 1.0, 1.0)
    """(type: float array of 3 items in [-inf, inf], default (1.0, 1.0, 1.0))
    
    :type: mathutils.Vector
    """

    translation = (0.0, 0.0, 0.0)
    """(type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 0.0))
    
    :type: mathutils.Vector
    """

    use_max = False
    """Whether to use maximum clipping value
    (type: boolean, default False)
    
    :type: bool
    """

    use_min = False
    """Whether to use minimum clipping value
    (type: boolean, default False)
    
    :type: bool
    """

    vector_type = 'POINT'
    """Type of vector that the mapping transforms
    * 'TEXTURE': Texture, Transform a texture by inverse mapping the texture coordinate.
    * 'POINT': Point, Transform a point.
    * 'VECTOR': Vector, Transform a direction vector.
    * 'NORMAL': Normal, Transform a normal vector with unit length.
    (type: enum in ['TEXTURE', 'POINT', 'VECTOR', 'NORMAL'], default 'POINT')
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeMaterial(ShaderNode):
    """"""

    invert_normal = False
    """Material Node uses inverted normal
    (type: boolean, default False)
    
    :type: bool
    """

    material = None
    """(type: bpy.types.Material)
    
    :type: Material
    """

    use_diffuse = False
    """Material Node outputs Diffuse
    (type: boolean, default False)
    
    :type: bool
    """

    use_specular = False
    """Material Node outputs Specular
    (type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeMath(ShaderNode):
    """"""

    operation = 'ADD'
    """(type: enum in ['ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'SINE', 'COSINE', 'TANGENT', 'ARCSINE', 'ARCCOSINE', 'ARCTANGENT', 'POWER', 'LOGARITHM', 'MINIMUM', 'MAXIMUM', 'ROUND', 'LESS_THAN', 'GREATER_THAN', 'MODULO', 'ABSOLUTE'], default 'ADD')
    
    :type: str
    """

    use_clamp = False
    """Clamp result of the node to 0..1 range
    (type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeMixRGB(ShaderNode):
    """"""

    blend_type = 'MIX'
    """(type: enum in ['MIX', 'ADD', 'MULTIPLY', 'SUBTRACT', 'SCREEN', 'DIVIDE', 'DIFFERENCE', 'DARKEN', 'LIGHTEN', 'OVERLAY', 'DODGE', 'BURN', 'HUE', 'SATURATION', 'VALUE', 'COLOR', 'SOFT_LIGHT', 'LINEAR_LIGHT'], default 'MIX')
    
    :type: str
    """

    use_alpha = False
    """Include alpha of second input in this operation
    (type: boolean, default False)
    
    :type: bool
    """

    use_clamp = False
    """Clamp result of the node to 0..1 range
    (type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeMixShader(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeNewGeometry(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeNormal(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeNormalMap(ShaderNode):
    """"""

    space = 'TANGENT'
    """Space of the input normal
    * 'TANGENT': Tangent Space, Tangent space normal mapping.
    * 'OBJECT': Object Space, Object space normal mapping.
    * 'WORLD': World Space, World space normal mapping.
    * 'BLENDER_OBJECT': Blender Object Space, Object space normal mapping, compatible with Blender render baking.
    * 'BLENDER_WORLD': Blender World Space, World space normal mapping, compatible with Blender render baking.
    (type: enum in ['TANGENT', 'OBJECT', 'WORLD', 'BLENDER_OBJECT', 'BLENDER_WORLD'], default 'TANGENT')
    
    :type: str
    """

    uv_map = ""
    """UV Map for tangent space maps
    (type: string, default "", (never None))
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeObjectInfo(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeOutput(ShaderNode):
    """"""

    is_active_output = False
    """True if this node is used as the active output
    (type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeOutputLamp(ShaderNode):
    """"""

    is_active_output = False
    """True if this node is used as the active output
    (type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeOutputLineStyle(ShaderNode):
    """"""

    blend_type = 'MIX'
    """(type: enum in ['MIX', 'ADD', 'MULTIPLY', 'SUBTRACT', 'SCREEN', 'DIVIDE', 'DIFFERENCE', 'DARKEN', 'LIGHTEN', 'OVERLAY', 'DODGE', 'BURN', 'HUE', 'SATURATION', 'VALUE', 'COLOR', 'SOFT_LIGHT', 'LINEAR_LIGHT'], default 'MIX')
    
    :type: str
    """

    is_active_output = False
    """True if this node is used as the active output
    (type: boolean, default False)
    
    :type: bool
    """

    use_alpha = False
    """Include alpha of second input in this operation
    (type: boolean, default False)
    
    :type: bool
    """

    use_clamp = False
    """Clamp result of the node to 0..1 range
    (type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeOutputMaterial(ShaderNode):
    """"""

    is_active_output = False
    """True if this node is used as the active output
    (type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeOutputWorld(ShaderNode):
    """"""

    is_active_output = False
    """True if this node is used as the active output
    (type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeParticleInfo(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeRGB(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeRGBCurve(ShaderNode):
    """"""

    mapping = None
    """(type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeRGBToBW(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeScript(ShaderNode):
    """"""

    bytecode = ""
    """Compile bytecode for shader script node
    (type: string, default "", (never None))
    
    :type: str
    """

    bytecode_hash = ""
    """Hash of compile bytecode, for quick equality checking
    (type: string, default "", (never None))
    
    :type: str
    """

    filepath = ""
    """Shader script path
    (type: string, default "", (never None))
    
    :type: str
    """

    mode = 'INTERNAL'
    """
    * 'INTERNAL': Internal, Use internal text data-block.
    * 'EXTERNAL': External, Use external .osl or .oso file.
    (type: enum in ['INTERNAL', 'EXTERNAL'], default 'INTERNAL')
    
    :type: str
    """

    script = None
    """Internal shader script to define the shader
    (type: bpy.types.Text)
    
    :type: Text
    """

    use_auto_update = False
    """Automatically update the shader when the .osl file changes (external scripts only)
    (type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeSeparateHSV(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeSeparateRGB(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeSeparateXYZ(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeSqueeze(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeSubsurfaceScattering(ShaderNode):
    """"""

    falloff = 'CUBIC'
    """Function to determine how much light nearby points contribute based on their distance to the shading point
    * 'CUBIC': Cubic, Simple cubic falloff function.
    * 'GAUSSIAN': Gaussian, Normal distribution, multiple can be combined to fit more complex profiles.
    * 'BURLEY': Christensen-Burley, Approximation to physically based volume scattering.
    (type: enum in ['CUBIC', 'GAUSSIAN', 'BURLEY'], default 'CUBIC')
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeTangent(ShaderNode):
    """"""

    axis = 'X'
    """Axis for radial tangents
    * 'X': X, X axis.
    * 'Y': Y, Y axis.
    * 'Z': Z, Z axis.
    (type: enum in ['X', 'Y', 'Z'], default 'X')
    
    :type: str
    """

    direction_type = 'RADIAL'
    """Method to use for the tangent
    * 'RADIAL': Radial, Radial tangent around the X, Y or Z axis.
    * 'UV_MAP': UV Map, Tangent from UV map.
    (type: enum in ['RADIAL', 'UV_MAP'], default 'RADIAL')
    
    :type: str
    """

    uv_map = ""
    """UV Map for tangent generated from UV
    (type: string, default "", (never None))
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeTexBrick(ShaderNode):
    """"""

    color_mapping = None
    """Color mapping settings
    (type: bpy.types.ColorMapping, (readonly, never None))
    
    :type: ColorMapping
    """

    offset = 0.5
    """(type: float in [0, 1], default 0.5)
    
    :type: float
    """

    offset_frequency = 2
    """(type: int in [1, 99], default 2)
    
    :type: int
    """

    squash = 1.0
    """(type: float in [0, 99], default 1.0)
    
    :type: float
    """

    squash_frequency = 2
    """(type: int in [1, 99], default 2)
    
    :type: int
    """

    texture_mapping = None
    """Texture coordinate mapping settings
    (type: bpy.types.TexMapping, (readonly, never None))
    
    :type: TexMapping
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeTexChecker(ShaderNode):
    """"""

    color_mapping = None
    """Color mapping settings
    (type: bpy.types.ColorMapping, (readonly, never None))
    
    :type: ColorMapping
    """

    texture_mapping = None
    """Texture coordinate mapping settings
    (type: bpy.types.TexMapping, (readonly, never None))
    
    :type: TexMapping
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeTexCoord(ShaderNode):
    """"""

    from_dupli = False
    """Use the parent of the dupli object if possible
    (type: boolean, default False)
    
    :type: bool
    """

    object = None
    """Use coordinates from this object (for object texture coordinates output)
    (type: bpy.types.Object)
    
    :type: Object
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeTexEnvironment(ShaderNode):
    """"""

    color_mapping = None
    """Color mapping settings
    (type: bpy.types.ColorMapping, (readonly, never None))
    
    :type: ColorMapping
    """

    color_space = 'COLOR'
    """Image file color space
    * 'COLOR': Color, Image contains color data, and will be converted to linear color for rendering.
    * 'NONE': Non-Color Data, Image contains non-color data, for example a displacement or normal map, and will not be converted.
    (type: enum in ['COLOR', 'NONE'], default 'COLOR')
    
    :type: str
    """

    image = None
    """(type: bpy.types.Image)
    
    :type: Image
    """

    image_user = None
    """Parameters defining which layer, pass and frame of the image is displayed
    (type: bpy.types.ImageUser, (readonly, never None))
    
    :type: ImageUser
    """

    interpolation = 'Linear'
    """Texture interpolation
    * 'Linear': Linear, Linear interpolation.
    * 'Closest': Closest, No interpolation (sample closest texel).
    * 'Cubic': Cubic, Cubic interpolation (CPU only).
    * 'Smart': Smart, Bicubic when magnifying, else bilinear (OSL only).
    (type: enum in ['Linear', 'Closest', 'Cubic', 'Smart'], default 'Linear')
    
    :type: str
    """

    projection = 'EQUIRECTANGULAR'
    """Projection of the input image
    * 'EQUIRECTANGULAR': Equirectangular, Equirectangular or latitude-longitude projection.
    * 'MIRROR_BALL': Mirror Ball, Projection from an orthographic photo of a mirror ball.
    (type: enum in ['EQUIRECTANGULAR', 'MIRROR_BALL'], default 'EQUIRECTANGULAR')
    
    :type: str
    """

    texture_mapping = None
    """Texture coordinate mapping settings
    (type: bpy.types.TexMapping, (readonly, never None))
    
    :type: TexMapping
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeTexGradient(ShaderNode):
    """"""

    color_mapping = None
    """Color mapping settings
    (type: bpy.types.ColorMapping, (readonly, never None))
    
    :type: ColorMapping
    """

    gradient_type = 'LINEAR'
    """Style of the color blending
    * 'LINEAR': Linear, Create a linear progression.
    * 'QUADRATIC': Quadratic, Create a quadratic progression.
    * 'EASING': Easing, Create a progression easing from one step to the next.
    * 'DIAGONAL': Diagonal, Create a diagonal progression.
    * 'SPHERICAL': Spherical, Create a spherical progression.
    * 'QUADRATIC_SPHERE': Quadratic sphere, Create a quadratic progression in the shape of a sphere.
    * 'RADIAL': Radial, Create a radial progression.
    (type: enum in ['LINEAR', 'QUADRATIC', 'EASING', 'DIAGONAL', 'SPHERICAL', 'QUADRATIC_SPHERE', 'RADIAL'], default 'LINEAR')
    
    :type: str
    """

    texture_mapping = None
    """Texture coordinate mapping settings
    (type: bpy.types.TexMapping, (readonly, never None))
    
    :type: TexMapping
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeTexImage(ShaderNode):
    """"""

    color_mapping = None
    """Color mapping settings
    (type: bpy.types.ColorMapping, (readonly, never None))
    
    :type: ColorMapping
    """

    color_space = 'COLOR'
    """Image file color space
    * 'COLOR': Color, Image contains color data, and will be converted to linear color for rendering.
    * 'NONE': Non-Color Data, Image contains non-color data, for example a displacement or normal map, and will not be converted.
    (type: enum in ['COLOR', 'NONE'], default 'COLOR')
    
    :type: str
    """

    extension = 'REPEAT'
    """How the image is extrapolated past its original bounds
    * 'REPEAT': Repeat, Cause the image to repeat horizontally and vertically.
    * 'EXTEND': Extend, Extend by repeating edge pixels of the image.
    * 'CLIP': Clip, Clip to image size and set exterior pixels as transparent.
    (type: enum in ['REPEAT', 'EXTEND', 'CLIP'], default 'REPEAT')
    
    :type: str
    """

    image = None
    """(type: bpy.types.Image)
    
    :type: Image
    """

    image_user = None
    """Parameters defining which layer, pass and frame of the image is displayed
    (type: bpy.types.ImageUser, (readonly, never None))
    
    :type: ImageUser
    """

    interpolation = 'Linear'
    """Texture interpolation
    * 'Linear': Linear, Linear interpolation.
    * 'Closest': Closest, No interpolation (sample closest texel).
    * 'Cubic': Cubic, Cubic interpolation (CPU only).
    * 'Smart': Smart, Bicubic when magnifying, else bilinear (OSL only).
    (type: enum in ['Linear', 'Closest', 'Cubic', 'Smart'], default 'Linear')
    
    :type: str
    """

    projection = 'FLAT'
    """Method to project 2D image on object with a 3D texture vector
    * 'FLAT': Flat, Image is projected flat using the X and Y coordinates of the texture vector.
    * 'BOX': Box, Image is projected using different components for each side of the object space bounding box.
    * 'SPHERE': Sphere, Image is projected spherically using the Z axis as central.
    * 'TUBE': Tube, Image is projected from the tube using the Z axis as central.
    (type: enum in ['FLAT', 'BOX', 'SPHERE', 'TUBE'], default 'FLAT')
    
    :type: str
    """

    projection_blend = 0.0
    """For box projection, amount of blend to use between sides
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    texture_mapping = None
    """Texture coordinate mapping settings
    (type: bpy.types.TexMapping, (readonly, never None))
    
    :type: TexMapping
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeTexMagic(ShaderNode):
    """"""

    color_mapping = None
    """Color mapping settings
    (type: bpy.types.ColorMapping, (readonly, never None))
    
    :type: ColorMapping
    """

    texture_mapping = None
    """Texture coordinate mapping settings
    (type: bpy.types.TexMapping, (readonly, never None))
    
    :type: TexMapping
    """

    turbulence_depth = 0
    """Level of detail in the added turbulent noise
    (type: int in [0, 10], default 0)
    
    :type: int
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeTexMusgrave(ShaderNode):
    """"""

    color_mapping = None
    """Color mapping settings
    (type: bpy.types.ColorMapping, (readonly, never None))
    
    :type: ColorMapping
    """

    musgrave_type = 'MULTIFRACTAL'
    """(type: enum in ['MULTIFRACTAL', 'RIDGED_MULTIFRACTAL', 'HYBRID_MULTIFRACTAL', 'FBM', 'HETERO_TERRAIN'], default 'MULTIFRACTAL')
    
    :type: str
    """

    texture_mapping = None
    """Texture coordinate mapping settings
    (type: bpy.types.TexMapping, (readonly, never None))
    
    :type: TexMapping
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeTexNoise(ShaderNode):
    """"""

    color_mapping = None
    """Color mapping settings
    (type: bpy.types.ColorMapping, (readonly, never None))
    
    :type: ColorMapping
    """

    texture_mapping = None
    """Texture coordinate mapping settings
    (type: bpy.types.TexMapping, (readonly, never None))
    
    :type: TexMapping
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeTexPointDensity(ShaderNode):
    """"""

    interpolation = 'Linear'
    """Texture interpolation
    * 'Closest': Closest, No interpolation (sample closest texel).
    * 'Linear': Linear, Linear interpolation.
    * 'Cubic': Cubic, Cubic interpolation (CPU only).
    (type: enum in ['Closest', 'Linear', 'Cubic'], default 'Linear')
    
    :type: str
    """

    object = None
    """Object to take point data from
    (type: bpy.types.Object)
    
    :type: Object
    """

    particle_color_source = 'PARTICLE_AGE'
    """Data to derive color results from
    * 'PARTICLE_AGE': Particle Age, Lifetime mapped as 0.0 - 1.0 intensity.
    * 'PARTICLE_SPEED': Particle Speed, Particle speed (absolute magnitude of velocity) mapped as 0.0-1.0 intensity.
    * 'PARTICLE_VELOCITY': Particle Velocity, XYZ velocity mapped to RGB colors.
    (type: enum in ['PARTICLE_AGE', 'PARTICLE_SPEED', 'PARTICLE_VELOCITY'], default 'PARTICLE_AGE')
    
    :type: str
    """

    particle_system = None
    """Particle System to render as points
    (type: bpy.types.ParticleSystem)
    
    :type: ParticleSystem
    """

    point_source = 'PARTICLE_SYSTEM'
    """Point data to use as renderable point density
    * 'PARTICLE_SYSTEM': Particle System, Generate point density from a particle system.
    * 'OBJECT': Object Vertices, Generate point density from an object's vertices.
    (type: enum in ['PARTICLE_SYSTEM', 'OBJECT'], default 'PARTICLE_SYSTEM')
    
    :type: str
    """

    radius = 0.0
    """Radius from the shaded sample to look for points within
    (type: float in [0.001, inf], default 0.0)
    
    :type: float
    """

    resolution = 0
    """Resolution used by the texture holding the point density
    (type: int in [1, 32768], default 0)
    
    :type: int
    """

    space = 'OBJECT'
    """Coordinate system to calculate voxels in
    (type: enum in ['OBJECT', 'WORLD'], default 'OBJECT')
    
    :type: str
    """

    vertex_attribute_name = ""
    """Vertex attribute to use for color
    (type: string, default "", (never None))
    
    :type: str
    """

    vertex_color_source = 'VERTEX_COLOR'
    """Data to derive color results from
    * 'VERTEX_COLOR': Vertex Color, Vertex color layer.
    * 'VERTEX_WEIGHT': Vertex Weight, Vertex group weight.
    * 'VERTEX_NORMAL': Vertex Normal, XYZ normal vector mapped to RGB colors.
    (type: enum in ['VERTEX_COLOR', 'VERTEX_WEIGHT', 'VERTEX_NORMAL'], default 'VERTEX_COLOR')
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def cache_point_density(self, scene=None, settings='RENDER'):
        """Cache point density data for later calculation
        
        :param settings: Calculate density for rendering
            * 'VIEWPORT': Viewport, Canculate density using viewport settings.
            * 'RENDER': Render, Canculate duplis using render settings.
            (type: enum in ['VIEWPORT', 'RENDER'], (optional))
        :type settings: str
        """

    def calc_point_density(self, scene=None, settings='RENDER'):
        """Calculate point density
        
        :param settings: Calculate density for rendering
            * 'VIEWPORT': Viewport, Canculate density using viewport settings.
            * 'RENDER': Render, Canculate duplis using render settings.
            (type: enum in ['VIEWPORT', 'RENDER'], (optional))
        :type settings: str
        :return: RGBA Values
        :param : (type: float array of 1 items in [-inf, inf])
        :rtype: collections.Sequence[float]
        """

    def calc_point_density_minmax(self, scene=None, settings='RENDER'):
        """Calculate point density
        
        :param settings: Calculate density for rendering
            * 'VIEWPORT': Viewport, Canculate density using viewport settings.
            * 'RENDER': Render, Canculate duplis using render settings.
            (type: enum in ['VIEWPORT', 'RENDER'], (optional))
        :type settings: str
        :return: (min, max)
            min, min, float array of 3 items in [-inf, inf]
            max, max, float array of 3 items in [-inf, inf]
        :rtype: tuple
        """


class ShaderNodeTexSky(ShaderNode):
    """"""

    color_mapping = None
    """Color mapping settings
    (type: bpy.types.ColorMapping, (readonly, never None))
    
    :type: ColorMapping
    """

    ground_albedo = 0.0
    """Ground color that is subtly reflected in the sky
    (type: float in [0, 1], default 0.0)
    
    :type: float
    """

    sky_type = 'PREETHAM'
    """(type: enum in ['PREETHAM', 'HOSEK_WILKIE'], default 'PREETHAM')
    
    :type: str
    """

    sun_direction = (0.0, 0.0, 1.0)
    """Direction from where the sun is shining
    (type: float array of 3 items in [-inf, inf], default (0.0, 0.0, 1.0))
    
    :type: mathutils.Vector
    """

    texture_mapping = None
    """Texture coordinate mapping settings
    (type: bpy.types.TexMapping, (readonly, never None))
    
    :type: TexMapping
    """

    turbidity = 0.0
    """Atmospheric turbidity
    (type: float in [1, 10], default 0.0)
    
    :type: float
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeTexVoronoi(ShaderNode):
    """"""

    color_mapping = None
    """Color mapping settings
    (type: bpy.types.ColorMapping, (readonly, never None))
    
    :type: ColorMapping
    """

    coloring = 'INTENSITY'
    """
    * 'INTENSITY': Intensity, Only calculate intensity.
    * 'CELLS': Cells, Color cells by position.
    (type: enum in ['INTENSITY', 'CELLS'], default 'INTENSITY')
    
    :type: str
    """

    texture_mapping = None
    """Texture coordinate mapping settings
    (type: bpy.types.TexMapping, (readonly, never None))
    
    :type: TexMapping
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeTexWave(ShaderNode):
    """"""

    color_mapping = None
    """Color mapping settings
    (type: bpy.types.ColorMapping, (readonly, never None))
    
    :type: ColorMapping
    """

    texture_mapping = None
    """Texture coordinate mapping settings
    (type: bpy.types.TexMapping, (readonly, never None))
    
    :type: TexMapping
    """

    wave_profile = 'SIN'
    """
    * 'SIN': Sine, Use a standard sine profile.
    * 'SAW': Saw, Use a sawtooth profile.
    (type: enum in ['SIN', 'SAW'], default 'SIN')
    
    :type: str
    """

    wave_type = 'BANDS'
    """
    * 'BANDS': Bands, Use standard wave texture in bands.
    * 'RINGS': Rings, Use wave texture in rings.
    (type: enum in ['BANDS', 'RINGS'], default 'BANDS')
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeTexture(ShaderNode):
    """"""

    node_output = 0
    """For node-based textures, which output node to use
    (type: int in [-32768, 32767], default 0)
    
    :type: int
    """

    texture = None
    """(type: bpy.types.Texture)
    
    :type: Texture
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeUVAlongStroke(ShaderNode):
    """"""

    use_tips = False
    """Lower half of the texture is for tips of the stroke
    (type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeUVMap(ShaderNode):
    """"""

    from_dupli = False
    """Use the parent of the dupli object if possible
    (type: boolean, default False)
    
    :type: bool
    """

    uv_map = ""
    """UV coordinates to be used for mapping
    (type: string, default "", (never None))
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeValToRGB(ShaderNode):
    """"""

    color_ramp = None
    """(type: bpy.types.ColorRamp, (readonly))
    
    :type: ColorRamp
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeValue(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeVectorCurve(ShaderNode):
    """"""

    mapping = None
    """(type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeVectorMath(ShaderNode):
    """"""

    operation = 'ADD'
    """(type: enum in ['ADD', 'SUBTRACT', 'AVERAGE', 'DOT_PRODUCT', 'CROSS_PRODUCT', 'NORMALIZE'], default 'ADD')
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeVectorTransform(ShaderNode):
    """"""

    convert_from = 'WORLD'
    """Space to convert from
    (type: enum in ['WORLD', 'OBJECT', 'CAMERA'], default 'WORLD')
    
    :type: str
    """

    convert_to = 'WORLD'
    """Space to convert to
    (type: enum in ['WORLD', 'OBJECT', 'CAMERA'], default 'WORLD')
    
    :type: str
    """

    vector_type = 'VECTOR'
    """
    * 'POINT': Point, Transform a point.
    * 'VECTOR': Vector, Transform a direction vector.
    * 'NORMAL': Normal, Transform a normal vector with unit length.
    (type: enum in ['POINT', 'VECTOR', 'NORMAL'], default 'VECTOR')
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeVolumeAbsorption(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeVolumeScatter(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeWavelength(ShaderNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class ShaderNodeWireframe(ShaderNode):
    """"""

    use_pixel_size = False
    """Use screen pixel size instead of world units
    (type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class TextureNodeAt(TextureNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class TextureNodeBricks(TextureNode):
    """"""

    offset = 0.0
    """(type: float in [0, 1], default 0.0)
    
    :type: float
    """

    offset_frequency = 0
    """Offset every N rows
    (type: int in [2, 99], default 0)
    
    :type: int
    """

    squash = 0.0
    """(type: float in [0, 99], default 0.0)
    
    :type: float
    """

    squash_frequency = 0
    """Squash every N rows
    (type: int in [2, 99], default 0)
    
    :type: int
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class TextureNodeChecker(TextureNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class TextureNodeCompose(TextureNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class TextureNodeCoordinates(TextureNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class TextureNodeCurveRGB(TextureNode):
    """"""

    mapping = None
    """(type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class TextureNodeCurveTime(TextureNode):
    """"""

    curve = None
    """(type: bpy.types.CurveMapping, (readonly))
    
    :type: CurveMapping
    """

    frame_end = 0
    """(type: int in [-32768, 32767], default 0)
    
    :type: int
    """

    frame_start = 0
    """(type: int in [-32768, 32767], default 0)
    
    :type: int
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class TextureNodeDecompose(TextureNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class TextureNodeDistance(TextureNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class TextureNodeGroup(TextureNode):
    """"""

    interface = None
    """Interface socket data
    (type: bpy.types.PropertyGroup, (readonly))
    
    :type: PropertyGroup
    """

    node_tree = None
    """(type: bpy.types.NodeTree)
    
    :type: NodeTree
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class TextureNodeHueSaturation(TextureNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class TextureNodeImage(TextureNode):
    """"""

    image = None
    """(type: bpy.types.Image)
    
    :type: Image
    """

    image_user = None
    """Parameters defining the image duration, offset and related settings
    (type: bpy.types.ImageUser, (readonly))
    
    :type: ImageUser
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class TextureNodeInvert(TextureNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class TextureNodeMath(TextureNode):
    """"""

    operation = 'ADD'
    """(type: enum in ['ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'SINE', 'COSINE', 'TANGENT', 'ARCSINE', 'ARCCOSINE', 'ARCTANGENT', 'POWER', 'LOGARITHM', 'MINIMUM', 'MAXIMUM', 'ROUND', 'LESS_THAN', 'GREATER_THAN', 'MODULO', 'ABSOLUTE'], default 'ADD')
    
    :type: str
    """

    use_clamp = False
    """Clamp result of the node to 0..1 range
    (type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class TextureNodeMixRGB(TextureNode):
    """"""

    blend_type = 'MIX'
    """(type: enum in ['MIX', 'ADD', 'MULTIPLY', 'SUBTRACT', 'SCREEN', 'DIVIDE', 'DIFFERENCE', 'DARKEN', 'LIGHTEN', 'OVERLAY', 'DODGE', 'BURN', 'HUE', 'SATURATION', 'VALUE', 'COLOR', 'SOFT_LIGHT', 'LINEAR_LIGHT'], default 'MIX')
    
    :type: str
    """

    use_alpha = False
    """Include alpha of second input in this operation
    (type: boolean, default False)
    
    :type: bool
    """

    use_clamp = False
    """Clamp result of the node to 0..1 range
    (type: boolean, default False)
    
    :type: bool
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class TextureNodeOutput(TextureNode):
    """"""

    filepath = ""
    """(type: string, default "", (never None))
    
    :type: str
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class TextureNodeRGBToBW(TextureNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class TextureNodeRotate(TextureNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class TextureNodeScale(TextureNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class TextureNodeTexBlend(TextureNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class TextureNodeTexClouds(TextureNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class TextureNodeTexDistNoise(TextureNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class TextureNodeTexMagic(TextureNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class TextureNodeTexMarble(TextureNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class TextureNodeTexMusgrave(TextureNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class TextureNodeTexNoise(TextureNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class TextureNodeTexStucci(TextureNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class TextureNodeTexVoronoi(TextureNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class TextureNodeTexWood(TextureNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class TextureNodeTexture(TextureNode):
    """"""

    node_output = 0
    """For node-based textures, which output node to use
    (type: int in [-32768, 32767], default 0)
    
    :type: int
    """

    texture = None
    """(type: bpy.types.Texture)
    
    :type: Texture
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class TextureNodeTranslate(TextureNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class TextureNodeValToNor(TextureNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class TextureNodeValToRGB(TextureNode):
    """"""

    color_ramp = None
    """(type: bpy.types.ColorRamp, (readonly))
    
    :type: ColorRamp
    """

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """


class TextureNodeViewer(TextureNode):
    """"""

    def is_registered_node_type(self):
        """True if a registered node type
        
        :return: Result
        :rtype: bool
        """

    def input_template(self, index):
        """Input socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """

    def output_template(self, index):
        """Output socket template
        
        :param index: Index
            (type: int in [0, inf])
        :type index: int
        :return: result
        :param : (type: bpy.types.NodeInternalSocketTemplate)
        :rtype: NodeInternalSocketTemplate
        """
